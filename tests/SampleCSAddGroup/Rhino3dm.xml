<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Rhino3dm</name>
    </assembly>
    <members>
        <member name="T:Rhino.Geometry.SubDComponentLocation">
            <summary>
            The ON_SubDComponentLocation enum is used when an ON_SubD component
            is referenced and it is important to distinguish between the
            component's location in the SubD control net and its location
            in the SubD limit surface.
            </summary>
        </member>
        <member name="F:Rhino.Geometry.SubDComponentLocation.Unset">
            <summary>
             Not a valid component location and used to indicate the value is not initialized.
             Note well: This value is saved in 3dm archives and cannot be changed.
            </summary>
        </member>
        <member name="F:Rhino.Geometry.SubDComponentLocation.ControlNet">
            <summary>
             The component's location in the SubD control net.
             Note well: This value is saved in 3dm archives and cannot be changed.
            </summary>
        </member>
        <member name="F:Rhino.Geometry.SubDComponentLocation.Surface">
            <summary>
             The component's location in the SubD limit surface.
             Note well: This value is saved in 3dm archives and cannot be changed.
            </summary>
        </member>
        <member name="T:Rhino.Geometry.Dimension">
            <summary> Base class for dimensions </summary>
        </member>
        <member name="T:Rhino.Geometry.Dimension.ForceArrow">
            <summary>
            OBSOLETE enum do not use.
            </summary>
        </member>
        <member name="F:Rhino.Geometry.Dimension.ForceArrow.Auto">
            <summary> </summary>
        </member>
        <member name="F:Rhino.Geometry.Dimension.ForceArrow.Inside">
            <summary> </summary>
        </member>
        <member name="F:Rhino.Geometry.Dimension.ForceArrow.Outside">
            <summary> </summary>
        </member>
        <member name="T:Rhino.Geometry.Dimension.ForceText">
            <summary>
            OBSOLETE enum do not use.
            </summary>
        </member>
        <member name="F:Rhino.Geometry.Dimension.ForceText.Auto">
            <summary> </summary>
        </member>
        <member name="F:Rhino.Geometry.Dimension.ForceText.Inside">
            <summary> </summary>
        </member>
        <member name="F:Rhino.Geometry.Dimension.ForceText.Right">
            <summary> </summary>
        </member>
        <member name="F:Rhino.Geometry.Dimension.ForceText.Left">
            <summary> </summary>
        </member>
        <member name="F:Rhino.Geometry.Dimension.ForceText.HintRight">
            <summary> </summary>
        </member>
        <member name="F:Rhino.Geometry.Dimension.ForceText.HintLeft">
            <summary> </summary>
        </member>
        <member name="M:Rhino.Geometry.Dimension.GetTextTransform(Rhino.DocObjects.ViewportInfo,Rhino.DocObjects.DimensionStyle,System.Double,System.Boolean)">
            <summary> Get the transform for this text object's text geometry </summary>
            <param name="viewport">Viewport where text is being used</param>
            <param name="style">Dimension's DimensionStyle</param>
            <param name="textScale">Scale to apply to text</param>
            <param name="drawForward">Draw text front-facing</param>
            <since>6.0</since>
        </member>
        <member name="M:Rhino.Geometry.Dimension.UpdateDimensionText(Rhino.DocObjects.DimensionStyle,Rhino.UnitSystem)">
            <summary>
            Remakes dimension text geometry object and sets it on the dimension.
            </summary>
            <param name="style">The dimension style.</param>
            <param name="units">The unit system.</param>
            <since>7.34</since>
        </member>
        <member name="P:Rhino.Geometry.Dimension.UseDefaultTextPoint">
            <since>6.0</since>
        </member>
        <member name="P:Rhino.Geometry.Dimension.TextPosition">
            <summary>
            Gets and sets the position of text on the plane.
            </summary>
            <since>6.0</since>
        </member>
        <member name="P:Rhino.Geometry.Dimension.PlainUserText">
            <since>6.0</since>
        </member>
        <member name="P:Rhino.Geometry.Dimension.TextFormula">
            <since>6.0</since>
        </member>
        <member name="P:Rhino.Geometry.Dimension.TextRotation">
            <since>6.0</since>
        </member>
        <member name="P:Rhino.Geometry.Dimension.NumericValue">
            <summary>
            Gets the numeric value (or measurement), depending on geometry type.
            <para>LinearDimension: distance between arrow tips</para>
            <para>RadialDimension: radius or diameter depending on type</para>
            <para>AngularDimension: angle in radians</para>
            </summary>
            <since>6.0</since>
        </member>
        <member name="P:Rhino.Geometry.Dimension.DetailMeasured">
            <since>6.0</since>
        </member>
        <member name="P:Rhino.Geometry.Dimension.DistanceScale">
            <since>6.0</since>
        </member>
        <member name="P:Rhino.Geometry.Dimension.ForceArrowPosition">
            <since>6.0</since>
        </member>
        <member name="P:Rhino.Geometry.Dimension.ForceTextPosition">
            <since>6.0</since>
        </member>
        <member name="P:Rhino.Geometry.Dimension.ForceDimLine">
            <since>6.20</since>
        </member>
        <member name="P:Rhino.Geometry.Dimension.ArrowFit">
            <since>6.20</since>
        </member>
        <member name="P:Rhino.Geometry.Dimension.ForceDimensionLineBetweenExtensionLines">
            <since>6.20</since>
        </member>
        <member name="P:Rhino.Geometry.Dimension.TextFit">
            <since>6.20</since>
        </member>
        <member name="P:Rhino.Geometry.Dimension.TextOrientation">
            <since>6.0</since>
        </member>
        <member name="P:Rhino.Geometry.Dimension.TextLocation">
            <since>6.0</since>
        </member>
        <member name="P:Rhino.Geometry.Dimension.TextAngleType">
            <since>6.0</since>
        </member>
        <member name="P:Rhino.Geometry.Dimension.DimensionLineExtension">
            <since>6.0</since>
        </member>
        <member name="P:Rhino.Geometry.Dimension.ExtensionLineExtension">
            <since>6.0</since>
        </member>
        <member name="P:Rhino.Geometry.Dimension.ExtensionLineOffset">
            <since>6.0</since>
        </member>
        <member name="P:Rhino.Geometry.Dimension.FixedLengthExtensionOn">
            <since>6.0</since>
        </member>
        <member name="P:Rhino.Geometry.Dimension.FixedExtensionLength">
            <since>6.0</since>
        </member>
        <member name="P:Rhino.Geometry.Dimension.BaselineSpacing">
            <since>6.0</since>
        </member>
        <member name="P:Rhino.Geometry.Dimension.CentermarkSize">
            <since>6.0</since>
        </member>
        <member name="P:Rhino.Geometry.Dimension.CentermarkStyle">
            <since>6.0</since>
        </member>
        <member name="P:Rhino.Geometry.Dimension.SuppressExtension1">
            <since>6.0</since>
        </member>
        <member name="P:Rhino.Geometry.Dimension.SuppressExtension2">
            <since>6.0</since>
        </member>
        <member name="P:Rhino.Geometry.Dimension.ArrowheadType1">
            <since>6.0</since>
        </member>
        <member name="P:Rhino.Geometry.Dimension.ArrowheadType2">
            <since>6.0</since>
        </member>
        <member name="P:Rhino.Geometry.Dimension.ArrowSize">
            <since>6.0</since>
        </member>
        <member name="P:Rhino.Geometry.Dimension.ArrowBlockId1">
            <since>6.0</since>
        </member>
        <member name="P:Rhino.Geometry.Dimension.ArrowBlockId2">
            <since>6.0</since>
        </member>
        <member name="P:Rhino.Geometry.Dimension.LengthFactor">
            <since>6.0</since>
        </member>
        <member name="P:Rhino.Geometry.Dimension.LengthResolution">
            <since>6.0</since>
        </member>
        <member name="P:Rhino.Geometry.Dimension.LengthRoundoff">
            <since>6.0</since>
        </member>
        <member name="P:Rhino.Geometry.Dimension.Prefix">
            <since>6.0</since>
        </member>
        <member name="P:Rhino.Geometry.Dimension.Suffix">
            <since>6.0</since>
        </member>
        <member name="P:Rhino.Geometry.Dimension.ZeroSuppression">
            <since>6.0</since>
        </member>
        <member name="P:Rhino.Geometry.Dimension.AltUnitsDisplay">
            <since>6.0</since>
        </member>
        <member name="P:Rhino.Geometry.Dimension.AltLengthFactor">
            <since>6.0</since>
        </member>
        <member name="P:Rhino.Geometry.Dimension.AltLengthResolution">
            <since>6.0</since>
        </member>
        <member name="P:Rhino.Geometry.Dimension.AltLengthRoundoff">
            <since>6.0</since>
        </member>
        <member name="P:Rhino.Geometry.Dimension.AltPrefix">
            <since>6.0</since>
        </member>
        <member name="P:Rhino.Geometry.Dimension.AltSuffix">
            <since>6.0</since>
        </member>
        <member name="P:Rhino.Geometry.Dimension.AltZeroSuppression">
            <since>6.0</since>
        </member>
        <member name="P:Rhino.Geometry.Dimension.AlternateBelowLine">
            <since>6.0</since>
        </member>
        <member name="P:Rhino.Geometry.Dimension.ToleranceFormat">
            <since>6.0</since>
        </member>
        <member name="P:Rhino.Geometry.Dimension.ToleranceResolution">
            <since>6.0</since>
        </member>
        <member name="P:Rhino.Geometry.Dimension.AltToleranceResolution">
            <since>6.0</since>
        </member>
        <member name="P:Rhino.Geometry.Dimension.ToleranceUpperValue">
            <since>6.0</since>
        </member>
        <member name="P:Rhino.Geometry.Dimension.ToleranceLowerValue">
            <since>6.0</since>
        </member>
        <member name="P:Rhino.Geometry.Dimension.ToleranceHeightScale">
            <since>6.0</since>
        </member>
        <member name="M:Rhino.Geometry.Dimension.SetDimensionLengthDisplayWithZeroSuppressionReset(Rhino.DocObjects.DimensionStyle.LengthDisplay)">
            <since>6.0</since>
        </member>
        <member name="M:Rhino.Geometry.Dimension.SetAltDimensionLengthDisplayWithZeroSuppressionReset(Rhino.DocObjects.DimensionStyle.LengthDisplay)">
            <since>6.0</since>
        </member>
        <member name="T:Rhino.Geometry.OrdinateDimension">
            <summary> Represents an ordinate dimension </summary>
        </member>
        <member name="T:Rhino.Geometry.OrdinateDimension.MeasuredDirection">
            <summary>
            Ordinate dimension measures x or y direction
            </summary>
        </member>
        <member name="F:Rhino.Geometry.OrdinateDimension.MeasuredDirection.Unset">
            <summary> </summary>
        </member>
        <member name="F:Rhino.Geometry.OrdinateDimension.MeasuredDirection.Xaxis">
            <summary> Measures horizontal distance </summary>
        </member>
        <member name="F:Rhino.Geometry.OrdinateDimension.MeasuredDirection.Yaxis">
            <summary> Measures vertical distance </summary>
        </member>
        <member name="M:Rhino.Geometry.OrdinateDimension.#ctor">
            <since>6.0</since>
        </member>
        <member name="M:Rhino.Geometry.OrdinateDimension.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary> Protected constructor used in serialization. </summary>
        </member>
        <member name="M:Rhino.Geometry.OrdinateDimension.#ctor(Rhino.Geometry.Plane,Rhino.Geometry.OrdinateDimension.MeasuredDirection,Rhino.Geometry.Point3d,Rhino.Geometry.Point3d,Rhino.Geometry.Point3d,System.Double,System.Double)">
            <summary>
            Constructs an ordinate dimension from parameters.
            </summary>
            <param name="plane">Dimension's plane</param>
            <param name="direction">MeasuredDirection.XAxis or MeasuredDirection.YAxis</param>
            <param name="basepoint">Dimension's base point</param>
            <param name="defpoint">Dimension's definition point</param>
            <param name="leaderpoint">Point at tail of leader</param>
            <param name="kinkoffset1">Distance to first jog</param>
            <param name="kinkoffset2">Distance to second jog</param>
            <since>8.0</since>
        </member>
        <member name="M:Rhino.Geometry.OrdinateDimension.Create(Rhino.DocObjects.DimensionStyle,Rhino.Geometry.Plane,Rhino.Geometry.OrdinateDimension.MeasuredDirection,Rhino.Geometry.Point3d,Rhino.Geometry.Point3d,Rhino.Geometry.Point3d,System.Double,System.Double)">
            <summary>
            Initialize Dimension parameters
            </summary>
            <param name="dimStyle">Dimension's AnnotationStyle</param>
            <param name="plane">Dimension's plane</param>
            <param name="direction">MeasuredDirection.XAxis or MeasuredDirection.YAxis</param>
            <param name="basepoint">Dimension's base point</param>
            <param name="defpoint">Dimension's definition point</param>
            <param name="leaderpoint">Point at tail of leader</param>
            <param name="kinkoffset1">Distance to first jog</param>
            <param name="kinkoffset2">Distance to second jog</param>
            <returns></returns>
            <since>6.0</since>
        </member>
        <member name="M:Rhino.Geometry.OrdinateDimension.AdjustFromPoints(Rhino.Geometry.Plane,Rhino.Geometry.OrdinateDimension.MeasuredDirection,Rhino.Geometry.Point3d,Rhino.Geometry.Point3d,Rhino.Geometry.Point3d,System.Double,System.Double)">
            <summary>
            Update Dimension geometry from point locations
            </summary>
            <param name="plane">Dimension's plane</param>
            <param name="direction">MeasuredDirection.XAxis or MeasuredDirection.YAxisw</param>
            <param name="basepoint">Dimension's base point</param>
            <param name="defpoint">Dimension's definition point</param>
            <param name="leaderpoint">Point at tail of leader</param>
            <param name="kinkoffset1">Distance to first jog</param>
            <param name="kinkoffset2">Distance to second jog</param>
            <returns></returns>
            <since>6.0</since>
        </member>
        <member name="M:Rhino.Geometry.OrdinateDimension.Get3dPoints(Rhino.Geometry.Point3d@,Rhino.Geometry.Point3d@,Rhino.Geometry.Point3d@,Rhino.Geometry.Point3d@,Rhino.Geometry.Point3d@)">
            <summary>
            Get locations of dimension's 3d points
            </summary>
            <param name="basepoint">Dimension's base point</param>
            <param name="defpoint">Dimension's definition point</param>
            <param name="leaderpoint">Point at tail of leader</param>
            <param name="kinkpoint1">Point at first jog</param>
            <param name="kinkpoint2">Point at second jog</param>
            <returns></returns>
            <since>6.0</since>
        </member>
        <member name="P:Rhino.Geometry.OrdinateDimension.DefPoint">
            <since>6.0</since>
        </member>
        <member name="P:Rhino.Geometry.OrdinateDimension.LeaderPoint">
            <since>6.0</since>
        </member>
        <member name="P:Rhino.Geometry.OrdinateDimension.KinkPoint1">
            <since>6.0</since>
        </member>
        <member name="P:Rhino.Geometry.OrdinateDimension.KinkPoint2">
            <since>6.0</since>
        </member>
        <member name="P:Rhino.Geometry.OrdinateDimension.KinkOffset1">
            <since>6.0</since>
        </member>
        <member name="P:Rhino.Geometry.OrdinateDimension.KinkOffset2">
            <since>6.0</since>
        </member>
        <member name="P:Rhino.Geometry.OrdinateDimension.Direction">
            <summary>
            Gets or sets the measured direction.
            </summary>
            <since>8.0</since>
        </member>
        <member name="M:Rhino.Geometry.OrdinateDimension.GetTextRectangle(Rhino.Geometry.Point3d[]@)">
            <since>6.0</since>
        </member>
        <member name="M:Rhino.Geometry.OrdinateDimension.GetDistanceDisplayText(Rhino.UnitSystem,Rhino.DocObjects.DimensionStyle)">
            <since>6.0</since>
        </member>
        <member name="T:Rhino.Geometry.AnnotationType">
            <summary>
            ON::AnnotationType identifies the type of an annotation object derived from ON_Annotation.
            </summary>
        </member>
        <member name="F:Rhino.Geometry.AnnotationType.Unset">
            <summary>
             Not a valid annotation type.
            </summary>
        </member>
        <member name="F:Rhino.Geometry.AnnotationType.Aligned">
            <summary>
             Linear distance between two points with dimension line parallel to the dimensioned points.
            </summary>
        </member>
        <member name="F:Rhino.Geometry.AnnotationType.Angular">
            <summary>
             Angle between two lines.
            </summary>
        </member>
        <member name="F:Rhino.Geometry.AnnotationType.Diameter">
            <summary>
             Arc or circle diameter dimension.
            </summary>
        </member>
        <member name="F:Rhino.Geometry.AnnotationType.Radius">
            <summary>
             Arc or circle radius dimension.
            </summary>
        </member>
        <member name="F:Rhino.Geometry.AnnotationType.Rotated">
            <summary>
             Linear distance between two points with dimension line horizontal, vertical or rotated by a specified amount.
            </summary>
        </member>
        <member name="F:Rhino.Geometry.AnnotationType.Ordinate">
            <summary>
             Ordinate dimension. Typically used to document an offset distance between the center of a circle and a reference point.
            </summary>
        </member>
        <member name="F:Rhino.Geometry.AnnotationType.ArcLen">
            <summary>
             Arc length of a curve.
            </summary>
        </member>
        <member name="F:Rhino.Geometry.AnnotationType.CenterMark">
            <summary>
             Center mark dimension. Typically used to document the center of an arc or circle.
            </summary>
        </member>
        <member name="F:Rhino.Geometry.AnnotationType.Text">
            <summary>
             Text. Stand alone text with a wide variety of uses.
            </summary>
        </member>
        <member name="F:Rhino.Geometry.AnnotationType.Leader">
            <summary>
             Leader. Text and a curve with an arrow head.
            </summary>
        </member>
        <member name="F:Rhino.Geometry.AnnotationType.Angular3pt">
            <summary>
             Angular3pt. Angle defined by 3 points.
            </summary>
        </member>
        <member name="T:Rhino.Geometry.SubDVertexTag">
            <summary>
            ON_SubDVertexTag identifies the type of subdivision vertex.  Different tags use
            different subdivision algorithms to determine where the subdivision point and
            limit point are located.  There are toplological constraints that restrict which
            tags can be assigned.
            </summary>
        </member>
        <member name="F:Rhino.Geometry.SubDVertexTag.Unset">
            <summary>
             Not a valid vertex tag and the default value for ON_SubDVertex.m_vertex_tag.
             This encourages developers to thoughtfully initialize ON_SubDVertex.m_vertex_tag
             or use ON_SubD.UpdateAllTagsAndSectorCoefficients() to automatically set the
             m_vertex_tag values at an appropriate time.
            </summary>
        </member>
        <member name="F:Rhino.Geometry.SubDVertexTag.Smooth">
            <summary>
             Must be an interior vertex.
             All edges attached to a smooth vertex must be tagged as ON_SubDEdgeTag::Smooth
             and must have 2 faces. 
            </summary>
        </member>
        <member name="F:Rhino.Geometry.SubDVertexTag.Crease">
            <summary>
             Can be an interior or a boundary vertex.
             Exactly two edges ending at a crease vertex must be tagged as ON_SubDEdgeTag::Crease and may
             have 1 or 2 faces. 
             All other edges ending at a crease must be tagged as tagON_SubD::EdgeTag::Smooth and have 2 faces.
             Below P = ON_SubDVertex.ControlNetPoint() and Ai = ON_SubDVertex.Edge(i)->OtherEndVertex()->ControlNetPoint().
             A crease vertex subdivision point is (6*P + A1 + A2)/8.
             A crease vertex limit surface point is (4*P + A1 + A2)/6.
            </summary>
        </member>
        <member name="F:Rhino.Geometry.SubDVertexTag.Corner">
            <summary>
             Can be an interior, boundary, nonmanifold, or isolated vertex.
             The location of a corner vertex is fixed. 
             The all subdivision points and the limit point are at the initial vertex location.
             The edges ending at a corner vertex can be smooth or crease edges.
             A corner vertex subdivision point is P where P = ON_SubDVertex.ControlNetPoint().
             A corner vertex limit surface point is P where P = ON_SubDVertex.ControlNetPoint().
            </summary>
        </member>
        <member name="F:Rhino.Geometry.SubDVertexTag.Dart">
            <summary>
             Must be an interior vertex.  
             Every edge attached to a dart vertex must have 2 faces.
             Exactly one edge attached to a dart vertex must be tagged as ON_SubDEdgeTag::Crease
             and every other attached edge must be tagged as ON_SubDEdgeTag::smooth.
            </summary>
        </member>
        <member name="T:Rhino.Geometry.SubDEdgeTag">
            <summary>
            ON_SubDEdgeTag identifies the type of subdivision edge.  Different tags use
            different subdivision algorithms to calculate the subdivision point.
            </summary>  
        </member>
        <member name="F:Rhino.Geometry.SubDEdgeTag.Unset">
            <summary>
             Not a valid edge tag and the default value for ON_SubDEdge.m_edge_tag.
             This encourages developers to thoughtfully initialize ON_SubDEdge.m_edge_tag.
             or use ON_SubD.UpdateAllTagsAndSectorCoefficients() to automatically set the
             m_edge_tag values at an appropriate time.
            </summary>
        </member>
        <member name="F:Rhino.Geometry.SubDEdgeTag.Smooth">
            <summary>
             At least one the edge's vertices must be tagged as ON_SubDVertexTag::Smooth.
             The edge must have exactly two faces.
             The edge's subdivision point is (A1 + A2 + S(f1) + S(f2))/4, where 
             Ai = ON_SubDEdge.Vertex(i)->ControlNetPoint() and
             S(fi) = ON_SubDEdge.Face(i)->SubdivisionPoint().
            </summary>
        </member>
        <member name="F:Rhino.Geometry.SubDEdgeTag.Crease">
            <summary>
             Both of the edge's vertices must be tagged as ON_SubDVertexTag::Dart,
             ON_SubDVertexTag::Crease, or ON_SubDVertexTag::Corner. 
             (The vertex tags can be different.) The edge can have any number of faces.
             The edge's subdivision point is (A1+A2)/2 where Ai = ON_SubDEdge.Vertex(i)->ControlNetPoint().
            </summary>
        </member>
        <member name="F:Rhino.Geometry.SubDEdgeTag.SmoothX">
            <summary>
             This tag appears only on level 0 edges that have exactly two neighboring faces
             and both of the edge's vertices are tagged as ON_SubDVertexTag::Dart,
             ON_SubDVertexTag::Crease, or ON_SubDVertexTag::Corner.
             The level 1 subdivision point for a level 0 edge tagged as ON_SubDEdgeTag::SmoothX 
             is the standard smooth edge subdivision point.
             When subdivided, the new subdivision vertex will be tagged
             as ON_SubDVertexTag::Smooth and the subdivided edges will
             be tagged as ON_SubDEdgeTag::Smooth.  
             The tag ON_SubDEdgeTag::SmoothX can only appear on a level 0 edge.
             This tag exists because the ON_SubD subdivision
             algorithm requires any edge with both end vertices
             tagged as not smooth must be subdivided at its midpoint.
             Sector iterators treat "SmoothX" edges as smooth.
             Both edge m_sector_coefficient[] values must be set so the smooth subdivided edges will be valid.
            </summary>
        </member>
        <member name="T:Rhino.Geometry.SubDEdgeType">
            <summary>
            ON_SubDEdgeType describes a subdivision edge. 
            ON_SubDEdgeType is typically used when generating text descriptions
            or filtering edges during selection processes. 
            Do not confuse ON_SubDEdgeType and ON_SubDEdgeTag.
            The unique types are single bits and suitable for use in bitwise logic.
            </summary>  
        </member>
        <member name="F:Rhino.Geometry.SubDEdgeType.Unset">
            <summary>
             Type is unset or the edge is not valid.
            </summary>
        </member>
        <member name="F:Rhino.Geometry.SubDEdgeType.Wire">
            <summary>
             The edge has zero faces and the tag is ON_SubDEdgeTag::Crease.
            </summary>
        </member>
        <member name="F:Rhino.Geometry.SubDEdgeType.Boundary">
            <summary>
             The edge has one face and the tag is ON_SubDEdgeTag::Crease.
            </summary>
        </member>
        <member name="F:Rhino.Geometry.SubDEdgeType.InteriorSmooth">
            <summary>
             The edge has two faces, 
             the tag is ON_SubDEdgeTag::Smooth or ON_SubDEdgeTag::SmoothX,
             and the edge sharpness is zero. 
             Note that ON_SubEdge::IsSmoothNotSharp() returns true if and only if ON_SubEdge::EdgeType() is InteriorSmooth.
            </summary>
        </member>
        <member name="F:Rhino.Geometry.SubDEdgeType.InteriorSharp">
            <summary>
             The edge has two faces, 
             the tag is ON_SubDEdgeTag::Smooth or ON_SubDEdgeTag::SmoothX,
             and the edge sharpness is nonzero.
             Note that ON_SubEdge::IsSharp() returns true if and only if ON_SubEdge::EdgeType() is InteriorSharp.
            </summary>
        </member>
        <member name="F:Rhino.Geometry.SubDEdgeType.InteriorCrease">
            <summary>
             The edge has two faces and the tag is ON_SubDEdgeTag::Crease.
            </summary>
        </member>
        <member name="F:Rhino.Geometry.SubDEdgeType.Nonmanifold">
            <summary>
             The edge has three or more faces and the tag is ON_SubDEdgeTag::Crease.
            </summary>
        </member>
        <member name="F:Rhino.Geometry.SubDEdgeType.Invalid">
            <summary>
             The edge has an invalid combination of face count, tag, and sharpness properties.
            </summary>
        </member>
        <member name="F:Rhino.Geometry.SubDEdgeType.InteriorMask">
            <summary>
             A mask for all interior edge types. Interior edges have 2 faces.
            </summary>
        </member>
        <member name="F:Rhino.Geometry.SubDEdgeType.ValidTypesMask">
            <summary>
             A mask for all valid edge types.
            </summary>
        </member>
        <member name="T:Rhino.Geometry.SubDHashType">
            <summary>
            ON_SubDHashType used used to specify what type of SubD information is hashed (topology or geometry).
            </summary>
        </member>
        <member name="F:Rhino.Geometry.SubDHashType.Unset">
            <summary>
            Unset indicates the hash type still needs to be selected. It is not a valid type
            for calculating a hash.
            </summary>
        </member>
        <member name="F:Rhino.Geometry.SubDHashType.Topology">
            <summary>
            The Topology hash includes component ids, and all topological relationships 
            between vertices, edges, and faces. If two SubDs have the same topology hash,
            then the the have identical labeled control net topology.
            </summary>
        </member>
        <member name="F:Rhino.Geometry.SubDHashType.TopologyAndEdgeCreases">
            <summary>
            The TopologyAndEdgeCreases includes all information in a Topology hash.
            The TopologyAndEdgeCreases adds edge crease/smooth attributes.
            Many contexts, including face packing and exploding, take edge creases
            into account when partitioning a SubD into regions.
            </summary>
        </member>
        <member name="F:Rhino.Geometry.SubDHashType.Geometry">
            <summary>
            A geometry hash includes all information in a TopologyAndEdgeCreases hash.
            The Geometry hash adds vertex tags, vertex control net points, 
            and nonzero subdivision displacements on vertices, edges, and faces.
            If two SubDs have the same geometry hash, then they have identical surface geometry.
            </summary>
        </member>
        <member name="T:Rhino.Geometry.SubDToBrepOptions">
            <summary>
            Options used for converting a SubD to a Brep
            </summary>
        </member>
        <member name="T:Rhino.Geometry.SubDToBrepOptions.ExtraordinaryVertexProcessOption">
            <summary>
            ON_SubDToBrepParameters::Vertex identifies the options for post processing extraorindary vertices.
            </summary>
        </member>
        <member name="F:Rhino.Geometry.SubDToBrepOptions.ExtraordinaryVertexProcessOption.None">
            <summary>
             The NURBS patches are used as is. 
             At extraordinary vertices, the brep vertex may not be G1.
             Typically the deviation bewtween the brep and SubD surface is smallest with this option.
            </summary>
        </member>
        <member name="F:Rhino.Geometry.SubDToBrepOptions.ExtraordinaryVertexProcessOption.LocalG1">
            <summary>
             At extraordinary vertices, the NURBS patches are modified so they are G1 at the extraordinary vertex.
             Typically the deviation bewtween the brep and SubD surface is larger than None and smaller than
             LocalG1x and LocalG2.
            </summary>
        </member>
        <member name="F:Rhino.Geometry.SubDToBrepOptions.ExtraordinaryVertexProcessOption.LocalG2">
            <summary>
             At extraordinary vertices, the NURBS patches are modified so they are G2 at the extraordinary vertex.
             Typically the deviation bewtween the brep and SubD surface is larger than LocalG1 and LocalG1x.
            </summary>
        </member>
        <member name="F:Rhino.Geometry.SubDToBrepOptions.ExtraordinaryVertexProcessOption.LocalG1x">
            <summary>
             At extraordinary vertices, the NURBS patches are modified so they are G1 at the extraordinary vertex
             and tend to be closer to G1 along edges near the extraordinary vertex.
             Typically the deviation bewtween the brep and SubD surface is larger than LocalG1 and smaller than LocalG2.
            </summary>
        </member>
        <member name="F:Rhino.Geometry.SubDToBrepOptions.ExtraordinaryVertexProcessOption.LocalG1xx">
            <summary>
             At extraordinary vertices, the NURBS patches are modified so they are G1 at the extraordinary vertex
             and G1 along edges near the extraordinary vertex.
             The patches will have one double knot near the extraordinary vertex.
            </summary>
        </member>
        <member name="M:Rhino.Geometry.SubDToBrepOptions.#ctor">
            <summary>
            Create default options
            </summary>
            <since>7.0</since>
        </member>
        <member name="M:Rhino.Geometry.SubDToBrepOptions.#ctor(System.Boolean,Rhino.Geometry.SubDToBrepOptions.ExtraordinaryVertexProcessOption)">
            <summary>
            Create options from the given packFaces and vertexProcess values.
            </summary>
            <param name="packFaces">Sets the pack faces options.</param>
            <param name="vertexProcess">Sets the extraordinary vertex process option.</param>
            <since>7.1</since>
        </member>
        <member name="P:Rhino.Geometry.SubDToBrepOptions.Default">
            <summary>
            Default SubDToBrepOptions settings.
            Currently selects the same options as DefaultUnpacked:
            Locally-G1 smoothing of extraordinary vertices, unpacked faces.
            </summary>
            <remarks>
            These are the settings used by ON_SubD::BrepForm()
            </remarks>
            <since>7.0</since>
        </member>
        <member name="P:Rhino.Geometry.SubDToBrepOptions.DefaultPacked">
            <summary>
            Default ON_SubDToBrepParameters settings for creating a packed brep.
            Locally-G1 smoothing of extraordinary vertices, packed faces.
            </summary>
            <since>7.0</since>
        </member>
        <member name="P:Rhino.Geometry.SubDToBrepOptions.DefaultUnpacked">
            <summary>
            Default ON_SubDToBrepParameters settings for creating an unpacked brep.
            Locally-G1 smoothing of extraordinary vertices, unpacked faces.
            </summary>
            <since>7.0</since>
        </member>
        <member name="M:Rhino.Geometry.SubDToBrepOptions.Finalize">
            <summary>
            Passively reclaims unmanaged resources when the class user did not explicitly call Dispose().
            </summary>
        </member>
        <member name="M:Rhino.Geometry.SubDToBrepOptions.Dispose">
            <summary>
            Actively reclaims unmanaged resources that this instance uses.
            </summary>
            <since>7.0</since>
        </member>
        <member name="M:Rhino.Geometry.SubDToBrepOptions.Dispose(System.Boolean)">
            <summary>
            For derived class implementers.
            <para>This method is called with argument true when class user calls Dispose(), while with argument false when
            the Garbage Collector invokes the finalizer, or Finalize() method.</para>
            <para>You must reclaim all used unmanaged resources in both cases, and can use this chance to call Dispose on disposable fields if the argument is true.</para>
            <para>Also, you must call the base virtual method within your overriding method.</para>
            </summary>
            <param name="disposing">true if the call comes from the Dispose() method; false if it comes from the Garbage Collector finalizer.</param>
        </member>
        <member name="P:Rhino.Geometry.SubDToBrepOptions.PackFaces">
            <summary>
            Get or sets the pack faces option.
            </summary>
            <since>7.0</since>
        </member>
        <member name="P:Rhino.Geometry.SubDToBrepOptions.ExtraordinaryVertexProcess">
            <summary>
            Get or sets the extraordinary vertex process option.
            </summary>
            <since>7.0</since>
        </member>
        <member name="T:Rhino.Geometry.SubDFromSurfaceMethods">
            <summary>
            ON_SubDFromSurfaceParameters::Method are ways to create a SubD from a surface.
            </summary>
        </member>
        <member name="F:Rhino.Geometry.SubDFromSurfaceMethods.Unset">
            <summary>
            Used to indicate the method is not set.
            </summary>
        </member>
        <member name="F:Rhino.Geometry.SubDFromSurfaceMethods.SubDFriendlyFit">
            <summary>
            The surface is approximated with a SubD friendly NURBS surface and the SubD is created
            to match the subd friendly nurbs surface. 
            If the input surface is a subd friendly NURBS surface, the subd and surface have the same geometry.
            </summary>
        </member>
        <member name="F:Rhino.Geometry.SubDFromSurfaceMethods.FromNurbsControlNet">
            <summary>
            The surface is converted to a NURBS surface and then a subd with one face per NURBS bispan 
            is created by using an appropriate subset of the NURBS surface control net.
            If the input surface is a subd friendly NURBS surface, the subd and surface have the same geometry.
            </summary>
        </member>
        <member name="T:Rhino.Geometry.SubDEndCapStyle">
            <summary>
            ON_SubDEndCapStyle enumerates the type of end caps functions like ON_SubD::CreateCylinder will create.
            Use ON_SubDEndCapStyleFromUnsigned(integer value) to convert integer values to an ON_SubDEndCapStyle.
            Use ON_SubDEndCapStyleToString(end_cap_style) to convert ON_SubDEndCapStyle values to string descriptions.
            </summary>
        </member>
        <member name="F:Rhino.Geometry.SubDEndCapStyle.Unset">
            <summary>
            Used to indicate the end cap style is not set.
            </summary>
        </member>
        <member name="F:Rhino.Geometry.SubDEndCapStyle.None">
            <summary>
            Ends are not capped.
            </summary>
        </member>
        <member name="F:Rhino.Geometry.SubDEndCapStyle.Triangles">
            <summary>
            Ends are capped with triangles.
            </summary>
        </member>
        <member name="F:Rhino.Geometry.SubDEndCapStyle.Quads">
            <summary>
            When the end has an even number of edges, is will be capped with quads. Otherwise it will be capped with triangles.
            </summary>
        </member>
        <member name="F:Rhino.Geometry.SubDEndCapStyle.Ngon">
            <summary>
            Ends are capped with a n-gon. This is a poor choice when there are a large number of edges in the end boundary.
            </summary>
        </member>
        <member name="T:Rhino.Geometry.SubDVertexFacetType">
            <summary>
            Summarizes the number of edges in faces in the whole object.
            </summary>
        </member>
        <member name="F:Rhino.Geometry.SubDVertexFacetType.Unset">
            <summary>Not a valid vertex face type.</summary>
        </member>
        <member name="F:Rhino.Geometry.SubDVertexFacetType.Tri">
            <summary>All faces are triangular.</summary>
        </member>
        <member name="F:Rhino.Geometry.SubDVertexFacetType.Quad">
            <summary>All faces are quads.</summary>
        </member>
        <member name="F:Rhino.Geometry.SubDVertexFacetType.Ngon">
            <summary>Edge count of faces is constant and &gt; 4.</summary>
        </member>
        <member name="F:Rhino.Geometry.SubDVertexFacetType.Mixed">
            <summary>Edge count of faces is not constant.</summary>
        </member>
        <member name="T:Rhino.Geometry.SubDChainType">
            <summary>
            SubD::ChainType specifies what edge and vertex tag tests are used when creating edge chains.
            </summary>
        </member>
        <member name="F:Rhino.Geometry.SubDChainType.Unset">
            <summary>
             Unset.
            </summary>
        </member>
        <member name="F:Rhino.Geometry.SubDChainType.MixedTag">
            <summary>
             All types of edges and vertices can be in the chain.
            </summary>
        </member>
        <member name="F:Rhino.Geometry.SubDChainType.EqualEdgeTag">
            <summary>
             Every edge in an edge chain has the same smooth/crease property.
            </summary>
        </member>
        <member name="F:Rhino.Geometry.SubDChainType.EqualEdgeAndVertexTag">
            <summary>
             Every edge in an edge chain has the same smooth/crease edge tag 
             and interior vertices have the corresponding smooth/crease vertex tag.
            </summary>
        </member>
        <member name="F:Rhino.Geometry.SubDChainType.EqualEdgeTagAndOrdinary">
            <summary>
             Every edge in an edge chain has the same smooth/crease property
             and every edge has the same number of faces.
             If the edges have 1 face, then interior vertices have valence = 3.
             If the edges have 2 faces, then interior vertices have valence = 4.
            </summary>
        </member>
        <member name="F:Rhino.Geometry.SubDChainType.EqualEdgeAndVertexTagAndOrdinary">
            <summary>
             Every edge in an edge chain has the same smooth/crease edge tag,
             every edge has the same number of faces,
             and interior vertices have the corresponding smooth/crease vertex tag.
             If the edges have 1 face, then interior vertices have valence = 3.
             If the edges have 2 faces, then interior vertices have valence = 4.
            </summary>
        </member>
        <member name="T:Rhino.Geometry.SubDFriendlyKnotType">
            <summary>
            ON_SubD::SubDFriendlyKnotType identifies the types of subd friendly NURBS knot vectors.
            SubD friendly NURBS curves and surfacaes are always cubic and nonrational.
            Any time there is a multiple knot, the 2nd derivative is zero at the corresponding parameter.
            SubD friendly NURBS curves are either periodic or have zero 2nd derivative at the ends.
            </summary>    
        </member>
        <member name="F:Rhino.Geometry.SubDFriendlyKnotType.Unset">
            <summary>
             Not a valid type. Used to indicate the type has not been set and to encourage developers to explicitly specify a type.
            </summary>
        </member>
        <member name="F:Rhino.Geometry.SubDFriendlyKnotType.UnclampedUniform">
            <summary>
             NURBS knot vector is an unclamped uniform cubic knot vector. 
             Every knot interval has the same length.
             Every knot has multiplicity 1. 
            </summary>
        </member>
        <member name="F:Rhino.Geometry.SubDFriendlyKnotType.ClampedUniform">
            <summary>
             NURBS knot vector is a clamped uniform cubic knot vector. 
             Every interior knot interval has the same length.
             End knots have multiplicity 3 and interior knots have multiplicity 1.
            </summary>
        </member>
        <member name="F:Rhino.Geometry.SubDFriendlyKnotType.ClampedPiecewiseUniform">
            <summary>
             NURBS knot vector is a clamped piecewise uniform cubic knot vector.
             All nonzero knot intervals have the same length.
             End knots have multiplicity 3 and interior knots have multiplicity 1 or 3.
             Interior knots with multiplicity 3 correspond to interior SubD creases.
            </summary>
        </member>
        <member name="F:Rhino.Geometry.SubDFriendlyKnotType.Unfriendly">
            <summary>
             NURBS knot vector is not subd friendly.
            </summary>
        </member>
        <member name="T:Rhino.Geometry.SubDAutomaticMeshToSubDContext">
            <summary>
            ON_SubD::AutomaticMeshToSubDContext identifies a context where meshes can automatically
            be converted to subds.
            </summary>
        </member>
        <member name="F:Rhino.Geometry.SubDAutomaticMeshToSubDContext.Unset">
            <summary>
             Indicates the context has not been initialized.
            </summary>
        </member>
        <member name="F:Rhino.Geometry.SubDAutomaticMeshToSubDContext.Rhino5BoxModeTSpline">
            <summary>
             A mesh in a Rhino 5 3dm file that is a representation of a box mode T-spline.
             By default, these meshes are automatically converted to subds.
            </summary>
        </member>
        <member name="F:Rhino.Geometry.SubDAutomaticMeshToSubDContext.FBXMeshWithDivisionLevels">
            <summary>
             A mesh in an FBX file that has nonzero values for either preview division levels or render division levels.
             Some FBX files created by Maya save subdivision objects as meshes with nonzero division level values.
             By default, FBX division levels are ignored.
            </summary>
        </member>
        <member name="T:Rhino.Geometry.SubDPatchStyle">
            <summary>
            SubD::PatchStyle identifies the style of patch used to fill holes.
            </summary>
        </member>
        <member name="F:Rhino.Geometry.SubDPatchStyle.Unset">
            <summary>
             Not a valid style.
             This encourages developers to thoughtfully select a patch style and can 
             be used to indicate a UI control is not initialized.
            </summary>
        </member>
        <member name="F:Rhino.Geometry.SubDPatchStyle.Automatic">
            <summary>
             Automatically choose a patch style that will generally create a good looking result.
             If a hole boundary is not convex, it is triangulated. Otherwise:
             If a hole has 3 edges, a single triangle face is used.
             If a hole has 4 edges, a single quad face is used.
             If a hole has 5 or more edges and an odd number of edges, a triangle fan is used. 
             If a hole has 6 or more edges and an even number of edges, a quad fan is used. 
            </summary>
        </member>
        <member name="F:Rhino.Geometry.SubDPatchStyle.SingleFace">
            <summary>
             A single face is used under all conditions.
            </summary>
        </member>
        <member name="F:Rhino.Geometry.SubDPatchStyle.TriangleFan">
            <summary>
             A triangle fan used under all conditions. The center of the fan
             is the average of the hole boundary vertex control net points.
            </summary>
        </member>
        <member name="F:Rhino.Geometry.SubDPatchStyle.QuadOrTriangleFan">
            <summary>
             If the hole boundary has an even number of edges, a quad fan is used.
             Otherwise a triangle fan is used. The center of the fan
             is the average of the hole boundary vertex control net points.
            </summary>
        </member>
        <member name="F:Rhino.Geometry.SubDPatchStyle.Triangulated">
            <summary>
             The hole boundary is triangluated.
             Typically this style is selected when a boundary not convex 
             and the other styles produce faces with overlapping regions.
            </summary>
        </member>
        <member name="T:Rhino.Geometry.SubD">
            <summary>
            Subdivision surface
            </summary>
        </member>
        <member name="T:Rhino.Geometry.SubD.NurbsSurfaceType">
            <summary>
            ON_SubD::NurbsSurfaceType specifies what type of NURBS surfaces are returned by ON_SubD.GetSurfaceNurbsFragments()
            </summary>
        </member>
        <member name="F:Rhino.Geometry.SubD.NurbsSurfaceType.Unset">
            <summary>
             Not a valid type. Used to indicate the type has not been set and to encourage developers to explicitly specify a type.
             When in doubt, specify NurbsSurfaceType::Large.
            </summary>
        </member>
        <member name="F:Rhino.Geometry.SubD.NurbsSurfaceType.Large">
            <summary>
             Onee NURBS surface will be generated for each SubD quad. 
             N NURBS surfaces will be generated for each SubD N-gon (N = 3, 5 or more). ON_Brepface may cover multiple
             Near extraordinary vertices, the surfaces may have lots of knots.
            </summary>
        </member>
        <member name="F:Rhino.Geometry.SubD.NurbsSurfaceType.Medium">
            <summary>
             NURBS surfaces will be as large as possible without the addition of extra knots. 
             Near extraordinary vertices, the surfaces may have lots of knots.
             This option is preferred when a user wants larger NURBS surfaces but not at the cost of additional NURBS control points.
            </summary>
        </member>
        <member name="F:Rhino.Geometry.SubD.NurbsSurfaceType.Small">
            <summary>
             NURBS surfaces will not be merged and will have clamped knots.
            </summary>
        </member>
        <member name="F:Rhino.Geometry.SubD.NurbsSurfaceType.Unprocessed">
            <summary>
             NURBS surfaces will not be merged and will have unclamped uniform knots.
             This is useful as a starting point for customized merging and modifying
             continuity at extraordinary vertices.
            </summary>
        </member>
        <member name="M:Rhino.Geometry.SubD.NonConstOperation">
            <summary>
            Destroy cache handle
            </summary>
        </member>
        <member name="M:Rhino.Geometry.SubD.#ctor">
            <summary>
            Create a new instance of SubD geometry
            </summary>
            <since>7.0</since>
        </member>
        <member name="M:Rhino.Geometry.SubD.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Protected constructor used in serialization.
            </summary>
        </member>
        <member name="M:Rhino.Geometry.SubD.OnSwitchToNonConst">
            <summary>
            Called when this object switches from being considered "owned by the document"
            to being an independent instance.
            </summary>
        </member>
        <member name="M:Rhino.Geometry.SubD.Dispose(System.Boolean)">
            <summary>
            Deletes the underlying native pointer during a Dispose call or GC collection
            </summary>
            <param name="disposing"></param>
        </member>
        <member name="P:Rhino.Geometry.SubD.Faces">
            <summary>
            All faces in this SubD
            </summary>
            <since>7.0</since>
        </member>
        <member name="P:Rhino.Geometry.SubD.Vertices">
            <summary>
            All vertices in this SubD
            </summary>
            <since>7.0</since>
        </member>
        <member name="P:Rhino.Geometry.SubD.Edges">
            <summary>
            All edges in this SubD
            </summary>
            <since>7.0</since>
        </member>
        <member name="P:Rhino.Geometry.SubD.IsSolid">
            <summary>
            Test SubD to see if the active level is a solid.  
            A "solid" is a closed oriented manifold, or a closed oriented manifold.
            </summary>
            <since>7.0</since>
        </member>
        <member name="P:Rhino.Geometry.SubD.Empty">
            <summary>
            Get a new, empty SubD object.
            </summary>
            <since>7.18</since>
        </member>
        <member name="M:Rhino.Geometry.SubD.CreateFromCylinder(Rhino.Geometry.Cylinder,System.UInt32,System.UInt32,Rhino.Geometry.SubDEndCapStyle,Rhino.Geometry.SubDEdgeTag,Rhino.Geometry.SubDComponentLocation)">
            <summary>
            Creates a SubD form of a cylinder.
            </summary>
            <param name="cylinder">The defining cylinder.</param>
            <param name="circumferenceFaceCount">Number of faces around the cylinder.</param>
            <param name="heightFaceCount">Number of faces in the top-to-bottom direction.</param>
            <param name="endCapStyle">The end cap style.</param>
            <param name="endCapEdgeTag">The end cap edge tag.</param>
            <param name="radiusLocation">The SubD component location.</param>
            <returns>A new SubD if successful, or null on failure.</returns>
            <since>7.6</since>
        </member>
        <member name="M:Rhino.Geometry.SubD.ClearEvaluationCache">
            <summary>
            Clear cached information that depends on the location of vertex control points
            </summary>
            <since>7.0</since>
        </member>
        <member name="M:Rhino.Geometry.SubD.ComponentFromComponentIndex(Rhino.Geometry.ComponentIndex)">
            <summary>
            Returns a SubDComponent, eithere a SubDEdge, SubDFace, or SubDVertex, from a component index.
            </summary>
            <param name="componentIndex">The component index.</param>
            <returns>The SubDComponent if successful, null otherwise.</returns>
            <since>7.6</since>
        </member>
        <member name="M:Rhino.Geometry.SubD.UpdateAllTagsAndSectorCoefficients">
            <summary>
            Updates vertex tag, edge tag, and edge coefficient values on the active
            level. After completing custom editing operations that modify the
            topology of the SubD control net or changing values of vertex or edge
            tags, the tag and sector coefficients information on nearby components
            in the edited areas need to be updated.
            </summary>
            <returns>
            Number of vertices and edges that were changed during the update.
            </returns>
            <since>7.0</since>
        </member>
        <member name="M:Rhino.Geometry.SubD.Subdivide">
            <summary>
            Apply the Catmull-Clark subdivision algorithm and save the results in this SubD.
            </summary>
            <returns>true on success</returns>
            <since>8.0</since>
        </member>
        <member name="M:Rhino.Geometry.SubD.Subdivide(System.Int32)">
            <summary>
            Apply the Catmull-Clark subdivision algorithm and save the results in this SubD.
            </summary>
            <param name="count">Number of times to subdivide (must be greater than 0)</param>
            <returns>true on success</returns>
            <since>7.0</since>
        </member>
        <member name="M:Rhino.Geometry.SubD.Subdivide(System.Collections.Generic.IEnumerable{System.Int32})">
            <summary>
            Apply the Catmull-Clark subdivision algorithm and save the results in this SubD.
            </summary>
            <param name="faceIndices">Indices of the faces to subdivide.</param>
            <returns>true on success</returns>
            <since>8.0</since>
        </member>
        <member name="T:Rhino.Geometry.SubDCreationOptions">
            <summary>
            Options used for creating a SubD
            </summary>
        </member>
        <member name="T:Rhino.Geometry.SubDCreationOptions.InteriorCreaseOption">
            <summary>
            Specifies the test used to determine when an interior mesh edge generates an interior SubD creased edge.
            </summary>
        </member>
        <member name="F:Rhino.Geometry.SubDCreationOptions.InteriorCreaseOption.Unset">
            <summary>The interior crease test is not defined.</summary>
        </member>
        <member name="F:Rhino.Geometry.SubDCreationOptions.InteriorCreaseOption.None">
            <summary>No interior creases.</summary>
        </member>
        <member name="F:Rhino.Geometry.SubDCreationOptions.InteriorCreaseOption.AtMeshDoubleEdge">
            <summary>An interior mesh double edge will create an interior SubD creased edge.
             An interior mesh double edge occurs when the sides of two mesh faces have
             have distinct vertex indices and identical vertex locations.
            </summary>
        </member>
        <member name="T:Rhino.Geometry.SubDCreationOptions.ConvexCornerOption">
            <summary>
            Defines how convex corners are treated.
            </summary>
        </member>
        <member name="F:Rhino.Geometry.SubDCreationOptions.ConvexCornerOption.Unset">
            <summary>The option is not set.</summary>
        </member>
        <member name="F:Rhino.Geometry.SubDCreationOptions.ConvexCornerOption.None">
            <summary>No convex corners. In general,this is the best choice.</summary>
        </member>
        <member name="F:Rhino.Geometry.SubDCreationOptions.ConvexCornerOption.AtMeshCorner">
            <summary>
             A convex subd corner will appear at input mesh boundary vertices 
             where the corner angle &lt;= MaximumConvexCornerAngleRadians() and
             the number of edges the end at the vertex is &lt;= MaximumConvexCornerEdgeCount().
            </summary>
        </member>
        <member name="T:Rhino.Geometry.SubDCreationOptions.ConcaveCornerOption">
            <summary>
            Defines how concave corners are treated.
            </summary>
        </member>
        <member name="F:Rhino.Geometry.SubDCreationOptions.ConcaveCornerOption.Unset">
            <summary>The option is not set.</summary>
        </member>
        <member name="F:Rhino.Geometry.SubDCreationOptions.ConcaveCornerOption.None">
            <summary>No concave corners. In general, this is the best choice.</summary>
        </member>
        <member name="F:Rhino.Geometry.SubDCreationOptions.ConcaveCornerOption.AtMeshCorner">
            <summary>
             A concave subd corner will appear at input mesh boundary vertices 
             where the corner angle &gt;= MinimumConcaveCornerAngleRadians() and
             the number of edges the end at the vertex is &gt;= MinimumConcaveCornerEdgeCount().
            </summary>
        </member>
        <member name="T:Rhino.Geometry.SubDCreationOptions.TextureCoordinateOption">
            <summary>
            Specifies how texture coordinate information is transferred from the mesh to the SubD.
            </summary>
        </member>
        <member name="F:Rhino.Geometry.SubDCreationOptions.TextureCoordinateOption.Unset">
            <summary>The option is not set.</summary>
        </member>
        <member name="F:Rhino.Geometry.SubDCreationOptions.TextureCoordinateOption.None">
            <summary>No texture coordianate information is transferred from the mesh.</summary>
        </member>
        <member name="F:Rhino.Geometry.SubDCreationOptions.TextureCoordinateOption.Automatic">
            <summary>
             If the mesh has a mapping, then TextureCoordinatesOption::CopyMapping is used.
             Otherwise if the mesh has texture coordinates, then TextureCoordinatesOption::CopyCoordinates is used.
             Otherwise TextureCoordinatesOption::Packed is used.
            </summary>
        </member>
        <member name="F:Rhino.Geometry.SubDCreationOptions.TextureCoordinateOption.Packed">
            <summary>
             No texture coordianate information is transferred from the mesh.
             The SubD faces are packed.
            </summary>
        </member>
        <member name="F:Rhino.Geometry.SubDCreationOptions.TextureCoordinateOption.CopyMapping">
            <summary>Texture coordinates mapping information is copied from the mesh.
             Generally this is the best choice because common mappings, like planar, 
             will appear as most people expect on the SubD.
            </summary>
        </member>
        <member name="F:Rhino.Geometry.SubDCreationOptions.TextureCoordinateOption.CopyCoordinates">
            <summary>
             If a mesh has custom texture coordinates, the custom texture coordinates 
             are transferred to the SubD. This requires more memory resources, 
             slows subdivision evaluation, often produces unattractive
             results on n-gons, and distorts the texture when comes from a common mapping
             technique, like planar. This option may be useful when the mesh contains only 
             triangles and quads and the custom texture coordinates are of high quality.
            </summary>
        </member>
        <member name="M:Rhino.Geometry.SubDCreationOptions.#ctor">
            <summary>
            Create default options
            </summary>
            <since>7.0</since>
        </member>
        <member name="P:Rhino.Geometry.SubDCreationOptions.Smooth">
            <summary>
            No interior creases and no corners.
            </summary>
            <since>7.0</since>
        </member>
        <member name="P:Rhino.Geometry.SubDCreationOptions.InteriorCreases">
            <summary>
            Create an interior sub-D crease along all input mesh double edges
            </summary>
            <since>7.0</since>
        </member>
        <member name="P:Rhino.Geometry.SubDCreationOptions.ConvexCornersAndInteriorCreases">
            <summary>
            Look for convex corners at sub-D vertices with 2 edges or fewer that have an
            included angle ≤ 120 degrees.
            </summary>
            <since>7.0</since>
        </member>
        <member name="P:Rhino.Geometry.SubDCreationOptions.ConvexAndConcaveCornersAndInteriorCreases">
            <summary>
            Look for convex corners at sub-D vertices with 2 edges or fewer that have an
            included angle ≤ 120 degrees.
            Look for concave corners at sub-D vertices with 3 edge or more that have an
            included angle ≥ 240 degrees.
            </summary>
            <since>8.0</since>
        </member>
        <member name="M:Rhino.Geometry.SubDCreationOptions.Finalize">
            <summary>
            Finalizer
            </summary>
        </member>
        <member name="M:Rhino.Geometry.SubDCreationOptions.Dispose">
            <summary>
            Delete unmanaged pointer for this
            </summary>
            <since>7.0</since>
        </member>
        <member name="P:Rhino.Geometry.SubDCreationOptions.InteriorCreaseTest">
            <summary>
            Get or sets the interior crease test option.
            </summary>
            <since>7.0</since>
        </member>
        <member name="P:Rhino.Geometry.SubDCreationOptions.ConvexCornerTest">
            <summary>
            Get or sets the convex corner test option.
            </summary>
            <since>7.0</since>
        </member>
        <member name="P:Rhino.Geometry.SubDCreationOptions.MaximumConvexCornerEdgeCount">
            <summary>
            If ConvexCornerTest == ConvexCornerOption.AtMeshCorner, then an input mesh boundary
            vertex becomes a SubD corner when the number of edges that end at the
            vertex is &lt;= MaximumConvexCornerEdgeCount edges and the corner angle
            is &lt;= MaximumConvexCornerAngleRadians.
            </summary>
            <since>7.0</since>
        </member>
        <member name="P:Rhino.Geometry.SubDCreationOptions.MaximumConvexCornerAngleRadians">
            <summary>
            If ConvexCornerTest == ConvexCornerOption.AtMeshCorner, then an input mesh boundary
            vertex becomes a SubD corner when the number of edges that end at the
            vertex is &lt;= MaximumConvexCornerEdgeCount edges and the corner angle
            is &lt;= MaximumConvexCornerAngleRadians.
            </summary>
            <since>7.0</since>
        </member>
        <member name="P:Rhino.Geometry.SubDCreationOptions.ConcaveCornerTest">
            <summary>
            Get or sets the concave corner test option.
            </summary>
            <since>7.0</since>
        </member>
        <member name="P:Rhino.Geometry.SubDCreationOptions.MinimumConcaveCornerAngleRadians">
            <summary>
            If ConcaveCornerTest == ConcaveCornerOption.AtMeshCorner, then an
            input mesh boundary vertex becomes a SubD corner when the number of
            edges that end at the vertex is &gt;= MinimumConcaveCornerEdgeCount edges
            and the corner angle is &gt;= MinimumConcaveCornerAngleRadians.
            </summary>
            <since>7.0</since>
        </member>
        <member name="P:Rhino.Geometry.SubDCreationOptions.MinimumConcaveCornerEdgeCount">
            <summary>
            If ConcaveCornerTest == ConcaveCornerOption.AtMeshCorner, then an
            input mesh boundary vertex becomes a SubD corner when the number of
            edges that end at the vertex is &gt;= MinimumConcaveCornerEdgeCount edges
            and the corner angle is &gt;= MinimumConcaveCornerAngleRadians.
            </summary>
            <since>7.0</since>
        </member>
        <member name="T:Rhino.Geometry.ComponentState">
            <summary><para>Provides a set of values describing component state.</para>
            <para>This is not a bit field.</para>
            <para>Some of these values are mutually exclusive and should not be combined.</para></summary>
        </member>
        <member name="F:Rhino.Geometry.ComponentState.Unset">
            <summary>Not a valid status.</summary>
        </member>
        <member name="F:Rhino.Geometry.ComponentState.Clear">
            <summary>This is a default component state.</summary>
        </member>
        <member name="F:Rhino.Geometry.ComponentState.NotSelected">
            <summary>This is a default component state, but not selected.</summary>
        </member>
        <member name="F:Rhino.Geometry.ComponentState.Selected">
            <summary>This component is selected.</summary>
        </member>
        <member name="F:Rhino.Geometry.ComponentState.SelectedPersistent">
            <summary>This component is selected persistently.</summary>
        </member>
        <member name="F:Rhino.Geometry.ComponentState.NotHighlighted">
            <summary>This is a default component state, but not highlighted.</summary>
        </member>
        <member name="F:Rhino.Geometry.ComponentState.Highlighted">
            <summary>This component is highlighted.</summary>
        </member>
        <member name="F:Rhino.Geometry.ComponentState.NotHidden">
            <summary>This is a default component state, but not hidden.</summary>
        </member>
        <member name="F:Rhino.Geometry.ComponentState.Hidden">
            <summary>This component is hidden.</summary>
        </member>
        <member name="F:Rhino.Geometry.ComponentState.NotLocked">
            <summary>This is a default component state, but not locked.</summary>
        </member>
        <member name="F:Rhino.Geometry.ComponentState.Locked">
            <summary>This component is locked.</summary>
        </member>
        <member name="F:Rhino.Geometry.ComponentState.NotDamaged">
            <summary>This is a default component state, but not damaged.</summary>
        </member>
        <member name="F:Rhino.Geometry.ComponentState.Damaged">
            <summary>This component is damaged.</summary>
        </member>
        <member name="F:Rhino.Geometry.ComponentState.NotDeleted">
            <summary>This component is not deleted.</summary>
        </member>
        <member name="F:Rhino.Geometry.ComponentState.Deleted">
            <summary>This component is deleted.</summary>
        </member>
        <member name="F:Rhino.Geometry.ComponentState.RuntimeMarkClear">
            <summary>This runtime mark is clear.</summary>
        </member>
        <member name="F:Rhino.Geometry.ComponentState.RuntimeMarkSet">
            <summary>This runtime mark is set.</summary>
        </member>
        <member name="T:Rhino.Geometry.NamespaceDoc">
            <summary>
            The Geometry namespace contains geometric types used in Rhino.
            <para>Examples are lines, curves, meshes and boundary representations.</para>
            </summary>
        </member>
        <member name="T:Rhino.Geometry.TextJustification">
            <summary>
            Specifies enumerated constants used to indicate the internal alignment and justification of text.
            </summary>
            <since>5.0</since>
        </member>
        <member name="F:Rhino.Geometry.TextJustification.None">
            <summary>
            The default justification.
            </summary>
        </member>
        <member name="F:Rhino.Geometry.TextJustification.Left">
            <summary>
            Left justification.
            </summary>
        </member>
        <member name="F:Rhino.Geometry.TextJustification.Center">
            <summary>
            Center justification.
            </summary>
        </member>
        <member name="F:Rhino.Geometry.TextJustification.Right">
            <summary>
            Right justification.
            </summary>
        </member>
        <member name="F:Rhino.Geometry.TextJustification.Bottom">
            <summary>
            Bottom inner alignment.
            </summary>
        </member>
        <member name="F:Rhino.Geometry.TextJustification.Middle">
            <summary>
            Middle inner alignment.
            </summary>
        </member>
        <member name="F:Rhino.Geometry.TextJustification.Top">
            <summary>
            Top inner alignment.
            </summary>
        </member>
        <member name="F:Rhino.Geometry.TextJustification.BottomLeft">
            <summary>
            Combination of left justification and bottom alignment.
            </summary>
        </member>
        <member name="F:Rhino.Geometry.TextJustification.BottomCenter">
            <summary>
            Combination of center justification and bottom alignment.
            </summary>
        </member>
        <member name="F:Rhino.Geometry.TextJustification.BottomRight">
            <summary>
            Combination of right justification and bottom alignment.
            </summary>
        </member>
        <member name="F:Rhino.Geometry.TextJustification.MiddleLeft">
            <summary>
            Combination of left justification and middle alignment.
            </summary>
        </member>
        <member name="F:Rhino.Geometry.TextJustification.MiddleCenter">
            <summary>
            Combination of center justification and middle alignment.
            </summary>
        </member>
        <member name="F:Rhino.Geometry.TextJustification.MiddleRight">
            <summary>
            Combination of right justification and middle alignment.
            </summary>
        </member>
        <member name="F:Rhino.Geometry.TextJustification.TopLeft">
            <summary>
            Combination of left justification and top alignment.
            </summary>
        </member>
        <member name="F:Rhino.Geometry.TextJustification.TopCenter">
            <summary>
            Combination of center justification and top alignment.
            </summary>
        </member>
        <member name="F:Rhino.Geometry.TextJustification.TopRight">
            <summary>
            Combination of right justification and top alignment.
            </summary>
        </member>
        <member name="T:Rhino.Geometry.TextDot">
            <summary>
            Represents a text dot, or an annotation entity with text that always faces the camera and always has the same size.
            <para>This class refers to the geometric element that is independent from the document.</para>
            </summary>
        </member>
        <member name="M:Rhino.Geometry.TextDot.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Protected constructor used in serialization.
            </summary>
        </member>
        <member name="M:Rhino.Geometry.TextDot.#ctor(System.String,Rhino.Geometry.Point3d)">
            <summary>
            Initializes a new text dot based on the text and the location.
            </summary>
            <param name="text">Text.</param>
            <param name="location">A position.</param>
            <since>5.0</since>
        </member>
        <member name="P:Rhino.Geometry.TextDot.Point">
            <summary>
            Gets or sets the position of the text dot.
            </summary>
            <since>5.0</since>
        </member>
        <member name="P:Rhino.Geometry.TextDot.Text">
            <summary>
            Gets or sets the primary text of the text dot.
            </summary>
            <since>5.0</since>
        </member>
        <member name="P:Rhino.Geometry.TextDot.SecondaryText">
            <summary>
            Gets or sets the secondary text of the text dot.
            </summary>
            <since>6.0</since>
        </member>
        <member name="P:Rhino.Geometry.TextDot.FontHeight">
            <summary>
            Height of font used for displaying the dot
            </summary>
            <since>5.2</since>
        </member>
        <member name="P:Rhino.Geometry.TextDot.FontFace">
            <summary>Font face used for displaying the dot</summary>
            <since>5.2</since>
        </member>
        <member name="T:Rhino.Geometry.AnnotationBase">
            <summary>
            Provides a common base class to all annotation geometry.
            <para>This class refers to the geometric element that is independent from the document.</para>
            </summary>
        </member>
        <member name="M:Rhino.Geometry.AnnotationBase.#ctor">
            <summary>
            Protected constructor for internal use.
            </summary>
        </member>
        <member name="M:Rhino.Geometry.AnnotationBase.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Protected constructor used in serialization.
            </summary>
            <param name="info">Serialization data.</param>
            <param name="context">Serialization stream.</param>
        </member>
        <member name="P:Rhino.Geometry.AnnotationBase.AnnotationType">
            <summary>
            Type of annotation
            </summary>
            <since>6.0</since>
        </member>
        <member name="P:Rhino.Geometry.AnnotationBase.DimensionStyleId">
            <summary>
            Id of this annotation's parent dimstyle
            If this annotation has overrides to dimstyle properties, 
            those overrides will be represented in the DimensionStyle
            returned by DimensionStyle(ParentStyle)
            </summary>
            <since>6.0</since>
        </member>
        <member name="P:Rhino.Geometry.AnnotationBase.HasPropertyOverrides">
            <summary>
            </summary>
            <since>6.0</since>
        </member>
        <member name="M:Rhino.Geometry.AnnotationBase.IsPropertyOverridden(Rhino.DocObjects.DimensionStyle.Field)">
            <summary>
            Returns true if a property is overridden
            </summary>
            <param name="field"></param>
            <returns></returns>
            <since>6.0</since>
        </member>
        <member name="M:Rhino.Geometry.AnnotationBase.ClearPropertyOverrides">
            <summary>
            Clears all overridden properties for this annotation
            </summary>
            <returns></returns>
            <since>6.0</since>
        </member>
        <member name="M:Rhino.Geometry.AnnotationBase.GetDimensionStyle(Rhino.DocObjects.DimensionStyle)">
            <summary>
            Return the proper dimension style from which to get properties
            for this annotation object
            If this object has style overrides, those will be included in the 
            returned dimension style and the style will be updated to include
            the current state of the parent style for non-overridden fields
            </summary>
            <param name="parentDimStyle"></param>
            <returns></returns>
            <since>6.0</since>
        </member>
        <member name="P:Rhino.Geometry.AnnotationBase.DimensionStyle">
            <summary>
            If there are no overrides then the parent style is returned otherwise the dimension style saved with the annotation is returned.
            </summary>
            <since>6.0</since>
        </member>
        <member name="M:Rhino.Geometry.AnnotationBase.SetOverrideDimStyle(Rhino.DocObjects.DimensionStyle)">
            <summary>
            Set a style including overrides for this annotation object.
            The DimensionStyle OverrideStyle must have the override fields marked 
            as overridden and must have it's Id set to nil.
            Use DimensinoStyle.SetFieldOverride(Field field) and related functions
            to manage override settings. To override a field, the field value must be set
            and the field must be marked as an override. 
            The DimensionStyle passed in here must not be in the dimstyle table
            </summary>
            <param name="OverrideStyle"></param>
            <returns></returns>
            <since>6.0</since>
        </member>
        <member name="P:Rhino.Geometry.AnnotationBase.ParentDimensionStyle">
            <summary>
            The parent dimension style associated with this annotation
            </summary>
            <since>6.0</since>
        </member>
        <member name="P:Rhino.Geometry.AnnotationBase.TextHeight">
            <summary>
            AnnotationBase.TextHeight
            Gets the parent dimstyle for the annotation and 
            gets or sets the text height in the dimstyle
            </summary>
            <since>5.0</since>
        </member>
        <member name="P:Rhino.Geometry.AnnotationBase.MaskEnabled">
            <summary>
            Determines whether or not to draw a Text Mask
            </summary>
            <since>6.0</since>
        </member>
        <member name="P:Rhino.Geometry.AnnotationBase.MaskUsesViewportColor">
            <summary>
            If true, the viewport's color is used for the mask color. If
            false, the color defined by MaskColor is used
            </summary>
            <since>6.0</since>
        </member>
        <member name="P:Rhino.Geometry.AnnotationBase.MaskColorSource">
            <summary>
            Gets or sets whether the mask background color is from the background or from a color
            </summary>
            <since>6.0</since>
        </member>
        <member name="P:Rhino.Geometry.AnnotationBase.DrawTextFrame">
            <summary>
            Gets or sets whether to draw a frame around a text mask
            </summary>
            <since>7.0</since>
        </member>
        <member name="P:Rhino.Geometry.AnnotationBase.MaskFrame">
            <summary>
            Gets or sets whether to draw a frame around a text mask
            </summary>
            <since>7.0</since>
        </member>
        <member name="P:Rhino.Geometry.AnnotationBase.MaskColor">
            <summary>
            Color to use for drawing a text mask when it is enabled. If the mask is
            enabled and MaskColor is System.Drawing.Color.Transparent, then the
            viewport's color will be used for the MaskColor
            </summary>
            <since>6.0</since>
        </member>
        <member name="P:Rhino.Geometry.AnnotationBase.MaskOffset">
            <summary>
            Offset for the border around text of the rectangle used to draw the mask.  This 
            value multiplied by TextHeight is the offset on each side of the tight rectangle 
            around the text characters to the mask rectangle. The default value is 0.1.
            </summary>
            <since>6.0</since>
        </member>
        <member name="P:Rhino.Geometry.AnnotationBase.DimensionScale">
            <summary>
            Gets or sets the dimension scale
            </summary>
            <since>6.0</since>
        </member>
        <member name="P:Rhino.Geometry.AnnotationBase.DrawForward">
            <summary>
            Gets or sets whether the text is oriented towards the reader when viewed from behind
            </summary>
            <since>6.0</since>
        </member>
        <member name="P:Rhino.Geometry.AnnotationBase.Font">
            <summary>
            The base Font for the text of the annotation.  The text string is rich text and therefore a different font that the base font can be associated with sub strings of the text
            </summary>
            <since>6.0</since>
        </member>
        <member name="P:Rhino.Geometry.AnnotationBase.DimensionLengthDisplay">
            <summary>
            Length display units and format
            </summary>
            <since>6.0</since>
        </member>
        <member name="P:Rhino.Geometry.AnnotationBase.AlternateDimensionLengthDisplay">
            <summary>
            Alternate length display units and format
            </summary>
            <since>6.0</since>
        </member>
        <member name="P:Rhino.Geometry.AnnotationBase.DecimalSeparator">
            <summary>
            Set or get the decimal separator c
            </summary>
            <since>7.0</since>
        </member>
        <member name="P:Rhino.Geometry.AnnotationBase.Plane">
            <summary> Plane that this annotation lies on </summary>
            <since>5.0</since>
        </member>
        <member name="M:Rhino.Geometry.AnnotationBase.GetText(System.Boolean)">
            <summary> Return text string for this annotation </summary>
            <param name="rich">
            If true, the string will include RTF formatting information.
            If false, the 'plain' form of the text will be returned.
            </param>
        </member>
        <member name="M:Rhino.Geometry.AnnotationBase.GetPlainTextWithFields">
            <summary> Return plain text string for this annotation with field expressions unevaluated </summary>
        </member>
        <member name="M:Rhino.Geometry.AnnotationBase.GetPlainTextWithRunMap(System.Int32[]@)">
            <summary>
            Return plain text string for this annotation with field expressions unevaluated.
            </summary>
            <param name="map">an array of int values in groups of 3: run index, character start position, and length.</param>
            <returns>A plain text string.</returns>
            <since>7.0</since>
        </member>
        <member name="P:Rhino.Geometry.AnnotationBase.TextFormula">
            <summary>
            See RichText
            </summary>
            <since>5.0</since>
        </member>
        <member name="P:Rhino.Geometry.AnnotationBase.RichText">
            <summary>
            Text including additional RTF formatting information
            </summary>
            <since>6.0</since>
        </member>
        <member name="P:Rhino.Geometry.AnnotationBase.Text">
            <summary>
            Text including additional RTF formatting information
            </summary>
            <since>5.0</since>
        </member>
        <member name="P:Rhino.Geometry.AnnotationBase.PlainText">
            <summary>
            Text stripped of RTF formatting information
            </summary>
            <since>6.0</since>
        </member>
        <member name="P:Rhino.Geometry.AnnotationBase.PlainTextWithFields">
            <summary>
            Text stripped of RTF formatting information and with field expressions intact
            </summary>
            <since>6.19</since>
        </member>
        <member name="M:Rhino.Geometry.AnnotationBase.PlainTextToRtf(System.String)">
            <summary>
            
            </summary>
            <param name="str"></param>
            <returns></returns>
            <since>6.0</since>
        </member>
        <member name="M:Rhino.Geometry.AnnotationBase.SetRichText(System.String,Rhino.DocObjects.DimensionStyle)">
            <summary>
            
            </summary>
            <param name="rtfText"></param>
            <param name="dimstyle"></param>
            <since>6.0</since>
        </member>
        <member name="P:Rhino.Geometry.AnnotationBase.TextHasRtfFormatting">
            <summary>
            </summary>
            <since>6.0</since>
        </member>
        <member name="M:Rhino.Geometry.AnnotationBase.FormatRtfString(System.String,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.String)">
            <summary>
            
            </summary>
            <param name="rtf_in"></param>
            <param name="clear_bold"></param>
            <param name="set_bold"></param>
            <param name="clear_italic"></param>
            <param name="set_italic"></param>
            <param name="clear_underline"></param>
            <param name="set_underline"></param>
            <param name="clear_facename"></param>
            <param name="set_facename"></param>
            <param name="facename"></param>
            <returns></returns>
            <since>6.0</since>
        </member>
        <member name="M:Rhino.Geometry.AnnotationBase.FirstCharProperties(System.String,System.Boolean@,System.Boolean@,System.Boolean@,System.String@)">
            <summary>
            
            </summary>
            <param name="rtf_str"></param>
            <param name="bold"></param>
            <param name="italic"></param>
            <param name="underline"></param>
            <param name="facename"></param>
            <returns></returns>
                [Obsolete("Use AnnotationBase.FirstCharFont instead")]
            <since>6.0</since>
        </member>
        <member name="P:Rhino.Geometry.AnnotationBase.FirstCharFont">
            <summary>
            Returns the font used by the first run of text in an annotation
            </summary>
            <returns></returns>
            <since>6.5</since>
        </member>
        <member name="M:Rhino.Geometry.AnnotationBase.IsAllBold">
            <summary>
            Returns true if all of the text in the annotation is Bold, otherwise returns false
            </summary>
            <returns></returns>
            <since>6.22</since>
        </member>
        <member name="M:Rhino.Geometry.AnnotationBase.IsAllItalic">
            <summary>
            Returns true if all of the text in the annotation is Italic, otherwise returns false
            </summary>
            <returns></returns>
            <since>6.22</since>
        </member>
        <member name="M:Rhino.Geometry.AnnotationBase.IsAllUnderlined">
            <summary>
            Returns true if all of the text in the annotation is Underlined, otherwise returns false
            </summary>
            <returns></returns>
            <since>6.22</since>
        </member>
        <member name="P:Rhino.Geometry.AnnotationBase.TextModelWidth">
            <summary>
            Width of text in the model
            </summary>
            <since>6.0</since>
        </member>
        <member name="P:Rhino.Geometry.AnnotationBase.FormatWidth">
            <summary> Text format width (Wrapping rectangle) </summary>
            <since>6.0</since>
        </member>
        <member name="P:Rhino.Geometry.AnnotationBase.TextIsWrapped">
            <summary>
            Is text wrapping on
            </summary>
            <since>6.0</since>
        </member>
        <member name="M:Rhino.Geometry.AnnotationBase.WrapText">
            <summary>
            Wrap text
            </summary>
            <since>6.0</since>
        </member>
        <member name="P:Rhino.Geometry.AnnotationBase.TextRotationRadians">
            <summary>
            Rotation of text in radians
            </summary>
            <since>6.0</since>
        </member>
        <member name="P:Rhino.Geometry.AnnotationBase.TextRotationDegrees">
            <summary>
            Rotation of text in degrees
            </summary>
            <since>6.0</since>
        </member>
        <member name="M:Rhino.Geometry.AnnotationBase.SetBold(System.Boolean)">
            <summary>
            
            </summary>
            <param name="set_on"></param>
            <returns></returns>
            <since>6.0</since>
        </member>
        <member name="M:Rhino.Geometry.AnnotationBase.SetItalic(System.Boolean)">
            <summary>
            
            </summary>
            <param name="set_on"></param>
            <returns></returns>
            <since>6.0</since>
        </member>
        <member name="M:Rhino.Geometry.AnnotationBase.SetUnderline(System.Boolean)">
            <summary>
            
            </summary>
            <param name="set_on"></param>
            <returns></returns>
            <since>6.0</since>
        </member>
        <member name="M:Rhino.Geometry.AnnotationBase.SetFacename(System.Boolean,System.String)">
            <summary>
            
            </summary>
            <param name="set_on"></param>
            <param name="facename"></param>
            <returns></returns>
            <since>6.0</since>
        </member>
        <member name="M:Rhino.Geometry.AnnotationBase.GetBoundingBox(Rhino.Geometry.Transform)">
            <summary>
            Aligned bounding box solver. Gets the world axis aligned bounding box for the transformed geometry.
            </summary>
            <param name="xform">Transformation to apply to bounding box after calculation. 
            The geometry is not modified.</param>
            <returns>The bounding box of the transformed geometry in world coordinates 
            or BoundingBox.Empty if not bounding box could be found.</returns>
            <since>6.10</since>
        </member>
        <member name="M:Rhino.Geometry.AnnotationBase.RunReplace(System.String,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Replace text within a formatted string
            </summary>
            <param name="replaceString"></param>
            <param name="startRunIndex"></param>
            <param name="startRunPosition"></param>
            <param name="endRunIndex"></param>
            <param name="endRunPosition"></param>
            <returns></returns>
            <since>7.0</since>
        </member>
        <member name="T:Rhino.Geometry.InvalidDimensionStyleIdException">
            <summary>
            General exception that can be thrown by annotations
            </summary>
        </member>
        <member name="M:Rhino.Geometry.InvalidDimensionStyleIdException.#ctor(System.String)">
            <summary>
            
            </summary>
            <param name="msg"></param>
            <since>6.0</since>
        </member>
        <member name="T:Rhino.Geometry.Arc">
            <summary>
            Represents the value of a plane, two angles and a radius in
            a sub-curve of a three-dimensional circle.
            
            <para>The curve is parameterized by an angle expressed in radians. For an IsValid arc
            the total subtended angle AngleRadians() = Domain()(1) - Domain()(0) must satisfy
            0 &lt; AngleRadians() &lt; 2*Pi</para>
            
            <para>The parameterization of the Arc is inherited from the Circle it is derived from.
            In particular</para>
            <para>t -> center + cos(t)*radius*xaxis + sin(t)*radius*yaxis</para>
            <para>where xaxis and yaxis, (part of Circle.Plane) form an orthonormal frame of the plane
            containing the circle.</para>
            </summary>
        </member>
        <member name="P:Rhino.Geometry.Arc.Invalid">
            <summary>
            Initializes a new instance of an invalid arc.
            </summary>
        </member>
        <member name="P:Rhino.Geometry.Arc.Unset">
            <summary>
            Gets an Arc with Unset components.
            </summary>
            <since>5.0</since>
        </member>
        <member name="M:Rhino.Geometry.Arc.#ctor(Rhino.Geometry.Circle,System.Double)">
            <summary>
            Initializes a new instance of an arc from a base circle and an angle.
            </summary>
            <param name="circle">Circle to base arc upon.</param>
            <param name="angleRadians">Sweep angle of arc (in radians)</param>
            <since>5.0</since>
        </member>
        <member name="M:Rhino.Geometry.Arc.#ctor(Rhino.Geometry.Circle,Rhino.Geometry.Interval)">
            <summary>
            Initializes a new instance of an arc from a base circle and an interval of angles.
            </summary>
            <param name="circle">Circle to base arc upon.</param>
            <param name="angleIntervalRadians">
            Increasing angle interval in radians with angleIntervalRadians.Length() &lt;= 2.0*Math.PI.
            </param>
            <since>5.0</since>
        </member>
        <member name="M:Rhino.Geometry.Arc.#ctor(Rhino.Geometry.Plane,System.Double,System.Double)">
            <summary>
            Initializes a new arc from a base plane, a radius value and an angle.
            </summary>
            <param name="plane">The plane of the arc (arc center will be located at plane origin)</param>
            <param name="radius">Radius of arc.</param>
            <param name="angleRadians">Sweep angle of arc (in radians)</param>
            <since>5.0</since>
        </member>
        <member name="M:Rhino.Geometry.Arc.#ctor(Rhino.Geometry.Point3d,System.Double,System.Double)">
            <summary>
            Initializes a new horizontal arc at the given center point, with a custom radius and angle.
            </summary>
            <param name="center">Center point of arc.</param>
            <param name="radius">Radius of arc.</param>
            <param name="angleRadians">Sweep angle of arc (in radians)</param>
            <since>5.0</since>
        </member>
        <member name="M:Rhino.Geometry.Arc.#ctor(Rhino.Geometry.Plane,Rhino.Geometry.Point3d,System.Double,System.Double)">
            <summary>
            Initializes a new aligned arc at the given center point, with a custom radius and angle.
            </summary>
            <param name="plane">Alignment plane for arc. The arc will be parallel to this plane.</param>
            <param name="center">Center point for arc.</param>
            <param name="radius">Radius of arc.</param>
            <param name="angleRadians">Sweep angle of arc (in radians)</param>
            <since>5.0</since>
        </member>
        <member name="M:Rhino.Geometry.Arc.#ctor(Rhino.Geometry.Point3d,Rhino.Geometry.Point3d,Rhino.Geometry.Point3d)">
            <summary>
            Initializes a new arc through three points. If the points are coincident 
            or co-linear, this will result in an Invalid arc.
            </summary>
            <param name="startPoint">Start point of arc.</param>
            <param name="pointOnInterior">Point on arc interior.</param>
            <param name="endPoint">End point of arc.</param>
            <since>5.0</since>
        </member>
        <member name="M:Rhino.Geometry.Arc.#ctor(Rhino.Geometry.Point3d,Rhino.Geometry.Vector3d,Rhino.Geometry.Point3d)">
            <summary>
            Initializes a new arc from end points and a tangent vector. 
            If the tangent is parallel with the endpoints this will result in an Invalid arc.
            </summary>
            <param name="pointA">Start point of arc.</param>
            <param name="tangentA">Tangent at start of arc.</param>
            <param name="pointB">End point of arc.</param>
            <since>5.0</since>
        </member>
        <member name="P:Rhino.Geometry.Arc.IsValid">
            <summary>
            Gets a value indicating whether or not this arc is valid.
            Detail:
             Radius&gt;0 and 0&lt;AngleRadians()&lt;=2*Math.Pi.
            </summary>
            <returns>true if the arc is valid.</returns>
            <since>5.0</since>
        </member>
        <member name="P:Rhino.Geometry.Arc.IsCircle">
            <summary>
            Gets a value indicating whether or not this arc is a complete circle.
            </summary>
            <since>5.0</since>
        </member>
        <member name="P:Rhino.Geometry.Arc.Plane">
            <summary>
            Gets or sets the plane in which this arc lies.
            </summary>
            <since>5.0</since>
        </member>
        <member name="P:Rhino.Geometry.Arc.Radius">
            <summary>
            Gets or sets the radius of this arc.
            </summary>
            <since>5.0</since>
        </member>
        <member name="P:Rhino.Geometry.Arc.Diameter">
            <summary>
            Gets or sets the Diameter of this arc.
            </summary>
            <since>5.0</since>
        </member>
        <member name="P:Rhino.Geometry.Arc.Center">
            <summary>
            Gets or sets the center point for this arc.
            </summary>
            <since>5.0</since>
        </member>
        <member name="P:Rhino.Geometry.Arc.Circumference">
            <summary>
            Gets the circumference of the circle that is coincident with this arc.
            </summary>
            <since>5.0</since>
        </member>
        <member name="P:Rhino.Geometry.Arc.Length">
            <summary>
            Gets the length of the arc. (Length = Radius * (subtended angle in radians)).
            </summary>
            <since>5.0</since>
        </member>
        <member name="P:Rhino.Geometry.Arc.StartPoint">
            <summary>
            Gets the start point of the arc.
            </summary>
            <since>5.0</since>
        </member>
        <member name="P:Rhino.Geometry.Arc.MidPoint">
            <summary>
            Gets the mid-point of the arc.
            </summary>
            <since>5.0</since>
        </member>
        <member name="P:Rhino.Geometry.Arc.EndPoint">
            <summary>
            Gets the end point of the arc.
            </summary>
            <since>5.0</since>
        </member>
        <member name="P:Rhino.Geometry.Arc.AngleDomain">
            <summary>
            Gets or sets the angle domain (in Radians) of this arc.
            </summary>
            <since>5.0</since>
        </member>
        <member name="P:Rhino.Geometry.Arc.StartAngle">
            <summary>
            Gets or sets the start angle (in Radians) for this arc segment.
            </summary>
            <since>5.0</since>
        </member>
        <member name="P:Rhino.Geometry.Arc.EndAngle">
            <summary>
            Gets or sets the end angle (in Radians) for this arc segment.
            </summary>
            <since>5.0</since>
        </member>
        <member name="P:Rhino.Geometry.Arc.Angle">
            <summary>
            Gets or sets the sweep -or subtended- angle (in Radians) for this arc segment.
            </summary>
            <since>5.0</since>
        </member>
        <member name="P:Rhino.Geometry.Arc.StartAngleDegrees">
            <summary>
            Gets or sets the start angle (in Degrees) for this arc segment.
            </summary>
            <since>5.0</since>
        </member>
        <member name="P:Rhino.Geometry.Arc.EndAngleDegrees">
            <summary>
            Gets or sets the end angle (in Degrees) for this arc segment.
            </summary>
            <since>5.0</since>
        </member>
        <member name="P:Rhino.Geometry.Arc.AngleDegrees">
            <summary>
            Gets or sets the sweep -or subtended- angle (in Degrees) for this arc segment.
            </summary>
            <since>5.0</since>
        </member>
        <member name="M:Rhino.Geometry.Arc.Trim(Rhino.Geometry.Interval)">
            <summary>
            Sets arc's angle domain (in Radians) as a sub-domain of the circle.
            </summary>
            <param name="domain">
            0 &lt; domain[1] - domain[0] &lt;= 2.0 * RhinoMath.Pi.
            </param>
            <returns>true on success, false on failure.</returns>
            <since>5.0</since>
        </member>
        <member name="M:Rhino.Geometry.Arc.Equals(System.Object)">
            <summary>
            Determines whether another object is an arc and has the same value as this arc.
            </summary>
            <param name="obj">An object.</param>
            <returns>true if obj is an arc and is exactly equal to this arc; otherwise false.</returns>
        </member>
        <member name="M:Rhino.Geometry.Arc.Equals(Rhino.Geometry.Arc)">
            <summary>
            Determines whether another arc has the same value as this arc.
            </summary>
            <param name="other">An arc.</param>
            <returns>true if obj is equal to this arc; otherwise false.</returns>
            <since>5.0</since>
        </member>
        <member name="M:Rhino.Geometry.Arc.GetHashCode">
            <summary>
            Computes a hash code for the present arc.
            </summary>
            <returns>A non-unique integer that represents this arc.</returns>
        </member>
        <member name="M:Rhino.Geometry.Arc.op_Equality(Rhino.Geometry.Arc,Rhino.Geometry.Arc)">
            <summary>
            Determines whether two arcs have equal values.
            </summary>
            <param name="a">The first arc.</param>
            <param name="b">The second arc.</param>
            <returns>true if all values of the two arcs are exactly equal; otherwise false.</returns>
            <since>5.0</since>
        </member>
        <member name="M:Rhino.Geometry.Arc.op_Inequality(Rhino.Geometry.Arc,Rhino.Geometry.Arc)">
            <summary>
            Determines whether two arcs have different values.
            </summary>
            <param name="a">The first arc.</param>
            <param name="b">The second arc.</param>
            <returns>true if any value of the two arcs differ; otherwise false.</returns>
            <since>5.0</since>
        </member>
        <member name="M:Rhino.Geometry.Arc.BoundingBox">
            <summary>
            Computes the 3D axis aligned bounding box for this arc.
            </summary>
            <returns>Bounding box of arc.</returns>
            <since>5.0</since>
        </member>
        <member name="M:Rhino.Geometry.Arc.PointAt(System.Double)">
            <summary>
            Gets the point at the given arc parameter.
            </summary>
            <param name="t">Arc parameter to evaluate.</param>
            <returns>The point at the given parameter.</returns>
            <since>5.0</since>
        </member>
        <member name="M:Rhino.Geometry.Arc.TangentAt(System.Double)">
            <summary>
            Gets the tangent at the given parameter.
            </summary>
            <param name="t">Parameter of tangent to evaluate.</param>
            <returns>The tangent at the arc at the given parameter.</returns>
            <since>5.0</since>
        </member>
        <member name="M:Rhino.Geometry.Arc.ClosestParameter(Rhino.Geometry.Point3d)">
            <summary>
            Gets parameter on the arc closest to a test point.
            </summary>
            <param name="testPoint">Point to get close to.</param>
            <returns>Parameter (in radians) of the point on the arc that
            is closest to the test point. If testPoint is the center
            of the arc, then the starting point of the arc is
            (arc.Domain()[0]) returned. If no parameter could be found, 
            RhinoMath.UnsetValue is returned.</returns>
            <since>5.0</since>
        </member>
        <member name="M:Rhino.Geometry.Arc.ClosestPoint(Rhino.Geometry.Point3d)">
            <summary>
            Computes the point on an arc that is closest to a test point.
            </summary>
            <param name="testPoint">Point to get close to.</param>
            <returns>
            The point on the arc that is closest to testPoint. If testPoint is
            the center of the arc, then the starting point of the arc is returned.
            UnsetPoint on failure.
            </returns>
            <since>5.0</since>
        </member>
        <member name="M:Rhino.Geometry.Arc.Reverse">
            <summary>
            Reverses the orientation of the arc. Changes the domain from [a,b]
            to [-b,-a].
            </summary>
            <since>5.0</since>
        </member>
        <member name="M:Rhino.Geometry.Arc.Transform(Rhino.Geometry.Transform)">
            <summary>
            Transforms the arc using a Transformation matrix.
            </summary>
            <param name="xform">Transformations to apply. 
            Note that arcs cannot handle non-euclidean transformations.</param>
            <returns>true on success, false on failure.</returns>
            <since>5.0</since>
        </member>
        <member name="M:Rhino.Geometry.Arc.ToNurbsCurve">
            <summary>
            Initializes a nurbs curve representation of this arc. 
            This amounts to the same as calling NurbsCurve.CreateFromArc().
            </summary>
            <returns>A nurbs curve representation of this arc or null if no such representation could be made.</returns>
            <since>5.0</since>
        </member>
        <member name="M:Rhino.Geometry.Arc.EpsilonEquals(Rhino.Geometry.Arc,System.Double)">
            <summary>
            Check that all values in other are within epsilon of the values in this
            </summary>
            <param name="other"></param>
            <param name="epsilon"></param>
            <returns></returns>
            <since>5.4</since>
        </member>
        <member name="T:Rhino.Geometry.ArcCurve">
            <summary>
            Represent arcs and circles.
            <para>ArcCurve.IsCircle returns true if the curve is a complete circle.</para>
            </summary>
            <remarks>
            <para>Details:</para>
            <para>an ArcCurve is a sub-curve of a circle, with a constant speed
            parameterization. The parameterization is	an affine linear
            reparameterization of the underlying arc	m_arc onto the domain m_t.</para>
            <para>A valid ArcCurve has Radius()>0 and  0&lt;AngleRadians()&lt;=2*PI
            and a strictly increasing Domain.</para>
            </remarks>
        </member>
        <member name="M:Rhino.Geometry.ArcCurve.#ctor">
            <summary>
            Initializes a new <see cref="T:Rhino.Geometry.ArcCurve"/> instance.
            <para>Radius is set to 1, position to Origin and Domain to full span (circle).</para>
            </summary>
            <since>5.0</since>
        </member>
        <member name="M:Rhino.Geometry.ArcCurve.#ctor(Rhino.Geometry.ArcCurve)">
            <summary>
            Initializes a new <see cref="T:Rhino.Geometry.ArcCurve"/> instance,
            copying values from another <see cref="T:Rhino.Geometry.ArcCurve"/>.
            </summary>
            <param name="other">Another ArcCurve.</param>
            <since>5.0</since>
        </member>
        <member name="M:Rhino.Geometry.ArcCurve.#ctor(Rhino.Geometry.Arc)">
            <summary>
            Initializes a new <see cref="T:Rhino.Geometry.ArcCurve"/> instance,
            copying values from another <see cref="P:Rhino.Geometry.ArcCurve.Arc"/>.
            </summary>
            <param name="arc">Another Arc.</param>
            <since>5.0</since>
        </member>
        <member name="M:Rhino.Geometry.ArcCurve.#ctor(Rhino.Geometry.Arc,System.Double,System.Double)">
            <summary>
            Initializes a new <see cref="T:Rhino.Geometry.ArcCurve"/> instance,
            copying values from another <see cref="P:Rhino.Geometry.ArcCurve.Arc"/> and specifying the 
            needed parametrization of the arc.
            <para>Arc will not be cut again at these parameterizations.</para>
            </summary>
            <param name="arc">An original arc.</param>
            <param name="t0">A new Domain.T0 value.</param>
            <param name="t1">A new Domain.T1 value.</param>
            <since>5.0</since>
        </member>
        <member name="M:Rhino.Geometry.ArcCurve.#ctor(Rhino.Geometry.Circle)">
            <summary>
            Initializes a new <see cref="T:Rhino.Geometry.ArcCurve"/> instance,
            copying the shape of a <see cref="T:Rhino.Geometry.Circle"/>.
            <para>Parameterization will be [0;circle.Circumference]</para>
            </summary>
            <param name="circle">The original circle.</param>
            <since>5.0</since>
        </member>
        <member name="M:Rhino.Geometry.ArcCurve.#ctor(Rhino.Geometry.Circle,System.Double,System.Double)">
            <summary>
            Initializes a new <see cref="T:Rhino.Geometry.ArcCurve"/> instance,
            copying values from a <see cref="T:Rhino.Geometry.Circle"/> and specifying the 
            needed parametrization of the arc.
            <para>Circle will not be newly cut at these parameterizations.</para>
            </summary>
            <param name="circle">A circle.</param>
            <param name="t0">A new Domain.T0 value.</param>
            <param name="t1">A new Domain.T1 value.</param>
            <since>5.0</since>
        </member>
        <member name="M:Rhino.Geometry.ArcCurve.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Protected constructor used in serialization.
            </summary>
        </member>
        <member name="P:Rhino.Geometry.ArcCurve.Arc">
            <summary>
            Gets the arc that is contained within this ArcCurve.
            </summary>
            <since>5.0</since>
        </member>
        <member name="P:Rhino.Geometry.ArcCurve.IsCompleteCircle">
            <summary>
            Gets a value indicating whether or not this curve can be represented by a complete circle.
            </summary>
            <since>5.0</since>
        </member>
        <member name="P:Rhino.Geometry.ArcCurve.Radius">
            <summary>
            Gets the radius of this ArcCurve.
            </summary>
            <since>5.0</since>
        </member>
        <member name="P:Rhino.Geometry.ArcCurve.AngleRadians">
            <summary>
            Gets the angles of this arc in radians.
            </summary>
            <since>5.0</since>
        </member>
        <member name="P:Rhino.Geometry.ArcCurve.AngleDegrees">
            <summary>
            Gets the angles of this arc in degrees.
            </summary>
            <since>5.0</since>
        </member>
        <member name="T:Rhino.Geometry.Extrusion">
            <summary>
            Represents an extrusion, or objects such as beams or linearly extruded elements,
            that can be represented by profile curves and two miter planes at the extremes.
            </summary>
        </member>
        <member name="M:Rhino.Geometry.Extrusion.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Protected serialization constructor.
            </summary>
            <param name="info">The serialization data.</param>
            <param name="context">The serialization context stream.</param>
        </member>
        <member name="M:Rhino.Geometry.Extrusion.Create(Rhino.Geometry.Curve,System.Double,System.Boolean)">
            <summary>
            Creates an extrusion of a 3d curve (which must be planar) and a height.
            </summary>
            <param name="planarCurve">
            Planar curve used as profile
            </param>
            <param name="height">
            If the height &gt; 0, the bottom of the extrusion will be in plane and
            the top will be height units above the plane.
            If the height &lt; 0, the top of the extrusion will be in plane and
            the bottom will be height units below the plane.
            The plane used is the one that is returned from the curve's TryGetPlane function.
            </param>
            <param name="cap">
            If the curve is closed and cap is true, then the resulting extrusion is capped.
            </param>
            <returns>
            If the input is valid, then a new extrusion is returned. Otherwise null is returned
            </returns>
            <since>5.1</since>
        </member>
        <member name="M:Rhino.Geometry.Extrusion.Create(Rhino.Geometry.Curve,Rhino.Geometry.Plane,System.Double,System.Boolean)">
            <summary>
            Create an extrusion from a 3d curve, a plane and a height.
            </summary>
            <param name="curve">A continuous 3d curve.</param>
            <param name="plane">A plane. The 3d curve is projected to this plane
            and the result is passed to <see cref="M:Rhino.Geometry.Extrusion.SetOuterProfile(Rhino.Geometry.Curve,System.Boolean)"/>.
            </param>
            <param name="height">
            If the height &gt; 0, the bottom of the extrusion will be in plane and
            the top will be height units above the plane.
            If the height &lt; 0, the top of the extrusion will be in plane and
            the bottom will be height units below the plane.
            The plane used is the one that is returned from the curve's TryGetPlane function.
            </param>
            <param name="cap">
            If the curve is closed and cap is true, then the resulting extrusion is capped.
            </param>
            <returns>
            If the input is valid, then a new extrusion is returned. Otherwise null is returned
            </returns>
            <since>8.0</since>
        </member>
        <member name="M:Rhino.Geometry.Extrusion.CreateBoxExtrusion(Rhino.Geometry.Box,System.Boolean)">
            <summary>
            Gets an extrusion from a box.
            </summary>
            <param name="box">IsValid must be true.</param>
            <param name="cap">If true, the base and the top of the box will be capped. Defaults to true.</param>
            <returns>Extrusion on success. null on failure.</returns>
            <since>6.0</since>
        </member>
        <member name="M:Rhino.Geometry.Extrusion.CreateCylinderExtrusion(Rhino.Geometry.Cylinder,System.Boolean,System.Boolean)">
            <summary>
            Gets an extrusion form of a cylinder.
            </summary>
            <param name="cylinder">IsFinite must be true.</param>
            <param name="capBottom">If true, the end at cylinder.Height1 will be capped.</param>
            <param name="capTop">If true, the end at cylinder.Height2 will be capped.</param>
            <returns>Extrusion on success. null on failure.</returns>
            <since>5.0</since>
        </member>
        <member name="M:Rhino.Geometry.Extrusion.CreatePipeExtrusion(Rhino.Geometry.Cylinder,System.Double,System.Boolean,System.Boolean)">
            <summary>
            Gets an extrusion form of a pipe.
            </summary>
            <param name="cylinder">IsFinite must be true.</param>
            <param name="otherRadius">
            If cylinder.Radius is less than other radius, then the cylinder will be the inside
            of the pipe.
            </param>
            <param name="capBottom">If true, the end at cylinder.Height1 will be capped.</param>
            <param name="capTop">If true, the end at cylinder.Height2 will be capped.</param>
            <returns>Extrusion on success. null on failure.</returns>
            <since>5.0</since>
        </member>
        <member name="M:Rhino.Geometry.Extrusion.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Rhino.Geometry.Extrusion"/> class.
            </summary>
            <since>5.0</since>
        </member>
        <member name="M:Rhino.Geometry.Extrusion.ToBrep(System.Boolean)">
            <summary>
            Constructs a brep form of the extrusion. The outer profile is always the first face of the brep.
            If there are inner profiles, additional brep faces are created for each profile. If the
            outer profile is closed, then end caps are added as the last two faces of the brep.
            </summary>
            <param name="splitKinkyFaces">
            If true and the profiles have kinks, then the faces corresponding to those profiles are split
            so they will be G1.
            </param>
            <returns>A brep with a similar shape like this extrusion, or null on error.</returns>
            <since>5.0</since>
        </member>
        <member name="M:Rhino.Geometry.Extrusion.GetBrepFormComponentIndex(Rhino.Geometry.ComponentIndex)">
            <summary>
            Convert a component index that identifies a part of this extrusion
            to a component index that identifies a part of the Brep created
            by Extrusion.ToBrep(false).
            </summary>
            <param name="extrusionComponentIndex">The extrusion component index.</param>
            <returns>The Brep component index if successful. Otherwise, <see cref="P:Rhino.Geometry.ComponentIndex.Unset"/> is returned.</returns>
        </member>
        <member name="M:Rhino.Geometry.Extrusion.SetPathAndUp(Rhino.Geometry.Point3d,Rhino.Geometry.Point3d,Rhino.Geometry.Vector3d)">
            <summary>
            Allows to set the two points at the extremes and the up vector.
            </summary>
            <param name="a">The start point.</param>
            <param name="b">The end point.</param>
            <param name="up">The up vector.</param>
            <returns>true if the operation succeeded; otherwise false.
            Setting up=a-b will make the operation fail.</returns>
            <since>5.0</since>
        </member>
        <member name="P:Rhino.Geometry.Extrusion.PathStart">
            <summary>
            Gets the start point of the path.
            </summary>
            <since>5.0</since>
        </member>
        <member name="P:Rhino.Geometry.Extrusion.PathEnd">
            <summary>
            Gets the end point of the path.
            </summary>
            <since>5.0</since>
        </member>
        <member name="P:Rhino.Geometry.Extrusion.PathTangent">
            <summary>
            Gets the up vector of the path.
            </summary>
            <since>5.0</since>
        </member>
        <member name="P:Rhino.Geometry.Extrusion.MiterPlaneNormalAtStart">
            <summary>
            Gets or sets the normal of the miter plane at the start in profile coordinates.
            In profile coordinates, 0,0,1 always maps to the extrusion axis
            </summary>
            <since>5.0</since>
        </member>
        <member name="P:Rhino.Geometry.Extrusion.MiterPlaneNormalAtEnd">
            <summary>
            Gets or sets the normal of the miter plane at the end in profile coordinates.
            In profile coordinates, 0,0,1 always maps to the extrusion axis
            </summary>
            <since>5.0</since>
        </member>
        <member name="P:Rhino.Geometry.Extrusion.IsMiteredAtStart">
            <summary>
            Returns a value indicating whether a miter plane at start is defined.
            </summary>
            <since>5.0</since>
        </member>
        <member name="P:Rhino.Geometry.Extrusion.IsMiteredAtEnd">
            <summary>
            Gets a value indicating whether a miter plane at the end is defined.
            </summary>
            <since>5.0</since>
        </member>
        <member name="P:Rhino.Geometry.Extrusion.IsSolid">
            <summary>
            Gets a value indicating whether there is no gap among all surfaces constructing this object.
            </summary>
            <since>5.0</since>
        </member>
        <member name="P:Rhino.Geometry.Extrusion.IsCappedAtBottom">
            <summary>
            Gets a value indicating whether the surface that fills the bottom profile is existing.
            </summary>
            <since>5.0</since>
        </member>
        <member name="P:Rhino.Geometry.Extrusion.IsCappedAtTop">
            <summary>
            Gets a value indicating whether the surface that fills the top profile is existing.
            </summary>
            <since>5.0</since>
        </member>
        <member name="P:Rhino.Geometry.Extrusion.CapCount">
            <summary>
            Gets the amount of capping surfaces.
            </summary>
            <since>5.0</since>
        </member>
        <member name="M:Rhino.Geometry.Extrusion.GetProfileTransformation(System.Double)">
            <summary>
            Gets the transformation that maps the XY profile curve to its 3d location.
            </summary>
            <param name="s">
            0.0 = starting profile
            1.0 = ending profile.
            </param>
            <returns>A Transformation. The transform is Invalid on failure.</returns>
            <since>5.0</since>
        </member>
        <member name="M:Rhino.Geometry.Extrusion.GetProfilePlane(System.Double)">
            <summary>
            Gets the 3D plane containing the profile curve at a normalized path parameter.
            </summary>
            <param name="s">
            0.0 = starting profile
            1.0 = ending profile.
            </param>
            <returns>A plane. The plane is Invalid on failure.</returns>
            <remarks>
             When no mitering is happening, GetPathPlane() and GetProfilePlane() return the same plane.
            </remarks>
            <since>5.0</since>
        </member>
        <member name="M:Rhino.Geometry.Extrusion.GetPathPlane(System.Double)">
            <summary>
            Gets the 3D plane perpendicular to the path at a normalized path parameter.
            </summary>
            <param name="s">
            0.0 = starting profile
            1.0 = ending profile.
            </param>
            <returns>A plane. The plane is Invalid on failure.</returns>
            <remarks>
             When no mitering is happening, GetPathPlane() and GetProfilePlane() return the same plane.
            </remarks>
            <since>5.0</since>
        </member>
        <member name="M:Rhino.Geometry.Extrusion.SetOuterProfile(Rhino.Geometry.Curve,System.Boolean)">
            <summary>
            Sets the outer profile of the extrusion.
            </summary>
            <param name="outerProfile">curve in the XY plane or a 2D curve.</param>
            <param name="cap">
            If outerProfile is a closed curve, then cap determines if the extrusion
            has end caps. If outerProfile is an open curve, cap is ignored.
            </param>
            <returns>
            true if the profile was set. If the outer profile is closed, then the
            extrusion may also have inner profiles. If the outer profile is open,
            the extrusion may not have inner profiles. If the extrusion already
            has a profile, the set will fail.
            </returns>
            <since>5.0</since>
        </member>
        <member name="M:Rhino.Geometry.Extrusion.AddInnerProfile(Rhino.Geometry.Curve)">
            <summary>
            Adds an inner profile.
            </summary>
            <param name="innerProfile">Closed curve in the XY plane or a 2d curve.</param>
            <returns>true if the profile was set.</returns>
            <since>5.0</since>
        </member>
        <member name="P:Rhino.Geometry.Extrusion.ProfileCount">
            <summary>
            Gets the amount of profile curves.
            </summary>
            <since>5.0</since>
        </member>
        <member name="M:Rhino.Geometry.Extrusion.Profile3d(System.Int32,System.Double)">
            <summary>
            Gets a transversal isocurve of the extruded profile.
            </summary>
            <param name="profileIndex">
            0 &lt;= profileIndex &lt; ProfileCount
            The outer profile has index 0.
            </param>
            <param name="s">
            0.0 &lt;= s &lt;= 1.0
            A relative parameter controlling which profile is returned.
            0 = bottom profile and 1 = top profile.
            </param>
            <returns>The profile.</returns>
            <since>5.0</since>
        </member>
        <member name="M:Rhino.Geometry.Extrusion.Profile3d(Rhino.Geometry.ComponentIndex)">
            <summary>
            Gets one of the profiles.
            </summary>
            <param name="ci">The index of this profile.</param>
            <returns>The profile.</returns>
            <since>5.0</since>
        </member>
        <member name="M:Rhino.Geometry.Extrusion.WallEdge(Rhino.Geometry.ComponentIndex)">
            <summary>
            Gets one of the longitudinal curves along the beam or extrusion.
            </summary>
            <param name="ci">The index of this profile.</param>
            <returns>The profile.</returns>
            <since>5.0</since>
        </member>
        <member name="M:Rhino.Geometry.Extrusion.WallSurface(Rhino.Geometry.ComponentIndex)">
            <summary>
            Gets one of the longitudinal surfaces of the extrusion.
            </summary>
            <param name="ci">The index specifying which precise item to retrieve.</param>
            <returns>The surface.</returns>
            <since>5.0</since>
        </member>
        <member name="M:Rhino.Geometry.Extrusion.PathLineCurve">
            <summary>
            Gets the line-like curve that is the conceptual axis of the extrusion.
            </summary>
            <returns>The path as a line curve.</returns>
            <since>5.0</since>
        </member>
        <member name="M:Rhino.Geometry.Extrusion.ProfileIndex(System.Double)">
            <summary>
            Gets the index of the profile curve at a domain related to a parameter. 
            </summary>
            <param name="profileParameter">Parameter on profile curve.</param>
            <returns>
            -1 if profileParameter does not correspond to a point on the profile curve.
            When the profileParameter corresponds to the end of one profile and the
            beginning of the next profile, the index of the next profile is returned.
            </returns>
            <since>5.0</since>
        </member>
        <member name="M:Rhino.Geometry.Extrusion.GetMesh(Rhino.Geometry.MeshType)">
            <summary>
            Obtains a reference to a specified type of mesh for this extrusion.
            </summary>
            <param name="meshType">The mesh type.</param>
            <returns>A mesh.</returns>
            <since>5.6</since>
        </member>
        <member name="M:Rhino.Geometry.Extrusion.SetMesh(Rhino.Geometry.Mesh,Rhino.Geometry.MeshType)">
            <summary>
            Sets a specified type of mesh for this extrusion.
            </summary>
            <param name="mesh">The mesh.</param>
            <param name="meshType">The mesh type.</param>
            <returns>A bool.</returns>
        </member>
        <member name="T:Rhino.Geometry.BezierCurve">
            <summary>
            Represents a Bezier curve.
            <para>Note: as an exception, the bezier curve <b>is not</b> derived from <see cref="T:Rhino.Geometry.Curve"/>.</para>
            </summary>
        </member>
        <member name="M:Rhino.Geometry.BezierCurve.Finalize">
            <summary>
            Passively reclaims unmanaged resources when the class user did not explicitly call Dispose().
            </summary>
        </member>
        <member name="M:Rhino.Geometry.BezierCurve.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Protected constructor for internal use.
            </summary>
            <param name="info">Serialization data.</param>
            <param name="context">Serialization stream.</param>
        </member>
        <member name="M:Rhino.Geometry.BezierCurve.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Populates a System.Runtime.Serialization.SerializationInfo with the data needed to serialize the target object.
            </summary>
            <param name="info">The System.Runtime.Serialization.SerializationInfo to populate with data.</param>
            <param name="context">The destination (see System.Runtime.Serialization.StreamingContext) for this serialization.</param>
            <since>6.3</since>
        </member>
        <member name="M:Rhino.Geometry.BezierCurve.Dispose">
            <summary>
            Actively reclaims unmanaged resources that this instance uses.
            </summary>
            <since>5.0</since>
        </member>
        <member name="M:Rhino.Geometry.BezierCurve.Dispose(System.Boolean)">
            <summary>
            For derived class implementers.
            <para>This method is called with argument true when class user calls Dispose(), while with argument false when
            the Garbage Collector invokes the finalizer, or Finalize() method.</para>
            <para>You must reclaim all used unmanaged resources in both cases, and can use this chance to call Dispose on disposable fields if the argument is true.</para>
            <para>Also, you must call the base virtual method within your overriding method.</para>
            </summary>
            <param name="disposing">true if the call comes from the Dispose() method; false if it comes from the Garbage Collector finalizer.</param>
        </member>
        <member name="M:Rhino.Geometry.BezierCurve.#ctor(System.Collections.Generic.IEnumerable{Rhino.Geometry.Point2d})">
            <summary>
            Create bezier curve with controls defined by a list of 2d points
            </summary>
            <param name="controlPoints"></param>
            <since>5.0</since>
        </member>
        <member name="M:Rhino.Geometry.BezierCurve.#ctor(System.Collections.Generic.IEnumerable{Rhino.Geometry.Point3d})">
            <summary>
            Create bezier curve with controls defined by a list of 3d points
            </summary>
            <param name="controlPoints"></param>
            <since>5.0</since>
        </member>
        <member name="M:Rhino.Geometry.BezierCurve.#ctor(System.Collections.Generic.IEnumerable{Rhino.Geometry.Point4d})">
            <summary>
            Create bezier curve with controls defined by a list of 4d points
            </summary>
            <param name="controlPoints"></param>
            <since>5.0</since>
        </member>
        <member name="P:Rhino.Geometry.BezierCurve.Dimension">
            <summary>
            Dimension of Bezier
            </summary>
            <since>6.3</since>
        </member>
        <member name="P:Rhino.Geometry.BezierCurve.IsValid">
            <summary>Tests an object to see if it is valid.</summary>
            <since>5.0</since>
        </member>
        <member name="M:Rhino.Geometry.BezierCurve.CreateLoftedBezier(System.Collections.Generic.IEnumerable{Rhino.Geometry.Point3d})">
            <summary>
            Loft a bezier through a list of points
            </summary>
            <param name="points">2 or more points to interpolate</param>
            <returns>new bezier curve if successful</returns>
            <since>5.0</since>
        </member>
        <member name="M:Rhino.Geometry.BezierCurve.CreateLoftedBezier(System.Collections.Generic.IEnumerable{Rhino.Geometry.Point2d})">
            <summary>
            Loft a bezier through a list of points
            </summary>
            <param name="points">2 or more points to interpolate</param>
            <returns>new bezier curve if successful</returns>
            <since>5.0</since>
        </member>
        <member name="M:Rhino.Geometry.BezierCurve.GetBoundingBox(System.Boolean)">
            <summary>
            Bounding box solver. Gets the world axis aligned bounding box for the curve.
            </summary>
            <param name="accurate">If true, a physically accurate bounding box will be computed. 
            If not, a bounding box estimate will be computed. For some geometry types there is no 
            difference between the estimate and the accurate bounding box. Estimated bounding boxes 
            can be computed much (much) faster than accurate (or "tight") bounding boxes. 
            Estimated bounding boxes are always similar to or larger than accurate bounding boxes.</param>
            <returns>
            The bounding box of the geometry in world coordinates or BoundingBox.Empty 
            if not bounding box could be found.
            </returns>
            <since>5.0</since>
        </member>
        <member name="M:Rhino.Geometry.BezierCurve.PointAt(System.Double)">
            <summary>Evaluates point at a curve parameter.</summary>
            <param name="t">Evaluation parameter.</param>
            <returns>Point (location of curve at the parameter t).</returns>
            <remarks>No error handling.</remarks>
            <since>5.0</since>
        </member>
        <member name="M:Rhino.Geometry.BezierCurve.TangentAt(System.Double)">
            <summary>Evaluates the unit tangent vector at a curve parameter.</summary>
            <param name="t">Evaluation parameter.</param>
            <returns>Unit tangent vector of the curve at the parameter t.</returns>
            <remarks>No error handling.</remarks>
            <since>5.0</since>
        </member>
        <member name="M:Rhino.Geometry.BezierCurve.CurvatureAt(System.Double)">
            <summary>Evaluate the curvature vector at a curve parameter.</summary>
            <param name="t">Evaluation parameter.</param>
            <returns>Curvature vector of the curve at the parameter t.</returns>
            <remarks>No error handling.</remarks>
            <since>5.0</since>
        </member>
        <member name="M:Rhino.Geometry.BezierCurve.ToNurbsCurve">
            <summary>
            Constructs a NURBS curve representation of this curve.
            </summary>
            <returns>NURBS representation of the curve on success, null on failure.</returns>
            <since>5.0</since>
        </member>
        <member name="P:Rhino.Geometry.BezierCurve.IsRational">
            <summary>
            Gets a value indicating whether or not the curve is rational. 
            Rational curves have control-points with custom weights.
            </summary>
            <since>5.0</since>
        </member>
        <member name="P:Rhino.Geometry.BezierCurve.ControlVertexCount">
            <summary>
            Number of control vertices in this curve
            </summary>
            <since>5.0</since>
        </member>
        <member name="M:Rhino.Geometry.BezierCurve.GetControlVertex2d(System.Int32)">
            <summary>Get location of a control vertex.</summary>
            <param name="index">
            Control vertex index (0 &lt;= index &lt; ControlVertexCount)
            </param>
            <returns>
            If the bezier is rational, the euclidean location is returned.
            </returns>
            <exception cref="T:System.ArgumentOutOfRangeException">when index is out of range</exception>
            <since>5.0</since>
        </member>
        <member name="M:Rhino.Geometry.BezierCurve.GetControlVertex3d(System.Int32)">
            <summary>Get location of a control vertex.</summary>
            <param name="index">
            Control vertex index (0 &lt;= index &lt; ControlVertexCount)
            </param>
            <returns>
            If the bezier is rational, the euclidean location is returned.
            </returns>
            <exception cref="T:System.ArgumentOutOfRangeException">when index is out of range</exception>
            <since>5.0</since>
        </member>
        <member name="M:Rhino.Geometry.BezierCurve.GetControlVertex4d(System.Int32)">
            <summary>Get location of a control vertex.</summary>
            <param name="index">
            Control vertex index (0 &lt;= index &lt; ControlVertexCount)
            </param>
            <returns>
            Homogeneous value of control vertex. If the bezier is not
            rational, the weight is 1.
            </returns>
            <exception cref="T:System.ArgumentOutOfRangeException">when index is out of range</exception>
            <since>5.0</since>
        </member>
        <member name="M:Rhino.Geometry.BezierCurve.MakeRational">
            <summary>Make bezier rational</summary>
            <returns>true if successful</returns>
            <since>5.0</since>
        </member>
        <member name="M:Rhino.Geometry.BezierCurve.MakeNonRational">
            <summary>Make bezier non-rational</summary>
            <returns>true if successful</returns>
            <since>5.0</since>
        </member>
        <member name="M:Rhino.Geometry.BezierCurve.IncreaseDegree(System.Int32)">
            <summary>Increase degree of bezier</summary>
            <param name="desiredDegree"></param>
            <returns>true if successful.  false if desiredDegree &lt; current degree.</returns>
            <since>5.0</since>
        </member>
        <member name="M:Rhino.Geometry.BezierCurve.ChangeDimension(System.Int32)">
            <summary>Change dimension of bezier.</summary>
            <param name="desiredDimension"></param>
            <returns>true if successful.  false if desired_dimension &lt; 1</returns>
            <since>5.0</since>
        </member>
        <member name="M:Rhino.Geometry.BezierCurve.Split(System.Double,Rhino.Geometry.BezierCurve@,Rhino.Geometry.BezierCurve@)">
            <summary>
            Divides the Bezier curve at the specified parameter.
            </summary>
            <param name="t">parameter must satisfy 0 &lt; t &lt; 1</param>
            <param name="left"></param>
            <param name="right"></param>
            <returns>true on success</returns>
            <since>6.0</since>
        </member>
        <member name="T:Rhino.Geometry.BezierSurface">
            <summary>
            Represents a Bezier surface.
            </summary>
        </member>
        <member name="M:Rhino.Geometry.BezierSurface.Finalize">
            <summary>
            Passively reclaims unmanaged resources when the class user did not explicitly call Dispose().
            </summary>
        </member>
        <member name="M:Rhino.Geometry.BezierSurface.Dispose">
            <summary>
            Actively reclaims unmanaged resources that this instance uses.
            </summary>
            <since>5.0</since>
        </member>
        <member name="M:Rhino.Geometry.BezierSurface.Dispose(System.Boolean)">
            <summary>
            For derived class implementers.
            <para>This method is called with argument true when class user calls Dispose(), while with argument false when
            the Garbage Collector invokes the finalizer, or Finalize() method.</para>
            <para>You must reclaim all used unmanaged resources in both cases, and can use this chance to call Dispose on disposable fields if the argument is true.</para>
            <para>Also, you must call the base virtual method within your overriding method.</para>
            </summary>
            <param name="disposing">true if the call comes from the Dispose() method; false if it comes from the Garbage Collector finalizer.</param>
        </member>
        <member name="P:Rhino.Geometry.BezierSurface.IsValid">
            <summary>Tests an object to see if it is valid.</summary>
            <since>7.1</since>
        </member>
        <member name="P:Rhino.Geometry.BezierSurface.Dimension">
            <summary>Dimension of Bezier</summary>
            <since>7.1</since>
        </member>
        <member name="M:Rhino.Geometry.BezierSurface.CreateLoftedBezier(System.Collections.Generic.IEnumerable{Rhino.Geometry.BezierCurve})">
            <summary>
            Loft a bezier surface through a list of bezier curves.
            </summary>
            <param name="curves">list of curves that have the same degree</param>
            <returns>new bezier curve if successful</returns>
            <since>7.1</since>
        </member>
        <member name="M:Rhino.Geometry.BezierSurface.GetBoundingBox(System.Boolean)">
            <summary>
            Bounding box solver. Gets the world axis aligned bounding box for the surface.
            </summary>
            <returns>
            The bounding box of the geometry in world coordinates or BoundingBox.Empty 
            if not bounding box could be found.
            </returns>
            <since>7.1</since>
        </member>
        <member name="M:Rhino.Geometry.BezierSurface.Transform(Rhino.Geometry.Transform)">
            <summary>Transforms the surface</summary>
            <param name="xform">
            Transformation to apply to geometry.
            </param>
            <returns>true if geometry successfully transformed.</returns>
            <since>7.1</since>
        </member>
        <member name="M:Rhino.Geometry.BezierSurface.Domain(System.Int32)">
            <summary>Gets the domain in a direction.</summary>
            <param name="direction">0 gets first parameter, 1 gets second parameter.</param>
            <returns>An interval value.</returns>
            <since>7.1</since>
        </member>
        <member name="M:Rhino.Geometry.BezierSurface.Reverse(System.Int32)">
            <summary>
            Reverses parameterization Domain changes from [a,b] to [-b,-a]
            </summary>
            <param name="direction">
            0 for first parameter's domain, 1 for second parameter's domain.
            </param>
            <returns>a new reversed surface on success.</returns>
            <since>7.1</since>
        </member>
        <member name="M:Rhino.Geometry.BezierSurface.Transpose">
            <summary>
            Transposes surface parameterization (swap U and V)
            </summary>
            <returns>New transposed surface on success, null on failure.</returns>
            <since>7.1</since>
        </member>
        <member name="M:Rhino.Geometry.BezierSurface.PointAt(System.Double,System.Double)">
            <summary>Evaluates point at a surface parameter.</summary>
            <param name="u">evaluation parameters.</param>
            <param name="v">evaluation parameters.</param>
            <returns>Point (location of surface at the parameter u,v).</returns>
            <remarks>No error handling.</remarks>
            <since>7.1</since>
        </member>
        <member name="M:Rhino.Geometry.BezierSurface.ToNurbsSurface">
            <summary>
            Constructs a NURBS surface representation of this surface.
            </summary>
            <returns>NURBS representation of the surface on success, null on failure.</returns>
            <since>7.1</since>
        </member>
        <member name="P:Rhino.Geometry.BezierSurface.IsRational">
            <summary>
            Gets a value indicating whether or not the surface is rational. 
            Rational surfaces have control-points with custom weights.
            </summary>
            <since>7.1</since>
        </member>
        <member name="M:Rhino.Geometry.BezierSurface.ControlVertexCount(System.Int32)">
            <summary>
            Number of control vertices in this surface
            </summary>
            <param name="direction">
            0 for first parameter's domain, 1 for second parameter's domain.
            </param>
            <since>7.1</since>
        </member>
        <member name="M:Rhino.Geometry.BezierSurface.GetControlVertex2d(System.Int32,System.Int32)">
            <summary>Get location of a control vertex.</summary>
            <param name="i">
            Control vertex index (0 &lt;= index &lt; ControlVertexCount)
            </param>
            <param name="j">
            Control vertex index (0 &lt;= index &lt; ControlVertexCount)
            </param>
            <returns>
            If the bezier is rational, the euclidean location is returned.
            </returns>
            <exception cref="T:System.ArgumentOutOfRangeException">when i or j is out of range</exception>
            <since>7.1</since>
        </member>
        <member name="M:Rhino.Geometry.BezierSurface.GetControlVertex3d(System.Int32,System.Int32)">
            <summary>Get location of a control vertex.</summary>
            <param name="i">
            Control vertex index (0 &lt;= index &lt; ControlVertexCount)
            </param>
            <param name="j">
            Control vertex index (0 &lt;= index &lt; ControlVertexCount)
            </param>
            <returns>
            If the bezier is rational, the euclidean location is returned.
            </returns>
            <exception cref="T:System.ArgumentOutOfRangeException">when i or j is out of range</exception>
            <since>7.1</since>
        </member>
        <member name="M:Rhino.Geometry.BezierSurface.GetControlVertex4d(System.Int32,System.Int32)">
            <summary>Get location of a control vertex.</summary>
            <param name="i">
            Control vertex index (0 &lt;= index &lt; ControlVertexCount)
            </param>
            <param name="j">
            Control vertex index (0 &lt;= index &lt; ControlVertexCount)
            </param>
            <returns>
            Homogeneous value of control vertex. If the bezier is not
            rational, the weight is 1.
            </returns>
            <exception cref="T:System.ArgumentOutOfRangeException">when index is out of range</exception>
            <since>7.1</since>
        </member>
        <member name="M:Rhino.Geometry.BezierSurface.MakeRational">
            <summary>Make bezier rational</summary>
            <returns>true if successful</returns>
            <since>7.1</since>
        </member>
        <member name="M:Rhino.Geometry.BezierSurface.MakeNonRational">
            <summary>Make bezier non-rational</summary>
            <returns>true if successful</returns>
            <since>7.1</since>
        </member>
        <member name="M:Rhino.Geometry.BezierSurface.Split(System.Int32,System.Double,Rhino.Geometry.BezierSurface@,Rhino.Geometry.BezierSurface@)">
            <summary>
            Divides the Bezier surface at the specified parameter.
            </summary>
            <param name="direction">0 is split along u and 1 is split along v</param>
            <param name="t">parameter must satisfy 0 &lt; t &lt; 1</param>
            <param name="left"></param>
            <param name="right"></param>
            <returns>true on success</returns>
            <since>7.1</since>
        </member>
        <member name="T:Rhino.Geometry.BoundingBox">
            <summary>
            Represents the value of two points in a bounding box 
            defined by the two extreme corner points.
            <para>This box is therefore aligned to the world X, Y and Z axes.</para>
            </summary>
        </member>
        <member name="M:Rhino.Geometry.BoundingBox.#ctor(Rhino.Geometry.Point3d,Rhino.Geometry.Point3d)">
            <summary>
            Constructs a new bounding box from two corner points.
            </summary>
            <param name="min">Point containing all the minimum coordinates.</param>
            <param name="max">Point containing all the maximum coordinates.</param>
            <example>
            <code source='examples\vbnet\ex_addbrepbox.vb' lang='vbnet'/>
            <code source='examples\cs\ex_addbrepbox.cs' lang='cs'/>
            <code source='examples\py\ex_addbrepbox.py' lang='py'/>
            </example>
            <since>5.0</since>
        </member>
        <member name="M:Rhino.Geometry.BoundingBox.#ctor(System.Double,System.Double,System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Constructs a bounding box from numeric extremes.
            </summary>
            <param name="minX">Lower extreme for box X size.</param>
            <param name="minY">Lower extreme for box Y size.</param>
            <param name="minZ">Lower extreme for box Z size.</param>
            <param name="maxX">Upper extreme for box X size.</param>
            <param name="maxY">Upper extreme for box Y size.</param>
            <param name="maxZ">Upper extreme for box Z size.</param>
            <since>5.0</since>
        </member>
        <member name="M:Rhino.Geometry.BoundingBox.#ctor(System.Collections.Generic.IEnumerable{Rhino.Geometry.Point3d})">
            <summary>
            Constructs a bounding box from a collection of points.
            </summary>
            <param name="points">Points to include in the bounding box.</param>
            <since>5.0</since>
        </member>
        <member name="M:Rhino.Geometry.BoundingBox.#ctor(System.Collections.Generic.IEnumerable{Rhino.Geometry.Point3d},Rhino.Geometry.Transform)">
            <summary>
            Constructs a bounding box from a collection of points.
            </summary>
            <param name="points">Points to include in the bounding box.</param>
            <param name="xform">Transformation.</param>
            <since>6.0</since>
        </member>
        <member name="P:Rhino.Geometry.BoundingBox.Empty">
            <summary>
            Gets an [Empty] bounding box. An Empty box is an invalid structure that has negative width.
            </summary>
            <since>5.0</since>
        </member>
        <member name="P:Rhino.Geometry.BoundingBox.Unset">
            <summary>
            Gets a bounding box that has Unset coordinates for Min and Max.
            </summary>
            <since>5.0</since>
        </member>
        <member name="M:Rhino.Geometry.BoundingBox.ToString">
            <summary>
            Constructs the string representation of this aligned bounding box.
            </summary>
            <returns>Text.</returns>
        </member>
        <member name="P:Rhino.Geometry.BoundingBox.IsValid">
            <summary>
            Gets a value that indicates whether or not this bounding box is valid. 
            Empty boxes are not valid, and neither are boxes with unset points.
            </summary>
            <since>5.0</since>
        </member>
        <member name="P:Rhino.Geometry.BoundingBox.Min">
            <summary>
            Gets or sets the point in the minimal corner.
            </summary>
            <since>5.0</since>
        </member>
        <member name="P:Rhino.Geometry.BoundingBox.Max">
            <summary>
            Gets or sets the point in the maximal corner.
            </summary>
            <since>5.0</since>
        </member>
        <member name="P:Rhino.Geometry.BoundingBox.Center">
            <summary>
            Gets the point in the center of the bounding box.
            </summary>
            <since>5.0</since>
        </member>
        <member name="P:Rhino.Geometry.BoundingBox.Area">
            <summary>
            Gets the area of this BoundingBox. 
            </summary>
            <since>6.0</since>
        </member>
        <member name="P:Rhino.Geometry.BoundingBox.Volume">
            <summary>
            Gets the volume of this BoundingBox. 
            </summary>
            <since>6.0</since>
        </member>
        <member name="P:Rhino.Geometry.BoundingBox.Diagonal">
            <summary>
            Gets the diagonal vector of this BoundingBox. 
            The diagonal connects the Min and Max points. 
            </summary>
            <since>5.0</since>
        </member>
        <member name="M:Rhino.Geometry.BoundingBox.PointAt(System.Double,System.Double,System.Double)">
            <summary>
            Evaluates the bounding box with normalized parameters.
            <para>The box has idealized side length of 1x1x1.</para>
            </summary>
            <param name="tx">Normalized (between 0 and 1 is inside the box) parameter along the X direction.</param>
            <param name="ty">Normalized (between 0 and 1 is inside the box) parameter along the Y direction.</param>
            <param name="tz">Normalized (between 0 and 1 is inside the box) parameter along the Z direction.</param>
            <returns>The point at the {tx, ty, tz} parameters.</returns>
            <since>5.0</since>
        </member>
        <member name="M:Rhino.Geometry.BoundingBox.ClosestPoint(Rhino.Geometry.Point3d)">
            <summary>
            Finds the closest point on or in the bounding box.
            </summary>
            <param name="point">Sample point.</param>
            <returns>The point on or in the box that is closest to the sample point.</returns>
            <since>5.0</since>
        </member>
        <member name="M:Rhino.Geometry.BoundingBox.ClosestPoint(Rhino.Geometry.Point3d,System.Boolean)">
            <summary>
            Finds the closest point on or in the bounding box.
            </summary>
            <param name="point">Sample point.</param>
            <param name="includeInterior">If false, the point is projected onto the boundary faces only, 
            otherwise the interior of the box is also taken into consideration.</param>
            <returns>The point on or in the box that is closest to the sample point.</returns>
            <since>5.0</since>
        </member>
        <member name="M:Rhino.Geometry.BoundingBox.FurthestPoint(Rhino.Geometry.Point3d)">
            <summary>
            Finds the furthest point on the Box.
            </summary>
            <param name="point">Sample point.</param>
            <returns>The point on the box that is furthest from the sample point.</returns>
            <since>5.0</since>
        </member>
        <member name="M:Rhino.Geometry.BoundingBox.Inflate(System.Double)">
            <summary>
            Inflates the box with equal amounts in all directions. 
            Inflating with negative amounts may result in decreasing boxes. 
            <para>Invalid boxes can not be inflated.</para>
            </summary>
            <param name="amount">Amount (in model units) to inflate this box in all directions.</param>
            <since>5.0</since>
        </member>
        <member name="M:Rhino.Geometry.BoundingBox.Inflate(System.Double,System.Double,System.Double)">
            <summary>
            Inflate the box with custom amounts in all directions. 
            Inflating with negative amounts may result in decreasing boxes. 
            <para>InValid boxes can not be inflated.</para>
            </summary>
            <param name="xAmount">Amount (in model units) to inflate this box in the x direction.</param>
            <param name="yAmount">Amount (in model units) to inflate this box in the y direction.</param>
            <param name="zAmount">Amount (in model units) to inflate this box in the z direction.</param>
            <since>5.0</since>
        </member>
        <member name="M:Rhino.Geometry.BoundingBox.Contains(Rhino.Geometry.Point3d)">
            <summary>
            Tests a point for bounding box inclusion. This is the same as calling Contains(point, false)
            </summary>
            <param name="point">Point to test.</param>
            <returns>true if the point is on the inside of or coincident with this bounding box; otherwise false.</returns>
            <since>5.0</since>
        </member>
        <member name="M:Rhino.Geometry.BoundingBox.Contains(Rhino.Geometry.Point3d,System.Boolean)">
            <summary>
            Tests a point for BoundingBox inclusion.
            </summary>
            <param name="point">Point to test.</param>
            <param name="strict">If true, the point needs to be fully on the inside of the BoundingBox. 
            I.e. coincident points will be considered 'outside'.</param>
            <returns>
            <para>If 'strict' is affirmative, true if the point is inside this bounding box; false if it is on the surface or outside.</para>
            <para>If 'strict' is negative, true if the point is on the surface or on the inside of the bounding box; otherwise false.</para>
            </returns>
            <since>5.0</since>
        </member>
        <member name="M:Rhino.Geometry.BoundingBox.Contains(Rhino.Geometry.BoundingBox)">
            <summary>
            Determines whether this bounding box contains another bounding box.
            <para>This is the same as calling Contains(box,false).</para>
            </summary>
            <param name="box">Box to test.</param>
            <returns>true if the box is on the inside of this bounding box, or is coincident with the surface of it.</returns>
            <since>5.0</since>
        </member>
        <member name="M:Rhino.Geometry.BoundingBox.Contains(Rhino.Geometry.BoundingBox,System.Boolean)">
            <summary>
            Determines whether this bounding box contains another bounding box.
            <para>The user can choose how to treat bounding boxes with coincident surfaces.</para>
            </summary>
            <param name="box">Box to test.</param>
            <param name="strict">If true, the box needs to be fully on the inside of the bounding box. 
            I.e. coincident boxes will be considered 'outside'.</param>
            <returns>true if the box is (strictly) on the inside of this BoundingBox.</returns>
            <since>5.0</since>
        </member>
        <member name="M:Rhino.Geometry.BoundingBox.MakeValid">
            <summary>
            Ensures that the box is defined in an increasing fashion along X, Y and Z axes.
            If the Min or Max points are unset, this function will not change the box.
            </summary>
            <returns>true if the box was made valid, false if the box could not be made valid.</returns>
            <since>5.0</since>
        </member>
        <member name="M:Rhino.Geometry.BoundingBox.Corner(System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Gets one of the eight corners of the box.
            </summary>
            <param name="minX">true for the minimum on the X axis; false for the maximum.</param>
            <param name="minY">true for the minimum on the Y axis; false for the maximum.</param>
            <param name="minZ">true for the minimum on the Z axis; false for the maximum.</param>
            <returns>The requested point.</returns>
            <since>5.0</since>
        </member>
        <member name="M:Rhino.Geometry.BoundingBox.IsDegenerate(System.Double)">
            <summary>
            Determines whether a bounding box is degenerate (flat) in one or more directions.
            </summary>
            <param name="tolerance">
            Distances &lt;= tolerance will be considered to be zero.  If tolerance
            is negative (default), then a scale invariant tolerance is used.
            </param>
            <returns>
            0 = box is not degenerate
            1 = box is a rectangle (degenerate in one direction).
            2 = box is a line (degenerate in two directions).
            3 = box is a point (degenerate in three directions)
            4 = box is not valid.
            </returns>
            <example>
            <code source='examples\vbnet\ex_curvebrepbox.vb' lang='vbnet'/>
            <code source='examples\cs\ex_curvebrepbox.cs' lang='cs'/>
            <code source='examples\py\ex_curvebrepbox.py' lang='py'/>
            </example>
            <since>5.0</since>
        </member>
        <member name="M:Rhino.Geometry.BoundingBox.GetCorners">
             <summary>
             Gets an array filled with the 8 corner points of this box.
             <para>See remarks for the return order.</para>
             </summary>
             <returns>An array of 8 corners.</returns>
             <remarks>
             <para>[0] Min.X, Min.Y, Min.Z</para>
             <para>[1] Max.X, Min.Y, Min.Z</para>
             <para>[2] Max.X, Max.Y, Min.Z</para>
             <para>[3] Min.X, Max.Y, Min.Z</para>
            
             <para>[4] Min.X, Min.Y, Max.Z</para>
             <para>[5] Max.X, Min.Y, Max.Z</para>
             <para>[6] Max.X, Max.Y, Max.Z</para>
             <para>[7] Min.X, Max.Y, Max.Z</para>
             </remarks>
             <example>
             <code source='examples\vbnet\ex_elevation.vb' lang='vbnet'/>
             <code source='examples\cs\ex_elevation.cs' lang='cs'/>
             <code source='examples\py\ex_elevation.py' lang='py'/>
             </example>
             <since>5.0</since>
        </member>
        <member name="M:Rhino.Geometry.BoundingBox.GetEdges">
            <summary>
            Gets an array of the 12 edges of this box.
            </summary>
            <returns>If the bounding box IsValid, the 12 edges; otherwise, null.</returns>
            <since>5.0</since>
        </member>
        <member name="M:Rhino.Geometry.BoundingBox.Transform(Rhino.Geometry.Transform)">
            <summary>
            Updates this bounding box to be the smallest axis aligned
            bounding box that contains the transformed result of its 8 original corner
            points.
            </summary>
            <param name="xform">A transform.</param>
            <returns>true if this operation is successful; otherwise false.</returns>
            <since>5.0</since>
        </member>
        <member name="M:Rhino.Geometry.BoundingBox.ToBrep">
            <summary>
            Constructs a <see cref="T:Rhino.Geometry.Brep"/> representation of this bounding box.
            </summary>
            <returns>If this operation is successful, a Brep representation of this box; otherwise null.</returns>
            <example>
            <code source='examples\vbnet\ex_addbrepbox.vb' lang='vbnet'/>
            <code source='examples\cs\ex_addbrepbox.cs' lang='cs'/>
            <code source='examples\py\ex_addbrepbox.py' lang='py'/>
            </example>
            <since>5.0</since>
        </member>
        <member name="M:Rhino.Geometry.BoundingBox.Union(Rhino.Geometry.BoundingBox)">
            <summary>
            Updates this BoundingBox to represent the union of itself and another box.
            </summary>
            <param name="other">Box to include in this union.</param>
            <remarks>If either this BoundingBox or the other BoundingBox is InValid, 
            the Valid BoundingBox will be the only one included in the union.</remarks>
            <since>5.0</since>
        </member>
        <member name="M:Rhino.Geometry.BoundingBox.Union(Rhino.Geometry.Point3d)">
            <summary>
            Updates this BoundingBox to represent the union of itself and a point.
            </summary>
            <param name="point">Point to include in the union.</param>
            <remarks>If this bounding box is InValid then the union will be 
            the BoundingBox containing only the point. If the point is InValid, 
            this BoundingBox will remain unchanged.
            </remarks>
            <since>5.0</since>
        </member>
        <member name="M:Rhino.Geometry.BoundingBox.Union(Rhino.Geometry.BoundingBox,Rhino.Geometry.BoundingBox)">
            <summary>
            Returns a new BoundingBox that represents the union of boxes a and b.
            </summary>
            <param name="a">First box to include in union.</param>
            <param name="b">Second box to include in union.</param>
            <returns>The BoundingBox that contains both a and b.</returns>
            <remarks>Invalid boxes are ignored and will not affect the union.</remarks>
            <since>5.0</since>
        </member>
        <member name="M:Rhino.Geometry.BoundingBox.Intersection(Rhino.Geometry.BoundingBox,Rhino.Geometry.BoundingBox)">
            <summary>
            Computes the intersection of two bounding boxes.
            </summary>
            <param name="a">A first bounding box.</param>
            <param name="b">A second bounding box.</param>
            <returns>The intersection bounding box.</returns>
            <since>5.0</since>
        </member>
        <member name="M:Rhino.Geometry.BoundingBox.Union(Rhino.Geometry.BoundingBox,Rhino.Geometry.Point3d)">
            <summary>
            Returns a new BoundingBox that represents the union of a bounding box and a point.
            </summary>
            <param name="box">Box to include in the union.</param>
            <param name="point">Point to include in the union.</param>
            <returns>The BoundingBox that contains both the box and the point.</returns>
            <remarks>Invalid boxes and points are ignored and will not affect the union.</remarks>
            <since>5.0</since>
        </member>
        <member name="T:Rhino.Geometry.Box">
            <summary>
            Represents the value of a plane and three intervals in
            an orthogonal, oriented box that is not necessarily parallel to the world Y, X, Z axes.
            </summary>
        </member>
        <member name="M:Rhino.Geometry.Box.#ctor(Rhino.Geometry.Box)">
            <summary>Copy constructor.
            </summary>
            <param name="other">The source plane value.</param>
            <since>7.0</since>
        </member>
        <member name="M:Rhino.Geometry.Box.#ctor(Rhino.Geometry.BoundingBox)">
            <summary>
            Initializes a new Box that mimics a BoundingBox struct. 
            <para>The orientation plane of the Box is coincident with the 
            World XY plane.</para>
            </summary>
            <param name="bbox">BoundingBox to mimic.</param>
            <since>5.0</since>
        </member>
        <member name="M:Rhino.Geometry.Box.#ctor(Rhino.Geometry.Plane,Rhino.Geometry.Interval,Rhino.Geometry.Interval,Rhino.Geometry.Interval)">
            <summary>
            Initializes a new box from a base Plane and three Intervals.
            </summary>
            <param name="basePlane">Orientation plane of the box.</param>
            <param name="xSize">Dimensions along the base plane X-Axis.</param>
            <param name="ySize">Dimensions along the base plane Y-Axis.</param>
            <param name="zSize">Dimensions along the base plane Z-Axis.</param>
            <since>5.0</since>
        </member>
        <member name="M:Rhino.Geometry.Box.#ctor(Rhino.Geometry.Plane,System.Collections.Generic.IEnumerable{Rhino.Geometry.Point3d})">
            <summary>
            Initializes the smallest box that contains a set of points.
            </summary>
            <param name="basePlane">Orientation of the box.</param>
            <param name="points">Points to include, Invalid points will be ignored.</param>
            <since>5.0</since>
        </member>
        <member name="M:Rhino.Geometry.Box.#ctor(Rhino.Geometry.Plane,Rhino.Geometry.GeometryBase)">
            <summary>
            Initializes a box that contains a generic piece of geometry.
            This box will be aligned with an arbitrary plane.
            </summary>
            <param name="basePlane">Base plane for aligned bounding box.</param>
            <param name="geometry">Geometry to box.</param>
            <since>5.0</since>
        </member>
        <member name="M:Rhino.Geometry.Box.#ctor(Rhino.Geometry.Plane,Rhino.Geometry.BoundingBox)">
            <summary>
            Initializes a world aligned box from a base plane and a bounding box.
            </summary>
            <param name="basePlane">Base plane of bounding box.</param>
            <param name="boundingbox">Bounding Box in plane coordinates.</param>
            <since>5.0</since>
        </member>
        <member name="P:Rhino.Geometry.Box.Empty">
            <summary>
            Empty Box. Empty boxes are considered to be invalid.
            </summary>
            <since>5.0</since>
        </member>
        <member name="P:Rhino.Geometry.Box.Unset">
            <summary>
            Gets a Box whose base plane and axis dimensions are all Unset.
            </summary>
            <since>5.0</since>
        </member>
        <member name="P:Rhino.Geometry.Box.IsValid">
            <summary>
            Gets the validity of this Box. Boxes are invalid when the base plane or any of 
            the dimension intervals are invalid or decreasing.
            </summary>
            <since>5.0</since>
        </member>
        <member name="P:Rhino.Geometry.Box.Plane">
            <summary>
            Gets or sets the orientation plane for this Box.
            </summary>
            <since>5.0</since>
        </member>
        <member name="P:Rhino.Geometry.Box.X">
            <summary>
            Gets or sets the Interval that describes the dimension of the 
            Box along the orientation plane X-Axis. Otherwise known as the Width of the Box.
            </summary>
            <since>5.0</since>
        </member>
        <member name="P:Rhino.Geometry.Box.Y">
            <summary>
            Gets or sets the Interval that describes the dimension of the 
            Box along the orientation plane Y-Axis. Otherwise known as the Depth of the Box.
            </summary>
            <since>5.0</since>
        </member>
        <member name="P:Rhino.Geometry.Box.Z">
            <summary>
            Gets or sets the Interval that describes the dimension of the 
            Box along the orientation plane Z-Axis. Otherwise known as the Height of the Box.
            </summary>
            <since>5.0</since>
        </member>
        <member name="P:Rhino.Geometry.Box.Center">
            <summary>
            Gets the point that is in the center of the box.
            </summary>
            <since>5.0</since>
        </member>
        <member name="P:Rhino.Geometry.Box.BoundingBox">
            <summary>
            Gets the world axis aligned Bounding box for this oriented box.
            </summary>
            <since>5.0</since>
        </member>
        <member name="P:Rhino.Geometry.Box.Area">
            <summary>
            Gets the total surface area of this box.
            </summary>
            <since>5.0</since>
        </member>
        <member name="P:Rhino.Geometry.Box.Volume">
            <summary>
            Gets the total volume of this box.
            </summary>
            <since>5.0</since>
        </member>
        <member name="M:Rhino.Geometry.Box.PointAt(System.Double,System.Double,System.Double)">
            <summary>
            Evaluates the box volume at the given unitized parameters.
            <para>The box has idealized side length of 1x1x1.</para>
            </summary>
            <param name="x">Unitized parameter (between 0 and 1 is inside the box) along box X direction.</param>
            <param name="y">Unitized parameter (between 0 and 1 is inside the box) along box Y direction.</param>
            <param name="z">Unitized parameter (between 0 and 1 is inside the box) along box Z direction.</param>
            <returns>The point at (x,y,z).</returns>
            <since>5.0</since>
        </member>
        <member name="M:Rhino.Geometry.Box.ClosestPoint(Rhino.Geometry.Point3d)">
            <summary>
            Finds the closest point on or in the Box. The box should be Valid for this to work.
            </summary>
            <param name="point">Sample point.</param>
            <returns>The point on or in the box that is closest to the sample point.</returns>
            <since>5.0</since>
        </member>
        <member name="M:Rhino.Geometry.Box.FurthestPoint(Rhino.Geometry.Point3d)">
            <summary>
            Finds the furthest point on the Box. The Box should be Valid for this to work properly.
            </summary>
            <param name="point">Sample point.</param>
            <returns>The point on the box that is furthest from the sample point.</returns>
            <since>5.0</since>
        </member>
        <member name="M:Rhino.Geometry.Box.Inflate(System.Double)">
            <summary>
            Inflates the box by a given offset in each direction.
            Inflating with negative amounts may result in decreasing boxes. 
            InValid boxes cannot be inflated.
            </summary>
            <param name="amount">Amount (in model units) to inflate this box in all directions.</param>
            <since>5.0</since>
        </member>
        <member name="M:Rhino.Geometry.Box.Inflate(System.Double,System.Double,System.Double)">
            <summary>
            Inflates the box by a given offset in each direction.
            Inflating with negative amounts may result in decreasing boxes.
            InValid boxes cannot be inflated.
            </summary>
            <param name="xAmount">Amount (in model units) to inflate this box in the x direction.</param>
            <param name="yAmount">Amount (in model units) to inflate this box in the y direction.</param>
            <param name="zAmount">Amount (in model units) to inflate this box in the z direction.</param>
            <since>5.0</since>
        </member>
        <member name="M:Rhino.Geometry.Box.Contains(Rhino.Geometry.Point3d)">
            <summary>
            Determines whether a point is included in this box. This is the same as calling Contains(point,false)
            </summary>
            <param name="point">Point to test.</param>
            <returns>true if the point is on the inside of or coincident with this Box.</returns>
            <since>5.0</since>
        </member>
        <member name="M:Rhino.Geometry.Box.Contains(Rhino.Geometry.Point3d,System.Boolean)">
            <summary>
            Determines whether a point is included in this box. 
            </summary>
            <param name="point">Point to test.</param>
            <param name="strict">If true, the point needs to be fully on the inside of the Box. 
            I.e. coincident points will be considered 'outside'.</param>
            <returns>true if the point is (strictly) on the inside of this Box.</returns>
            <since>5.0</since>
        </member>
        <member name="M:Rhino.Geometry.Box.Contains(Rhino.Geometry.BoundingBox)">
            <summary>
            Test a bounding box for Box inclusion. This is the same as calling Contains(box,false)
            </summary>
            <param name="box">Box to test.</param>
            <returns>true if the box is on the inside of or coincident with this Box.</returns>
            <since>5.0</since>
        </member>
        <member name="M:Rhino.Geometry.Box.Contains(Rhino.Geometry.BoundingBox,System.Boolean)">
            <summary>
            Test a bounding box for Box inclusion.
            </summary>
            <param name="box">Box to test.</param>
            <param name="strict">If true, the bounding box needs to be fully on the inside of this Box. 
            I.e. coincident boxes will be considered 'outside'.</param>
            <returns>true if the box is (strictly) on the inside of this Box.</returns>
            <since>5.0</since>
        </member>
        <member name="M:Rhino.Geometry.Box.Contains(Rhino.Geometry.Box)">
            <summary>
            Test a box for Box inclusion. This is the same as calling Contains(box,false)
            </summary>
            <param name="box">Box to test.</param>
            <returns>true if the box is on the inside of or coincident with this Box.</returns>
            <since>5.0</since>
        </member>
        <member name="M:Rhino.Geometry.Box.Contains(Rhino.Geometry.Box,System.Boolean)">
            <summary>
            Test a box for Box inclusion.
            </summary>
            <param name="box">Box to test.</param>
            <param name="strict">If true, the box needs to be fully on the inside of this Box. 
            I.e. coincident boxes will be considered 'outside'.</param>
            <returns>true if the box is (strictly) on the inside of this Box.</returns>
            <since>5.0</since>
        </member>
        <member name="M:Rhino.Geometry.Box.Union(Rhino.Geometry.Point3d)">
            <summary>
            Constructs a union between this Box and the given point. 
            This grows the box in directions so it contains the point.
            </summary>
            <param name="point">Point to include.</param>
            <since>5.0</since>
        </member>
        <member name="M:Rhino.Geometry.Box.MakeValid">
            <summary>
            Attempts to make the Box valid. This is not always possible.
            </summary>
            <returns>true if the box was made valid, or if it was valid to begin with. 
            false if the box remains unchanged.</returns>
            <since>5.0</since>
        </member>
        <member name="M:Rhino.Geometry.Box.GetCorners">
            <summary>
            Gets an array of the 8 corner points of this box.
            </summary>
            <returns>An array of 8 corners.</returns>
            <since>5.0</since>
        </member>
        <member name="M:Rhino.Geometry.Box.Transform(Rhino.Geometry.Transform)">
            <summary>
            Transforms this Box using a Transformation matrix. If the Transform does not preserve 
            Similarity, the dimensions of the resulting box cannot be trusted.
            </summary>
            <param name="xform">Transformation matrix to apply to this Box.</param>
            <returns>true if the Box was successfully transformed, false if otherwise.</returns>
            <since>5.0</since>
        </member>
        <member name="M:Rhino.Geometry.Box.RepositionBasePlane(Rhino.Geometry.Point3d)">
            <summary>
            Repositions the origin of the Base plane for this box without affecting 
            the physical dimensions.
            </summary>
            <param name="origin">The new base plane origin.</param>
            <since>5.0</since>
        </member>
        <member name="M:Rhino.Geometry.Box.ToBrep">
            <summary>
            Constructs a brep representation of this box.
            </summary>
            <returns>A Brep representation of this box or null.</returns>
            <since>5.0</since>
        </member>
        <member name="M:Rhino.Geometry.Box.ToExtrusion">
            <summary>
            Constructs an extrusion representation of this box.
            </summary>
            <returns>An Extrusion representation of this box or null.</returns>
            <since>6.0</since>
        </member>
        <member name="M:Rhino.Geometry.Box.EpsilonEquals(Rhino.Geometry.Box,System.Double)">
            <summary>
            Check that all values in other are within epsilon of the values in this
            </summary>
            <param name="other"></param>
            <param name="epsilon"></param>
            <returns></returns>
            <since>5.4</since>
        </member>
        <member name="T:Rhino.Geometry.PipeCapMode">
            <summary>Styles used for creating Brep pipes.</summary>
            <since>5.0</since>
        </member>
        <member name="F:Rhino.Geometry.PipeCapMode.None">
            <summary>No cap.</summary>
        </member>
        <member name="F:Rhino.Geometry.PipeCapMode.Flat">
            <summary>Caps with planar surface.</summary>
        </member>
        <member name="F:Rhino.Geometry.PipeCapMode.Round">
            <summary>Caps with hemispherical surface.</summary>
        </member>
        <member name="T:Rhino.Geometry.LoftType">
            <summary>
            Specifies enumerated constants for all supported loft types.
            </summary>
            <since>5.0</since>
        </member>
        <member name="F:Rhino.Geometry.LoftType.Normal">
            <summary>
            Uses chord-length parameterization in the loft direction.
            </summary>
        </member>
        <member name="F:Rhino.Geometry.LoftType.Loose">
            <summary>
            The surface is allowed to move away from the original curves to make a smoother surface.
            The surface control points are created at the same locations as the control points
            of the loft input curves.
            </summary>
        </member>
        <member name="F:Rhino.Geometry.LoftType.Tight">
            <summary>
            The surface sticks closely to the original curves. Uses square root of chord-length
            parameterization in the loft direction.
            </summary>
        </member>
        <member name="F:Rhino.Geometry.LoftType.Straight">
            <summary>
            The sections between the curves are straight. This is also known as a ruled surface.
            </summary>
        </member>
        <member name="F:Rhino.Geometry.LoftType.Developable">
            <summary>
            Obsolete, do not use.
            </summary>
        </member>
        <member name="F:Rhino.Geometry.LoftType.Uniform">
            <summary>
            Constructs a uniform loft. The object knot vectors will be uniform.
            </summary>
        </member>
        <member name="T:Rhino.Geometry.ExtrudeCornerType">
            <summary>
            Corner types used for creating a tapered extrusion
            </summary>
            <since>5.1</since>
        </member>
        <member name="F:Rhino.Geometry.ExtrudeCornerType.None">
            <summary>No Corner</summary>
        </member>
        <member name="F:Rhino.Geometry.ExtrudeCornerType.Sharp">
            <summary></summary>
        </member>
        <member name="F:Rhino.Geometry.ExtrudeCornerType.Round">
            <summary></summary>
        </member>
        <member name="F:Rhino.Geometry.ExtrudeCornerType.Smooth">
            <summary></summary>
        </member>
        <member name="F:Rhino.Geometry.ExtrudeCornerType.Chamfer">
            <summary></summary>
        </member>
        <member name="T:Rhino.Geometry.BlendType">
            <summary>
            Blend types used for creating filleted Brep edges
            </summary>
            <since>6.0</since>
        </member>
        <member name="F:Rhino.Geometry.BlendType.Chamfer">
            <summary>
            Creates a ruled surface between brep edges with varying chamfer distances.
            </summary>
        </member>
        <member name="F:Rhino.Geometry.BlendType.Fillet">
            <summary>
            Creates a tangent surface between brep edges with varying radius values.
            </summary>
        </member>
        <member name="F:Rhino.Geometry.BlendType.Blend">
            <summary>
            Creates a curvature-continuous blend surface between brep edges with varying radius values.
            </summary>
        </member>
        <member name="T:Rhino.Geometry.RailType">
            <summary>
            Rail types used for creating filleted Brep edges
            </summary>
            <since>6.0</since>
        </member>
        <member name="F:Rhino.Geometry.RailType.DistanceFromEdge">
            <summary>
            The distance from the edge curves determines the intersection.
            </summary>
        </member>
        <member name="F:Rhino.Geometry.RailType.RollingBall">
            <summary>
            The radius of a rolling ball determines the intersection.
            </summary>
        </member>
        <member name="F:Rhino.Geometry.RailType.DistanceBetweenRails">
            <summary>
            The distance between the edge rails determines the intersection.
            </summary>
        </member>
        <member name="T:Rhino.Geometry.SweepRebuild">
            <summary>
            Rebuild types for creating swept surfaces
            </summary>
            <since>6.16</since>
        </member>
        <member name="F:Rhino.Geometry.SweepRebuild.None">
            <summary>
            Do not simplify cross section curves.
            </summary>
        </member>
        <member name="F:Rhino.Geometry.SweepRebuild.Rebuild">
            <summary>
            Rebuild cross section curves through points.
            </summary>
        </member>
        <member name="F:Rhino.Geometry.SweepRebuild.Refit">
            <summary>
            Refit cross section curves to tolerance.
            </summary>
        </member>
        <member name="T:Rhino.Geometry.SweepFrame">
            <summary>
            Frame types for creating swept surfaces
            </summary>
            <since>7.0</since>
        </member>
        <member name="F:Rhino.Geometry.SweepFrame.Freeform">
            <summary>
            The cross-section curve rotates to maintain its angle to the rail throughout the sweep.
            </summary>
        </member>
        <member name="F:Rhino.Geometry.SweepFrame.Roadlike">
            <summary>
            Specify an axis for calculating the 3-D rotation of the cross-section.
            </summary>
        </member>
        <member name="T:Rhino.Geometry.SweepBlend">
            <summary>
            Blend types for creating swept surfaces
            </summary>
            <since>7.0</since>
        </member>
        <member name="F:Rhino.Geometry.SweepBlend.Local">
            <summary>
            The sweep stays constant at the ends and changes more rapidly in the middle.
            </summary>
        </member>
        <member name="F:Rhino.Geometry.SweepBlend.Global">
            <summary>
            The sweep is linearly blended from one end to the other, creating sweeps that taper from one cross-section curve to the other.
            </summary>
        </member>
        <member name="T:Rhino.Geometry.SweepMiter">
            <summary>
            Miter types for creating swept surfaces
            </summary>
            <since>7.0</since>
        </member>
        <member name="F:Rhino.Geometry.SweepMiter.None">
            <summary>
            No mitering
            </summary>
        </member>
        <member name="F:Rhino.Geometry.SweepMiter.Trimmed">
            <summary>
            If the sweep creates a polysurface with kinks, the component surfaces will be trimmed.
            </summary>
        </member>
        <member name="F:Rhino.Geometry.SweepMiter.Untrimmed">
            <summary>
            If the sweep creates a polysurface with kinks, the component surfaces will be untrimmed.
            </summary>
        </member>
        <member name="T:Rhino.Geometry.Brep">
            <summary>  /// Boundary Representation. A surface or polysurface along with trim curve information.
            </summary>
        </member>
        <member name="M:Rhino.Geometry.Brep.TryConvertBrep(Rhino.Geometry.GeometryBase)">
            <summary>
            Attempts to convert a generic Geometry object into a Brep.
            </summary>
            <param name="geometry">Geometry to convert, not all types of GeometryBase can be represented by BReps.</param>
            <returns>Brep if a brep form could be created or null if this is not possible. If geometry was of type Brep to 
            begin with, the same object is returned, i.e. it is not duplicated.</returns>
            <since>5.0</since>
        </member>
        <member name="M:Rhino.Geometry.Brep.CreateFromMesh(Rhino.Geometry.Mesh,System.Boolean)">
            <summary>
            Create a brep representation of a mesh
            </summary>
            <param name="mesh"></param>
            <param name="trimmedTriangles">
            if true, triangles in the mesh will be represented by trimmed planes in
            the brep. If false, triangles in the mesh will be represented by
            untrimmed singular bilinear NURBS surfaces in the brep.
            </param>
            <returns></returns>
            <since>5.1</since>
        </member>
        <member name="M:Rhino.Geometry.Brep.CreateFromBox(Rhino.Geometry.BoundingBox)">
            <summary>
            Constructs new brep that matches a bounding box.
            </summary>
            <param name="box">A box to use for creation.</param>
            <returns>A new brep; or null on failure.</returns>
            <example>
            <code source='examples\vbnet\ex_curvebrepbox.vb' lang='vbnet'/>
            <code source='examples\cs\ex_curvebrepbox.cs' lang='cs'/>
            <code source='examples\py\ex_curvebrepbox.py' lang='py'/>
            </example>
            <since>5.0</since>
        </member>
        <member name="M:Rhino.Geometry.Brep.CreateFromBox(Rhino.Geometry.Box)">
            <summary>
            Constructs new brep that matches an aligned box.
            </summary>
            <param name="box">Box to match.</param>
            <returns>A Brep with 6 faces that is similar to the Box.</returns>
            <since>5.0</since>
        </member>
        <member name="M:Rhino.Geometry.Brep.CreateFromBox(System.Collections.Generic.IEnumerable{Rhino.Geometry.Point3d})">
            <summary>
            Constructs new brep from 8 corner points.
            </summary>
            <param name="corners">
            8 points defining the box corners arranged as the vN labels indicate.
            <pre>
            <para>v7_______e6____v6</para>
            <para>|\             |\</para>
            <para>| e7           | e5</para>
            <para>|  \ ______e4_____\</para>
            <para>e11 v4         |   v5</para>
            <para>|   |        e10   |</para>
            <para>|   |          |   |</para>
            <para>v3--|---e2----v2   e9</para>
            <para> \  e8          \  |</para>
            <para> e3 |            e1|</para>
            <para>   \|             \|</para>
            <para>    v0_____e0______v1</para>
            </pre>
            </param>
            <returns>A new brep, or null on error.</returns>
            <since>5.0</since>
        </member>
        <member name="M:Rhino.Geometry.Brep.CreateFromCylinder(Rhino.Geometry.Cylinder,System.Boolean,System.Boolean)">
            <summary>
            Constructs a Brep definition of a cylinder.
            </summary>
            <param name="cylinder">cylinder.IsFinite() must be true.</param>
            <param name="capBottom">if true end at cylinder.m_height[0] should be capped.</param>
            <param name="capTop">if true end at cylinder.m_height[1] should be capped.</param>
            <returns>
            A Brep representation of the cylinder with a single face for the cylinder,
            an edge along the cylinder seam, and vertices at the bottom and top ends of this
            seam edge. The optional bottom/top caps are single faces with one circular edge
            starting and ending at the bottom/top vertex.
            </returns>
            <since>5.0</since>
        </member>
        <member name="M:Rhino.Geometry.Brep.CreateFromTorus(Rhino.Geometry.Torus)">
            <summary>
            Constructs a Brep definition of a torus.
            </summary>
            <param name="torus">The torus.</param>
            <returns>A Brep representation of the torus if successful, null otherwise.</returns>
            <since>8.1</since>
        </member>
        <member name="M:Rhino.Geometry.Brep.CreateFromSphere(Rhino.Geometry.Sphere)">
            <summary>
            Constructs a Brep definition of a sphere.
            </summary>
            <param name="sphere">The input sphere provides the orienting plane and radius.</param>
            <returns>A Brep if successful, null on error.</returns>
            <since>5.0</since>
        </member>
        <member name="M:Rhino.Geometry.Brep.CreateQuadSphere(Rhino.Geometry.Sphere)">
            <summary>
            Constructs a Brep definition of a quad sphere.
            </summary>
            <param name="sphere">The input sphere provides the orienting plane and radius.</param>
            <returns>A Brep if successful, null on error.</returns>
            <since>6.0</since>
        </member>
        <member name="M:Rhino.Geometry.Brep.CreateFromCone(Rhino.Geometry.Cone,System.Boolean)">
            <summary>
            Constructs a Brep representation of the cone with a single
            face for the cone, an edge along the cone seam, 
            and vertices at the base and apex ends of this seam edge.
            The optional cap is a single face with one circular edge 
            starting and ending at the base vertex.
            </summary>
            <param name="cone">A cone value.</param>
            <param name="capBottom">if true the base of the cone should be capped.</param>
            <returns>A Brep if successful, null on error.</returns>
            <since>5.0</since>
        </member>
        <member name="M:Rhino.Geometry.Brep.CreateFromRevSurface(Rhino.Geometry.RevSurface,System.Boolean,System.Boolean)">
            <summary>
            Constructs a brep form of a surface of revolution.
            </summary>
            <param name="surface">The surface of revolution.</param>
            <param name="capStart">
            if true, the start of the revolute is not on the axis of revolution,
            and the surface of revolution is closed, then a circular cap will be
            added to close of the hole at the start of the revolute.
            </param>
            <param name="capEnd">
            if true, the end of the revolute is not on the axis of revolution,
            and the surface of revolution is closed, then a circular cap will be
            added to close of the hole at the end of the revolute.
            </param>
            <returns>A Brep if successful, null on error.</returns>
            <example>
            <code source='examples\vbnet\ex_addtruncatedcone.vb' lang='vbnet'/>
            <code source='examples\cs\ex_addtruncatedcone.cs' lang='cs'/>
            <code source='examples\py\ex_addtruncatedcone.py' lang='py'/>
            </example>
            <since>5.0</since>
        </member>
        <member name="M:Rhino.Geometry.Brep.CreateFromSurface(Rhino.Geometry.Surface)">
            <summary>
            Constructs a Brep from a surface. The resulting Brep has an outer boundary made
            from four trims. The trims are ordered so that they run along the south, east,
            north, and then west side of the surface's parameter space.
            </summary>
            <param name="surface">A surface to convert.</param>
            <returns>Resulting brep or null on failure.</returns>
            <since>5.0</since>
        </member>
        <member name="M:Rhino.Geometry.Brep.CreateTrimmedPlane(Rhino.Geometry.Plane,Rhino.Geometry.Curve)">
            <summary>
            Create a Brep trimmed plane.
            </summary>
            <param name="plane">Plane that will be trimmed.</param>
            <param name="curve">A simple (no self intersections) closed curve that defines the outer boundary of the trimmed plane.</param>
            <returns>Resulting brep or null on failure.</returns>
            <since>6.0</since>
        </member>
        <member name="M:Rhino.Geometry.Brep.CreateTrimmedPlane(Rhino.Geometry.Plane,System.Collections.Generic.IEnumerable{Rhino.Geometry.Curve})">
            <summary>
            Create a Brep trimmed plane.
            </summary>
            <param name="plane">Plane that will be trimmed.</param>
            <param name="curves">A list of curves that form a simple (no self intersections) closed curve that defines the outer boundary of the trimmed plane.</param>
            <returns>Resulting brep or null on failure.</returns>
            <since>6.0</since>
        </member>
        <member name="M:Rhino.Geometry.Brep.#ctor">
            <summary>Initializes a new empty brep</summary>
            <since>5.4</since>
        </member>
        <member name="M:Rhino.Geometry.Brep.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Protected constructor used in serialization.
            </summary>
        </member>
        <member name="P:Rhino.Geometry.Brep.Vertices">
            <summary>
            Gets the brep vertices list accessor.
            </summary>
            <since>5.5</since>
        </member>
        <member name="P:Rhino.Geometry.Brep.Surfaces">
            <summary> Parametric surfaces used by faces </summary>
            <since>5.4</since>
        </member>
        <member name="P:Rhino.Geometry.Brep.Edges">
            <summary>
            Gets the brep edges list accessor.
            </summary>
            <since>5.0</since>
        </member>
        <member name="P:Rhino.Geometry.Brep.Trims">
            <summary>
            Gets the brep trims list accessor.
            </summary>
            <since>5.1</since>
        </member>
        <member name="P:Rhino.Geometry.Brep.Loops">
            <summary>
            Gets the brep loop list accessor.
            </summary>
            <since>5.0</since>
        </member>
        <member name="P:Rhino.Geometry.Brep.Faces">
            <summary>
            Gets the brep faces list accessor.
            </summary>
            <since>5.0</since>
        </member>
        <member name="P:Rhino.Geometry.Brep.Curves2D">
            <summary>
            Parameter space trimming curves (used by trims)
            </summary>
            <since>5.6</since>
        </member>
        <member name="P:Rhino.Geometry.Brep.Curves3D">
            <summary>
            Pointers to 3d curves (used by edges)
            </summary>
            <since>5.6</since>
        </member>
        <member name="P:Rhino.Geometry.Brep.IsSolid">
            <summary>
            Determines whether this brep is a solid, or a closed oriented manifold.
            </summary>
            <example>
            <code source='examples\vbnet\ex_isbrepbox.vb' lang='vbnet'/>
            <code source='examples\cs\ex_isbrepbox.cs' lang='cs'/>
            <code source='examples\py\ex_isbrepbox.py' lang='py'/>
            </example>
            <since>5.0</since>
        </member>
        <member name="P:Rhino.Geometry.Brep.SolidOrientation">
            <summary>
            Gets the solid orientation state of this Brep.
            </summary>
            <since>5.0</since>
        </member>
        <member name="P:Rhino.Geometry.Brep.IsManifold">
            <summary>
            Gets a value indicating whether or not the Brep is manifold. 
            Non-Manifold breps have at least one edge that is shared among three or more faces.
            </summary>
            <since>5.0</since>
        </member>
        <member name="P:Rhino.Geometry.Brep.IsSurface">
            <summary>
            Returns true if the Brep has a single face and that face is geometrically the same
            as the underlying surface.  I.e., the face has trivial trimming.
            <para>In this case, the surface is the first face surface. The flag
            Brep.Faces[0].OrientationIsReversed records the correspondence between the surface's
            natural parametric orientation and the orientation of the Brep.</para>
            <para>trivial trimming here means that there is only one loop curve in the brep
            and that loop curve is the same as the underlying surface boundary.</para>
            </summary>
            <since>5.0</since>
        </member>
        <member name="M:Rhino.Geometry.Brep.Duplicate">
            <summary>
            Copies this brep.
            </summary>
            <returns>A brep.</returns>
            <since>5.0</since>
        </member>
        <member name="M:Rhino.Geometry.Brep.DuplicateBrep">
            <summary>
            Same as <see cref="M:Rhino.Geometry.Brep.Duplicate"/>, but already performs a cast to a brep.
            <para>This cast always succeeds.</para>
            </summary>
            <returns>A brep.</returns>
            <since>5.0</since>
        </member>
        <member name="M:Rhino.Geometry.Brep.DuplicateSubBrep(System.Collections.Generic.IEnumerable{System.Int32})">
            <summary>
            Copy a subset of this Brep into another Brep.
            </summary>
            <param name="faceIndices">
            array of face indices in this brep to copy.
            (If any values in faceIndices are out of range or if faceIndices contains
            duplicates, this function will return null.)
            </param>
            <returns>A brep, or null on error.</returns>
            <since>5.0</since>
        </member>
        <member name="M:Rhino.Geometry.Brep.DuplicateEdgeCurves">
            <summary>
            Duplicate all the edges of this Brep.
            </summary>
            <returns>An array of edge curves.</returns>
            <since>5.0</since>
        </member>
        <member name="M:Rhino.Geometry.Brep.DuplicateEdgeCurves(System.Boolean)">
            <summary>
            Duplicate edges of this Brep.
            </summary>
            <param name="nakedOnly">
            If true, then only the "naked" edges are duplicated.
            If false, then all edges are duplicated.
            </param>
            <returns>Array of edge curves on success.</returns>
            <example>
            <code source='examples\vbnet\ex_dupborder.vb' lang='vbnet'/>
            <code source='examples\cs\ex_dupborder.cs' lang='cs'/>
            <code source='examples\py\ex_dupborder.py' lang='py'/>
            </example>
            <since>5.0</since>
        </member>
        <member name="M:Rhino.Geometry.Brep.DuplicateNakedEdgeCurves(System.Boolean,System.Boolean)">
            <summary>
            Duplicate naked edges of this Brep.
            </summary>
            <param name="nakedOuter">Return naked edges that are part of an outer loop.</param>
            <param name="nakedInner">Return naked edges that are part of an inner loop.</param>
            <returns>Array of edge curves on success.</returns>
            <since>5.7</since>
        </member>
        <member name="M:Rhino.Geometry.Brep.GetConnectedComponents">
            <summary>
            If this Brep has two or more connected components, then duplicates of the connected components are returned.
            </summary>
            <returns>An array of connected components, or an empty array.</returns>
            <since>7.18</since>
        </member>
        <member name="M:Rhino.Geometry.Brep.DuplicateVertices">
            <summary>
            Duplicate all the corner vertices of this Brep.
            </summary>
            <returns>An array or corner vertices.</returns>
            <since>5.0</since>
        </member>
        <member name="M:Rhino.Geometry.Brep.Flip">
            <summary>
            Reverses entire brep orientation of all faces.
            </summary>
            <since>5.0</since>
        </member>
        <member name="M:Rhino.Geometry.Brep.IsDuplicate(Rhino.Geometry.Brep,System.Double)">
            <summary>See if this and other are same brep geometry.</summary>
            <param name="other">other brep.</param>
            <param name="tolerance">tolerance to use when comparing control points.</param>
            <returns>true if breps are the same.</returns>
            <since>5.0</since>
        </member>
        <member name="M:Rhino.Geometry.Brep.IsValidTopology(System.String@)">
            <summary>
            Tests the brep to see if its topology information is valid.
            </summary>
            <param name="log">
            If the brep topology is not valid, then a brief English description of
            the problem is appended to the log.  The information appended to log is
            suitable for low-level debugging purposes by programmers and is not
            intended to be useful as a high level user interface tool.
            </param>
            <returns>true if the topology is valid; false otherwise.</returns>
            <since>5.0</since>
        </member>
        <member name="M:Rhino.Geometry.Brep.IsValidGeometry(System.String@)">
            <summary>
            Expert user function that tests the brep to see if its geometry information is valid.
            The value of brep.IsValidTopology() must be true before brep.IsValidGeometry() can be
            safely called.
            </summary>
            <param name="log">
            If the brep geometry is not valid, then a brief description of the problem
            in English is assigned to this out parameter. The information is suitable for
            low-level debugging purposes by programmers and is not intended to be
            useful as a high level user interface tool. Otherwise, <see cref="F:System.String.Empty"/>.
            </param>
            <returns>A value that indicates whether the geometry is valid.</returns>
            <since>5.0</since>
        </member>
        <member name="M:Rhino.Geometry.Brep.IsValidTolerancesAndFlags(System.String@)">
            <summary>
            Expert user function that tests the brep to see if its tolerances and
            flags are valid.  The values of brep.IsValidTopology() and
            brep.IsValidGeometry() must be true before brep.IsValidTolerancesAndFlags()
            can be safely called.
            </summary>
            <param name="log">
            If the brep tolerance or flags are not valid, then a brief description 
            of the problem in English is assigned to this out parameter. The information is
            suitable for low-level debugging purposes by programmers and is not
            intended to be useful as a high level user interface tool. Otherwise, <see cref="F:System.String.Empty"/>.
            </param>
            <returns>A value that indicates </returns>
            <since>5.0</since>
        </member>
        <member name="M:Rhino.Geometry.Brep.AddTrimCurve(Rhino.Geometry.Curve)">
            <summary>
            Add a 2d curve used by the brep trims
            </summary>
            <param name="curve"></param>
            <returns>
            Index used to reference this geometry in the trimming curve list
            </returns>
            <since>5.4</since>
        </member>
        <member name="M:Rhino.Geometry.Brep.AddEdgeCurve(Rhino.Geometry.Curve)">
            <summary>
            Add a 3d curve used by the brep edges
            </summary>
            <param name="curve"></param>
            <returns>
            Index used to reference this geometry in the edge curve list
            </returns>
            <since>5.4</since>
        </member>
        <member name="M:Rhino.Geometry.Brep.AddSurface(Rhino.Geometry.Surface)">
            <summary>
            Adds a 3D surface used by BrepFace.
            </summary>
            <param name="surface">A copy of the surface is added to this brep.</param>
            <returns>
            Index that should be used to reference the geometry.
            <para>-1 is returned if the input is not acceptable.</para>
            </returns>
            <since>5.0</since>
        </member>
        <member name="M:Rhino.Geometry.Brep.Append(Rhino.Geometry.Brep)">
            <summary>
            Appends a copy of another brep to this and updates indices of appended
            brep parts.  Duplicates are not removed
            </summary>
            <param name="other"></param>
            <since>5.4</since>
        </member>
        <member name="M:Rhino.Geometry.Brep.SetVertices">
            <summary>
            This function can be used to compute vertex information for a
            b-rep when everything but the Vertices array is properly filled in.
            It is intended to be used when creating a Brep from a 
            definition that does not include explicit vertex information.
            </summary>
            <since>5.4</since>
        </member>
        <member name="M:Rhino.Geometry.Brep.SetTrimIsoFlags">
            <summary>
            This function can be used to set the BrepTrim::m_iso
            flag. It is intended to be used when creating a Brep from
            a definition that does not include compatible parameter space
            type information.
            </summary>
            <since>5.4</since>
        </member>
        <member name="M:Rhino.Geometry.Brep.SetTolerancesBoxesAndFlags">
            <summary>
            Set tolerances and flags in a Brep.
            </summary>
            <since>6.0</since>
        </member>
        <member name="M:Rhino.Geometry.Brep.SetTolerancesBoxesAndFlags(System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Set tolerances and flags in a Brep.
            </summary>
            <param name="bLazy">If true, only flags and tolerances that are not set will be calculated.</param>
            <param name="bSetVertexTolerances">Set true to compute BrepVertex tolerances.</param>
            <param name="bSetEdgeTolerances">Set true to compute BrepEdge tolerances.</param>
            <param name="bSetTrimTolerances">Set true to compute BrepTrim tolerances.</param>
            <param name="bSetTrimIsoFlags">Set true to compute BrepTrim.IsoStatus values.</param>
            <param name="bSetTrimTypeFlags">Set true to compute BrepTrim.TrimType values.</param>
            <param name="bSetLoopTypeFlags">Set true to compute BrepLoop.BrepLoopType values.</param>
            <param name="bSetTrimBoxes">Set true to compute BrepTrim bounding boxes.</param>
            <since>6.0</since>
        </member>
        <member name="M:Rhino.Geometry.Brep.Compact">
            <summary>
            Deletes any unreferenced objects from arrays, re-indexes as needed, and
            shrinks arrays to minimum required size. Uses CUllUnused* members to
            delete any unreferenced objects from arrays.
            </summary>
            <since>5.0</since>
        </member>
        <member name="M:Rhino.Geometry.Brep.CullUnusedFaces">
            <summary>Culls faces with m_face_index == -1.</summary>
            <returns>true if operation succeeded; false otherwise.</returns>
            <since>5.0</since>
        </member>
        <member name="M:Rhino.Geometry.Brep.CullUnusedLoops">
            <summary>Culls loops with m_loop_index == -1.</summary>
            <returns>true if operation succeeded; false otherwise.</returns>
            <since>5.0</since>
        </member>
        <member name="M:Rhino.Geometry.Brep.CullUnusedTrims">
            <summary>Culls trims with m_trim_index == -1.</summary>
            <returns>true if operation succeeded; false otherwise.</returns>
            <since>5.0</since>
        </member>
        <member name="M:Rhino.Geometry.Brep.CullUnusedEdges">
            <summary>Culls edges with m_edge_index == -1.</summary>
            <returns>true if operation succeeded; false otherwise.</returns>
            <since>5.0</since>
        </member>
        <member name="M:Rhino.Geometry.Brep.CullUnusedVertices">
            <summary>Culls vertices with m_vertex_index == -1.</summary>
            <returns>true if operation succeeded; false otherwise.</returns>
            <since>5.0</since>
        </member>
        <member name="M:Rhino.Geometry.Brep.CullUnused3dCurves">
            <summary>Culls 2d curves not referenced by a trim.</summary>
            <returns>true if operation succeeded; false otherwise.</returns>
            <since>5.0</since>
        </member>
        <member name="M:Rhino.Geometry.Brep.CullUnused2dCurves">
            <summary>Culls 3d curves not referenced by an edge.</summary>
            <returns>true if operation succeeded; false otherwise.</returns>
            <since>5.0</since>
        </member>
        <member name="M:Rhino.Geometry.Brep.CullUnusedSurfaces">
            <summary>Culls surfaces not referenced by a face.</summary>
            <returns>true if operation succeeded; false otherwise.</returns>
            <since>5.0</since>
        </member>
        <member name="M:Rhino.Geometry.Brep.Standardize">
            <summary>
            Standardizes all trims, edges, and faces in the brep.
            After standardizing, there may be unused curves and surfaces in the
            brep.  Call Brep.Compact to remove these unused curves and surfaces.
            </summary>
            <since>5.0</since>
        </member>
        <member name="T:Rhino.Geometry.PointFaceRelation">
            <summary>
            Enumerates the possible point/BrepFace spatial relationships.
            </summary>
            <since>5.0</since>
        </member>
        <member name="F:Rhino.Geometry.PointFaceRelation.Exterior">
            <summary>
            Point is on the exterior (the trimmed part) of the face.
            </summary>
        </member>
        <member name="F:Rhino.Geometry.PointFaceRelation.Interior">
            <summary>
            Point is on the interior (the existing part) of the face.
            </summary>
        </member>
        <member name="F:Rhino.Geometry.PointFaceRelation.Boundary">
            <summary>
            Point is in limbo.
            </summary>
        </member>
        <member name="T:Rhino.Geometry.BrepSolidOrientation">
            <summary>
            Enumerates all possible Solid Orientations for a Brep.
            </summary>
            <since>5.0</since>
        </member>
        <member name="F:Rhino.Geometry.BrepSolidOrientation.None">
            <summary>
            Brep is not a Solid.
            </summary>
        </member>
        <member name="F:Rhino.Geometry.BrepSolidOrientation.Inward">
            <summary>
            Brep is a Solid with inward facing normals.
            </summary>
        </member>
        <member name="F:Rhino.Geometry.BrepSolidOrientation.Outward">
            <summary>
            Brep is a Solid with outward facing normals.
            </summary>
        </member>
        <member name="F:Rhino.Geometry.BrepSolidOrientation.Unknown">
            <summary>
            Breps is a Solid but no orientation could be computed.
            </summary>
        </member>
        <member name="T:Rhino.Geometry.EdgeAdjacency">
            <summary>
            Enumerates all possible Topological Edge adjacency types.
            </summary>
            <since>5.0</since>
        </member>
        <member name="F:Rhino.Geometry.EdgeAdjacency.None">
            <summary>
            Edge is not used by any faces and is therefore superfluous.
            </summary>
        </member>
        <member name="F:Rhino.Geometry.EdgeAdjacency.Naked">
            <summary>
            Edge is used by a single face.
            </summary>
        </member>
        <member name="F:Rhino.Geometry.EdgeAdjacency.Interior">
            <summary>
            Edge is used by two adjacent faces.
            </summary>
        </member>
        <member name="F:Rhino.Geometry.EdgeAdjacency.NonManifold">
            <summary>
            Edge is used by three or more adjacent faces.
            </summary>
        </member>
        <member name="T:Rhino.Geometry.Concavity">
            <summary>
            Enumerates the possible types of edge concavity types.
            </summary>
            <since>6.2</since>
        </member>
        <member name="F:Rhino.Geometry.Concavity.None">
            <summary>
            Concavity is not relevant, for example naked and non-manifold edges
            cannot have a concavity measure.
            </summary>
        </member>
        <member name="F:Rhino.Geometry.Concavity.Tangent">
            <summary>
            Faces on either side of the edge are tangent within tolerance.
            </summary>
        </member>
        <member name="F:Rhino.Geometry.Concavity.Convex">
            <summary>
            Faces on either side of the edge are convex.
            </summary>
        </member>
        <member name="F:Rhino.Geometry.Concavity.Concave">
            <summary>
            Faces on either side of the edge are concave.
            </summary>
        </member>
        <member name="T:Rhino.Geometry.BrepVertex">
            <summary>
            Brep vertex information
            </summary>
        </member>
        <member name="P:Rhino.Geometry.BrepVertex.Brep">
            <summary>
            Gets the Brep that owns this vertex.
            </summary>
            <since>5.4</since>
        </member>
        <member name="P:Rhino.Geometry.BrepVertex.VertexIndex">
            <summary>
            Gets the index of this vertex in the Brep.Vertices collection.
            </summary>
            <since>5.4</since>
        </member>
        <member name="P:Rhino.Geometry.BrepVertex.Tolerance">
            <summary>
            Accuracy of vertex point, either &gt;=0.0 or <see cref="F:Rhino.RhinoMath.UnsetValue"/>.
            A value of <see cref="F:Rhino.RhinoMath.UnsetValue"/> indicates that the tolerance should be computed.
            A value of 0.0 indicates that the distance from the vertex to any applicable
            edge or trim end is &lt;= <see cref="F:Rhino.RhinoMath.ZeroTolerance"/>.
            If an edge begins or ends at this vertex, then the distance from the vertex's
            3d point to the appropriate end of the edge's 3d curve must be &lt;= this tolerance.
            If a trim begins or ends at this vertex, then the distance from the vertex's
            3d point to the 3d point on the surface obtained by evaluating the surface at
            the appropriate end of the trimming curve must be  &lt;= this tolerance.
            </summary>
            <since>7.26</since>
        </member>
        <member name="M:Rhino.Geometry.BrepVertex.EdgeIndices">
            <summary>
            Gets the indices of all edges associated with this vertex.
            </summary>
            <returns>Empty array on failure.</returns>
            <since>5.12</since>
        </member>
        <member name="T:Rhino.Geometry.BrepEdge">
            <summary>
            Represents a single edge curve in a Brep object.
            </summary>
        </member>
        <member name="P:Rhino.Geometry.BrepEdge.Tolerance">
             <summary>
             Gets or sets the accuracy of the edge curve (>=0.0 or RhinoMath.UnsetValue)
             A value of UnsetValue indicates that the tolerance should be computed.
            
             The maximum distance from the edge's 3d curve to any surface of a face
             that has this edge as a portion of its boundary must be &lt;= this tolerance.
             </summary>
             <since>5.0</since>
        </member>
        <member name="P:Rhino.Geometry.BrepEdge.TrimCount">
            <summary>
            Gets the number of trim-curves that use this edge.
            </summary>
            <since>5.0</since>
        </member>
        <member name="P:Rhino.Geometry.BrepEdge.Valence">
            <summary>
            Gets the topological valency of this edge. The topological valency 
            is defined by how many adjacent faces share this edge.
            </summary>
            <since>5.0</since>
        </member>
        <member name="P:Rhino.Geometry.BrepEdge.Brep">
            <summary>
            Gets the Brep that owns this edge.
            </summary>
            <since>5.0</since>
        </member>
        <member name="P:Rhino.Geometry.BrepEdge.EdgeIndex">
            <summary>
            Gets the index of this edge in the Brep.Edges collection.
            </summary>
            <since>5.0</since>
        </member>
        <member name="M:Rhino.Geometry.BrepEdge.AdjacentFaces">
            <summary>
            Gets the indices of all the BrepFaces that use this edge.
            </summary>
            <since>5.0</since>
        </member>
        <member name="M:Rhino.Geometry.BrepEdge.TrimIndices">
            <summary>
            Gets the indices of all trims associated with this edge.
            </summary>
            <returns>Empty array on failure.</returns>
            <since>5.12</since>
        </member>
        <member name="P:Rhino.Geometry.BrepEdge.EdgeCurveIndex">
            <summary>
            Get the brep.Curves3D[] index of the 3d curve geometry used by this edge or -1.
            </summary>
            <since>6.0</since>
        </member>
        <member name="P:Rhino.Geometry.BrepEdge.EdgeCurve">
            <summary>
            Get the brep.Curves3D[] 3d curve geometry used by this edge or null.
            </summary>
            <since>6.0</since>
        </member>
        <member name="M:Rhino.Geometry.BrepEdge.SetEdgeCurve(System.Int32)">
            <summary>
            Set 3d curve geometry used by a b-rep edge.
            </summary>
            <param name="curve3dIndex">index of 3d curve in m_C3[] array</param>
            <returns>true if successful</returns>
            <since>5.4</since>
        </member>
        <member name="M:Rhino.Geometry.BrepEdge.SetEdgeCurve(System.Int32,Rhino.Geometry.Interval)">
            <summary>
            Set 3d curve geometry used by a b-rep edge.
            </summary>
            <param name="curve3dIndex">index of 3d curve in m_C3[] array</param>
            <param name="subDomain"></param>
            <returns>true if successful</returns>
            <since>5.4</since>
        </member>
        <member name="P:Rhino.Geometry.BrepEdge.StartVertex">
            <summary>
            BrepVertex at start of edge
            </summary>
            <since>5.10</since>
        </member>
        <member name="P:Rhino.Geometry.BrepEdge.EndVertex">
            <summary>
            BrepVertex at end of edge
            </summary>
            <since>5.10</since>
        </member>
        <member name="T:Rhino.Geometry.BrepTrimType">
            <summary>
            Each brep trim has a defined type.
            </summary>
            <since>5.1</since>
        </member>
        <member name="F:Rhino.Geometry.BrepTrimType.Unknown">
            <summary>Unknown type</summary>
        </member>
        <member name="F:Rhino.Geometry.BrepTrimType.Boundary">
            <summary>
            Trim is connected to an edge, is part of an outer, inner or
            slit loop, and is the only trim connected to the edge.
            </summary>
        </member>
        <member name="F:Rhino.Geometry.BrepTrimType.Mated">
            <summary>
            Trim is connected to an edge, is part of an outer, inner or slit loop,
            no other trim from the same loop is connected to the edge, and at least
            one trim from a different loop is connected to the edge.
            </summary>
        </member>
        <member name="F:Rhino.Geometry.BrepTrimType.Seam">
            <summary>
            trim is connected to an edge, is part of an outer, inner or slit loop,
            and one other trim from the same loop is connected to the edge.
            (There can be other mated trims that are also connected to the edge.
            For example, the non-manifold edge that results when a surface edge lies
            in the middle of another surface.)  Non-manifold "cuts" have seam trims too.
            </summary>
        </member>
        <member name="F:Rhino.Geometry.BrepTrimType.Singular">
            <summary>
            Trim is part of an outer loop, the trim's 2d curve runs along the singular
            side of a surface, and the trim is NOT connected to an edge. (There is
            no 3d edge because the surface side is singular.)
            </summary>
        </member>
        <member name="F:Rhino.Geometry.BrepTrimType.CurveOnSurface">
            <summary>
            Trim is connected to an edge, is the only trim in a curve-on-surface loop, and
            is the only trim connected to the edge.
            </summary>
        </member>
        <member name="F:Rhino.Geometry.BrepTrimType.PointOnSurface">
            <summary>
            Trim is a point on a surface, trim.m_pbox is records surface parameters,
            and is the only trim in a point-on-surface loop.  This trim is not connected to
            an edge and has no 2d curve.
            </summary>
        </member>
        <member name="F:Rhino.Geometry.BrepTrimType.Slit">
            <summary></summary>
        </member>
        <member name="T:Rhino.Geometry.BrepTrim">
            <summary>
            Brep trim information is stored in BrepTrim classes. Brep.Trims is an
            array of all the trims in the brep. A BrepTrim is derived from CurveProxy
            so the trim can supply easy to use evaluation tools via the Curve virtual
            member functions.
            Note well that the domains and orientations of the curve m_C2[trim.m_c2i]
            and the trim as a curve may not agree.
            </summary>
        </member>
        <member name="P:Rhino.Geometry.BrepTrim.Brep">
            <summary>
            Gets the Brep that owns this trim.
            </summary>
            <since>5.1</since>
        </member>
        <member name="P:Rhino.Geometry.BrepTrim.Loop">
            <summary>
            Loop that this trim belongs to
            </summary>
            <since>5.1</since>
        </member>
        <member name="P:Rhino.Geometry.BrepTrim.Face">
            <summary>
            Brep face this trim belongs to
            </summary>
            <since>5.1</since>
        </member>
        <member name="P:Rhino.Geometry.BrepTrim.Edge">
            <summary>
            Brep edge this trim belongs to. This will be null for singular trims
            </summary>
            <since>5.1</since>
        </member>
        <member name="P:Rhino.Geometry.BrepTrim.TrimCurveIndex">
            <summary>
            Gets the Brep.Curves2D 2d curve index of the 2d curve geometry used by this trim, or -1.
            </summary>
            <since>6.0</since>
        </member>
        <member name="P:Rhino.Geometry.BrepTrim.TrimCurve">
            <summary>
            Gets the Brep.Curves2D 2d curve geometry used by this trim, or null.
            </summary>
            <since>6.0</since>
        </member>
        <member name="P:Rhino.Geometry.BrepTrim.TrimIndex">
            <summary>
            Gets the index of this trim in the Brep.Trims collection.
            </summary>
            <since>5.1</since>
        </member>
        <member name="P:Rhino.Geometry.BrepTrim.TrimType">
            <summary>Type of trim</summary>
            <since>5.1</since>
        </member>
        <member name="P:Rhino.Geometry.BrepTrim.IsoStatus">
            <summary></summary>
            <since>5.6</since>
        </member>
        <member name="M:Rhino.Geometry.BrepTrim.IsReversed">
            <summary>
            Get orientation of trim with respect to it's corresponding edge.
            </summary>
            <returns>true if the 2d trim and 3d edge have opposite orientations</returns>
            <since>5.12</since>
        </member>
        <member name="M:Rhino.Geometry.BrepTrim.GetTolerances(System.Double@,System.Double@)">
             <summary>
             The values in tolerance[] record the accuracy of the parameter space
             trimming curves.
             </summary>
             <remarks>
             <para>tolerance[0] = accuracy of parameter space curve in first ("u") parameter</para>
             <para>tolerance[1] = accuracy of parameter space curve in second ("v") parameter</para>
             <para>
             A value of RhinoMath.UnsetValue indicates that the tolerance should be computed.
             If the value &gt;= 0.0, then the tolerance is set.
             If the value is RhinoMath.UnsetValue, then the tolerance needs to be computed.
             </para>
             <para>
             If the trim is not singular, then the trim must have an edge. If P is a
             3d point on the edge's curve and surface(u,v) = Q is the point on the
             surface that is closest to P, then there must be a parameter t in the
             interval [m_t[0], m_t[1]] such that
              |u - curve2d(t)[0]| &lt;= tolerance[0]
             and
              |v - curve2d(t)[1]| &lt;= tolerance[1]
            
             If P is the 3d point for the vertex brep.m_V[m_vi[k]] and (uk,vk) is the
             corresponding end of the trim's parameter space curve, then there must be
             a surface parameter (u,v) such that:
             </para>
             <list type="bullet">
             <item><description>
             the distance from the 3d point surface(u,v) to P is &lt;= brep.m_V[m_vi[k]].m_tolerance,
             </description></item>
             <item><description>|u-uk| &lt;= tolerance[0].</description></item>
             <item><description>|v-vk| &lt;= tolerance[1].</description></item>
             </list>
             </remarks>
             <param name="toleranceU"></param>
             <param name="toleranceV"></param>
             <since>5.6</since>
        </member>
        <member name="M:Rhino.Geometry.BrepTrim.SetTolerances(System.Double,System.Double)">
             <summary>
             The values in tolerance[] record the accuracy of the parameter space
             trimming curves.
             </summary>
             <remarks>
             <para>tolerance[0] = accuracy of parameter space curve in first ("u") parameter</para>
             <para>tolerance[1] = accuracy of parameter space curve in second ("v") parameter</para>
             <para>
             A value of RhinoMath.UnsetValue indicates that the tolerance should be computed.
             If the value &gt;= 0.0, then the tolerance is set.
             If the value is RhinoMath.UnsetValue, then the tolerance needs to be computed.
             </para>
             <para>
             If the trim is not singular, then the trim must have an edge. If P is a
             3d point on the edge's curve and surface(u,v) = Q is the point on the
             surface that is closest to P, then there must be a parameter t in the
             interval [m_t[0], m_t[1]] such that
              |u - curve2d(t)[0]| &lt;= tolerance[0]
             and
              |v - curve2d(t)[1]| &lt;= tolerance[1]
            
             If P is the 3d point for the vertex brep.m_V[m_vi[k]] and (uk,vk) is the
             corresponding end of the trim's parameter space curve, then there must be
             a surface parameter (u,v) such that:
             </para>
             <list type="bullet">
             <item><description>
             the distance from the 3d point surface(u,v) to P is &lt;= brep.m_V[m_vi[k]].m_tolerance,
             </description></item>
             <item><description>|u-uk| &lt;= tolerance[0].</description></item>
             <item><description>|v-vk| &lt;= tolerance[1].</description></item>
             </list>
             </remarks>
             <param name="toleranceU"></param>
             <param name="toleranceV"></param>
             <since>5.6</since>
        </member>
        <member name="M:Rhino.Geometry.BrepTrim.SetTrimCurve(System.Int32)">
            <summary>
            Set 2d curve geometry used by a b-rep trim.
            </summary>
            <param name="curve2dIndex">index of 2d curve in m_C2[] array</param>
            <returns>true if successful</returns>
            <since>5.4</since>
        </member>
        <member name="P:Rhino.Geometry.BrepTrim.StartVertex">
            <summary>
            BrepVertex at start of trim
            </summary>
            <since>6.0</since>
        </member>
        <member name="P:Rhino.Geometry.BrepTrim.EndVertex">
            <summary>
            BrepVertex at end of trim
            </summary>
            <since>6.0</since>
        </member>
        <member name="M:Rhino.Geometry.BrepTrim.SetTrimCurve(System.Int32,Rhino.Geometry.Interval)">
            <summary>
            Set 2d curve geometry used by a b-rep trim.
            </summary>
            <param name="curve2dIndex">index of 2d curve in m_C2[] array</param>
            <param name="subDomain"></param>
            <returns>true if successful</returns>
            <since>5.4</since>
        </member>
        <member name="T:Rhino.Geometry.BrepLoopType">
            <summary>
            Each brep loop has a defined type, e.g. outer, inner or point on surface.
            </summary>
            <since>5.0</since>
        </member>
        <member name="F:Rhino.Geometry.BrepLoopType.Unknown">
            <summary>
            Unknown loop type.
            </summary>
        </member>
        <member name="F:Rhino.Geometry.BrepLoopType.Outer">
            <summary>
            2d loop curves form a simple closed curve with a counterclockwise orientation.
            </summary>
        </member>
        <member name="F:Rhino.Geometry.BrepLoopType.Inner">
            <summary>
            2d loop curves form a simple closed curve with a clockwise orientation.
            </summary>
        </member>
        <member name="F:Rhino.Geometry.BrepLoopType.Slit">
            <summary>
            Always closed - used internally during splitting operations.
            </summary>
        </member>
        <member name="F:Rhino.Geometry.BrepLoopType.CurveOnSurface">
            <summary>
            "loop" is a curve-on-surface made from a single (open or closed) trim that
            has type TrimType.CurveOnSurface.
            </summary>
        </member>
        <member name="F:Rhino.Geometry.BrepLoopType.PointOnSurface">
            <summary>
            "loop" is a PointOnSurface made from a single trim that has
            type TrimType.PointOnSurface.
            </summary>
        </member>
        <member name="T:Rhino.Geometry.BrepLoop">
            <summary>
            Represent a single loop in a Brep object. A loop is composed
            of a list of trim curves.
            </summary>
        </member>
        <member name="P:Rhino.Geometry.BrepLoop.Brep">
            <summary>
            Gets the Brep that owns this loop.
            </summary>
            <since>5.0</since>
        </member>
        <member name="P:Rhino.Geometry.BrepLoop.LoopIndex">
            <summary>
            Gets the index of this loop in the Brep.Loops collection.
            </summary>
            <since>5.0</since>
        </member>
        <member name="P:Rhino.Geometry.BrepLoop.Face">
            <summary>
            BrepFace this loop belongs to.
            </summary>
            <since>5.0</since>
        </member>
        <member name="P:Rhino.Geometry.BrepLoop.LoopType">
            <summary>
            type of loop.
            </summary>
            <since>5.0</since>
        </member>
        <member name="P:Rhino.Geometry.BrepLoop.Trims">
            <summary>
            List of trims for this loop
            </summary>
            <since>5.1</since>
        </member>
        <member name="M:Rhino.Geometry.BrepLoop.To3dCurve">
            <summary>
            Create a 3D curve that approximates the loop geometry.
            </summary>
            <returns>A 3D curve that approximates the loop or null on failure.</returns>
            <since>5.0</since>
        </member>
        <member name="M:Rhino.Geometry.BrepLoop.To2dCurve">
            <summary>
            Create a 2d curve that traces the entire loop
            </summary>
            <returns></returns>
            <since>5.1</since>
        </member>
        <member name="T:Rhino.Geometry.BrepFace">
            <summary>
            Provides strongly-typed access to brep faces.
            <para>A Brep face is composed of one surface and trimming curves.</para>
            </summary>
        </member>
        <member name="P:Rhino.Geometry.BrepFace.Brep">
            <summary>
            Gets the Brep that owns this face.
            </summary>
            <since>6.9</since>
        </member>
        <member name="P:Rhino.Geometry.BrepFace.OrientationIsReversed">
            <summary>
            true if face orientation is opposite of natural surface orientation.
            </summary>
            <example>
            <code source='examples\vbnet\ex_evnormal.vb' lang='vbnet'/>
            <code source='examples\cs\ex_evnormal.cs' lang='cs'/>
            <code source='examples\py\ex_evnormal.py' lang='py'/>
            </example>
            <since>5.0</since>
        </member>
        <member name="P:Rhino.Geometry.BrepFace.IsSurface">
            <summary>
            Gets a value indicating whether the face is synonymous with the underlying surface. 
            If a Face has no trimming curves then it is considered a Surface.
            </summary>
            <since>5.0</since>
        </member>
        <member name="P:Rhino.Geometry.BrepFace.FaceIndex">
            <summary>Index of face in Brep.Faces array.</summary>
            <since>5.0</since>
        </member>
        <member name="P:Rhino.Geometry.BrepFace.SurfaceIndex">
            <summary>
            Surface index of the 3d surface geometry used by this face or -1
            </summary>
            <since>5.6</since>
        </member>
        <member name="P:Rhino.Geometry.BrepFace.Loops">
            <summary>
            Loops in this face.
            </summary>
            <since>5.0</since>
        </member>
        <member name="P:Rhino.Geometry.BrepFace.OuterLoop">
            <summary>
            Every face has a single outer loop.
            </summary>
            <since>5.0</since>
        </member>
        <member name="P:Rhino.Geometry.BrepFace.MaterialChannelIndex">
            <summary>
            This face's rendering material channel index.
            </summary>
            <since>6.26</since>
        </member>
        <member name="M:Rhino.Geometry.BrepFace.CreateExtrusion(Rhino.Geometry.Curve,System.Boolean)">
            <summary>
            Extrude a face in a Brep.
            </summary>
            <param name="pathCurve">The path to extrude along. Note, the direction of the extrusion will follow the direction of the curve.</param>
            <param name="cap">If true, the extrusion is capped with a translation of the face being extruded</param>
            <returns>A Brep on success or null on failure.</returns>
            <since>5.3</since>
        </member>
        <member name="T:Rhino.Geometry.BrepFace.ShrinkDisableSide">
            <summary>
            Defines bitwise mask flags indicating what side of a surface to not shrink.
            </summary>
            <since>6.0</since>
        </member>
        <member name="F:Rhino.Geometry.BrepFace.ShrinkDisableSide.ShrinkAllSides">
            <summary>
            Shrink on all four sides.
            </summary>
        </member>
        <member name="F:Rhino.Geometry.BrepFace.ShrinkDisableSide.DoNotShrinkWestSide">
            <summary>
            Do not shrink on the west side of domain.
            </summary>
        </member>
        <member name="F:Rhino.Geometry.BrepFace.ShrinkDisableSide.DoNotShrinkSouthSide">
            <summary>
            Do not shrink on the south side of domain.
            </summary>
        </member>
        <member name="F:Rhino.Geometry.BrepFace.ShrinkDisableSide.DoNotShrinkEastSide">
            <summary>
            Do not shrink on the east side of domain.
            </summary>
        </member>
        <member name="F:Rhino.Geometry.BrepFace.ShrinkDisableSide.DoNotShrinkNorthSide">
            <summary>
            Do not shrink on the north side of domain.
            </summary>
        </member>
        <member name="M:Rhino.Geometry.BrepFace.ShrinkFace(Rhino.Geometry.BrepFace.ShrinkDisableSide)">
            <summary>
            Shrinks the underlying untrimmed surface of this Brep face close to trimming boundaries.
            Shrinking a surface is like extending smoothly, only backwards. knot of full multiplicity
            are added where you want the surface to be cut off. Then the remaining control points are
            thrown away.  
            </summary>
            <param name="disableSide">The side(s) of the surface to not shrink.</param>
            <returns>true on success, false on failure.</returns>
            <since>6.0</since>
        </member>
        <member name="M:Rhino.Geometry.BrepFace.SetDomain(System.Int32,Rhino.Geometry.Interval)">
            <summary>
            Sets the surface domain of this face.
            </summary>
            <param name="direction">Direction of face to set (0 = U, 1 = V).</param>
            <param name="domain">Domain to apply.</param>
            <returns>true on success, false on failure.</returns>
            <since>5.0</since>
        </member>
        <member name="M:Rhino.Geometry.BrepFace.DuplicateFace(System.Boolean)">
            <summary>
            Duplicate a face from the brep to create new single face brep.
            </summary>
            <param name="duplicateMeshes">If true, shading meshes will be copied as well.</param>
            <returns>A new single-face brep synonymous with the current Face.</returns>
            <since>5.0</since>
        </member>
        <member name="M:Rhino.Geometry.BrepFace.DuplicateSurface">
            <summary>
            Gets a copy to the untrimmed surface that this face is based on.
            </summary>
            <returns>A copy of this face's underlying surface.</returns>
            <since>5.0</since>
        </member>
        <member name="M:Rhino.Geometry.BrepFace.UnderlyingSurface">
            <summary>
            Gets the untrimmed surface that is the base of this face.
            </summary>
            <returns>A surface, or null on error.</returns>
            <since>5.0</since>
        </member>
        <member name="M:Rhino.Geometry.BrepFace.GetMesh(Rhino.Geometry.MeshType)">
            <summary>
            Obtains a reference to a specified type of mesh for this brep face.
            </summary>
            <param name="meshType">The mesh type.</param>
            <returns>A mesh.</returns>
            <since>5.0</since>
        </member>
        <member name="M:Rhino.Geometry.BrepFace.SetMesh(Rhino.Geometry.MeshType,Rhino.Geometry.Mesh)">
            <summary>
            Sets a reference to a specified type of mesh for this brep face.
            </summary>
            <param name="meshType">The mesh type.</param>
            <param name="mesh">The new mesh.</param>
            <returns>true if the operation succeeded; otherwise false.</returns>
            <since>5.0</since>
        </member>
        <member name="M:Rhino.Geometry.BrepFace.AdjacentEdges">
            <summary>
            Gets the indices of all the BrepEdges that delineate this Face.
            </summary>
            <since>5.0</since>
        </member>
        <member name="M:Rhino.Geometry.BrepFace.AdjacentFaces">
            <summary>
            Gets the indices of all the BrepFaces that surround (are adjacent to) this face.
            </summary>
            <since>5.0</since>
        </member>
        <member name="P:Rhino.Geometry.BrepFace.Id">
            <summary>
            Gets or sets the persistent id of this Brep face. By default, the id is Guid.Zero.
            Note, Rhino does not set this id. Thus, the property is available for use 
            as a way of tracking Brep faces.
            </summary>
            <since>7.7</since>
        </member>
        <member name="P:Rhino.Geometry.BrepFace.PerFaceColor">
            <summary>
            If per-face color is "Empty", then this face does not have a custom color
            </summary>
            <since>7.0</since>
        </member>
        <member name="M:Rhino.Geometry.BrepFace.ClearMaterialChannelIndex">
            <summary>
            Clear this face's rendering material channel index.
            </summary>
            <since>6.26</since>
        </member>
        <member name="T:Rhino.Geometry.Collections.BrepVertexList">
            <summary>
            Provides access to all the Vertices in a Brep object
            </summary>
        </member>
        <member name="P:Rhino.Geometry.Collections.BrepVertexList.Count">
            <summary>
            Gets the number of brep vertices.
            </summary>
            <since>5.4</since>
        </member>
        <member name="P:Rhino.Geometry.Collections.BrepVertexList.Item(System.Int32)">
            <summary>
            Gets the BrepVertex at the given index. 
            The index must be valid or an IndexOutOfRangeException will be thrown.
            </summary>
            <param name="index">Index of BrepVertex to access.</param>
            <exception cref="T:System.IndexOutOfRangeException">Thrown when the index is invalid.</exception>
            <returns>The BrepVertex at [index].</returns>
        </member>
        <member name="M:Rhino.Geometry.Collections.BrepVertexList.Add">
            <summary>
            Create and add a new vertex to this list
            </summary>
            <returns></returns>
            <since>5.4</since>
        </member>
        <member name="M:Rhino.Geometry.Collections.BrepVertexList.Add(Rhino.Geometry.Point3d,System.Double)">
            <summary>
            Create and add a new vertex to this list
            </summary>
            <param name="point"></param>
            <param name="vertexTolerance">Use RhinoMath.UnsetTolerance if you are unsure</param>
            <returns></returns>
            <since>5.4</since>
        </member>
        <member name="M:Rhino.Geometry.Collections.BrepVertexList.AddPointOnFace(Rhino.Geometry.BrepFace,System.Double,System.Double)">
            <summary>Adds a new point on face to the brep</summary>
            <param name="face">face that vertex lies on</param>
            <param name="s">surface parameters</param>
            <param name="t">surface parameters</param>
            <returns>new vertex that represents the point on face</returns>
            <remarks>
            If a vertex is a point on a face, then brep.Edges[edge_index] will
            be an edge with no 3d curve.  This edge will have a single
            trim with type BrepTrimType.CurveOnSurface.  There will be a loop
            containing this single trim.
            </remarks>
            <since>5.4</since>
        </member>
        <member name="M:Rhino.Geometry.Collections.BrepVertexList.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Gets the same enumerator as <see cref="M:Rhino.Geometry.Collections.BrepVertexList.GetEnumerator"/>.
            </summary>
            <returns>The enumerator.</returns>
            <since>5.4</since>
        </member>
        <member name="M:Rhino.Geometry.Collections.BrepVertexList.GetEnumerator">
            <summary>
            Gets an enumerator that visits all surfaces.
            </summary>
            <returns>The enumerator.</returns>
            <since>5.4</since>
        </member>
        <member name="T:Rhino.Geometry.Collections.BrepFaceList">
            <summary>
            Provides access to all the Faces in a Brep object.
            </summary>
        </member>
        <member name="P:Rhino.Geometry.Collections.BrepFaceList.Count">
            <summary>
            Gets the number of brep faces.
            </summary>
            <since>5.0</since>
        </member>
        <member name="P:Rhino.Geometry.Collections.BrepFaceList.Item(System.Int32)">
            <summary>
            Gets the BrepFace at the given index. 
            The index must be valid or an IndexOutOfRangeException will be thrown.
            </summary>
            <param name="index">Index of BrepFace to access.</param>
            <exception cref="T:System.IndexOutOfRangeException">Thrown when the index is invalid.</exception>
            <returns>The BrepFace at [index].</returns>
        </member>
        <member name="M:Rhino.Geometry.Collections.BrepFaceList.ShrinkFaces">
            <summary>
            Shrinks all the underlying surfaces in this Brep. 
            Sometimes the surfaces extend far beyond the trimming boundaries of the Brep Face. 
            This function will remove those portions of the surfaces that are not used.
            </summary>
            <returns>true on success, false on failure.</returns>
            <since>5.0</since>
        </member>
        <member name="M:Rhino.Geometry.Collections.BrepFaceList.Flip(System.Boolean)">
            <summary>
            Flips the orientation of faces.
            </summary>
            <param name="onlyReversedFaces">
            If true, clears all BrepFace.OrientationIsReversed flags by calling BrepFace.Transpose()
            on each face with a true OrientationIsReversed setting.
            If false, all of the faces are flipped regardless of their orientation.
            </param>
            <since>5.0</since>
        </member>
        <member name="M:Rhino.Geometry.Collections.BrepFaceList.RemoveAt(System.Int32)">
            <summary>
            Deletes a face at a specified index.
            </summary>
            <param name="faceIndex">The index of the mesh face.</param>
            <since>5.0</since>
        </member>
        <member name="M:Rhino.Geometry.Collections.BrepFaceList.ExtractFace(System.Int32)">
            <summary>
            Extracts a face from a Brep.
            </summary>
            <param name="faceIndex">A face index</param>
            <returns>A brep. This can be null.</returns>
            <since>5.0</since>
        </member>
        <member name="M:Rhino.Geometry.Collections.BrepFaceList.StandardizeFaceSurface(System.Int32)">
            <summary>
            Standardizes the relationship between a BrepFace and the 3d surface it
            uses.  When done, the face will be the only face that references its 3d
            surface, and the orientations of the face and 3d surface will be the same. 
            </summary>
            <param name="faceIndex">The index of the face.</param>
            <returns>true if successful.</returns>
            <since>5.0</since>
        </member>
        <member name="M:Rhino.Geometry.Collections.BrepFaceList.StandardizeFaceSurfaces">
            <summary>Standardize all faces in the brep.</summary>
            <since>5.0</since>
        </member>
        <member name="M:Rhino.Geometry.Collections.BrepFaceList.Add(System.Int32)">
            <summary>
            Create and add a new face to this list. An incomplete face is added.
            The caller must create and fill in the loops used by the face.
            </summary>
            <param name="surfaceIndex">index of surface in brep's Surfaces list</param>
            <returns></returns>
            <since>5.4</since>
        </member>
        <member name="M:Rhino.Geometry.Collections.BrepFaceList.Add(Rhino.Geometry.Surface)">
            <summary>
            Add a new face to a brep.  This creates a complete face with
            new vertices at the surface corners, new edges along the surface
            boundary, etc.  The loop of the returned face has four trims that
            correspond to the south, east, north, and west side of the 
            surface in that order.  If you use this version of Add to
            add an exiting brep, then you are responsible for using a tool
            like JoinEdges() to hook the new face to its neighbors.
            </summary>
            <param name="surface">surface is copied</param>
            <returns></returns>
            <since>5.4</since>
        </member>
        <member name="M:Rhino.Geometry.Collections.BrepFaceList.AddRuledFace(Rhino.Geometry.BrepEdge,System.Boolean,Rhino.Geometry.BrepEdge,System.Boolean)">
            <summary>
            Add a new face to the brep whose surface geometry is a 
            ruled surface between two edges.
            </summary>
            <param name="edgeA">
            The south side of the face's surface will run along edgeA.
            </param>
            <param name="revEdgeA">
            true if the new face's outer boundary orientation along
            edgeA is opposite the orientation of edgeA.
            </param>
            <param name="edgeB">
            The north side of the face's surface will run along edgeA
            </param>
            <param name="revEdgeB">
            true if the new face's outer boundary orientation along
            edgeB is opposite the orientation of edgeB
            </param>
            <returns></returns>
            <since>5.4</since>
        </member>
        <member name="M:Rhino.Geometry.Collections.BrepFaceList.AddConeFace(Rhino.Geometry.BrepVertex,Rhino.Geometry.BrepEdge,System.Boolean)">
            <summary>
            Add a new face to the brep whose surface geometry is a 
            ruled cone with the edge as the base and the vertex as
            the apex point.
            </summary>
            <param name="vertex">
            The apex of the cone will be at this vertex.
            The north side of the surface's parameter
            space will be a singular point at the vertex.
            </param>
            <param name="edge">
            The south side of the face's surface will run along this edge.
            </param>
            <param name="revEdge">
            true if the new face's outer boundary orientation along
            the edge is opposite the orientation of edge.
            </param>
            <returns></returns>
            <since>5.4</since>
        </member>
        <member name="M:Rhino.Geometry.Collections.BrepFaceList.RemoveSlits">
            <summary>
            Remove slit trims and slit boundaries from each face.
            </summary>
            <returns>true if any slits were removed</returns>
            <since>5.10</since>
        </member>
        <member name="M:Rhino.Geometry.Collections.BrepFaceList.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Gets the same enumerator as <see cref="M:Rhino.Geometry.Collections.BrepFaceList.GetEnumerator"/>.
            </summary>
            <returns>The enumerator.</returns>
            <since>5.0</since>
        </member>
        <member name="M:Rhino.Geometry.Collections.BrepFaceList.GetEnumerator">
            <summary>
            Gets an enumerators that yields <see cref="T:Rhino.Geometry.BrepFace"/> objects.
            </summary>
            <returns>The enumerator.</returns>
            <since>5.0</since>
        </member>
        <member name="T:Rhino.Geometry.Collections.BrepSurfaceList">
            <summary>
            Provides access to all the underlying surfaces in a Brep object.
            </summary>
        </member>
        <member name="P:Rhino.Geometry.Collections.BrepSurfaceList.Count">
            <summary>
            Gets the number of surfaces in a brep.
            </summary>
            <since>5.4</since>
        </member>
        <member name="P:Rhino.Geometry.Collections.BrepSurfaceList.Item(System.Int32)">
            <summary>
            Gets the Surface at the given index. 
            The index must be valid or an IndexOutOfRangeException will be thrown.
            </summary>
            <param name="index">Index of Surface to access.</param>
            <exception cref="T:System.IndexOutOfRangeException">Thrown when the index is invalid.</exception>
            <returns>The Surface at [index].</returns>
        </member>
        <member name="M:Rhino.Geometry.Collections.BrepSurfaceList.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Gets the same enumerator as <see cref="M:Rhino.Geometry.Collections.BrepSurfaceList.GetEnumerator"/>.
            </summary>
            <returns>The enumerator.</returns>
            <since>5.4</since>
        </member>
        <member name="M:Rhino.Geometry.Collections.BrepSurfaceList.GetEnumerator">
            <summary>
            Gets an enumerator that visits all surfaces.
            </summary>
            <returns>The enumerator.</returns>
            <since>5.4</since>
        </member>
        <member name="T:Rhino.Geometry.Collections.BrepCurveList">
            <summary>
            Provides access to all the underlying curves in a Brep object.
            </summary>
        </member>
        <member name="P:Rhino.Geometry.Collections.BrepCurveList.Count">
            <summary>Gets the number of curves in this list.</summary>
            <since>5.6</since>
        </member>
        <member name="P:Rhino.Geometry.Collections.BrepCurveList.Item(System.Int32)">
            <summary>
            Gets the Curve at the given index. 
            The index must be valid or an IndexOutOfRangeException will be thrown.
            </summary>
            <param name="index">Index of Curve to access.</param>
            <exception cref="T:System.IndexOutOfRangeException">Thrown when the index is invalid.</exception>
            <returns>The Curve at [index].</returns>
        </member>
        <member name="M:Rhino.Geometry.Collections.BrepCurveList.Add(Rhino.Geometry.Curve)">
            <summary>Adds a curve</summary>
            <param name="curve">A copy of the curve is added to this brep</param>
            <returns>
            Index that should be used to reference the geometry.
            <para>-1 is returned if the input is not acceptable.</para>
            </returns>
            <since>5.6</since>
        </member>
        <member name="M:Rhino.Geometry.Collections.BrepCurveList.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Gets the same enumerator as <see cref="M:Rhino.Geometry.Collections.BrepCurveList.GetEnumerator"/>.
            </summary>
            <returns>The enumerator.</returns>
            <since>5.6</since>
        </member>
        <member name="M:Rhino.Geometry.Collections.BrepCurveList.GetEnumerator">
            <summary>Get an enumerator that visits all curves.</summary>
            <returns>The enumerator.</returns>
            <since>5.6</since>
        </member>
        <member name="T:Rhino.Geometry.Collections.BrepEdgeList">
            <summary>
            Provides access to all the Edges in a Brep object.
            </summary>
        </member>
        <member name="P:Rhino.Geometry.Collections.BrepEdgeList.Count">
            <summary>
            Gets the number of brep edges.
            </summary>
            <since>5.0</since>
        </member>
        <member name="P:Rhino.Geometry.Collections.BrepEdgeList.Item(System.Int32)">
            <summary>
            Gets the BrepEdge at the given index. 
            The index must be valid or an IndexOutOfRangeException will be thrown.
            </summary>
            <param name="index">Index of BrepEdge to access.</param>
            <exception cref="T:System.IndexOutOfRangeException">Thrown when the index is invalid.</exception>
            <returns>The BrepEdge at [index].</returns>
        </member>
        <member name="M:Rhino.Geometry.Collections.BrepEdgeList.Add(System.Int32)">
            <summary>
            Create and add a new edge to this list
            </summary>
            <param name="curve3dIndex"></param>
            <returns></returns>
            <since>5.4</since>
        </member>
        <member name="M:Rhino.Geometry.Collections.BrepEdgeList.Add(Rhino.Geometry.BrepVertex,Rhino.Geometry.BrepVertex,System.Int32,Rhino.Geometry.Interval,System.Double)">
            <summary>
            Create and add a new edge to this list
            </summary>
            <param name="startVertex"></param>
            <param name="endVertex"></param>
            <param name="curve3dIndex"></param>
            <param name="subDomain"></param>
            <param name="edgeTolerance"></param>
            <returns></returns>
            <since>5.4</since>
        </member>
        <member name="M:Rhino.Geometry.Collections.BrepEdgeList.Add(Rhino.Geometry.BrepVertex,Rhino.Geometry.BrepVertex,System.Int32,System.Double)">
            <summary>
            Create and add a new edge to this list
            </summary>
            <param name="startVertex"></param>
            <param name="endVertex"></param>
            <param name="curve3dIndex"></param>
            <param name="edgeTolerance"></param>
            <returns></returns>
            <since>5.4</since>
        </member>
        <member name="M:Rhino.Geometry.Collections.BrepEdgeList.Add(System.Int32,System.Int32,System.Int32,Rhino.Geometry.Interval,System.Double)">
            <summary>
            Create and add a new edge to this list
            </summary>
            <param name="startVertexIndex"></param>
            <param name="endVertexIndex"></param>
            <param name="curve3dIndex"></param>
            <param name="subDomain"></param>
            <param name="edgeTolerance"></param>
            <returns></returns>
            <since>5.6</since>
        </member>
        <member name="M:Rhino.Geometry.Collections.BrepEdgeList.Add(System.Int32,System.Int32,System.Int32,System.Double)">
            <summary>
            Create and add a new edge to this list
            </summary>
            <param name="startVertexIndex"></param>
            <param name="endVertexIndex"></param>
            <param name="curve3dIndex"></param>
            <param name="edgeTolerance"></param>
            <returns></returns>
            <since>5.6</since>
        </member>
        <member name="M:Rhino.Geometry.Collections.BrepEdgeList.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Gets the same enumerator as <see cref="M:Rhino.Geometry.Collections.BrepEdgeList.GetEnumerator"/>.
            </summary>
            <returns>The enumerator.</returns>
            <since>5.0</since>
        </member>
        <member name="M:Rhino.Geometry.Collections.BrepEdgeList.GetEnumerator">
            <summary>
            Gets an enumerator that visits all edges.
            </summary>
            <returns>The enumerator.</returns>
            <since>5.0</since>
        </member>
        <member name="T:Rhino.Geometry.Collections.BrepTrimList">
            <summary>
            Provides access to all the Trims in a Brep object
            </summary>
        </member>
        <member name="P:Rhino.Geometry.Collections.BrepTrimList.Count">
            <summary>
            Gets the number of brep trims.
            </summary>
            <since>5.1</since>
        </member>
        <member name="P:Rhino.Geometry.Collections.BrepTrimList.Item(System.Int32)">
            <summary>
            Gets the BrepTrim at the given index. 
            The index must be valid or an IndexOutOfRangeException will be thrown.
            </summary>
            <param name="index">Index of BrepTrim to access.</param>
            <exception cref="T:System.IndexOutOfRangeException">Thrown when the index is invalid.</exception>
            <returns>The BrepTrim at [index].</returns>
        </member>
        <member name="M:Rhino.Geometry.Collections.BrepTrimList.Add(System.Int32)">
            <summary>
            Add a new trim that will be part of an inner, outer, or slit loop
            to the brep.
            </summary>
            <param name="curve2dIndex">index of 2d trimming curve</param>
            <returns>New Trim</returns>
            <remarks>
            You should set the trim's Tolerance, TrimType, and IsoStatus values.
            In general, you should try to use the
            Add( edge, bRev3d, loop, c2i ) version of NewTrim.
            If you want to add a singular trim, use AddSingularTrim.
            If you want to add a curve-on-surface trim, use AddCurveOnFace.
            If you want to add a point-on-surface trim, use AddPointOnFace.
            </remarks>
            <since>5.4</since>
        </member>
        <member name="M:Rhino.Geometry.Collections.BrepTrimList.Add(System.Boolean,Rhino.Geometry.BrepLoop,System.Int32)">
            <summary>
            Add a new trim that will be part of an inner, outer, or slit loop
            to the brep
            </summary>
            <param name="rev3d">
            true if the edge and trim have opposite directions
            </param>
            <param name="loop">trim is appended to this loop</param>
            <param name="curve2dIndex">index of 2d trimming curve</param>
            <returns>new trim</returns>
            <since>5.4</since>
        </member>
        <member name="M:Rhino.Geometry.Collections.BrepTrimList.Add(System.Boolean,Rhino.Geometry.BrepEdge,System.Int32)">
            <summary>
            Add a new trim that will be part of an inner, outer, or slit loop
            to the brep
            </summary>
            <param name="rev3d">
            true if the edge and trim have opposite directions
            </param>
            <param name="edge">3d edge associated with this trim</param>
            <param name="curve2dIndex">index of 2d trimming curve</param>
            <returns>new trim</returns>
            <since>5.4</since>
        </member>
        <member name="M:Rhino.Geometry.Collections.BrepTrimList.Add(Rhino.Geometry.BrepEdge,System.Boolean,Rhino.Geometry.BrepLoop,System.Int32)">
            <summary>
            Add a new trim that will be part of an inner, outer, or slit loop
            to the brep.
            </summary>
            <param name="edge">3d edge associated with this trim</param>
            <param name="rev3d">
            true if the edge and trim have opposite directions
            </param>
            <param name="loop">trim is appended to this loop</param>
            <param name="curve2dIndex">index of 2d trimming curve</param>
            <returns>new trim</returns>
            <since>5.4</since>
        </member>
        <member name="M:Rhino.Geometry.Collections.BrepTrimList.AddSingularTrim(Rhino.Geometry.BrepVertex,Rhino.Geometry.BrepLoop,Rhino.Geometry.IsoStatus,System.Int32)">
            <summary> Add a new singular trim to the brep. </summary>
            <param name="vertex">vertex along collapsed surface edge</param>
            <param name="loop">trim is appended to this loop</param>
            <param name="iso"></param>
            <param name="curve2dIndex">index of 2d trimming curve</param>
            <returns>new trim</returns>
            <since>5.4</since>
        </member>
        <member name="M:Rhino.Geometry.Collections.BrepTrimList.AddCurveOnFace(Rhino.Geometry.BrepFace,Rhino.Geometry.BrepEdge,System.Boolean,System.Int32)">
            <summary>Add a new curve on face to the brep</summary>
            <param name="face">face that curve lies on</param>
            <param name="edge">3d edge associated with this curve on surface</param>
            <param name="rev3d">
            true if the 3d edge and the 2d parameter space curve have opposite directions.
            </param>
            <param name="curve2dIndex">index of 2d curve in face's parameter space</param>
            <returns>new trim that represents the curve on surface</returns>
            <remarks>
            You should set the trim's tolerance and iso values.
            </remarks>
            <since>5.4</since>
        </member>
        <member name="M:Rhino.Geometry.Collections.BrepTrimList.MatchEnds">
            <summary>
            Matches the endpoints of all trims in the Brep.
            </summary>
            <returns>true if any trim's 2d curve is changed, false otherwise.</returns>
            <since>6.19</since>
        </member>
        <member name="M:Rhino.Geometry.Collections.BrepTrimList.MatchEnds(System.Int32)">
            <summary>
            Match the endpoints of a trim to the next and previous trim.
            </summary>
            <param name="trimIndex"></param>
            <returns>true if any trim's 2d curve is changed, false otherwise.</returns>
            <since>6.19</since>
        </member>
        <member name="M:Rhino.Geometry.Collections.BrepTrimList.MatchEnds(Rhino.Geometry.BrepTrim,Rhino.Geometry.BrepTrim)">
            <summary>
            Match the end of a trim to the start of the next trim.
            </summary>
            <param name="trim0">The Brep trim.</param>
            <param name="trim1">Brep trim that comes immediately after trim0 in the same loop.</param>
            <returns>true if either trim's 2d curve is changed, false otherwise.</returns>
            <since>6.19</since>
        </member>
        <member name="M:Rhino.Geometry.Collections.BrepTrimList.MatchEnds(Rhino.Geometry.BrepLoop)">
            <summary>
            Match the endpoints of all trims in a loop.
            </summary>
            <param name="loop">The Brep loop.</param>
            <returns>true if any trim's 2d curve is changed, false otherwise.</returns>
            <since>6.19</since>
        </member>
        <member name="M:Rhino.Geometry.Collections.BrepTrimList.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Gets the same enumerator as <see cref="M:Rhino.Geometry.Collections.BrepTrimList.GetEnumerator"/>.
            </summary>
            <returns>The enumerator.</returns>
            <since>5.1</since>
        </member>
        <member name="M:Rhino.Geometry.Collections.BrepTrimList.GetEnumerator">
            <summary>
            Gets an enumerator that visits all edges.
            </summary>
            <returns>The enumerator.</returns>
            <since>5.1</since>
        </member>
        <member name="T:Rhino.Geometry.Collections.BrepLoopList">
            <summary>
            Provides access to all the Loops in a Brep object.
            </summary>
        </member>
        <member name="P:Rhino.Geometry.Collections.BrepLoopList.Count">
            <summary>
            Gets the number of brep loops.
            </summary>
            <since>5.0</since>
        </member>
        <member name="P:Rhino.Geometry.Collections.BrepLoopList.Item(System.Int32)">
            <summary>
            Gets the BrepLoop at the given index. 
            The index must be valid or an IndexOutOfRangeException will be thrown.
            </summary>
            <param name="index">Index of BrepLoop to access.</param>
            <exception cref="T:System.IndexOutOfRangeException">Thrown when the index is invalid.</exception>
            <returns>The BrepLoop at [index].</returns>
        </member>
        <member name="M:Rhino.Geometry.Collections.BrepLoopList.Add(Rhino.Geometry.BrepLoopType)">
            <summary>
            Create a new empty boundary loop. The new loop will not be part of a face and
            will not include any trim curves.
            </summary>
            <param name="loopType"></param>
            <returns></returns>
            <since>5.4</since>
        </member>
        <member name="M:Rhino.Geometry.Collections.BrepLoopList.Add(Rhino.Geometry.BrepLoopType,Rhino.Geometry.BrepFace)">
            <summary>
            Create a new boundary loop on a face.  After you get this
            BrepLoop, you still need to create the vertices, edges, 
            and trims that define the loop.
            </summary>
            <param name="loopType"></param>
            <param name="face"></param>
            <returns>New loop that needs to be filled in</returns>
            <since>5.4</since>
        </member>
        <member name="M:Rhino.Geometry.Collections.BrepLoopList.AddOuterLoop(System.Int32)">
            <summary>
            Create a new outer boundary loop that runs along the sides
            of the face's surface.  All the necessary trims, edges,
            and vertices are created and added to the brep.
            </summary>
            <param name="faceIndex">
            index of face that needs an outer boundary
            that runs along the sides of its surface.
            </param>
            <returns>New outer boundary loop that is complete.</returns>
            <since>5.4</since>
        </member>
        <member name="M:Rhino.Geometry.Collections.BrepLoopList.AddPlanarFaceLoop(System.Int32,Rhino.Geometry.BrepLoopType,System.Collections.Generic.IEnumerable{Rhino.Geometry.Curve})">
            <summary>
            Add a planar trimming loop to a planar face
            </summary>
            <param name="faceIndex">
            index of planar face.  The underlying surface must be a PlaneSurface
            </param>
            <param name="loopType">
            type of loop to add.  If loopType is Unknown, then the loop direction
            is tested and the new loops type will be set to Outer or Inner.
            If the loopType is Outer, then the direction of the new loop is tested
            and flipped if it is clockwise. If the loopType is Inner, then the
            direction of the new loop is tested and flipped if it is counter-clockwise.
            </param>
            <param name="boundaryCurves">
            list of 3d curves that form a simple (no self intersections) closed
            curve.  These curves define the 3d edge geometry and should be near
            the planar surface.
            </param>
            <returns>new loop if successful</returns>
            <since>5.4</since>
        </member>
        <member name="M:Rhino.Geometry.Collections.BrepLoopList.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Gets the same enumerator as <see cref="M:Rhino.Geometry.Collections.BrepLoopList.GetEnumerator"/>.
            </summary>
            <returns>The enumerator.</returns>
            <since>5.0</since>
        </member>
        <member name="M:Rhino.Geometry.Collections.BrepLoopList.GetEnumerator">
            <summary>
            Gets an enumerator that visits all edges.
            </summary>
            <returns>The enumerator.</returns>
            <since>5.0</since>
        </member>
        <member name="T:Rhino.Geometry.Collections.MeshVertexList">
            <summary>
            Provides access to the vertices and vertex-related functionality of a mesh.
            </summary>
        </member>
        <member name="P:Rhino.Geometry.Collections.MeshVertexList.Count">
            <summary>
            Gets or sets the number of mesh vertices.
            </summary>
            <since>5.0</since>
        </member>
        <member name="P:Rhino.Geometry.Collections.MeshVertexList.Capacity">
            <summary>
            Gets or sets the total number of vertices the internal data structure can hold without resizing.
            </summary>
            <since>6.0</since>
        </member>
        <member name="P:Rhino.Geometry.Collections.MeshVertexList.Item(System.Int32)">
            <summary>
            Gets or sets the vertex at the given index. 
            The index must be valid or an IndexOutOfRangeException will be thrown.
            </summary>
            <param name="index">Index of control vertex to access.</param>
            <exception cref="T:System.IndexOutOfRangeException">Thrown when the index is invalid.</exception>
            <returns>The control vertex at [index].</returns>
        </member>
        <member name="P:Rhino.Geometry.Collections.MeshVertexList.UseDoublePrecisionVertices">
            <summary>
            Set to true if the vertices should be stored in double precision
            </summary>
            <since>6.4</since>
        </member>
        <member name="M:Rhino.Geometry.Collections.MeshVertexList.Clear">
            <summary>
            Clears the Vertex list on the mesh.
            </summary>
            <since>5.0</since>
        </member>
        <member name="M:Rhino.Geometry.Collections.MeshVertexList.Destroy">
            <summary>
            Releases all memory allocated to store faces. The list capacity will be 0 after this call.
            <para>Subsequent calls can add new items.</para>
            </summary>
            <since>6.0</since>
        </member>
        <member name="M:Rhino.Geometry.Collections.MeshVertexList.Add(System.Single,System.Single,System.Single)">
            <summary>
            Adds a new vertex to the end of the Vertex list.
            </summary>
            <param name="x">X component of new vertex coordinate.</param>
            <param name="y">Y component of new vertex coordinate.</param>
            <param name="z">Z component of new vertex coordinate.</param>
            <returns>The index of the newly added vertex.</returns>
            <example>
            <code source='examples\vbnet\ex_addmesh.vb' lang='vbnet'/>
            <code source='examples\cs\ex_addmesh.cs' lang='cs'/>
            <code source='examples\py\ex_addmesh.py' lang='py'/>
            </example>
            <since>5.0</since>
        </member>
        <member name="M:Rhino.Geometry.Collections.MeshVertexList.Add(System.Double,System.Double,System.Double)">
            <summary>
            Adds a new vertex to the end of the Vertex list.
            </summary>
            <param name="x">X component of new vertex coordinate.</param>
            <param name="y">Y component of new vertex coordinate.</param>
            <param name="z">Z component of new vertex coordinate.</param>
            <returns>The index of the newly added vertex.</returns>
            <example>
            <code source='examples\vbnet\ex_addmesh.vb' lang='vbnet'/>
            <code source='examples\cs\ex_addmesh.cs' lang='cs'/>
            <code source='examples\py\ex_addmesh.py' lang='py'/>
            </example>
            <since>5.0</since>
        </member>
        <member name="M:Rhino.Geometry.Collections.MeshVertexList.Add(Rhino.Geometry.Point3f)">
            <summary>
            Adds a new vertex to the end of the Vertex list.
            </summary>
            <param name="vertex">Location of new vertex.</param>
            <returns>The index of the newly added vertex.</returns>
            <since>5.0</since>
        </member>
        <member name="M:Rhino.Geometry.Collections.MeshVertexList.Add(Rhino.Geometry.Point3d)">
            <summary>
            Adds a new vertex to the end of the Vertex list.
            </summary>
            <param name="vertex">Location of new vertex.</param>
            <returns>The index of the newly added vertex.</returns>
            <since>5.0</since>
        </member>
        <member name="M:Rhino.Geometry.Collections.MeshVertexList.AddVertices(System.Collections.Generic.IEnumerable{Rhino.Geometry.Point3d})">
            <summary>
            Adds a series of new vertices to the end of the vertex list.
            <para>This overload accepts double-precision points.</para>
            </summary>
            <param name="vertices">A list, an array or any enumerable set of <see cref="T:Rhino.Geometry.Point3d"/>.</param>
            <since>5.0</since>
        </member>
        <member name="M:Rhino.Geometry.Collections.MeshVertexList.AddVertices(System.Collections.Generic.IEnumerable{Rhino.Geometry.Point3f})">
            <summary>
            Adds a series of new vertices to the end of the vertex list.
            <para>This overload accepts single-precision points.</para>
            </summary>
            <param name="vertices">A list, an array or any enumerable set of <see cref="T:Rhino.Geometry.Point3f"/>.</param>
            <since>5.0</since>
        </member>
        <member name="M:Rhino.Geometry.Collections.MeshVertexList.SetVertex(System.Int32,System.Single,System.Single,System.Single)">
            <summary>
            Sets or adds a vertex to the Vertex List.
            <para>If [index] is less than [Count], the existing vertex at [index] will be modified.</para>
            <para>If [index] equals [Count], a new vertex is appended to the end of the vertex list.</para> 
            <para>If [index] is larger than [Count], the function will return false.</para>
            </summary>
            <param name="index">Index of vertex to set.</param>
            <param name="x">X component of vertex location.</param>
            <param name="y">Y component of vertex location.</param>
            <param name="z">Z component of vertex location.</param>
            <returns>true on success, false on failure.</returns>
            <since>5.0</since>
        </member>
        <member name="M:Rhino.Geometry.Collections.MeshVertexList.SetVertex(System.Int32,System.Double,System.Double,System.Double,System.Boolean)">
            <summary>
            Sets or adds a vertex to the Vertex List.
            <para>If [index] is less than [Count], the existing vertex at [index] will be modified.</para>
            <para>If [index] equals [Count], a new vertex is appended to the end of the vertex list.</para> 
            <para>If [index] is larger than [Count], the function will return false.</para>
            </summary>
            <param name="index">Index of vertex to set.</param>
            <param name="x">X component of vertex location.</param>
            <param name="y">Y component of vertex location.</param>
            <param name="z">Z component of vertex location.</param>
            <param name="updateNormals">Set to true if you'd like the vertex and face normals impacted by the change updated.</param>
            <returns>true on success, false on failure.</returns>
            <since>6.6</since>
        </member>
        <member name="M:Rhino.Geometry.Collections.MeshVertexList.SetVertex(System.Int32,System.Double,System.Double,System.Double)">
            <summary>
            Sets or adds a vertex to the Vertex List.
            <para>If [index] is less than [Count], the existing vertex at [index] will be modified.</para>
            <para>If [index] equals [Count], a new vertex is appended to the end of the vertex list.</para> 
            <para>If [index] is larger than [Count], the function will return false.</para>
            </summary>
            <param name="index">Index of vertex to set.</param>
            <param name="x">X component of vertex location.</param>
            <param name="y">Y component of vertex location.</param>
            <param name="z">Z component of vertex location.</param>
            <returns>true on success, false on failure.</returns>
            <since>5.0</since>
        </member>
        <member name="M:Rhino.Geometry.Collections.MeshVertexList.SetVertex(System.Int32,Rhino.Geometry.Point3f)">
            <summary>
            Sets or adds a vertex to the Vertex List.
            <para>If [index] is less than [Count], the existing vertex at [index] will be modified.</para>
            <para>If [index] equals [Count], a new vertex is appended to the end of the vertex list.</para> 
            <para>If [index] is larger than [Count], the function will return false.</para>
            </summary>
            <param name="index">Index of vertex to set.</param>
            <param name="vertex">Vertex location.</param>
            <returns>true on success, false on failure.</returns>
            <since>5.0</since>
        </member>
        <member name="M:Rhino.Geometry.Collections.MeshVertexList.SetVertex(System.Int32,Rhino.Geometry.Point3d)">
            <summary>
            Sets or adds a vertex to the Vertex List.
            <para>If [index] is less than [Count], the existing vertex at [index] will be modified.</para>
            <para>If [index] equals [Count], a new vertex is appended to the end of the vertex list.</para> 
            <para>If [index] is larger than [Count], the function will return false.</para>
            </summary>
            <param name="index">Index of vertex to set.</param>
            <param name="vertex">Vertex location.</param>
            <returns>true on success, false on failure.</returns>
            <since>5.0</since>
        </member>
        <member name="M:Rhino.Geometry.Collections.MeshVertexList.IsHidden(System.Int32)">
            <summary>
            Gets a value indicating whether or not a vertex is hidden.
            </summary>
            <param name="vertexIndex">Index of vertex to query.</param>
            <returns>true if the vertex is hidden, false if it is not.</returns>
            <since>5.0</since>
        </member>
        <member name="M:Rhino.Geometry.Collections.MeshVertexList.Hide(System.Int32)">
            <summary>
            Hides the vertex at the given index.
            </summary>
            <param name="vertexIndex">Index of vertex to hide.</param>
            <since>5.0</since>
        </member>
        <member name="M:Rhino.Geometry.Collections.MeshVertexList.Show(System.Int32)">
            <summary>
            Shows the vertex at the given index.
            </summary>
            <param name="vertexIndex">Index of vertex to show.</param>
            <since>5.0</since>
        </member>
        <member name="M:Rhino.Geometry.Collections.MeshVertexList.HideAll">
            <summary>
            Hides all vertices in the mesh.
            </summary>
            <since>5.0</since>
        </member>
        <member name="M:Rhino.Geometry.Collections.MeshVertexList.ShowAll">
            <summary>
            Shows all vertices in the mesh.
            </summary>
            <since>5.0</since>
        </member>
        <member name="M:Rhino.Geometry.Collections.MeshVertexList.CullUnused">
            <summary>
            Removes all vertices that are currently not used by the Face list.
            </summary>
            <returns>The number of unused vertices that were removed.</returns>
            <since>5.0</since>
        </member>
        <member name="M:Rhino.Geometry.Collections.MeshVertexList.CombineIdentical(System.Boolean,System.Boolean)">
            <summary>
            Merges identical vertices.
            </summary>
            <param name="ignoreNormals">
            If true, vertex normals will not be taken into consideration when comparing vertices.
            </param>
            <param name="ignoreAdditional">
            If true, texture coordinates, colors, and principal curvatures 
            will not be taken into consideration when comparing vertices.
            </param>
            <returns>
            true if the mesh is changed, in which case the mesh will have fewer vertices than before.
            </returns>
            <since>5.0</since>
        </member>
        <member name="M:Rhino.Geometry.Collections.MeshVertexList.GetVertexFaces(System.Int32)">
            <summary>
            Gets a list of all of the faces that share a given vertex.
            </summary>
            <param name="vertexIndex">The index of a vertex in the mesh.</param>
            <returns>An array of indices of faces on success, null on failure.</returns>
            <since>5.0</since>
        </member>
        <member name="M:Rhino.Geometry.Collections.MeshVertexList.GetTopologicalIndenticalVertices(System.Int32)">
            <summary>
            Gets a list of other vertices which are "topologically" identical
            to this vertex.
            </summary>
            <param name="vertexIndex">A vertex index in the mesh.</param>
            <returns>
            Array of indices of vertices that are topologically the same as this vertex. The
            array includes vertexIndex. Returns null on failure.
            </returns>
            <since>5.0</since>
        </member>
        <member name="M:Rhino.Geometry.Collections.MeshVertexList.GetConnectedVertices(System.Int32)">
            <summary>
            Gets indices of all vertices that form "edges" with a given vertex index.
            </summary>
            <param name="vertexIndex">The index of a vertex to query.</param>
            <returns>An array of vertex indices that are connected with the specified vertex.</returns>
            <since>5.0</since>
        </member>
        <member name="M:Rhino.Geometry.Collections.MeshVertexList.Point3dAt(System.Int32)">
            <summary>
            Get double precision location at a given index
            </summary>
            <param name="index"></param>
            <returns></returns>
            <since>6.4</since>
        </member>
        <member name="M:Rhino.Geometry.Collections.MeshVertexList.ToPoint3fArray">
            <summary>
            Copies all vertices to a new array of <see cref="T:Rhino.Geometry.Point3f"/>.
            </summary>
            <returns>A new array.</returns>
            <since>5.0</since>
        </member>
        <member name="M:Rhino.Geometry.Collections.MeshVertexList.ToPoint3dArray">
            <summary>
            Copies all vertices to a new array of <see cref="T:Rhino.Geometry.Point3d"/>.
            </summary>
            <returns>A new array.</returns>
            <since>5.0</since>
        </member>
        <member name="M:Rhino.Geometry.Collections.MeshVertexList.ToFloatArray">
            <summary>
            Copies all vertices to a linear array of float in x,y,z order
            </summary>
            <returns>The float array.</returns>
            <since>5.9</since>
        </member>
        <member name="M:Rhino.Geometry.Collections.MeshVertexList.Remove(System.Int32,System.Boolean)">
            <summary>
            Removes the vertex at the given index and all faces that reference that index.
            </summary>
            <param name="index">Index of vertex to remove.</param>
            <param name="shrinkFaces">If true, quads that reference the deleted vertex will be converted to triangles.</param>
            <returns>true on success, false on failure.</returns>
            <since>5.0</since>
        </member>
        <member name="M:Rhino.Geometry.Collections.MeshVertexList.Remove(System.Collections.Generic.IEnumerable{System.Int32},System.Boolean)">
            <summary>
            Removes the vertices at the given indices and all faces that reference those vertices.
            </summary>
            <param name="indices">Vertex indices to remove.</param>
            <param name="shrinkFaces">If true, quads that reference the deleted vertex will be converted to triangles.</param>
            <returns>true on success, false on failure.</returns>
            <since>5.0</since>
        </member>
        <member name="M:Rhino.Geometry.Collections.MeshVertexList.System#Collections#Generic#ICollection{Rhino#Geometry#Point3f}#Add(Rhino.Geometry.Point3f)">
            <since>5.0</since>
        </member>
        <member name="M:Rhino.Geometry.Collections.MeshVertexList.GetEnumerator">
            <summary>
            Gets an enumerator that yields all mesh vertices (points) in this collection.
            </summary>
            <returns>The enumerator.</returns>
            <since>5.0</since>
        </member>
        <member name="M:Rhino.Geometry.Collections.MeshVertexList.System#Collections#IEnumerable#GetEnumerator">
            <since>5.0</since>
        </member>
        <member name="T:Rhino.Geometry.Collections.MeshTopologyVertexList">
            <summary>
            Provides access to the mesh topology vertices of a mesh. Topology vertices are
            sets of vertices in the MeshVertexList that can topologically be considered the
            same vertex.
            </summary>
        </member>
        <member name="P:Rhino.Geometry.Collections.MeshTopologyVertexList.Count">
            <summary>
            Gets or sets the number of mesh topology vertices.
            </summary>
            <since>5.0</since>
        </member>
        <member name="P:Rhino.Geometry.Collections.MeshTopologyVertexList.Item(System.Int32)">
            <summary>
            Gets or sets the vertex at the given index. Setting a location adjusts all vertices
            in the mesh's vertex list that are defined by this topological vertex
            The index must be valid or an IndexOutOfRangeException will be thrown.
            </summary>
            <param name="index">Index of topology vertex to access.</param>
            <returns>The topological vertex at [index].</returns>
        </member>
        <member name="M:Rhino.Geometry.Collections.MeshTopologyVertexList.TopologyVertexIndex(System.Int32)">
            <summary>
            Gets the topology vertex index for an existing mesh vertex in the mesh's
            VertexList.
            </summary>
            <param name="vertexIndex">Index of a vertex in the Mesh.Vertices.</param>
            <returns>Index of a topology vertex in the Mesh.TopologyVertices.</returns>
            <since>5.0</since>
        </member>
        <member name="M:Rhino.Geometry.Collections.MeshTopologyVertexList.MeshVertexIndices(System.Int32)">
            <summary>
            Gets all indices of the mesh vertices that a given topology vertex represents.
            </summary>
            <param name="topologyVertexIndex">Index of a topology vertex in Mesh.TopologyVertices to query.</param>
            <returns>
            Indices of all vertices that in Mesh.Vertices that a topology vertex represents.
            </returns>
            <since>5.0</since>
        </member>
        <member name="M:Rhino.Geometry.Collections.MeshTopologyVertexList.IndicesFromFace(System.Int32)">
            <summary>
            Returns TopologyVertexIndices for a given mesh face index.
            </summary>
            <param name="faceIndex">The index of a face to query.</param>
            <returns>An array of vertex indices.</returns>
            <since>5.0</since>
        </member>
        <member name="M:Rhino.Geometry.Collections.MeshTopologyVertexList.ConnectedTopologyVertices(System.Int32)">
            <summary>
            Gets all topological vertices that are connected to a given vertex.
            </summary>
            <param name="topologyVertexIndex">index of a topology vertex in Mesh.TopologyVertices.</param>
            <returns>
            Indices of all topological vertices that are connected to this topological vertex.
            null if no vertices are connected to this vertex.
            </returns>
            <since>5.0</since>
        </member>
        <member name="M:Rhino.Geometry.Collections.MeshTopologyVertexList.ConnectedTopologyVertices(System.Int32,System.Boolean)">
            <summary>
            Gets all topological vertices that are connected to a given vertex.
            </summary>
            <param name="topologyVertexIndex">index of a topology vertex in Mesh.TopologyVertices.</param>
            <param name="sorted">if true, the vertices are returned in a radially sorted order.</param>
            <returns>
            Indices of all topological vertices that are connected to this topological vertex.
            null if no vertices are connected to this vertex.
            </returns>
            <since>5.0</since>
        </member>
        <member name="M:Rhino.Geometry.Collections.MeshTopologyVertexList.SortEdges">
            <summary>
            Sorts the edge list for the mesh topology vertex list so that
            the edges are in radial order when you call ConnectedTopologyVertices.
            A non-manifold edge is treated as a boundary edge with respect
            to sorting.  If any boundary or non-manifold edges end at the
            vertex, then the first edge will be a boundary or non-manifold edge.
            </summary>
            <returns>true on success.</returns>
            <since>5.0</since>
        </member>
        <member name="M:Rhino.Geometry.Collections.MeshTopologyVertexList.SortEdges(System.Int32)">
            <summary>
            Sorts the edge list for as single mesh topology vertex so that
            the edges are in radial order when you call ConnectedTopologyVertices.
            A non-manifold edge is treated as a boundary edge with respect
            to sorting.  If any boundary or non-manifold edges end at the
            vertex, then the first edge will be a boundary or non-manifold edge.
            </summary>
            <param name="topologyVertexIndex">index of a topology vertex in Mesh.TopologyVertices></param>
            <returns>true on success.</returns>
            <since>5.0</since>
        </member>
        <member name="M:Rhino.Geometry.Collections.MeshTopologyVertexList.IsHidden(System.Int32)">
            <summary>
            Returns true if the topological vertex is hidden. The mesh topology
            vertex is hidden if and only if all the ON_Mesh vertices it represents is hidden.
            </summary>
            <param name="topologyVertexIndex">index of a topology vertex in Mesh.TopologyVertices.</param>
            <returns>true if mesh topology vertex is hidden.</returns>
            <since>5.0</since>
        </member>
        <member name="M:Rhino.Geometry.Collections.MeshTopologyVertexList.ConnectedFaces(System.Int32)">
            <summary>
            Gets all faces that are connected to a given vertex.
            </summary>
            <param name="topologyVertexIndex">Index of a topology vertex in Mesh.TopologyVertices.</param>
            <returns>
            Indices of all faces in Mesh.Faces that are connected to this topological vertex.
            null if no faces are connected to this vertex.
            </returns>
            <since>5.0</since>
        </member>
        <member name="M:Rhino.Geometry.Collections.MeshTopologyVertexList.ConnectedEdgesCount(System.Int32)">
            <summary>
            Gets the count of edges that are connected to a given vertex.
            </summary>
            <param name="topologyVertexIndex">Index of a topology vertex in Mesh.TopologyVertices.</param>
            <returns>The amount of edges at this vertex. This can be 0.</returns>
            <since>6.0</since>
        </member>
        <member name="M:Rhino.Geometry.Collections.MeshTopologyVertexList.ConnectedEdge(System.Int32,System.Int32)">
            <summary>
            Gets a particular edge that is connected to a topological vertex.
            <para>Call TopologyVertices.SortVertices before this if you are interested in ordered edges.</para>
            </summary>
            <param name="topologyVertexIndex">Index of a topology vertex in Mesh.TopologyVertices.</param>
            <param name="edgeAtVertexIndex">Index of the edge at the vertex.</param>
            <returns>
            The index of the connected edge.
            </returns>
            <since>6.0</since>
        </member>
        <member name="M:Rhino.Geometry.Collections.MeshTopologyVertexList.ConnectedEdges(System.Int32)">
            <summary>
            Gets all edges that are connected to a given vertex.
            <para>Call TopologyVertices.SortVertices before this if you are interested in ordered edges.</para>
            </summary>
            <param name="topologyVertexIndex">Index of a topology vertex in Mesh.TopologyVertices.</param>
            <returns>
            Indices of all edges around vertex that are connected to this topological vertex.
            null if no faces are connected to this vertex.
            </returns>
            <since>6.0</since>
        </member>
        <member name="M:Rhino.Geometry.Collections.MeshTopologyVertexList.GetEnumerator">
            <summary>
            Gets an enumerator that yields all topology vertices in this collection.
            </summary>
            <returns>The enumerator.</returns>
            <since>5.0</since>
        </member>
        <member name="M:Rhino.Geometry.Collections.MeshTopologyVertexList.System#Collections#IEnumerable#GetEnumerator">
            <since>5.0</since>
        </member>
        <member name="T:Rhino.Geometry.Collections.MeshTopologyEdgeList">
            <summary>
            Represents an entry point to the list of edges in a mesh topology.
            </summary>
        </member>
        <member name="P:Rhino.Geometry.Collections.MeshTopologyEdgeList.Count">
            <summary>
            Gets the amount of edges in this list.
            </summary>
            <since>5.0</since>
        </member>
        <member name="M:Rhino.Geometry.Collections.MeshTopologyEdgeList.GetTopologyVertices(System.Int32)">
            <summary>Gets the two topology vertices for a given topology edge.</summary>
            <param name="topologyEdgeIndex">An index of a topology edge.</param>
            <returns>The pair of vertex indices the edge connects.</returns>
            <since>5.0</since>
        </member>
        <member name="M:Rhino.Geometry.Collections.MeshTopologyEdgeList.GetConnectedFaces(System.Int32)">
            <summary>
            Gets indices of faces connected to an edge.
            </summary>
            <param name="topologyEdgeIndex">An index of a topology edge that is queried.</param>
            <returns>An array of face indices the edge borders. This might be empty on error.</returns>
            <since>5.0</since>
        </member>
        <member name="M:Rhino.Geometry.Collections.MeshTopologyEdgeList.GetConnectedFaces(System.Int32,System.Boolean[]@)">
            <summary>
            Gets indices of faces connected to an edge.
            </summary>
            <param name="topologyEdgeIndex">An index of a topology edge that is queried.</param>
            <param name="faceOrientationMatchesEdgeDirection">An array of Boolean values that explains whether each face direction matches the direction of the specified edge.</param>
            <returns>An array of face indices the edge borders. This might be empty on error.</returns>
            <since>5.0</since>
        </member>
        <member name="M:Rhino.Geometry.Collections.MeshTopologyEdgeList.GetEdgesForFace(System.Int32)">
            <summary>
            Gets indices of edges that surround a given face.
            </summary>
            <param name="faceIndex">A face index.</param>
            <returns>A new array of indices to the topological edges that are connected with the specified face.</returns>
            <since>5.0</since>
        </member>
        <member name="M:Rhino.Geometry.Collections.MeshTopologyEdgeList.GetEdgesForFace(System.Int32,System.Boolean[]@)">
            <summary>
            Gets indices of edges that surround a given face.
            </summary>
            <param name="faceIndex">A face index.</param>
            <param name="sameOrientation">
            Same length as returned edge index array. For each edge, the sameOrientation value
            tells you if the edge orientation matches the face orientation (true), or is
            reversed (false) compared to it.
            </param>
            <returns>A new array of indices to the topological edges that are connected with the specified face.</returns>
            <since>5.0</since>
        </member>
        <member name="M:Rhino.Geometry.Collections.MeshTopologyEdgeList.GetEdgeIndex(System.Int32,System.Int32)">
            <summary>
            Returns index of edge that connects topological vertices. 
            returns -1 if no edge is found.
            </summary>
            <param name="topologyVertex1">The first topology vertex index.</param>
            <param name="topologyVertex2">The second topology vertex index.</param>
            <returns>The edge index.</returns>
            <since>5.0</since>
        </member>
        <member name="M:Rhino.Geometry.Collections.MeshTopologyEdgeList.EdgeLine(System.Int32)">
            <summary>Gets the 3d line along an edge.</summary>
            <param name="topologyEdgeIndex">The topology edge index.</param>
            <returns>
            Line along edge. If input is not valid, an Invalid Line is returned.
            </returns>
            <since>5.0</since>
        </member>
        <member name="M:Rhino.Geometry.Collections.MeshTopologyEdgeList.CollapseEdge(System.Int32)">
            <summary>
            Replaces a mesh edge with a vertex at its center and update adjacent faces as needed.
            </summary>
            <param name="topologyEdgeIndex">An index of a topology edge in <see cref="P:Rhino.Geometry.Mesh.TopologyEdges"/>.</param>
            <returns>true if successful.</returns>
            <since>5.0</since>
        </member>
        <member name="M:Rhino.Geometry.Collections.MeshTopologyEdgeList.IsSwappableEdge(System.Int32)">
            <summary>
            Determines if a mesh edge index is valid input for <see cref="M:Rhino.Geometry.Collections.MeshTopologyEdgeList.SwapEdge(System.Int32)"/>.
            </summary>
            <param name="topologyEdgeIndex">An index of a topology edge in <see cref="P:Rhino.Geometry.Mesh.TopologyEdges"/>.</param>
            <returns>true if edge can be swapped.</returns>
            <since>5.0</since>
        </member>
        <member name="M:Rhino.Geometry.Collections.MeshTopologyEdgeList.SwapEdge(System.Int32)">
            <summary>
            If the edge is shared by two triangular face, then the edge is swapped.
            </summary>
            <param name="topologyEdgeIndex">An index of a topology edge in <see cref="P:Rhino.Geometry.Mesh.TopologyEdges"/>.</param>
            <returns>true if successful.</returns>
            <since>5.0</since>
        </member>
        <member name="M:Rhino.Geometry.Collections.MeshTopologyEdgeList.IsHidden(System.Int32)">
            <summary>
            Returns true if the topological edge is hidden. The mesh topology
            edge is hidden only if either of its mesh topology vertices is hidden.
            </summary>
            <param name="topologyEdgeIndex">An index of a topology edge in <see cref="P:Rhino.Geometry.Mesh.TopologyEdges"/>.</param>
            <returns>true if mesh topology edge is hidden.</returns>
            <since>5.0</since>
        </member>
        <member name="T:Rhino.Geometry.Collections.MeshVertexNormalList">
            <summary>
            Provides access to the Vertex Normals of a Mesh.
            </summary>
        </member>
        <member name="P:Rhino.Geometry.Collections.MeshVertexNormalList.Count">
            <summary>
            Gets or sets the number of mesh vertex normals.
            </summary>
            <since>5.0</since>
        </member>
        <member name="P:Rhino.Geometry.Collections.MeshVertexNormalList.Capacity">
            <summary>
            Gets or sets the amount of vertex normals that the list can hold without resizing.
            </summary>
            <since>6.0</since>
        </member>
        <member name="P:Rhino.Geometry.Collections.MeshVertexNormalList.Item(System.Int32)">
            <summary>
            Gets or sets the vertex at the given index. 
            The index must be valid or an IndexOutOfRangeException will be thrown.
            </summary>
            <param name="index">Index of control vertex to access.</param>
            <exception cref="T:System.IndexOutOfRangeException">Thrown when the index is invalid.</exception>
            <returns>The control vertex at [index].</returns>
        </member>
        <member name="M:Rhino.Geometry.Collections.MeshVertexNormalList.Clear">
            <summary>
            Clears the vertex normal collection on the mesh.
            </summary>
            <since>5.0</since>
        </member>
        <member name="M:Rhino.Geometry.Collections.MeshVertexNormalList.Destroy">
            <summary>
            Releases all memory allocated to store vertex normals. The list capacity will be 0 after this call.
            <para>Subsequent calls can add new items.</para>
            </summary>
            <since>6.0</since>
        </member>
        <member name="M:Rhino.Geometry.Collections.MeshVertexNormalList.Add(System.Single,System.Single,System.Single)">
            <summary>
            Adds a new vertex normal at the end of the list.
            </summary>
            <param name="x">X component of new vertex normal.</param>
            <param name="y">Y component of new vertex normal.</param>
            <param name="z">Z component of new vertex normal.</param>
            <returns>The index of the newly added vertex normal.</returns>
            <since>5.0</since>
        </member>
        <member name="M:Rhino.Geometry.Collections.MeshVertexNormalList.Add(System.Double,System.Double,System.Double)">
            <summary>
            Adds a new vertex normal at the end of the list.
            </summary>
            <param name="x">X component of new vertex normal.</param>
            <param name="y">Y component of new vertex normal.</param>
            <param name="z">Z component of new vertex normal.</param>
            <returns>The index of the newly added vertex normal.</returns>
            <since>5.0</since>
        </member>
        <member name="M:Rhino.Geometry.Collections.MeshVertexNormalList.Add(Rhino.Geometry.Vector3f)">
            <summary>
            Adds a new vertex normal at the end of the list.
            </summary>
            <param name="normal">new vertex normal.</param>
            <returns>The index of the newly added vertex normal.</returns>
            <since>5.0</since>
        </member>
        <member name="M:Rhino.Geometry.Collections.MeshVertexNormalList.Add(Rhino.Geometry.Vector3d)">
            <summary>
            Adds a new vertex normal at the end of the list.
            </summary>
            <param name="normal">new vertex normal.</param>
            <returns>The index of the newly added vertex normal.</returns>
            <since>5.0</since>
        </member>
        <member name="M:Rhino.Geometry.Collections.MeshVertexNormalList.AddRange(Rhino.Geometry.Vector3f[])">
            <summary>
            Appends a collection of normal vectors.
            </summary>
            <param name="normals">Normals to append.</param>
            <returns>true on success, false on failure.</returns>
            <since>5.0</since>
        </member>
        <member name="M:Rhino.Geometry.Collections.MeshVertexNormalList.SetNormal(System.Int32,System.Single,System.Single,System.Single)">
            <summary>
            Sets or adds a normal to the list.
            <para>If [index] is less than [Count], the existing vertex normal at [index] will be modified.</para>
            <para>If [index] equals [Count], a new vertex normal is appended to the end of the list.</para> 
            <para>If [index] is larger than [Count], the function will return false.</para>
            </summary>
            <param name="index">Index of vertex normal to set.</param>
            <param name="x">X component of vertex normal.</param>
            <param name="y">Y component of vertex normal.</param>
            <param name="z">Z component of vertex normal.</param>
            <returns>true on success, false on failure.</returns>
            <since>5.0</since>
        </member>
        <member name="M:Rhino.Geometry.Collections.MeshVertexNormalList.SetNormal(System.Int32,System.Double,System.Double,System.Double)">
            <summary>
            Sets or adds a vertex normal to the list.
            <para>If [index] is less than [Count], the existing vertex normal at [index] will be modified.</para>
            <para>If [index] equals [Count], a new vertex normal is appended to the end of the list.</para> 
            <para>If [index] is larger than [Count], the function will return false.</para>
            </summary>
            <param name="index">Index of vertex normal to set.</param>
            <param name="x">X component of vertex normal.</param>
            <param name="y">Y component of vertex normal.</param>
            <param name="z">Z component of vertex normal.</param>
            <returns>true on success, false on failure.</returns>
            <since>5.0</since>
        </member>
        <member name="M:Rhino.Geometry.Collections.MeshVertexNormalList.SetNormal(System.Int32,Rhino.Geometry.Vector3f)">
            <summary>
            Sets or adds a vertex normal to the list.
            <para>If [index] is less than [Count], the existing vertex normal at [index] will be modified.</para>
            <para>If [index] equals [Count], a new vertex normal is appended to the end of the vertex list.</para> 
            <para>If [index] is larger than [Count], the function will return false.</para>
            </summary>
            <param name="index">Index of vertex normal to set.</param>
            <param name="normal">The new normal at the index.</param>
            <returns>true on success, false on failure.</returns>
            <since>5.0</since>
        </member>
        <member name="M:Rhino.Geometry.Collections.MeshVertexNormalList.SetNormal(System.Int32,Rhino.Geometry.Vector3d)">
            <summary>
            Sets or adds a vertex normal to the list.
            <para>If [index] is less than [Count], the existing vertex normal at [index] will be modified.</para>
            <para>If [index] equals [Count], a new vertex normal is appended to the end of the list.</para> 
            <para>If [index] is larger than [Count], the function will return false.</para>
            </summary>
            <param name="index">Index of vertex normal to set.</param>
            <param name="normal">The new normal at the index.</param>
            <returns>true on success, false on failure.</returns>
            <since>5.0</since>
        </member>
        <member name="M:Rhino.Geometry.Collections.MeshVertexNormalList.SetNormals(Rhino.Geometry.Vector3f[])">
            <summary>
            Sets all normal vectors in one go. This method destroys the current normal array if it exists.
            </summary>
            <param name="normals">Normals for the entire mesh.</param>
            <returns>true on success, false on failure.</returns>
            <since>5.0</since>
        </member>
        <member name="M:Rhino.Geometry.Collections.MeshVertexNormalList.ToFloatArray">
            <summary>
            Copies all vertex normals to a linear array of float in x,y,z order
            </summary>
            <returns>The float array.</returns>
            <since>6.0</since>
        </member>
        <member name="M:Rhino.Geometry.Collections.MeshVertexNormalList.ComputeNormals">
            <summary>
            Computes the vertex normals based on the physical shape of the mesh.
            </summary>
            <returns>true on success, false on failure.</returns>
            <example>
            <code source='examples\vbnet\ex_addmesh.vb' lang='vbnet'/>
            <code source='examples\cs\ex_addmesh.cs' lang='cs'/>
            <code source='examples\py\ex_addmesh.py' lang='py'/>
            </example>
            <since>5.0</since>
        </member>
        <member name="M:Rhino.Geometry.Collections.MeshVertexNormalList.UnitizeNormals">
            <summary>
            Unitizes all vertex normals.
            </summary>
            <returns>true on success, false on failure.</returns>
            <since>5.0</since>
        </member>
        <member name="M:Rhino.Geometry.Collections.MeshVertexNormalList.Flip">
            <summary>
            Reverses direction of all vertex normals
            <para>This is the same as Mesh.Flip(true, false, false)</para>
            </summary>
            <since>5.0</since>
        </member>
        <member name="M:Rhino.Geometry.Collections.MeshVertexNormalList.System#Collections#Generic#ICollection{Rhino#Geometry#Vector3f}#Add(Rhino.Geometry.Vector3f)">
            <since>5.0</since>
        </member>
        <member name="M:Rhino.Geometry.Collections.MeshVertexNormalList.GetEnumerator">
            <summary>
            Gets an enumerator that yields all normals (vectors) in this collection.
            </summary>
            <returns>The enumerator.</returns>
            <since>5.0</since>
        </member>
        <member name="M:Rhino.Geometry.Collections.MeshVertexNormalList.System#Collections#IEnumerable#GetEnumerator">
            <since>5.0</since>
        </member>
        <member name="T:Rhino.Geometry.Collections.MeshFaceList">
            <summary>
            Provides access to the faces and Face related functionality of a Mesh.
            </summary>
        </member>
        <member name="P:Rhino.Geometry.Collections.MeshFaceList.Count">
            <summary>
            Gets or sets the number of mesh faces. When getting this can includes invalid faces.
            </summary>
            <since>5.0</since>
        </member>
        <member name="P:Rhino.Geometry.Collections.MeshFaceList.QuadCount">
            <summary>
            Gets the number of faces that are valid quads (4 corners).
            </summary>
            <since>5.0</since>
        </member>
        <member name="P:Rhino.Geometry.Collections.MeshFaceList.TriangleCount">
            <summary>
            Gets the number of faces that are valid triangles (3 corners).
            </summary>
            <since>5.0</since>
        </member>
        <member name="P:Rhino.Geometry.Collections.MeshFaceList.VertexCount">
            <summary>
            Gets the number of vertices in the mesh of this face list
            </summary>
        </member>
        <member name="P:Rhino.Geometry.Collections.MeshFaceList.Capacity">
            <summary>
            Gets or sets the total number of mesh triangles and quads the internal data structure can hold without resizing.
            </summary>
            <since>6.0</since>
        </member>
        <member name="M:Rhino.Geometry.Collections.MeshFaceList.Clear">
            <summary>
            Clears the Face list on the mesh.
            </summary>
            <since>5.0</since>
        </member>
        <member name="M:Rhino.Geometry.Collections.MeshFaceList.Destroy">
            <summary>
            Releases all memory allocated to store faces. The list capacity will be 0 after this call.
            <para>Subsequent calls can add new items.</para>
            </summary>
            <since>6.0</since>
        </member>
        <member name="M:Rhino.Geometry.Collections.MeshFaceList.AddFace(Rhino.Geometry.MeshFace)">
            <summary>
            Appends a new mesh face to the end of the mesh face list.
            </summary>
            <param name="face">Face to add.</param>
            <returns>The index of the newly added face.</returns>
            <since>5.0</since>
        </member>
        <member name="M:Rhino.Geometry.Collections.MeshFaceList.AddFace(System.Int32,System.Int32,System.Int32)">
            <summary>
            Appends a new triangular face to the end of the mesh face list.
            </summary>
            <param name="vertex1">Index of first face corner.</param>
            <param name="vertex2">Index of second face corner.</param>
            <param name="vertex3">Index of third face corner.</param>
            <returns>The index of the newly added triangle.</returns>
            <since>5.0</since>
        </member>
        <member name="M:Rhino.Geometry.Collections.MeshFaceList.AddFace(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Appends a new quadrangular face to the end of the mesh face list.
            </summary>
            <param name="vertex1">Index of first face corner.</param>
            <param name="vertex2">Index of second face corner.</param>
            <param name="vertex3">Index of third face corner.</param>
            <param name="vertex4">Index of fourth face corner.</param>
            <returns>The index of the newly added quad.</returns>
            <example>
            <code source='examples\vbnet\ex_addmesh.vb' lang='vbnet'/>
            <code source='examples\cs\ex_addmesh.cs' lang='cs'/>
            <code source='examples\py\ex_addmesh.py' lang='py'/>
            </example>
            <since>5.0</since>
        </member>
        <member name="M:Rhino.Geometry.Collections.MeshFaceList.AddFaces(System.Collections.Generic.IEnumerable{Rhino.Geometry.MeshFace})">
            <summary>
            Appends a list of faces to the end of the mesh face list.
            </summary>
            <param name="faces">Faces to add.</param>
            <returns>Indices of the newly created faces</returns>
            <since>5.0</since>
        </member>
        <member name="M:Rhino.Geometry.Collections.MeshFaceList.Insert(System.Int32,Rhino.Geometry.MeshFace)">
            <summary>
            Inserts a mesh face at a defined index in this list.
            </summary>
            <param name="index">An index.</param>
            <param name="face">A face.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">If index is negative or &gt;= Count.</exception>
            <since>5.0</since>
        </member>
        <member name="M:Rhino.Geometry.Collections.MeshFaceList.SetFace(System.Int32,Rhino.Geometry.MeshFace)">
            <summary>
            Sets a face at a specific index of the mesh.
            </summary>
            <param name="index">A position in the list.</param>
            <param name="face">A face.</param>
            <returns>true if the operation succeeded, otherwise false.</returns>
            <since>5.0</since>
        </member>
        <member name="M:Rhino.Geometry.Collections.MeshFaceList.SetFace(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Sets a triangular face at a specific index of the mesh.
            </summary>
            <param name="index">A position in the list.</param>
            <param name="vertex1">The first vertex index.</param>
            <param name="vertex2">The second vertex index.</param>
            <param name="vertex3">The third vertex index.</param>
            <returns>true if the operation succeeded, otherwise false.</returns>
            <since>5.0</since>
        </member>
        <member name="M:Rhino.Geometry.Collections.MeshFaceList.SetFace(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Sets a quadrangular face at a specific index of the mesh.
            </summary>
            <param name="index">A position in the list.</param>
            <param name="vertex1">The first vertex index.</param>
            <param name="vertex2">The second vertex index.</param>
            <param name="vertex3">The third vertex index.</param>
            <param name="vertex4">The fourth vertex index.</param>
            <returns>true if the operation succeeded, otherwise false.</returns>
            <since>5.0</since>
        </member>
        <member name="M:Rhino.Geometry.Collections.MeshFaceList.GetFace(System.Int32)">
            <summary>
            Returns the mesh face at the given index. 
            </summary>
            <param name="index">Index of face to get. Must be larger than or equal to zero and 
            smaller than the Face Count of the mesh.</param>
            <returns>The mesh face at the given index on success or MeshFace.Unset if the index is out of range.</returns>
            <since>5.0</since>
        </member>
        <member name="P:Rhino.Geometry.Collections.MeshFaceList.Item(System.Int32)">
            <summary>
            Returns the mesh face at the given index. 
            </summary>
            <param name="index">Index of face to get. Must be larger than or equal to zero and 
            smaller than the Face Count of the mesh.</param>
        </member>
        <member name="M:Rhino.Geometry.Collections.MeshFaceList.GetFaceVertices(System.Int32,Rhino.Geometry.Point3f@,Rhino.Geometry.Point3f@,Rhino.Geometry.Point3f@,Rhino.Geometry.Point3f@)">
            <summary>
            Gets the 3D location of the vertices forming a face.
            </summary>
            <param name="faceIndex">A face index.</param>
            <param name="a">A first point. This out argument is assigned during the call.</param>
            <param name="b">A second point. This out argument is assigned during the call.</param>
            <param name="c">A third point. This out argument is assigned during the call.</param>
            <param name="d">A fourth point. This out argument is assigned during the call.</param>
            <returns>true if the operation succeeded, otherwise false.</returns>
            <since>5.0</since>
        </member>
        <member name="M:Rhino.Geometry.Collections.MeshFaceList.GetFaceBoundingBox(System.Int32)">
            <summary>
            Gets the bounding box of a face.
            </summary>
            <param name="faceIndex">A face index.</param>
            <returns>A new bounding box, or <see cref="P:Rhino.Geometry.BoundingBox.Empty"/> on error.</returns>
            <since>5.0</since>
        </member>
        <member name="M:Rhino.Geometry.Collections.MeshFaceList.GetFaceCenter(System.Int32)">
            <summary>
            Gets the center point of a face.
            <para>For a triangular face, this is the centroid or barycenter.</para>
            <para>For a quad, this is the average of four comer points.</para>
            </summary>
            <param name="faceIndex">A face index.</param>
            <returns>The center point.</returns>
            <since>5.0</since>
        </member>
        <member name="M:Rhino.Geometry.Collections.MeshFaceList.AdjacentFaces(System.Int32)">
            <summary>
            Gets all faces that share a topological edge with a given face.
            </summary>
            <param name="faceIndex">A face index.</param>
            <returns>All indices that share an edge.</returns>
            <since>5.0</since>
        </member>
        <member name="M:Rhino.Geometry.Collections.MeshFaceList.ToIntArray(System.Boolean)">
            <summary>
            Copies all of the face indices to a linear array of indices per face.
            
            Note that this includes indices from invalid faces too.
            </summary>
            <returns>The int array. This method never returns null.</returns>
            <param name="asTriangles">If set to <c>true</c> as triangles.</param>
            <since>5.9</since>
        </member>
        <member name="M:Rhino.Geometry.Collections.MeshFaceList.ToIntArray(System.Boolean,System.Collections.Generic.List{System.Int32}@)">
            <summary>
            Copies all of the faces to a linear array of indices.
            
            Clean-up of vertex indices if replacedIndices is a valid List&lt;int&gt;
            /// </summary>
            <returns>The int array. This method never returns null.</returns>
            <param name="asTriangles">If set to <c>true</c> as triangles.</param>
            <param name="replacedIndices">List is populated with vertex indices that were replaced with 0. If replacedIndices is null there will be no cleanup</param>
        </member>
        <member name="M:Rhino.Geometry.Collections.MeshFaceList.DeleteFaces(System.Collections.Generic.IEnumerable{System.Int32})">
            <summary>
            Removes a collection of faces from the mesh without affecting the remaining geometry.
            </summary>
            <param name="faceIndexes">An array containing all the face indices to be removed.</param>
            <returns>The number of faces deleted on success.</returns>
            <since>5.0</since>
        </member>
        <member name="M:Rhino.Geometry.Collections.MeshFaceList.DeleteFaces(System.Collections.Generic.IEnumerable{System.Int32},System.Boolean)">
            <summary>
            Removes a collection of faces from the mesh without affecting the remaining geometry.
            </summary>
            <param name="faceIndexes">An array containing all the face indices to be removed.</param>
            <param name="compact">If true, removes vertices that are no longer referenced.</param>
            <returns>The number of faces deleted on success.</returns>
            <since>6.6</since>
        </member>
        <member name="M:Rhino.Geometry.Collections.MeshFaceList.RemoveAt(System.Int32)">
            <summary>
            Removes a face from the mesh.
            </summary>
            <param name="index">The index of the face that will be removed.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">If index is &lt; 0 or &gt;= Count.</exception>
            <since>5.0</since>
        </member>
        <member name="M:Rhino.Geometry.Collections.MeshFaceList.RemoveAt(System.Int32,System.Boolean)">
            <summary>
            Removes a face from the mesh.
            </summary>
            <param name="index">The index of the face that will be removed.</param>
            <param name="compact">If true, removes vertices that are no longer referenced.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">If index is &lt; 0 or &gt;= Count.</exception>
            <since>6.6</since>
        </member>
        <member name="M:Rhino.Geometry.Collections.MeshFaceList.ConvertQuadsToTriangles">
            <summary>Splits all quads along the short diagonal.</summary>
            <returns>true on success, false on failure.</returns>
            <since>5.0</since>
        </member>
        <member name="M:Rhino.Geometry.Collections.MeshFaceList.ConvertNonPlanarQuadsToTriangles(System.Double,System.Double,System.Int32)">
            <summary>
            Splits non-planar quads into two triangles based on given parameters.
            </summary>
            <param name="planarTolerance">
            If planarTolerance >= 0, then a quad is split if its vertices
            are not coplanar.  
            If both planarTolerance = Rhino.RhinoMath.UnsetValue and 
            angleToleranceRadians >= 0.0, then the planarity test is skipped.
            </param>
            <param name="angleToleranceRadians">
            If angleToleranceRadians >= 0.0, then a quad is split if the
            angle between opposite corner normals is > angleToleranceRadians.
            The corner normal is the normal to the triangle formed by two
            adjacent edges and the diagonal connecting their endpoints.
            A quad has four corner normals.
            If both angleToleranceRadians = Rhino.RhinoMath.UnsetValue and planarTolerance >= 0.0,
            then the corner normal angle test is skipped.
            </param>
            <param name="splitMethod">
            0 default 
              Currently divides along the short diagonal. This may be
              changed as better methods are found or preferences change.
              By passing zero, you let the developers of this code
              decide what's best for you over time.
            1 divide along the short diagonal
            2 divide along the long diagonal
            3 minimize resulting area
            4 maximize resulting area
            5 minimize angle between triangle normals
            6 maximize angle between triangle normals
            </param>
            <returns>Number of quads that were converted to triangles.</returns>
            <remarks>
            If both planarTolerance = Rhino.RhinoMath.UnsetValue and angleToleranceRadians = Rhino.RhinoMath.UnsetValue,
            then all quads are split.
            </remarks>
            <since>6.0</since>
        </member>
        <member name="M:Rhino.Geometry.Collections.MeshFaceList.ConvertTrianglesToQuads(System.Double,System.Double)">
            <summary>
            Joins adjacent triangles into quads if the resulting quad is 'nice'.
            </summary>
            <param name="angleToleranceRadians">
            Used to compare adjacent triangles' face normals. For two triangles 
            to be considered, the angle between their face normals has to 
            be &lt;= angleToleranceRadians. When in doubt use RhinoMath.PI/90.0 (2 degrees).
            </param>
            <param name="minimumDiagonalLengthRatio">
            ( &lt;= 1.0) For two triangles to be considered the ratio of the 
            resulting quad's diagonals 
            (length of the shortest diagonal)/(length of longest diagonal). 
            has to be >= minimumDiagonalLengthRatio. When in doubt us .875.
            </param>
            <returns>true on success, false on failure.</returns>
            <since>5.0</since>
        </member>
        <member name="M:Rhino.Geometry.Collections.MeshFaceList.CullDegenerateFaces">
            <summary>
            Attempts to removes degenerate faces from the mesh.
            <para>Degenerate faces are faces that contains such a combination of indices,
            that their final shape collapsed in a line or point.</para>
            <para>Before returning, this method also attempts to repair faces by juggling
            vertex indices.</para>
            </summary>
            <returns>The number of degenerate faces that were removed.</returns>
            <since>5.0</since>
        </member>
        <member name="M:Rhino.Geometry.Collections.MeshFaceList.IsHidden(System.Int32)">
            <summary>
            Gets a value indicating whether a face is hidden.
            <para>A face is hidden if, and only if, at least one of its vertices is hidden.</para>
            </summary>
            <param name="faceIndex">A face index.</param>
            <returns>true if hidden, false if fully visible.</returns>
            <since>5.0</since>
        </member>
        <member name="M:Rhino.Geometry.Collections.MeshFaceList.HasNakedEdges(System.Int32)">
            <summary>
            Returns true if at least one of the face edges are not topologically
            connected to any other faces.
            </summary>
            <param name="faceIndex">A face index.</param>
            <returns>true if that face makes the mesh open, otherwise false.</returns>
            <since>5.0</since>
        </member>
        <member name="M:Rhino.Geometry.Collections.MeshFaceList.GetTopologicalVertices(System.Int32)">
            <summary>
            Gets the topology vertex indices of a face.
            </summary>
            <param name="faceIndex">A face index.</param>
            <returns>An array of integers.</returns>
            <since>5.0</since>
        </member>
        <member name="M:Rhino.Geometry.Collections.MeshFaceList.System#Collections#Generic#IList{Rhino#Geometry#MeshFace}#Insert(System.Int32,Rhino.Geometry.MeshFace)">
            <since>5.0</since>
        </member>
        <member name="M:Rhino.Geometry.Collections.MeshFaceList.System#Collections#Generic#IList{Rhino#Geometry#MeshFace}#RemoveAt(System.Int32)">
            <since>5.0</since>
        </member>
        <member name="M:Rhino.Geometry.Collections.MeshFaceList.System#Collections#IList#RemoveAt(System.Int32)">
            <since>5.0</since>
        </member>
        <member name="M:Rhino.Geometry.Collections.MeshFaceList.GetEnumerator">
            <summary>
            Gets an enumerator that yields all faces in this collection.
            </summary>
            <returns>The enumerator.</returns>
            <since>5.0</since>
        </member>
        <member name="M:Rhino.Geometry.Collections.MeshFaceList.System#Collections#IEnumerable#GetEnumerator">
            <since>5.0</since>
        </member>
        <member name="T:Rhino.Geometry.Collections.MeshNgonList">
            <summary>
            Provides access to the ngons and ngon-related functionality of a Mesh.
            See also the <see cref="P:Rhino.Geometry.Mesh.Ngons"/> property for Ngon functionality details.
            </summary>
        </member>
        <member name="P:Rhino.Geometry.Collections.MeshNgonList.Count">
            <summary>
            Gets or sets the number of mesh ngons.
            </summary>
            <since>6.0</since>
        </member>
        <member name="P:Rhino.Geometry.Collections.MeshNgonList.UnsignedCount">
            <summary>
            Gets or sets the number of mesh ngons.
            </summary>
            <since>6.0</since>
        </member>
        <member name="M:Rhino.Geometry.Collections.MeshNgonList.Clear">
            <summary>
            Clears the Ngon list on the mesh.
            </summary>
            <since>6.0</since>
        </member>
        <member name="M:Rhino.Geometry.Collections.MeshNgonList.AddNgon(Rhino.Geometry.MeshNgon)">
            <summary>
            Appends a new ngon to the end of the mesh ngon list.
            </summary>
            <param name="ngon">Ngon to add.</param>
            <returns>The index of the newly added ngon.</returns>
            <since>6.0</since>
        </member>
        <member name="M:Rhino.Geometry.Collections.MeshNgonList.AddNgons(System.Collections.Generic.IEnumerable{Rhino.Geometry.MeshNgon})">
            <summary>
            Appends a list of ngons to the end of the mesh ngon list.
            </summary>
            <param name="ngons">Ngons to add.</param>
            <returns>Indices of the newly created ngons</returns>
            <since>6.0</since>
        </member>
        <member name="M:Rhino.Geometry.Collections.MeshNgonList.AddPlanarNgons(System.Double)">
            <summary>
            Add an ngon for each group of connected coplanar faces.
            </summary>
            <param name="planarTolerance">3d distance tolerance for coplanar test.</param>
            <returns>Number of ngons added to the mesh.</returns>
            <since>6.0</since>
        </member>
        <member name="M:Rhino.Geometry.Collections.MeshNgonList.AddPlanarNgons(System.Double,System.Int32,System.Int32,System.Boolean)">
            <summary>
            Add an ngon for each group of connected coplanar faces.
            </summary>
            <param name="planarTolerance">3d distance tolerance for coplanar test.</param>
            <param name="minimumNgonVertexCount">Minimum number of vertices for an ngon.</param>
            <param name="minimumNgonFaceCount">Minimum number of faces for an ngon.</param>
            <param name="allowHoles">Determines whether the ngon can have inner boundaries.</param>
            <returns>Number of ngons added to the mesh.</returns>
            <since>6.0</since>
        </member>
        <member name="M:Rhino.Geometry.Collections.MeshNgonList.NgonBoundaryVertexList(Rhino.Geometry.MeshNgon,System.Boolean)">
            <summary>
            Get an ngon's boundary points.
            </summary>
            <param name="ngon">ngon.</param>
            <param name="bAppendStartPoint">If true, the first point in the list is also appended to the end of the list to create a closed polyline.</param>
            <returns>A list of ngon boundary points.</returns>
            <since>6.0</since>
        </member>
        <member name="M:Rhino.Geometry.Collections.MeshNgonList.OrientNgons(System.Boolean)">
            <summary>
            If the mesh has ngons with ON_MeshNgon.Orientation() = -1, 
            then reverse the ngon's boundary orientation.
            </summary>
            <param name="permitHoles">ngons may contain holes</param>
            <returns>
            True if all non-empty ngons have ON_MeshNgon.Orientation()=1 after the call.
            </returns>
        </member>
        <member name="M:Rhino.Geometry.Collections.MeshNgonList.Insert(System.Int32,Rhino.Geometry.MeshNgon)">
            <summary>
            Inserts a mesh ngon at a defined index in this list.
            </summary>
            <param name="index">An ngon index.</param>
            <param name="ngon">An ngon.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">If index is negative or &gt;= Count.</exception>
            <since>6.0</since>
        </member>
        <member name="M:Rhino.Geometry.Collections.MeshNgonList.SetNgon(System.Int32,Rhino.Geometry.MeshNgon)">
            <summary>
            Set an ngon in this list.
            </summary>
            <param name="index">An ngon index.</param>
            <param name="ngon">An ngon.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">If index is negative or &gt;= Count.</exception>
            <since>6.0</since>
        </member>
        <member name="M:Rhino.Geometry.Collections.MeshNgonList.GetNgon(System.Int32)">
            <summary>
            Returns the mesh ngon at the given index. 
            </summary>
            <param name="index">Index of ngon to get. Must be larger than or equal to zero and 
            smaller than the Ngon Count of the mesh.</param>
            <returns>The mesh ngon at the given index.  This ngon can be MeshNgon.Empty.</returns>
            <since>6.0</since>
        </member>
        <member name="M:Rhino.Geometry.Collections.MeshNgonList.NgonIndexFromFaceIndex(System.Int32)">
            <summary>
            Returns the index of a mesh ngon the face belongs to.
            </summary>
            <param name="meshFaceIndex">Index of a mesh face.</param>
            <returns>The index of the mesh ngon the face belongs to or -1 if the face does not belong to an ngon.</returns>
            <since>6.0</since>
        </member>
        <member name="P:Rhino.Geometry.Collections.MeshNgonList.Item(System.Int32)">
            <summary>
            Returns the mesh ngon at the given index. 
            </summary>
            <param name="index">Index of face to get. Must be larger than or equal to zero and 
            smaller than the Face Count of the mesh.</param>
        </member>
        <member name="M:Rhino.Geometry.Collections.MeshNgonList.GetNgonBoundingBox(System.Int32)">
            <summary>
            Gets the bounding box of an ngon.
            </summary>
            <param name="index">A ngon index.</param>
            <returns>A new bounding box, or <see cref="P:Rhino.Geometry.BoundingBox.Empty"/> on error.</returns>
            <since>6.0</since>
        </member>
        <member name="M:Rhino.Geometry.Collections.MeshNgonList.GetNgonBoundingBox(Rhino.Geometry.MeshNgon)">
            <summary>
            Gets the bounding box of an ngon.
            </summary>
            <param name="ngon">An ngon.</param>
            <returns>A new bounding box, or <see cref="P:Rhino.Geometry.BoundingBox.Empty"/> on error.</returns>
            <since>6.0</since>
        </member>
        <member name="M:Rhino.Geometry.Collections.MeshNgonList.GetNgonOuterEdgeCount(System.Int32)">
            <summary>
            Gets the outer edge count of an ngon.
            </summary>
            <param name="index">Ngon index.</param>
            <returns>Outer edge count or zero on error.</returns>
            <since>6.0</since>
        </member>
        <member name="M:Rhino.Geometry.Collections.MeshNgonList.Orientation(System.Int32,System.Boolean)">
            <summary>
            Determine if the ngon's boundary orientation matches that of the set of faces it is made from.
            </summary>
            <param name="index">Ngon index.</param>
            <param name="permitHoles">
            true if the ngon is permitted to have interior holes, false otherwise.
            </param>
            <returns>
            1: The ngon does not have holes, the ngon's faces are compatibly oriented, 
            and the ngon's outer boundary orientation matches the faces' orientation.
            -1: The ngon does not have holes, the ngon's faces are compatibly oriented,
            and the ngon's outer boundary orientation is opposite the faces' orientation.
            0: Otherwise.The ngon may be invalid, have holes, the ngon's faces may not be
            compatibly oriented, the ngons edges may not have a consistent orientation
            with respect to the faces, or some other issue.
            </returns>
            <since>7.0</since>
        </member>
        <member name="M:Rhino.Geometry.Collections.MeshNgonList.ReverseOuterBoundary(System.Int32)">
            <summary>
            Reverse the order of the m_vi[] array for an ngon
            </summary>
            <param name="index"></param>
            <since>7.0</since>
        </member>
        <member name="M:Rhino.Geometry.Collections.MeshNgonList.GetNgonEdgeCount(System.Int32)">
            <summary>
            Gets the complete edge count of an ngon.
            </summary>
            <param name="index">Ngon index.</param>
            <returns>Complete edge count or zero on error.</returns>
            <since>6.0</since>
        </member>
        <member name="M:Rhino.Geometry.Collections.MeshNgonList.NgonHasHoles(System.Int32)">
            <summary>
            Determines whether a ngon has holes.
            </summary>
            <param name="index">Ngon index.</param>
            <returns>true for holes (or malformed ngon, see remarks), false for no holes.</returns>
            <remarks>A slit, for example, will give an edge count that differs from outer edge count despite the
            lack of true "holes" i.e. interior edges that are not shared by more than one face of the ngon in question.</remarks>
            <since>6.0</since>
        </member>
        <member name="M:Rhino.Geometry.Collections.MeshNgonList.GetNgonCenter(System.Int32)">
            <summary>
            Gets the center point of an ngon.
            <para>This the average of the corner points.</para>
            </summary>
            <param name="index">A ngon index.</param>
            <returns>The center point.</returns>
            <since>6.0</since>
        </member>
        <member name="M:Rhino.Geometry.Collections.MeshNgonList.GetNgonCenter(Rhino.Geometry.MeshNgon)">
            <summary>
            Gets the center point of an ngon.
            <para>This the average of the corner points.</para>
            </summary>
            <param name="ngon">An ngon.</param>
            <returns>The center point.</returns>
            <since>6.0</since>
        </member>
        <member name="M:Rhino.Geometry.Collections.MeshNgonList.RemoveNgons(System.Collections.Generic.IEnumerable{System.Int32})">
            <summary>
            Remove one or more ngons from the mesh.
            </summary>
            <param name="indices">An array of ngon indices.</param>
            <returns>The number of deleted ngons.</returns>
            <since>6.0</since>
        </member>
        <member name="M:Rhino.Geometry.Collections.MeshNgonList.RemoveAt(System.Int32)">
            <summary>
            Removes an ngon from the mesh.
            </summary>
            <param name="index">The index of the ngon.</param>
            <since>6.0</since>
        </member>
        <member name="M:Rhino.Geometry.Collections.MeshNgonList.GetNgonBoundary(System.Collections.Generic.IEnumerable{System.Int32})">
            <summary>
            Get a list of vertices that form the boundary of a face set. This is often use to get ngon boundaries.
            </summary>
            <param name="ngonFaceIndexList">List of mesh face indices.</param>
            <returns>List of mesh vertex indices that form the boundary of the face set.</returns>
            <since>6.0</since>
        </member>
        <member name="M:Rhino.Geometry.Collections.MeshNgonList.IsValid(System.Int32)">
            <summary>
            Tests an ngon to see if the vertex and face references are valid and pass partial boundary validity checks.
            </summary>
            <param name="index">The index of the ngon to test.</param>
            <returns>0 if the ngon is not valid, otherwise the number of boundary edges.</returns>
            <remarks>If the return value is > MeshNgon.BoundaryVertexCount, then the ngon has either inner boundaries or duplicate vertices.</remarks>
            <since>6.0</since>
        </member>
        <member name="M:Rhino.Geometry.Collections.MeshNgonList.IsValid(System.Int32,Rhino.FileIO.TextLog)">
            <summary>
            Tests an ngon to see if the vertex and face references are valid and pass partial boundary validity checks.
            </summary>
            <param name="index">The index of the ngon to test.</param>
            <param name="textLog">A text log for collecting information about problems.</param>
            <returns>0 if the ngon is not valid, otherwise the number of boundary edges.</returns>
            <remarks>If the return value is > MeshNgon.BoundaryVertexCount, then the ngon has either inner boundaries or duplicate vertices.</remarks>
            <since>6.0</since>
        </member>
        <member name="M:Rhino.Geometry.Collections.MeshNgonList.System#Collections#Generic#IList{Rhino#Geometry#MeshNgon}#Insert(System.Int32,Rhino.Geometry.MeshNgon)">
            <since>6.0</since>
        </member>
        <member name="M:Rhino.Geometry.Collections.MeshNgonList.System#Collections#Generic#IList{Rhino#Geometry#MeshNgon}#RemoveAt(System.Int32)">
            <since>6.0</since>
        </member>
        <member name="M:Rhino.Geometry.Collections.MeshNgonList.System#Collections#IList#RemoveAt(System.Int32)">
            <since>6.0</since>
        </member>
        <member name="M:Rhino.Geometry.Collections.MeshNgonList.GetEnumerator">
            <summary>
            Gets an enumerator that yields all ngons in this collection.
            </summary>
            <returns>The enumerator.</returns>
            <since>6.0</since>
        </member>
        <member name="M:Rhino.Geometry.Collections.MeshNgonList.System#Collections#IEnumerable#GetEnumerator">
            <since>6.0</since>
        </member>
        <member name="T:Rhino.Geometry.Collections.MeshFaceNormalList">
            <summary>
            Provides access to the Face normals of a Mesh.
            </summary>
        </member>
        <member name="P:Rhino.Geometry.Collections.MeshFaceNormalList.Count">
            <summary>
            Gets or sets the number of mesh face normals.
            </summary>
            <since>5.0</since>
        </member>
        <member name="P:Rhino.Geometry.Collections.MeshFaceNormalList.Item(System.Int32)">
            <summary>
            Gets or sets the face normal at the given face index. 
            The index must be valid or an IndexOutOfRangeException will be thrown.
            </summary>
            <param name="index">Index of face normal to access.</param>
            <exception cref="T:System.IndexOutOfRangeException">Thrown when the index is invalid.</exception>
            <returns>The face normal at [index].</returns>
        </member>
        <member name="P:Rhino.Geometry.Collections.MeshFaceNormalList.Capacity">
            <summary>
            Gets or sets the total number of face normals the internal data structure can hold without resizing.
            </summary>
            <since>6.0</since>
        </member>
        <member name="M:Rhino.Geometry.Collections.MeshFaceNormalList.Clear">
            <summary>
            Clears the Face Normal list on the mesh.
            </summary>
            <since>5.0</since>
        </member>
        <member name="M:Rhino.Geometry.Collections.MeshFaceNormalList.Destroy">
            <summary>
            Releases all memory allocated to store face normals. The list capacity will be 0 after this call.
            <para>Subsequent calls can add new items.</para>
            </summary>
            <since>6.0</since>
        </member>
        <member name="M:Rhino.Geometry.Collections.MeshFaceNormalList.AddFaceNormal(System.Single,System.Single,System.Single)">
            <summary>
            Appends a face normal to the list of mesh face normals.
            </summary>
            <param name="x">X component of face normal.</param>
            <param name="y">Y component of face normal.</param>
            <param name="z">Z component of face normal.</param>
            <returns>The index of the newly added face normal.</returns>
            <since>5.0</since>
        </member>
        <member name="M:Rhino.Geometry.Collections.MeshFaceNormalList.AddFaceNormal(System.Double,System.Double,System.Double)">
            <summary>
            Appends a face normal to the list of mesh face normals.
            </summary>
            <param name="x">X component of face normal.</param>
            <param name="y">Y component of face normal.</param>
            <param name="z">Z component of face normal.</param>
            <returns>The index of the newly added face normal.</returns>
            <since>5.0</since>
        </member>
        <member name="M:Rhino.Geometry.Collections.MeshFaceNormalList.AddFaceNormal(Rhino.Geometry.Vector3d)">
            <summary>
            Appends a face normal to the list of mesh face normals.
            </summary>
            <param name="normal">New face normal.</param>
            <returns>The index of the newly added face normal.</returns>
            <since>5.0</since>
        </member>
        <member name="M:Rhino.Geometry.Collections.MeshFaceNormalList.AddFaceNormal(Rhino.Geometry.Vector3f)">
            <summary>
            Appends a face normal to the list of mesh face normals.
            </summary>
            <param name="normal">New face normal.</param>
            <returns>The index of the newly added face normal.</returns>
            <since>5.0</since>
        </member>
        <member name="M:Rhino.Geometry.Collections.MeshFaceNormalList.SetFaceNormal(System.Int32,System.Single,System.Single,System.Single)">
            <summary>
            Sets a face normal vector at an index using three single-precision numbers.
            </summary>
            <param name="index">An index.</param>
            <param name="x">A x component.</param>
            <param name="y">A y component.</param>
            <param name="z">A z component.</param>
            <returns>true on success; false on error.</returns>
            <since>5.0</since>
        </member>
        <member name="M:Rhino.Geometry.Collections.MeshFaceNormalList.SetFaceNormal(System.Int32,System.Double,System.Double,System.Double)">
            <summary>
            Sets a face normal vector at an index using three double-precision numbers.
            </summary>
            <param name="index">An index.</param>
            <param name="x">A x component.</param>
            <param name="y">A y component.</param>
            <param name="z">A z component.</param>
            <returns>true on success; false on error.</returns>
            <since>5.0</since>
        </member>
        <member name="M:Rhino.Geometry.Collections.MeshFaceNormalList.SetFaceNormal(System.Int32,Rhino.Geometry.Vector3d)">
            <summary>
            Sets a face normal vector at an index using a single-precision vector.
            </summary>
            <param name="index">An index.</param>
            <param name="normal">A normal vector.</param>
            <returns>true on success; false on error.</returns>
            <since>5.0</since>
        </member>
        <member name="M:Rhino.Geometry.Collections.MeshFaceNormalList.SetFaceNormal(System.Int32,Rhino.Geometry.Vector3f)">
            <summary>
            Sets a face normal vector at an index using a single-precision vector.
            </summary>
            <param name="index">An index.</param>
            <param name="normal">A normal vector.</param>
            <returns>true on success; false on error.</returns>
            <since>5.0</since>
        </member>
        <member name="M:Rhino.Geometry.Collections.MeshFaceNormalList.UnitizeFaceNormals">
            <summary>
            Unitizes all the existing face normals.
            </summary>
            <returns>true on success, false on failure.</returns>
            <since>5.0</since>
        </member>
        <member name="M:Rhino.Geometry.Collections.MeshFaceNormalList.ComputeFaceNormals">
            <summary>
            Computes all the face normals for this mesh based on the physical shape of the mesh.
            </summary>
            <returns>true on success, false on failure.</returns>
            <since>5.0</since>
        </member>
        <member name="M:Rhino.Geometry.Collections.MeshFaceNormalList.GetEnumerator">
            <summary>
            Gets an enumerator that yields all normals (vectors) in this collection.
            </summary>
            <returns>The enumerator.</returns>
            <since>5.0</since>
        </member>
        <member name="M:Rhino.Geometry.Collections.MeshFaceNormalList.System#Collections#IEnumerable#GetEnumerator">
            <since>5.0</since>
        </member>
        <member name="T:Rhino.Geometry.Collections.MeshVertexColorList">
            <summary>
            Provides access to the vertex colors of a mesh object.
            </summary>
        </member>
        <member name="P:Rhino.Geometry.Collections.MeshVertexColorList.Count">
            <summary>
            Gets or sets the number of mesh colors.
            </summary>
            <since>5.0</since>
        </member>
        <member name="P:Rhino.Geometry.Collections.MeshVertexColorList.Item(System.Int32)">
            <summary>
            Gets or sets the vertex color at the given index. 
            The index must be valid or an IndexOutOfRangeException will be thrown.
            </summary>
            <param name="index">Index of vertex control to access.</param>
            <exception cref="T:System.IndexOutOfRangeException">Thrown when the index is invalid.</exception>
            <returns>The vertex color at [index].</returns>
        </member>
        <member name="P:Rhino.Geometry.Collections.MeshVertexColorList.Tag">
            <example>
            <code source='examples\vbnet\ex_analysismode.vb' lang='vbnet'/>
            <code source='examples\cs\ex_analysismode.cs' lang='cs'/>
            </example>
            <summary>
            Gets or sets a mapping information for the mesh associated with these vertex colors.
            </summary>
            <since>5.0</since>
        </member>
        <member name="M:Rhino.Geometry.Collections.MeshVertexColorList.ToARGBArray">
            <summary>
            Return colors as an array of integers with packed ARGB values
            </summary>
            <returns></returns>
            <since>7.0</since>
        </member>
        <member name="M:Rhino.Geometry.Collections.MeshVertexColorList.Clear">
            <summary>
            Clears the vertex color list on the mesh.
            </summary>
            <since>5.0</since>
        </member>
        <member name="M:Rhino.Geometry.Collections.MeshVertexColorList.Add(System.Int32,System.Int32,System.Int32)">
            <summary>
            Adds a new vertex color to the end of the color list.
            </summary>
            <param name="red">Red component of color, must be in the 0~255 range.</param>
            <param name="green">Green component of color, must be in the 0~255 range.</param>
            <param name="blue">Blue component of color, must be in the 0~255 range.</param>
            <returns>The index of the newly added color.</returns>
            <since>5.0</since>
        </member>
        <member name="M:Rhino.Geometry.Collections.MeshVertexColorList.Add(System.Drawing.Color)">
            <summary>
            Adds a new vertex color to the end of the color list.
            </summary>
            <param name="color">Color to append, Alpha channels will be ignored.</param>
            <returns>The index of the newly added color.</returns>
            <since>5.0</since>
        </member>
        <member name="M:Rhino.Geometry.Collections.MeshVertexColorList.SetColor(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Sets or adds a vertex color to the color List.
            <para>If [index] is less than [Count], the existing vertex at [index] will be modified.</para>
            <para>If [index] equals [Count], a new vertex is appended to the end of the vertex list.</para> 
            <para>If [index] is larger than [Count], the function will return false.</para>
            </summary>
            <param name="index">Index of vertex color to set. 
            If index equals Count, then the color will be appended.</param>
            <param name="red">Red component of vertex color. Value must be in the 0~255 range.</param>
            <param name="green">Green component of vertex color. Value must be in the 0~255 range.</param>
            <param name="blue">Blue component of vertex color. Value must be in the 0~255 range.</param>
            <returns>true on success, false on failure.</returns>
            <since>5.0</since>
        </member>
        <member name="M:Rhino.Geometry.Collections.MeshVertexColorList.SetColor(System.Int32,System.Drawing.Color)">
            <summary>
            Sets or adds a vertex to the Vertex List.
            <para>If [index] is less than [Count], the existing vertex at [index] will be modified.</para>
            <para>If [index] equals [Count], a new vertex is appended to the end of the vertex list.</para> 
            <para>If [index] is larger than [Count], the function will return false.</para>
            </summary>
            <param name="index">Index of vertex color to set. 
            If index equals Count, then the color will be appended.</param>
            <param name="color">Color to set, Alpha channels will be ignored.</param>
            <returns>true on success, false on failure.</returns>
            <since>5.0</since>
        </member>
        <member name="M:Rhino.Geometry.Collections.MeshVertexColorList.SetColor(Rhino.Geometry.MeshFace,System.Drawing.Color)">
            <summary>
            Sets a color at the three or four vertex indices of a specified face.
            </summary>
            <param name="face">A face to use to retrieve indices.</param>
            <param name="color">A color.</param>
            <returns>true on success; false on error.</returns>
            <since>5.0</since>
        </member>
        <member name="P:Rhino.Geometry.Collections.MeshVertexColorList.Capacity">
            <summary>
            Gets or sets the total number of vertex colors the internal data structure can hold without resizing.
            </summary>
            <since>6.0</since>
        </member>
        <member name="M:Rhino.Geometry.Collections.MeshVertexColorList.CreateMonotoneMesh(System.Drawing.Color)">
            <summary>
            Constructs a valid vertex color list consisting of a single color.
            </summary>
            <param name="baseColor">Color to apply to every vertex.</param>
            <returns>true on success, false on failure.</returns>
            <since>5.0</since>
        </member>
        <member name="M:Rhino.Geometry.Collections.MeshVertexColorList.SetColors(System.Drawing.Color[])">
            <summary>
            Sets all the vertex colors in one go. For the Mesh to be valid, the number 
            of colors must match the number of vertices.
            </summary>
            <param name="colors">Colors to set.</param>
            <returns>true on success, false on failure.</returns>
            <example>
            <code source='examples\vbnet\ex_analysismode.vb' lang='vbnet'/>
            <code source='examples\cs\ex_analysismode.cs' lang='cs'/>
            </example>
            <since>5.0</since>
        </member>
        <member name="M:Rhino.Geometry.Collections.MeshVertexColorList.AppendColors(System.Drawing.Color[])">
            <summary>
            Appends a collection of colors to the vertex color list. 
            For the Mesh to be valid, the number of colors must match the number of vertices.
            </summary>
            <param name="colors">Colors to append.</param>
            <returns>true on success, false on failure.</returns>
            <since>5.0</since>
        </member>
        <member name="M:Rhino.Geometry.Collections.MeshVertexColorList.Destroy">
            <summary>
            Releases all memory allocated to store vertex colors. The list capacity will be 0 after this call.
            <para>Subsequent calls can add new items.</para>
            </summary>
            <since>6.0</since>
        </member>
        <member name="M:Rhino.Geometry.Collections.MeshVertexColorList.System#Collections#Generic#ICollection{System#Drawing#Color}#Add(System.Drawing.Color)">
            <since>5.0</since>
        </member>
        <member name="M:Rhino.Geometry.Collections.MeshVertexColorList.GetEnumerator">
            <summary>
            Gets an enumerator that yields all colors in this collection.
            </summary>
            <returns>The enumerator.</returns>
            <since>5.0</since>
        </member>
        <member name="M:Rhino.Geometry.Collections.MeshVertexColorList.System#Collections#IEnumerable#GetEnumerator">
            <since>5.0</since>
        </member>
        <member name="T:Rhino.Geometry.Collections.MeshTextureCoordinateList">
            <summary>
            Provides access to the Vertex Texture coordinates of a Mesh.
            </summary>
        </member>
        <member name="P:Rhino.Geometry.Collections.MeshTextureCoordinateList.Count">
            <summary>
            Gets or sets the number of texture coordinates.
            </summary>
            <since>5.0</since>
        </member>
        <member name="P:Rhino.Geometry.Collections.MeshTextureCoordinateList.Capacity">
            <summary>
            Gets or sets the total number of texture coordinates the internal data structure can hold without resizing.
            </summary>
            <since>6.0</since>
        </member>
        <member name="P:Rhino.Geometry.Collections.MeshTextureCoordinateList.Item(System.Int32)">
            <summary>
            Gets or sets the texture coordinate at the given index. 
            The index must be valid or an IndexOutOfRangeException will be thrown.
            </summary>
            <param name="index">Index of texture coordinates to access.</param>
            <exception cref="T:System.IndexOutOfRangeException">Thrown when the index is invalid.</exception>
            <returns>The texture coordinate at [index].</returns>
        </member>
        <member name="M:Rhino.Geometry.Collections.MeshTextureCoordinateList.Clear">
            <summary>
            Clears the Texture Coordinate list on the mesh.
            </summary>
            <since>5.0</since>
        </member>
        <member name="M:Rhino.Geometry.Collections.MeshTextureCoordinateList.Add(System.Single,System.Single)">
            <summary>
            Adds a new texture coordinate to the end of the Texture list.
            </summary>
            <param name="s">S component of new texture coordinate.</param>
            <param name="t">T component of new texture coordinate.</param>
            <returns>The index of the newly added texture coordinate.</returns>
            <since>5.0</since>
        </member>
        <member name="M:Rhino.Geometry.Collections.MeshTextureCoordinateList.Add(System.Double,System.Double)">
            <summary>
            Adds a new texture coordinate to the end of the Texture list.
            </summary>
            <param name="s">S component of new texture coordinate.</param>
            <param name="t">T component of new texture coordinate.</param>
            <returns>The index of the newly added texture coordinate.</returns>
            <since>5.0</since>
        </member>
        <member name="M:Rhino.Geometry.Collections.MeshTextureCoordinateList.Add(Rhino.Geometry.Point2f)">
            <summary>
            Adds a new texture coordinate to the end of the Texture list.
            </summary>
            <param name="tc">Texture coordinate to add.</param>
            <returns>The index of the newly added texture coordinate.</returns>
            <since>5.0</since>
        </member>
        <member name="M:Rhino.Geometry.Collections.MeshTextureCoordinateList.Add(Rhino.Geometry.Point3d)">
            <summary>
            Adds a new texture coordinate to the end of the Texture list.
            </summary>
            <param name="tc">Texture coordinate to add.</param>
            <returns>The index of the newly added texture coordinate.</returns>
            <since>5.0</since>
        </member>
        <member name="M:Rhino.Geometry.Collections.MeshTextureCoordinateList.AddRange(Rhino.Geometry.Point2f[])">
            <summary>
            Appends an array of texture coordinates.
            </summary>
            <param name="textureCoordinates">Texture coordinates to append.</param>
            <returns>true on success, false on failure.</returns>
            <since>5.0</since>
        </member>
        <member name="M:Rhino.Geometry.Collections.MeshTextureCoordinateList.SetTextureCoordinate(System.Int32,System.Single,System.Single)">
            <summary>
            Sets or adds a texture coordinate to the Texture Coordinate List.
            <para>If [index] is less than [Count], the existing coordinate at [index] will be modified.</para>
            <para>If [index] equals [Count], a new coordinate is appended to the end of the coordinate list.</para> 
            <para>If [index] is larger than [Count], the function will return false.</para>
            </summary>
            <param name="index">Index of texture coordinate to set.</param>
            <param name="s">S component of texture coordinate.</param>
            <param name="t">T component of texture coordinate.</param>
            <returns>true on success, false on failure.</returns>
            <since>5.0</since>
        </member>
        <member name="M:Rhino.Geometry.Collections.MeshTextureCoordinateList.SetTextureCoordinate(System.Int32,System.Double,System.Double)">
            <summary>
            Sets or adds a texture coordinate to the Texture Coordinate List.
            <para>If [index] is less than [Count], the existing coordinate at [index] will be modified.</para>
            <para>If [index] equals [Count], a new coordinate is appended to the end of the coordinate list.</para> 
            <para>If [index] is larger than [Count], the function will return false.</para>
            </summary>
            <param name="index">Index of texture coordinate to set.</param>
            <param name="s">S component of texture coordinate.</param>
            <param name="t">T component of texture coordinate.</param>
            <returns>true on success, false on failure.</returns>
            <since>5.0</since>
        </member>
        <member name="M:Rhino.Geometry.Collections.MeshTextureCoordinateList.SetTextureCoordinate(System.Int32,Rhino.Geometry.Point2f)">
            <summary>
            Sets or adds a texture coordinate to the Texture Coordinate List.
            <para>If [index] is less than [Count], the existing coordinate at [index] will be modified.</para>
            <para>If [index] equals [Count], a new coordinate is appended to the end of the coordinate list.</para> 
            <para>If [index] is larger than [Count], the function will return false.</para>
            </summary>
            <param name="index">Index of texture coordinate to set.</param>
            <param name="tc">Texture coordinate point.</param>
            <returns>true on success, false on failure.</returns>
            <since>5.0</since>
        </member>
        <member name="M:Rhino.Geometry.Collections.MeshTextureCoordinateList.SetTextureCoordinate(System.Int32,Rhino.Geometry.Point3f)">
            <summary>
            Sets or adds a texture coordinate to the Texture Coordinate List.
            <para>If [index] is less than [Count], the existing coordinate at [index] will be modified.</para>
            <para>If [index] equals [Count], a new coordinate is appended to the end of the coordinate list.</para> 
            <para>If [index] is larger than [Count], the function will return false.</para>
            </summary>
            <param name="index">Index of texture coordinate to set.</param>
            <param name="tc">Texture coordinate point.</param>
            <returns>true on success, false on failure.</returns>
            <since>5.0</since>
        </member>
        <member name="M:Rhino.Geometry.Collections.MeshTextureCoordinateList.SetTextureCoordinates(Rhino.Geometry.Point2f[])">
            <summary>
            Sets all texture coordinates in one go.
            </summary>
            <param name="textureCoordinates">Texture coordinates to assign to the mesh.</param>
            <returns>true on success, false on failure.</returns>
            <since>5.0</since>
        </member>
        <member name="M:Rhino.Geometry.Collections.MeshTextureCoordinateList.SetTextureCoordinates(Rhino.Render.TextureMapping)">
            <summary>
            Set all texture coordinates based on a texture mapping function
            </summary>
            <param name="mapping">The new mapping type.</param>
            <returns>true on success, false on failure.</returns>
            <since>5.0</since>
        </member>
        <member name="M:Rhino.Geometry.Collections.MeshTextureCoordinateList.Destroy">
            <summary>
            Releases all memory allocated to store texture coordinates. The list capacity will be 0 after this call.
            <para>Subsequent calls can add new items.</para>
            </summary>
            <since>6.0</since>
        </member>
        <member name="M:Rhino.Geometry.Collections.MeshTextureCoordinateList.NormalizeTextureCoordinates">
            <summary>
            Scales the texture coordinates so the texture domains are [0,1] 
            and eliminate any texture rotations.
            </summary>
            <returns>true on success, false on failure.</returns>
            <since>5.0</since>
        </member>
        <member name="M:Rhino.Geometry.Collections.MeshTextureCoordinateList.TransposeTextureCoordinates">
            <summary>
            Transposes texture coordinates.
            <para>The region of the bitmap the texture uses does not change.
            All texture coordinates rows (Us) become columns (Vs), and vice versa.</para>
            </summary>
            <returns>true on success, false on failure.</returns>
            <since>5.0</since>
        </member>
        <member name="M:Rhino.Geometry.Collections.MeshTextureCoordinateList.ReverseTextureCoordinates(System.Int32)">
            <summary>
            Reverses one coordinate direction of the texture coordinates.
            <para>The region of the bitmap the texture uses does not change.
            Either Us or Vs direction is flipped.</para>
            </summary>
            <param name="direction">
            <para>0 = first texture coordinate is reversed.</para>
            <para>1 = second texture coordinate is reversed.</para>
            </param>
            <returns>true if operation succeeded; otherwise, false.</returns>
            <since>5.0</since>
        </member>
        <member name="M:Rhino.Geometry.Collections.MeshTextureCoordinateList.ToFloatArray">
            <summary>
            Copies all vertices to a linear array of float in u,v order
            </summary>
            <returns>The float array.</returns>
            <since>6.0</since>
        </member>
        <member name="M:Rhino.Geometry.Collections.MeshTextureCoordinateList.System#Collections#Generic#ICollection{Rhino#Geometry#Point2f}#Add(Rhino.Geometry.Point2f)">
            <since>5.0</since>
        </member>
        <member name="M:Rhino.Geometry.Collections.MeshTextureCoordinateList.GetEnumerator">
            <summary>
            Gets an enumerator that yields all texture coordinates in this collection.
            </summary>
            <returns>The enumerator.</returns>
            <since>5.0</since>
        </member>
        <member name="M:Rhino.Geometry.Collections.MeshTextureCoordinateList.System#Collections#IEnumerable#GetEnumerator">
            <since>5.0</since>
        </member>
        <member name="T:Rhino.Geometry.Collections.MeshVertexStatusList">
            <summary>
            Provides access to status information relative to components of a mesh.
            </summary>
        </member>
        <member name="P:Rhino.Geometry.Collections.MeshVertexStatusList.Count">
            <summary>
            Gets or sets the number of hidden vertices. For this to be a valid part of a mesh, this count should be the same as the one of mesh vertices.
            </summary>
            <since>6.0</since>
        </member>
        <member name="P:Rhino.Geometry.Collections.MeshVertexStatusList.HiddenCount">
            <summary>
            Gets a value indicating how many vertices have been set to hidden.
            </summary>
            <since>6.0</since>
        </member>
        <member name="P:Rhino.Geometry.Collections.MeshVertexStatusList.Capacity">
            <summary>
            Gets or sets the total number of hidden vertex information the internal data structure can hold without resizing.
            </summary>
            <since>6.0</since>
        </member>
        <member name="P:Rhino.Geometry.Collections.MeshVertexStatusList.Item(System.Int32)">
            <summary>
            Gets or sets the hidden value at the given index. 
            The index must be valid or an IndexOutOfRangeException will be thrown.
            </summary>
            <param name="index">Index of hidden flag to access.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown when the index is invalid.</exception>
            <returns>The hidden flag at [index].</returns>
        </member>
        <member name="M:Rhino.Geometry.Collections.MeshVertexStatusList.Clear">
            <summary>
            Clears the hidden vertex list on the mesh. This results in a fully visible mesh.
            </summary>
            <since>6.0</since>
        </member>
        <member name="M:Rhino.Geometry.Collections.MeshVertexStatusList.Add(System.Boolean)">
            <summary>
            Adds a new flag at the end of the list.
            </summary>
            <param name="hidden">True if vertex is hidden.</param>
            <returns>The index of the newly added hidden vertex.</returns>
            <since>6.0</since>
        </member>
        <member name="M:Rhino.Geometry.Collections.MeshVertexStatusList.AddRange(System.Collections.Generic.IEnumerable{System.Boolean})">
            <summary>
            Appends an array, a list or any enumerable of flags to the end of the list.
            </summary>
            <param name="values">Hidden values to append.</param>
            <returns>true on success, false on failure.</returns>
            <since>6.0</since>
        </member>
        <member name="M:Rhino.Geometry.Collections.MeshVertexStatusList.Destroy">
            <summary>
            Releases all memory allocated to store hidden vertices. The list capacity will be 0 after this call.
            <para>Vertices will be immediately considered visible.</para>
            <para>Subsequent calls can add new items.</para>
            </summary>
            <since>6.0</since>
        </member>
        <member name="M:Rhino.Geometry.Collections.MeshVertexStatusList.System#Collections#Generic#ICollection{System#Boolean}#Add(System.Boolean)">
            <since>6.0</since>
        </member>
        <member name="M:Rhino.Geometry.Collections.MeshVertexStatusList.Contains(System.Boolean)">
            <summary>
            Determines if some vertices are hidden or some are shown.
            </summary>
            <param name="hidden">The value to be checked. True means some vertex is hidden.</param>
            <returns>True if the array contains the specified value.</returns>
            <since>6.0</since>
        </member>
        <member name="M:Rhino.Geometry.Collections.MeshVertexStatusList.CopyTo(System.Boolean[],System.Int32)">
            <summary>
            Copies to an array, starting at an index.
            </summary>
            <param name="array">The array to be copied into.</param>
            <param name="arrayIndex">The starting index in the array.</param>
            <since>6.0</since>
        </member>
        <member name="M:Rhino.Geometry.Collections.MeshVertexStatusList.GetEnumerator">
            <summary>
            Gets an enumerator that yields all flags in this collection.
            </summary>
            <returns>The enumerator.</returns>
            <since>6.0</since>
        </member>
        <member name="M:Rhino.Geometry.Collections.MeshVertexStatusList.System#Collections#IEnumerable#GetEnumerator">
            <since>6.0</since>
        </member>
        <member name="T:Rhino.Geometry.Collections.NurbsCurveKnotList">
            <summary>
            Provides access to the knot vector of a NURBS curve.
            </summary>
        </member>
        <member name="P:Rhino.Geometry.Collections.NurbsCurveKnotList.Count">
            <summary>Total number of knots in this curve.</summary>
            <since>5.0</since>
        </member>
        <member name="P:Rhino.Geometry.Collections.NurbsCurveKnotList.Item(System.Int32)">
            <summary>
            Gets or sets the knot vector value at the given index.
            </summary>
            <param name="index">Index of knot to access.</param>
            <returns>The knot value at [index]</returns>
        </member>
        <member name="M:Rhino.Geometry.Collections.NurbsCurveKnotList.EnsurePrivateCopy">
            <summary>
            If you want to keep a copy of this class around by holding onto it in a variable after a command
            completes, call EnsurePrivateCopy to make sure that this class is not tied to the document. You can
            call this function as many times as you want.
            </summary>
            <since>5.0</since>
        </member>
        <member name="M:Rhino.Geometry.Collections.NurbsCurveKnotList.InsertKnot(System.Double)">
            <summary>
            Inserts a knot and update control point locations.
            Does not change parameterization or locus of curve.
            </summary>
            <param name="value">Knot value to insert.</param>
            <returns>true on success, false on failure.</returns>
            <example>
            <code source='examples\vbnet\ex_insertknot.vb' lang='vbnet'/>
            <code source='examples\cs\ex_insertknot.cs' lang='cs'/>
            <code source='examples\py\ex_insertknot.py' lang='py'/>
            </example>
            <since>5.0</since>
        </member>
        <member name="M:Rhino.Geometry.Collections.NurbsCurveKnotList.InsertKnot(System.Double,System.Int32)">
            <summary>
            Inserts a knot and update control point locations.
            Does not change parameterization or locus of curve.
            </summary>
            <param name="value">Knot value to insert.</param>
            <param name="multiplicity">Multiplicity of knot to insert.</param>
            <returns>true on success, false on failure.</returns>
            <since>5.0</since>
        </member>
        <member name="M:Rhino.Geometry.Collections.NurbsCurveKnotList.KnotMultiplicity(System.Int32)">
            <summary>Get knot multiplicity.</summary>
            <param name="index">Index of knot to query.</param>
            <returns>The multiplicity (valence) of the knot.</returns>
            <since>5.0</since>
        </member>
        <member name="M:Rhino.Geometry.Collections.NurbsCurveKnotList.CreateUniformKnots(System.Double)">
            <summary>
            Compute a clamped, uniform knot vector based on the current
            degree and control point count. Does not change values of control
            vertices.
            </summary>
            <param name="knotSpacing">Spacing of subsequent knots.</param>
            <returns>true on success, false on failure.</returns>
            <since>5.0</since>
        </member>
        <member name="M:Rhino.Geometry.Collections.NurbsCurveKnotList.CreatePeriodicKnots(System.Double)">
            <summary>
            Compute a clamped, uniform, periodic knot vector based on the current
            degree and control point count. Does not change values of control
            vertices.
            </summary>
            <param name="knotSpacing">Spacing of subsequent knots.</param>
            <returns>true on success, false on failure.</returns>
            <since>5.0</since>
        </member>
        <member name="P:Rhino.Geometry.Collections.NurbsCurveKnotList.IsClampedStart">
            <summary>
            Gets a value indicating whether or not the knot vector is clamped at the start of the curve. 
            Clamped curves start at the first control-point. This requires fully multiple knots.
            </summary>
            <since>5.0</since>
        </member>
        <member name="P:Rhino.Geometry.Collections.NurbsCurveKnotList.IsClampedEnd">
            <summary>
            Gets a value indicating whether or not the knot vector is clamped at the end of the curve. 
            Clamped curves are coincident with the first and last control-point. This requires fully multiple knots.
            </summary>
            <since>5.0</since>
        </member>
        <member name="M:Rhino.Geometry.Collections.NurbsCurveKnotList.ClampEnd(Rhino.Geometry.CurveEnd)">
            <summary>
            Clamp end knots. Does not modify control point locations.
            </summary>
            <param name="end">Curve end to clamp.</param>
            <returns>true on success, false on failure.</returns>
            <since>5.0</since>
        </member>
        <member name="M:Rhino.Geometry.Collections.NurbsCurveKnotList.SuperfluousKnot(System.Boolean)">
            <summary>
            Computes the knots that are superfluous because they are not used in NURBs evaluation.
            These make it appear so that the first and last curve spans are different from interior spans.
            <para>http://wiki.mcneel.com/developer/onsuperfluousknot</para>
            </summary>
            <param name="start">true if the query targets the first knot. Otherwise, the last knot.</param>
            <returns>A component.</returns>
            <since>5.0</since>
        </member>
        <member name="P:Rhino.Geometry.Collections.NurbsCurveKnotList.KnotStyle">
            <summary>
            Gets the style of the knot vector.
            </summary>
            <since>7.1</since>
        </member>
        <member name="M:Rhino.Geometry.Collections.NurbsCurveKnotList.EpsilonEquals(Rhino.Geometry.Collections.NurbsCurveKnotList,System.Double)">
            <summary>
            Checks that all values in the other list are sequentially equal within epsilon to the values in this list.
            </summary>
            <param name="other">The other list.</param>
            <param name="epsilon">The epsilon value.</param>
            <returns>True if values are, orderly, equal within epsilon. False otherwise.</returns>
            <since>5.4</since>
        </member>
        <member name="M:Rhino.Geometry.Collections.NurbsCurveKnotList.IndexOf(System.Double)">
            <summary>
            Returns the first item in the list.
            </summary>
            <param name="item">The value.</param>
            <returns>The index, or -1 if no index is found.</returns>
            <since>6.0</since>
        </member>
        <member name="M:Rhino.Geometry.Collections.NurbsCurveKnotList.Contains(System.Double)">
            <summary>
            Returns an indication of the presence of a value in the knot list.
            </summary>
            <param name="item">The item.</param>
            <returns>true if present, false otherwise.</returns>
            <since>6.0</since>
        </member>
        <member name="M:Rhino.Geometry.Collections.NurbsCurveKnotList.CopyTo(System.Double[],System.Int32)">
            <summary>
            Copies the list to an array.
            </summary>
            <param name="array">The array to copy to.</param>
            <param name="arrayIndex">The index into copy will begin.</param>
            <since>6.0</since>
        </member>
        <member name="T:Rhino.Geometry.Collections.NurbsCurvePointList">
            <summary>
            Provides access to the control points of a NURBS curve.
            </summary>
        </member>
        <member name="M:Rhino.Geometry.Collections.NurbsCurvePointList.EnsurePrivateCopy">
            <summary>
            If you want to keep a copy of this class around by holding onto it in a variable after a command
            completes, call EnsurePrivateCopy to make sure that this class is not tied to the document. You can
            call this function as many times as you want.
            </summary>
            <since>5.0</since>
        </member>
        <member name="P:Rhino.Geometry.Collections.NurbsCurvePointList.Count">
            <summary>
            Gets the number of control points in this curve.
            </summary>
            <since>5.0</since>
        </member>
        <member name="P:Rhino.Geometry.Collections.NurbsCurvePointList.Item(System.Int32)">
            <summary>
            Gets or sets the control point location at the given index.
            </summary>
            <param name="index">Index of control vertex to access.</param>
            <returns>The control vertex at [index]</returns>
        </member>
        <member name="P:Rhino.Geometry.Collections.NurbsCurvePointList.ControlPolygonLength">
            <summary>
            Gets the length of the polyline connecting all control points.
            </summary>
            <since>5.0</since>
        </member>
        <member name="M:Rhino.Geometry.Collections.NurbsCurvePointList.ControlPolygon">
            <summary>
            Constructs a polyline through all the control points. 
            Note that periodic curves generate a closed polyline with <i>fewer</i> 
            points than control-points.
            </summary>
            <returns>A polyline connecting all control points.</returns>
            <since>5.0</since>
        </member>
        <member name="M:Rhino.Geometry.Collections.NurbsCurvePointList.ChangeEndWeights(System.Double,System.Double)">
             <summary>
             Use a combination of scaling and reparameterization to change the end weights to the specified values.
             </summary>
             <param name="w0">Weight for first control point.</param>
             <param name="w1">Weight for last control point.</param>
             <returns>true on success, false on failure.</returns>
            <remarks>
             The domain, Euclidean locations of the control points, and locus of the curve
             do not change, but the weights, homogeneous CV values and internal knot values
             may change. If w0 and w1 are 1 and the curve is not rational, the curve is not changed.
            </remarks>
             <since>5.0</since>
        </member>
        <member name="M:Rhino.Geometry.Collections.NurbsCurvePointList.MakeRational">
            <summary>
            Converts the curve to a Rational NURBS curve. Rational NURBS curves have weighted control points.
            </summary>
            <returns>true on success, false on failure.</returns>
            <since>5.0</since>
        </member>
        <member name="M:Rhino.Geometry.Collections.NurbsCurvePointList.MakeNonRational">
            <summary>
            Converts the curve to a Non-rational NURBS curve. Non-rational curves have unweighted control points.
            </summary>
            <returns>true on success, false on failure.</returns>
            <since>5.0</since>
        </member>
        <member name="M:Rhino.Geometry.Collections.NurbsCurvePointList.SetPoint(System.Int32,System.Double,System.Double,System.Double)">
            <summary>
            Sets a world 3-D, or Euclidean, control point at the given index.
            The 4-D representation is (x, y, z, 1.0).
            </summary>
            <param name="index">Index of control point to set.</param>
            <param name="x">X coordinate of control point.</param>
            <param name="y">Y coordinate of control point.</param>
            <param name="z">Z coordinate of control point.</param>
            <returns>true on success, false on failure.</returns>
            <since>6.0</since>
        </member>
        <member name="M:Rhino.Geometry.Collections.NurbsCurvePointList.SetPoint(System.Int32,System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Sets a homogeneous control point at the given index, where the 4-D representation is (x, y, z, w).
            The world 3-D, or Euclidean, representation is (x/w, y/w, z/w).
            </summary>
            <param name="index">Index of control point to set.</param>
            <param name="x">X coordinate of control point.</param>
            <param name="y">Y coordinate of control point.</param>
            <param name="z">Z coordinate of control point.</param>
            <param name="weight">Weight of control point.</param>
            <returns>true on success, false on failure.</returns>
            <remarks>
            For expert use only. If you do not understand homogeneous coordinates, then
            use an override that accepts world 3-D, or Euclidean, coordinates as input.
            </remarks>
            <since>5.0</since>
        </member>
        <member name="M:Rhino.Geometry.Collections.NurbsCurvePointList.SetPoint(System.Int32,Rhino.Geometry.Point3d)">
            <summary>
            Sets a world 3-D, or Euclidean, control point at the given index.
            The 4-D representation is (x, y, z, 1.0).
            </summary>
            <param name="index">Index of control point to set.</param>
            <param name="point">Coordinate of control point.</param>
            <returns>true on success, false on failure.</returns>
            <since>5.0</since>
        </member>
        <member name="M:Rhino.Geometry.Collections.NurbsCurvePointList.SetPoint(System.Int32,Rhino.Geometry.Point4d)">
            <summary>
            Sets a homogeneous control point at the given index, where the 4-D representation is (x, y, z, w).
            The world 3-D, or Euclidean, representation is (x/w, y/w, z/w).
            </summary>
            <param name="index">Index of control point to set.</param>
            <param name="point">Coordinate and weight of control point.</param>
            <returns>true on success, false on failure.</returns>
            <remarks>
            For expert use only. If you do not understand homogeneous coordinates, then
            use an override that accepts world 3-D, or Euclidean, coordinates as input.
            </remarks>
            <since>5.0</since>
        </member>
        <member name="M:Rhino.Geometry.Collections.NurbsCurvePointList.SetPoint(System.Int32,Rhino.Geometry.Point3d,System.Double)">
            <summary>
            Sets a world 3-D, or Euclidean, control point and weight at a given index.
            The 4-D representation is (x*w, y*w, z*w, w).
            </summary>
            <param name="index">Index of control point to set.</param>
            <param name="point">Coordinates of the control point.</param>
            <param name="weight">Weight of control point.</param>
            <returns>true on success, false on failure.</returns>
            <since>6.0</since>
        </member>
        <member name="M:Rhino.Geometry.Collections.NurbsCurvePointList.GetPoint(System.Int32,Rhino.Geometry.Point3d@)">
            <summary>
            Gets a world 3-D, or Euclidean, control point at the given index.
            The 4-D representation is (x, y, z, 1.0).
            </summary>
            <param name="index">Index of control point to get.</param>
            <param name="point">Coordinate of control point.</param>
            <returns>true on success, false on failure.</returns>
            <since>6.0</since>
        </member>
        <member name="M:Rhino.Geometry.Collections.NurbsCurvePointList.GetPoint(System.Int32,Rhino.Geometry.Point4d@)">
            <summary>
            Gets a homogeneous control point at the given index, where the 4-D representation is (x, y, z, w).
            The world 3-D, or Euclidean, representation is (x/w, y/w, z/w).
            </summary>
            <param name="index">Index of control point to get.</param>
            <param name="point">Coordinate and weight of control point.</param>
            <returns>true on success, false on failure.</returns>
            <remarks>
            For expert use only. If you do not understand homogeneous coordinates, then
            use the override that returns world 3-D, or Euclidean, coordinates.
            </remarks>
            <since>6.0</since>
        </member>
        <member name="M:Rhino.Geometry.Collections.NurbsCurvePointList.SetWeight(System.Int32,System.Double)">
            <summary>
            Sets the weight of a control point at the given index
            Note, if the curve is non-rational, it will be converted to rational.
            </summary>
            <param name="index">Index of control point to set.</param>
            <param name="weight">The control point weight.</param>
            <returns>true if successful, false otherwise.</returns>
            <since>6.0</since>
        </member>
        <member name="M:Rhino.Geometry.Collections.NurbsCurvePointList.GetWeight(System.Int32)">
            <summary>
            Gets the weight of a control point at the given index.
            Note, if the curve is non-rational, the weight will be 1.0.
            </summary>
            <param name="index">Index of control point to get.</param>
            <returns>The control point weight if successful, Rhino.Math.UnsetValue otherwise.</returns>
            <since>6.0</since>
        </member>
        <member name="P:Rhino.Geometry.Collections.NurbsCurvePointList.PointSize">
            <summary>
            Returns the control point size, or the number of doubles per control point. 
            For rational curves, PointSize = Curve.Dimension + 1. 
            For non-rational curves, PointSize = Curve.Dimension.
            </summary>
            <since>6.9</since>
        </member>
        <member name="M:Rhino.Geometry.Collections.NurbsCurvePointList.EpsilonEquals(Rhino.Geometry.Collections.NurbsCurvePointList,System.Double)">
            <summary>
            Check that all values in other are within epsilon of the values in this
            </summary>
            <param name="other"></param>
            <param name="epsilon"></param>
            <returns></returns>
            <since>5.4</since>
        </member>
        <member name="P:Rhino.Geometry.Collections.NurbsCurvePointList.System#Collections#Generic#ICollection{Rhino#Geometry#ControlPoint}#IsReadOnly">
            <summary>
            Returns false.
            </summary>
        </member>
        <member name="M:Rhino.Geometry.Collections.NurbsCurvePointList.IndexOf(Rhino.Geometry.ControlPoint)">
            <summary>
            Gets the index of a control point, or -1.
            </summary>
            <param name="item">The exact item to search for.</param>
            <returns>The index.</returns>
            <since>6.0</since>
        </member>
        <member name="M:Rhino.Geometry.Collections.NurbsCurvePointList.Contains(Rhino.Geometry.ControlPoint)">
            <summary>
            Determines if this list contains an item.
            </summary>
            <param name="item">The exact item to search for.</param>
            <returns>A boolean value.</returns>
            <since>6.0</since>
        </member>
        <member name="M:Rhino.Geometry.Collections.NurbsCurvePointList.CopyTo(Rhino.Geometry.ControlPoint[],System.Int32)">
            <summary>
            Copied the list to an array.
            </summary>
            <param name="array">The array to copy to.</param>
            <param name="arrayIndex">The index in which the copy will begin.</param>
            <since>6.0</since>
        </member>
        <member name="T:Rhino.Geometry.Collections.NurbsSurfacePointList">
            <summary>
            Provides access to the control points of a NURBS surface.
            </summary>
        </member>
        <member name="M:Rhino.Geometry.Collections.NurbsSurfacePointList.EnsurePrivateCopy">
            <summary>
            If you want to keep a copy of this class around by holding onto it in a variable after a command
            completes, call EnsurePrivateCopy to make sure that this class is not tied to the document. You can
            call this function as many times as you want.
            </summary>
            <since>5.0</since>
        </member>
        <member name="P:Rhino.Geometry.Collections.NurbsSurfacePointList.CountU">
            <summary>
            Gets the number of control points in the U direction of this surface.
            </summary>
            <since>5.0</since>
        </member>
        <member name="P:Rhino.Geometry.Collections.NurbsSurfacePointList.CountV">
            <summary>
            Gets the number of control points in the V direction of this surface.
            </summary>
            <since>5.0</since>
        </member>
        <member name="M:Rhino.Geometry.Collections.NurbsSurfacePointList.GetGrevillePoint(System.Int32,System.Int32)">
            <summary>
            Gets the 2-D Greville point associated with the control point at the given (u, v) index.
            </summary>
            <param name="u">Index of control point in the surface U direction.</param>
            <param name="v">Index of control point in the surface V direction.</param>
            <returns>A Surface UV coordinate on success, Point2d.Unset on failure.</returns>
            <since>5.0</since>
        </member>
        <member name="M:Rhino.Geometry.Collections.NurbsSurfacePointList.GetControlPoint(System.Int32,System.Int32)">
            <summary>
            Gets the control point at the given (u, v) index.
            </summary>
            <param name="u">Index of control point in the surface U direction.</param>
            <param name="v">Index of control point in the surface V direction.</param>
            <returns>The control point at the given (u, v) index.</returns>
            <since>5.0</since>
        </member>
        <member name="M:Rhino.Geometry.Collections.NurbsSurfacePointList.SetControlPoint(System.Int32,System.Int32,Rhino.Geometry.ControlPoint)">
            <summary>
            Sets the control point at the given (u, v) index.
            </summary>
            <param name="u">Index of control point in the surface U direction.</param>
            <param name="v">Index of control point in the surface V direction.</param>
            <param name="cp">The control point to set.</param>
            <returns>true on success, false on failure.</returns>
            <since>5.0</since>
        </member>
        <member name="M:Rhino.Geometry.Collections.NurbsSurfacePointList.SetControlPoint(System.Int32,System.Int32,Rhino.Geometry.Point3d)">
            <summary>
            Sets the control point at the given (u, v) index.
            </summary>
            <param name="u">Index of control point in the surface U direction.</param>
            <param name="v">Index of control point in the surface V direction.</param>
            <param name="cp">The control point location to set (weight is assumed to be 1.0).</param>
            <returns>true on success, false on failure.</returns>
            <since>5.0</since>
            <deprecated>6.0</deprecated>
        </member>
        <member name="M:Rhino.Geometry.Collections.NurbsSurfacePointList.SetPoint(System.Int32,System.Int32,System.Double,System.Double,System.Double)">
            <summary>
            Sets a world 3-D, or Euclidean, control point at the given (u, v) index.
            The 4-D representation is (x, y, z, 1.0).
            </summary>
            <param name="u">Index of control point in the surface U direction.</param>
            <param name="v">Index of control point in the surface V direction.</param>
            <param name="x">X coordinate of control point.</param>
            <param name="y">Y coordinate of control point.</param>
            <param name="z">Z coordinate of control point.</param>
            <returns>true on success, false on failure.</returns>
            <since>6.0</since>
        </member>
        <member name="M:Rhino.Geometry.Collections.NurbsSurfacePointList.SetPoint(System.Int32,System.Int32,System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Sets a homogeneous control point at the given (u, v) index, where the 4-D representation is (x, y, z, w).
            The world 3-D, or Euclidean, representation is (x/w, y/w, z/w).
            </summary>
            <param name="u">Index of control point in the surface U direction.</param>
            <param name="v">Index of control point in the surface V direction.</param>
            <param name="x">X coordinate of control point.</param>
            <param name="y">Y coordinate of control point.</param>
            <param name="z">Z coordinate of control point.</param>
            <param name="weight">Weight of control point.</param>
            <returns>true on success, false on failure.</returns>
            <remarks>
            For expert use only. If you do not understand homogeneous coordinates, then
            use an override that accepts world 3-D, or Euclidean, coordinates as input.
            </remarks>
            <since>6.0</since>
        </member>
        <member name="M:Rhino.Geometry.Collections.NurbsSurfacePointList.SetPoint(System.Int32,System.Int32,Rhino.Geometry.Point3d)">
            <summary>
            Sets a world 3-D, or Euclidean, control point at the given (u, v) index.
            The 4-D representation is (x, y, z, 1.0).
            </summary>
            <param name="u">Index of control point in the surface U direction.</param>
            <param name="v">Index of control point in the surface V direction.</param>
            <param name="point">Coordinate of control point.</param>
            <returns>true on success, false on failure.</returns>
            <since>6.0</since>
        </member>
        <member name="M:Rhino.Geometry.Collections.NurbsSurfacePointList.SetPoint(System.Int32,System.Int32,Rhino.Geometry.Point4d)">
            <summary>
            Sets a homogeneous control point at the given (u, v) index, where the 4-D representation is (x, y, z, w).
            The world 3-D, or Euclidean, representation is (x/w, y/w, z/w).
            </summary>
            <param name="u">Index of control point in the surface U direction.</param>
            <param name="v">Index of control point in the surface V direction.</param>
            <param name="point">Coordinate and weight of control point.</param>
            <returns>true on success, false on failure.</returns>
            <remarks>
            For expert use only. If you do not understand homogeneous coordinates, then
            use an override that accepts world 3-D, or Euclidean, coordinates as input.
            </remarks>
            <since>6.0</since>
        </member>
        <member name="M:Rhino.Geometry.Collections.NurbsSurfacePointList.SetPoint(System.Int32,System.Int32,Rhino.Geometry.Point3d,System.Double)">
            <summary>
            Sets a world 3-D, or Euclidean, control point and weight at a given index.
            The 4-D representation is (x*w, y*w, z*w, w).
            </summary>
            <param name="u">Index of control point in the surface U direction.</param>
            <param name="v">Index of control point in the surface V direction.</param>
            <param name="point">Coordinates of the control point.</param>
            <param name="weight">Weight of control point.</param>
            <returns>true on success, false on failure.</returns>
            <since>6.0</since>
        </member>
        <member name="M:Rhino.Geometry.Collections.NurbsSurfacePointList.GetPoint(System.Int32,System.Int32,Rhino.Geometry.Point3d@)">
            <summary>
            Gets a world 3-D, or Euclidean, control point at the given (u, v) index.
            The 4-D representation is (x, y, z, 1.0).
            </summary>
            <param name="u">Index of control point in the surface U direction.</param>
            <param name="v">Index of control point in the surface V direction.</param>
            <param name="point">Coordinate of control point.</param>
            <returns>true on success, false on failure.</returns>
            <since>6.0</since>
        </member>
        <member name="M:Rhino.Geometry.Collections.NurbsSurfacePointList.GetPoint(System.Int32,System.Int32,Rhino.Geometry.Point4d@)">
            <summary>
            Gets a homogeneous control point at the given (u, v) index, where the 4-D representation is (x, y, z, w).
            The world 3-D, or Euclidean, representation is (x/w, y/w, z/w).
            </summary>
            <param name="u">Index of control point in the surface U direction.</param>
            <param name="v">Index of control point in the surface V direction.</param>
            <param name="point">Coordinate and weight of control point.</param>
            <returns>true on success, false on failure.</returns>
            <remarks>
            For expert use only. If you do not understand homogeneous coordinates, then
            use the override that returns world 3-D, or Euclidean, coordinates.
            </remarks>
            <since>6.0</since>
        </member>
        <member name="M:Rhino.Geometry.Collections.NurbsSurfacePointList.SetWeight(System.Int32,System.Int32,System.Double)">
            <summary>
            Sets the weight of a control point at the given (u, v) index.
            Note, if the surface is non-rational, it will be converted to rational.
            </summary>
            <param name="u">Index of control-point along surface U direction.</param>
            <param name="v">Index of control-point along surface V direction.</param>
            <param name="weight">The control point weight.</param>
            <returns>true if successful, false otherwise.</returns>
            <since>6.0</since>
        </member>
        <member name="M:Rhino.Geometry.Collections.NurbsSurfacePointList.GetWeight(System.Int32,System.Int32)">
            <summary>
            Gets the weight of a control point at the given (u, v) index.
            Note, if the surface is non-rational, the weight will be 1.0.
            </summary>
            <param name="u">Index of control-point along surface U direction.</param>
            <param name="v">Index of control-point along surface V direction.</param>
            <returns>The control point weight if successful, Rhino.Math.UnsetValue otherwise.</returns>
            <since>6.0</since>
        </member>
        <member name="P:Rhino.Geometry.Collections.NurbsSurfacePointList.PointSize">
            <summary>
            Returns the control point size, or the number of doubles per control point. 
            For rational curves, PointSize = Surface.Dimension + 1. 
            For non-rational curves, PointSize = Surface.Dimension.
            </summary>
            <since>6.9</since>
        </member>
        <member name="M:Rhino.Geometry.Collections.NurbsSurfacePointList.EpsilonEquals(Rhino.Geometry.Collections.NurbsSurfacePointList,System.Double)">
            <summary>
            Check that all values in other are within epsilon of the values in this
            </summary>
            <param name="other"></param>
            <param name="epsilon"></param>
            <returns></returns>
            <since>5.4</since>
        </member>
        <member name="T:Rhino.Geometry.Collections.NurbsSurfaceKnotList">
            <summary>
            Provides access to the knot vector of a NURBS surface.
            </summary>
        </member>
        <member name="P:Rhino.Geometry.Collections.NurbsSurfaceKnotList.Count">
            <summary>Gets the total number of knots in this curve.</summary>
            <since>5.0</since>
        </member>
        <member name="P:Rhino.Geometry.Collections.NurbsSurfaceKnotList.ClampedAtStart">
            <summary>Determines if a knot vector is clamped.</summary>
            <since>5.0</since>
        </member>
        <member name="P:Rhino.Geometry.Collections.NurbsSurfaceKnotList.ClampedAtEnd">
            <summary>Determines if a knot vector is clamped.</summary>
            <since>5.0</since>
        </member>
        <member name="M:Rhino.Geometry.Collections.NurbsSurfaceKnotList.SuperfluousKnot(System.Boolean)">
            <summary>
            Computes the knots that are superfluous because they are not used in NURBs evaluation.
            These make it appear so that the first and last surface spans are different from interior spans.
            <para>http://wiki.mcneel.com/developer/onsuperfluousknot</para>
            </summary>
            <param name="start">true if the query targets the first knot. Otherwise, the last knot.</param>
            <returns>A component.</returns>
            <since>5.0</since>
        </member>
        <member name="P:Rhino.Geometry.Collections.NurbsSurfaceKnotList.Item(System.Int32)">
            <summary>
            Gets or sets the knot vector value at the given index.
            </summary>
            <param name="index">Index of knot to access.</param>
            <returns>The knot value at [index]</returns>
        </member>
        <member name="M:Rhino.Geometry.Collections.NurbsSurfaceKnotList.EnsurePrivateCopy">
            <summary>
            If you want to keep a copy of this class around by holding onto it in a variable after a command
            completes, call EnsurePrivateCopy to make sure that this class is not tied to the document. You can
            call this function as many times as you want.
            </summary>
            <since>5.0</since>
        </member>
        <member name="M:Rhino.Geometry.Collections.NurbsSurfaceKnotList.InsertKnot(System.Double)">
            <summary>
            Inserts a knot and update control point locations.
            Does not change parameterization or locus of curve.
            </summary>
            <param name="value">Knot value to insert.</param>
            <returns>true on success, false on failure.</returns>
            <since>5.0</since>
        </member>
        <member name="M:Rhino.Geometry.Collections.NurbsSurfaceKnotList.InsertKnot(System.Double,System.Int32)">
            <summary>
            Inserts a knot and update control point locations.
            Does not change parameterization or locus of curve.
            </summary>
            <param name="value">Knot value to insert.</param>
            <param name="multiplicity">Multiplicity of knot to insert.</param>
            <returns>true on success, false on failure.</returns>
            <since>5.0</since>
        </member>
        <member name="M:Rhino.Geometry.Collections.NurbsSurfaceKnotList.KnotMultiplicity(System.Int32)">
            <summary>Get knot multiplicity.</summary>
            <param name="index">Index of knot to query.</param>
            <returns>The multiplicity (valence) of the knot.</returns>
            <since>5.0</since>
        </member>
        <member name="M:Rhino.Geometry.Collections.NurbsSurfaceKnotList.CreateUniformKnots(System.Double)">
            <summary>
            Compute a clamped, uniform knot vector based on the current
            degree and control point count. Does not change values of control
            vertices.
            </summary>
            <param name="knotSpacing">Spacing of subsequent knots.</param>
            <returns>true on success, false on failure.</returns>
            <since>5.0</since>
        </member>
        <member name="M:Rhino.Geometry.Collections.NurbsSurfaceKnotList.CreatePeriodicKnots(System.Double)">
            <summary>
            Compute a clamped, uniform, periodic knot vector based on the current
            degree and control point count. Does not change values of control
            vertices.
            </summary>
            <param name="knotSpacing">Spacing of subsequent knots.</param>
            <returns>true on success, false on failure.</returns>
            <since>5.0</since>
        </member>
        <member name="M:Rhino.Geometry.Collections.NurbsSurfaceKnotList.EpsilonEquals(Rhino.Geometry.Collections.NurbsSurfaceKnotList,System.Double)">
            <summary>
            Check that all values in other are within epsilon of the values in this
            </summary>
            <param name="other"></param>
            <param name="epsilon"></param>
            <returns></returns>
            <since>5.4</since>
        </member>
        <member name="T:Rhino.Geometry.Collections.SubDVertexList">
            <summary>
            Provides access to all the vertices and vertex-related functionality of a SubD
            </summary>
        </member>
        <member name="P:Rhino.Geometry.Collections.SubDVertexList.Count">
            <summary>
            Gets the number of SubD vertices.
            </summary>
            <since>7.0</since>
        </member>
        <member name="P:Rhino.Geometry.Collections.SubDVertexList.First">
            <summary>
            First vertex in this linked list of vertices
            </summary>
            <since>7.0</since>
        </member>
        <member name="M:Rhino.Geometry.Collections.SubDVertexList.Find(System.UInt32)">
            <summary>
            Find a vertex in this SubD with a given id
            </summary>
            <param name="id"></param>
            <returns></returns>
            <since>7.0</since>
        </member>
        <member name="M:Rhino.Geometry.Collections.SubDVertexList.Find(System.Int32)">
            <summary>
            Find a vertex in this SubD with a given id
            </summary>
            <param name="id"></param>
            <returns></returns>
            <since>7.0</since>
        </member>
        <member name="M:Rhino.Geometry.Collections.SubDVertexList.Add(Rhino.Geometry.SubDVertexTag,Rhino.Geometry.Point3d)">
            <summary>
            Add a new vertex to the end of the Vertex list.
            </summary>
            <param name="tag">The type of vertex tag, such as smooth or corner.</param>
            <param name="vertex">Location of new vertex.</param>
            <returns>The newly added vertex.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">If tag is unset or non-defined.</exception>
            <since>7.0</since>
        </member>
        <member name="T:Rhino.Geometry.Collections.SubDEdgeList">
            <summary>
            All edges in a SubD
            </summary>
        </member>
        <member name="P:Rhino.Geometry.Collections.SubDEdgeList.Count">
            <summary>
            Gets the number of SubD edges.
            </summary>
            <since>7.0</since>
        </member>
        <member name="M:Rhino.Geometry.Collections.SubDEdgeList.Find(System.UInt32)">
            <summary>
            Find an edge in this SubD with a given id
            </summary>
            <param name="id"></param>
            <returns></returns>
            <since>7.0</since>
        </member>
        <member name="M:Rhino.Geometry.Collections.SubDEdgeList.Find(System.Int32)">
            <summary>
            Find an edge in this SubD with a given id
            </summary>
            <param name="id"></param>
            <returns></returns>
            <since>7.0</since>
        </member>
        <member name="M:Rhino.Geometry.Collections.SubDEdgeList.GetEnumerator">
            <summary>
            Implementation of IEnumerable
            </summary>
            <returns></returns>
            <since>7.0</since>
        </member>
        <member name="M:Rhino.Geometry.Collections.SubDEdgeList.System#Collections#IEnumerable#GetEnumerator">
            <since>7.0</since>
        </member>
        <member name="M:Rhino.Geometry.Collections.SubDEdgeList.EdgeEnumerator">
            <summary>
            All edges associated with this vertex
            </summary>
        </member>
        <member name="M:Rhino.Geometry.Collections.SubDEdgeList.Add(Rhino.Geometry.SubDEdgeTag,Rhino.Geometry.SubDVertex,Rhino.Geometry.SubDVertex)">
            <summary>
            Add a new edge to the list.
            </summary>
            <param name="tag">The type of edge tag, such as smooth or corner.</param>
            <param name="v0">First vertex.</param>
            <param name="v1">Second vertex.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">If tag is unset or non-defined.</exception>
            <since>7.0</since>
        </member>
        <member name="M:Rhino.Geometry.Collections.SubDEdgeList.SetEdgeTags(System.Collections.Generic.IEnumerable{System.Int32},Rhino.Geometry.SubDEdgeTag)">
            <summary>
            Set edge tags for a list of edges. Useful for adding creases to SubDs
            </summary>
            <param name="edgeIndices">list of indices for the edges to set tags on</param>
            <param name="tag">The type of edge tag</param>
            <since>7.7</since>
        </member>
        <member name="M:Rhino.Geometry.Collections.SubDEdgeList.SetEdgeTags(System.Collections.Generic.IEnumerable{Rhino.Geometry.SubDEdge},Rhino.Geometry.SubDEdgeTag)">
            <summary>
            Set edge tags for a list of edges. Useful for adding creases to SubDs
            </summary>
            <param name="edges">list of edges to set a specific tag on</param>
            <param name="tag">The type of edge tag</param>
            <since>7.7</since>
        </member>
        <member name="T:Rhino.Geometry.Collections.SubDFaceList">
            <summary> All faces in a SubD </summary>
        </member>
        <member name="P:Rhino.Geometry.Collections.SubDFaceList.Count">
            <summary>
            Gets the number of SubD faces.
            </summary>
            <since>7.0</since>
        </member>
        <member name="M:Rhino.Geometry.Collections.SubDFaceList.Find(System.UInt32)">
            <summary>
            Find a face in this SubD with a given id
            </summary>
            <param name="id"></param>
            <returns></returns>
            <since>7.0</since>
        </member>
        <member name="M:Rhino.Geometry.Collections.SubDFaceList.Find(System.Int32)">
            <summary>
            Find a face in this SubD with a given id
            </summary>
            <param name="id"></param>
            <returns></returns>
            <since>7.0</since>
        </member>
        <member name="M:Rhino.Geometry.Collections.SubDFaceList.GetEnumerator">
            <summary>
            Implementation of IEnumerable
            </summary>
            <returns></returns>
            <since>7.0</since>
        </member>
        <member name="M:Rhino.Geometry.Collections.SubDFaceList.System#Collections#IEnumerable#GetEnumerator">
            <since>7.0</since>
        </member>
        <member name="M:Rhino.Geometry.Collections.SubDFaceList.Add(Rhino.Geometry.SubDEdge[],System.Boolean[])">
            <summary>
            Adds a new edge to the end of the edge list.
            </summary>
            <param name="edges">edges to add</param>
            <param name="directions">The direction each of these edges has, related to the face.
            True means that the edge is reversed compared to the counter-clockwise order of the face.
            <para>This argument can be null. In this case, no edge is considered reversed.</para></param>
            <exception cref="T:System.ArgumentOutOfRangeException">If tag is unset or non-defined.</exception>
        </member>
        <member name="T:Rhino.Geometry.Circle">
            <summary>
            Represents a circle in 3D.
            <para>The values used are a radius and an orthonormal frame	of the plane containing the circle,
            with origin at the center.</para>
            <para>The circle is parameterized by radians from 0 to 2 Pi given by</para>
            <para>t -> center + cos(t)*radius*xaxis + sin(t)*radius*yaxis</para>
            <para>where center, xaxis and yaxis define the orthonormal frame of the circle plane.</para>
            </summary>
            <remarks>>An IsValid circle has positive radius and an IsValid plane defining the frame.</remarks>
        </member>
        <member name="M:Rhino.Geometry.Circle.TryFitCircleTT(Rhino.Geometry.Curve,Rhino.Geometry.Curve,System.Double,System.Double)">
            <summary>
            Try to fit a circle to two curves using tangent relationships.
            </summary>
            <param name="c1">First curve to touch.</param>
            <param name="c2">Second curve to touch.</param>
            <param name="t1">Parameter on first curve close to desired solution.</param>
            <param name="t2">Parameter on second curve closet to desired solution.</param>
            <returns>Valid circle on success, Circle.Unset on failure.</returns>
            <since>5.0</since>
        </member>
        <member name="M:Rhino.Geometry.Circle.TryFitCircleTTT(Rhino.Geometry.Curve,Rhino.Geometry.Curve,Rhino.Geometry.Curve,System.Double,System.Double,System.Double)">
            <summary>
            Try to fit a circle to three curves using tangent relationships.
            </summary>
            <param name="c1">First curve to touch.</param>
            <param name="c2">Second curve to touch.</param>
            <param name="c3">Third curve to touch.</param>
            <param name="t1">Parameter on first curve close to desired solution.</param>
            <param name="t2">Parameter on second curve closet to desired solution.</param>
            <param name="t3">Parameter on third curve close to desired solution.</param>
            <returns>Valid circle on success, Circle.Unset on failure.</returns>
            <since>5.0</since>
        </member>
        <member name="P:Rhino.Geometry.Circle.Unset">
            <summary>
            Gets a circle with Unset components.
            </summary>
            <since>5.0</since>
        </member>
        <member name="M:Rhino.Geometry.Circle.#ctor(System.Double)">
            <summary>
            Initializes a circle with center (0,0,0) in the world XY plane.
            </summary>
            <param name="radius">Radius of circle, should be a positive number.</param>
            <since>5.0</since>
        </member>
        <member name="M:Rhino.Geometry.Circle.#ctor(Rhino.Geometry.Plane,System.Double)">
            <summary>
            Initializes a circle on a plane with a given radius.
            </summary>
            <param name="plane">Plane of circle. Plane origin defines the center of the circle.</param>
            <param name="radius">Radius of circle (should be a positive value).</param>
            <example>
            <code source='examples\vbnet\ex_addcircle.vb' lang='vbnet'/>
            <code source='examples\cs\ex_addcircle.cs' lang='cs'/>
            <code source='examples\py\ex_addcircle.py' lang='py'/>
            </example>
            <since>5.0</since>
        </member>
        <member name="M:Rhino.Geometry.Circle.#ctor(Rhino.Geometry.Point3d,System.Double)">
            <summary>
            Initializes a circle parallel to the world XY plane with given center and radius.
            </summary>
            <param name="center">Center of circle.</param>
            <param name="radius">Radius of circle (should be a positive value).</param>
            <example>
            <code source='examples\vbnet\ex_addtruncatedcone.vb' lang='vbnet'/>
            <code source='examples\cs\ex_addtruncatedcone.cs' lang='cs'/>
            <code source='examples\py\ex_addtruncatedcone.py' lang='py'/>
            </example>
            <since>5.0</since>
        </member>
        <member name="M:Rhino.Geometry.Circle.#ctor(Rhino.Geometry.Arc)">
            <summary>
            Initializes a circle from an arc.
            </summary>
            <param name="arc">Arc that defines the plane and radius.</param>
            <since>5.0</since>
        </member>
        <member name="M:Rhino.Geometry.Circle.#ctor(Rhino.Geometry.Point3d,Rhino.Geometry.Point3d,Rhino.Geometry.Point3d)">
            <summary>
            Initializes a circle through three 3d points. 
            </summary>
            <param name="point1">The start/end of the circle is at point1.</param>
            <param name="point2">Second point on the circle.</param>
            <param name="point3">Third point on the circle.</param>
            <since>5.0</since>
        </member>
        <member name="M:Rhino.Geometry.Circle.#ctor(Rhino.Geometry.Plane,Rhino.Geometry.Point3d,System.Double)">
            <summary>
            Initializes a circle parallel to a given plane with given center and radius.
            </summary>
            <param name="plane">Plane for circle.</param>
            <param name="center">Center point override.</param>
            <param name="radius">Radius of circle (should be a positive value).</param>
            <since>5.0</since>
        </member>
        <member name="M:Rhino.Geometry.Circle.#ctor(Rhino.Geometry.Point3d,Rhino.Geometry.Vector3d,Rhino.Geometry.Point3d)">
            <summary>
            Initializes a circle from two 3d points and a tangent at the first point.
            The start/end of the circle is at point "startPoint".
            </summary>
            <param name="startPoint">Start point of circle.</param>
            <param name="tangentAtP">Tangent vector at start.</param>
            <param name="pointOnCircle">Point coincident with desired circle.</param>
            <remarks>May create an Invalid circle</remarks>
            <since>5.0</since>
        </member>
        <member name="P:Rhino.Geometry.Circle.IsValid">
            <summary> 
            A valid circle has radius larger than 0.0 and a base plane which is must also be valid.
            </summary>
            <since>5.0</since>
        </member>
        <member name="P:Rhino.Geometry.Circle.Radius">
            <summary>
            Gets or sets the radius of this circle. 
            Radii should be positive values.
            </summary>
            <since>5.0</since>
        </member>
        <member name="P:Rhino.Geometry.Circle.Diameter">
            <summary>
            Gets or sets the diameter (radius * 2.0) of this circle. 
            Diameters should be positive values.
            </summary>
            <since>5.0</since>
        </member>
        <member name="P:Rhino.Geometry.Circle.Plane">
            <summary>
            Gets or sets the plane of the circle.
            </summary>
            <since>5.0</since>
        </member>
        <member name="P:Rhino.Geometry.Circle.Center">
            <summary>
            Gets or sets the center point of this circle.
            </summary>
            <since>5.0</since>
        </member>
        <member name="P:Rhino.Geometry.Circle.Normal">
            <summary>
            Gets the normal vector for this circle.
            </summary>
            <since>5.0</since>
        </member>
        <member name="P:Rhino.Geometry.Circle.Circumference">
            <summary>
            Gets or sets the circumference of this circle.
            </summary>
            <since>5.0</since>
        </member>
        <member name="P:Rhino.Geometry.Circle.BoundingBox">
            <summary>
            Gets the circle's 3d axis aligned bounding box.
            </summary>
            <returns>3d bounding box.</returns>
            <since>5.0</since>
        </member>
        <member name="M:Rhino.Geometry.Circle.IsInPlane(Rhino.Geometry.Plane,System.Double)">
            <summary>
            Evaluates whether or not this circle is co-planar with a given plane.
            </summary>
            <param name="plane">Plane.</param>
            <param name="tolerance">Tolerance to use.</param>
            <returns>true if the circle plane is co-planar with the given plane within tolerance.</returns>
            <since>5.0</since>
        </member>
        <member name="M:Rhino.Geometry.Circle.PointAt(System.Double)">
            <summary>
            Circles use trigonometric parameterization: 
            t -> center + cos(t)*radius*xaxis + sin(t)*radius*yaxis.
            </summary>
            <param name="t">Parameter of point to evaluate.</param>
            <returns>The point on the circle at the given parameter.</returns>
            <since>5.0</since>
        </member>
        <member name="M:Rhino.Geometry.Circle.TangentAt(System.Double)">
            <summary>
            Circles use trigonometric parameterization: 
            t -> center + cos(t)*radius*xaxis + sin(t)*radius*yaxis.
            </summary>
            <param name="t">Parameter of tangent to evaluate.</param>
            <returns>The tangent at the circle at the given parameter.</returns>
            <since>5.0</since>
        </member>
        <member name="M:Rhino.Geometry.Circle.DerivativeAt(System.Int32,System.Double)">
            <summary>
            Determines the value of the Nth derivative at a parameter. 
            </summary>
            <param name="derivative">Which order of derivative is wanted.</param>
            <param name="t">Parameter to evaluate derivative. Valid values are 0, 1, 2 and 3.</param>
            <returns>The derivative of the circle at the given parameter.</returns>
            <since>5.0</since>
        </member>
        <member name="M:Rhino.Geometry.Circle.ClosestParameter(Rhino.Geometry.Point3d,System.Double@)">
            <summary>
            Gets the parameter on the circle which is closest to a test point.
            </summary>
            <param name="testPoint">Point to project onto the circle.</param>
            <param name="t">Parameter on circle closes to testPoint.</param>
            <returns>true on success, false on failure.</returns>
            <since>5.0</since>
        </member>
        <member name="M:Rhino.Geometry.Circle.ClosestPoint(Rhino.Geometry.Point3d)">
            <summary>
            Gets the point on the circle which is closest to a test point.
            </summary>
            <param name="testPoint">Point to project onto the circle.</param>
            <returns>
            The point on the circle that is closest to testPoint or
            Point3d.Unset on failure.
            </returns>
            <since>5.0</since>
        </member>
        <member name="M:Rhino.Geometry.Circle.Transform(Rhino.Geometry.Transform)">
            <summary>
            Transforms this circle using an transformation matrix. 
            </summary>
            <param name="xform">Transformation to apply.</param>
            <returns>true on success, false on failure.</returns>
            <remarks>
            Circles may not be transformed accurately if the transformation defines a 
            non-euclidean transformation.
            </remarks>
            <since>5.0</since>
        </member>
        <member name="M:Rhino.Geometry.Circle.Rotate(System.Double,System.Double,Rhino.Geometry.Vector3d)">
            <summary>
            Rotates the circle around an axis that starts at the base plane origin.
            </summary>
            <param name="sinAngle">The value returned by Math.Sin(angle) to compose the rotation.</param>
            <param name="cosAngle">The value returned by Math.Cos(angle) to compose the rotation.</param>
            <param name="axis">A rotation axis.</param>
            <returns>true on success, false on failure.</returns>
            <since>5.0</since>
        </member>
        <member name="M:Rhino.Geometry.Circle.Rotate(System.Double,System.Double,Rhino.Geometry.Vector3d,Rhino.Geometry.Point3d)">
            <summary>
            Rotates the circle around an axis that starts at the provided point.
            </summary>
            <param name="sinAngle">The value returned by Math.Sin(angle) to compose the rotation.</param>
            <param name="cosAngle">The value returned by Math.Cos(angle) to compose the rotation.</param>
            <param name="axis">A rotation direction.</param>
            <param name="point">A rotation base point.</param>
            <returns>true on success, false on failure.</returns>
            <since>5.0</since>
        </member>
        <member name="M:Rhino.Geometry.Circle.Rotate(System.Double,Rhino.Geometry.Vector3d)">
            <summary>
            Rotates the circle through a given angle.
            </summary>
            <param name="angle">Angle (in radians) of the rotation.</param>
            <param name="axis">Rotation axis.</param>
            <returns>true on success, false on failure.</returns>
            <since>5.0</since>
        </member>
        <member name="M:Rhino.Geometry.Circle.Rotate(System.Double,Rhino.Geometry.Vector3d,Rhino.Geometry.Point3d)">
            <summary>
            Rotates the circle through a given angle.
            </summary>
            <param name="angle">Angle (in radians) of the rotation.</param>
            <param name="axis">Rotation axis.</param>
            <param name="point">Rotation anchor point.</param>
            <returns>true on success, false on failure.</returns>
            <since>5.0</since>
        </member>
        <member name="M:Rhino.Geometry.Circle.Translate(Rhino.Geometry.Vector3d)">
            <summary>
            Moves the circle.
            </summary>
            <param name="delta">Translation vector.</param>
            <returns>true on success, false on failure.</returns>
            <since>5.0</since>
        </member>
        <member name="M:Rhino.Geometry.Circle.Reverse">
            <summary>
            Reverse the orientation of the circle. Changes the domain from [a,b]
            to [-b,-a].
            </summary>
            <since>5.0</since>
        </member>
        <member name="M:Rhino.Geometry.Circle.ToNurbsCurve">
            <summary>
            Constructs a nurbs curve representation of this circle. 
            This amounts to the same as calling NurbsCurve.CreateFromCircle().
            </summary>
            <returns>A nurbs curve representation of this circle or null if no such representation could be made.</returns>
            <since>5.0</since>
        </member>
        <member name="M:Rhino.Geometry.Circle.EpsilonEquals(Rhino.Geometry.Circle,System.Double)">
            <summary>
            Check that all values in other are within epsilon of the values in this
            </summary>
            <param name="other"></param>
            <param name="epsilon"></param>
            <returns></returns>
            <since>5.4</since>
        </member>
        <member name="T:Rhino.Geometry.ComponentStatus">
            <summary>
            Provides information about selection, highlighting, visibility, editability and integrity states of a component.
            <para>This structure is immutable.</para>
            </summary>
        </member>
        <member name="M:Rhino.Geometry.ComponentStatus.#ctor(Rhino.Geometry.ComponentState)">
            <summary>Only used to create from named states.</summary>
        </member>
        <member name="M:Rhino.Geometry.ComponentStatus.#ctor(System.Byte)">
            <summary>Used in marshaling. Do NOT expose this.
            This will ensure the same type safety present in OpenNURBS.</summary>
        </member>
        <member name="P:Rhino.Geometry.ComponentStatus.Clear">
            <summary>
            This is the default value and equal to undefined.
            </summary>
            <since>6.0</since>
        </member>
        <member name="P:Rhino.Geometry.ComponentStatus.Selected">
            <summary>
            The selection flag is checked.
            </summary>
            <since>6.0</since>
        </member>
        <member name="P:Rhino.Geometry.ComponentStatus.SelectedPersistent">
            <summary>
            The persistent selection flag is checked.
            </summary>
            <since>6.0</since>
        </member>
        <member name="P:Rhino.Geometry.ComponentStatus.Highlighted">
            <summary>
            The highlight selection flag is checked.
            </summary>
            <since>6.0</since>
        </member>
        <member name="P:Rhino.Geometry.ComponentStatus.Hidden">
            <summary>
            The hidden flag is checked.
            </summary>
            <since>6.0</since>
        </member>
        <member name="P:Rhino.Geometry.ComponentStatus.Locked">
            <summary>
            The locked flag is checked.
            </summary>
            <since>6.0</since>
        </member>
        <member name="P:Rhino.Geometry.ComponentStatus.Damaged">
            <summary>
            The damaged flag is checked.
            </summary>
            <since>6.0</since>
        </member>
        <member name="P:Rhino.Geometry.ComponentStatus.AllSet">
            <summary>
            All flags are checked.
            </summary>
            <since>6.0</since>
        </member>
        <member name="P:Rhino.Geometry.ComponentStatus.IsClear">
            <summary>
            True if every setting is 0 or false.
            </summary>
            <returns>True if the component status is undefined or clear.</returns>
            <since>6.0</since>
        </member>
        <member name="P:Rhino.Geometry.ComponentStatus.IsDamaged">
            <summary>
            Returns false if component is not damaged. True otherwise.
            </summary>
            <returns>The component status for damaged.</returns>
            <since>6.0</since>
        </member>
        <member name="P:Rhino.Geometry.ComponentStatus.IsHighlighted">
            <summary>
            Returns true if highlighted. False otherwise.
            </summary>
            <returns>The component status for highlighted.</returns>
            <since>6.0</since>
        </member>
        <member name="P:Rhino.Geometry.ComponentStatus.IsHidden">
            <summary>
            Returns true if hidden. False otherwise.
            </summary>
            <returns>The component status for hidden.</returns>
            <since>6.0</since>
        </member>
        <member name="P:Rhino.Geometry.ComponentStatus.IsLocked">
            <summary>
            Returns true if locked. False otherwise.
            </summary>
            <returns>The component status for locked.</returns>
            <since>6.0</since>
        </member>
        <member name="P:Rhino.Geometry.ComponentStatus.IsSelected">
            <summary>
            Returns true if selected or selected persistent. False otherwise.
            </summary>
            <returns>The component status for selected.</returns>
            <since>6.0</since>
        </member>
        <member name="P:Rhino.Geometry.ComponentStatus.IsSelectedPersistent">
            <summary>
            Returns true if selected persistent. False otherwise.
            </summary>
            <returns>The component status for selected.</returns>
            <since>6.0</since>
        </member>
        <member name="M:Rhino.Geometry.ComponentStatus.WithStates(Rhino.Geometry.ComponentStatus)">
            <summary>
            Activates any information flag described in any of the two input component statuses
            and returns a new ComponentStatus with those flags checked.
            </summary>
            <param name="additionalStatus">To be used for adding status values.</param>
            <since>6.0</since>
        </member>
        <member name="M:Rhino.Geometry.ComponentStatus.HasSomeEqualStates(Rhino.Geometry.ComponentStatus,Rhino.Geometry.ComponentStatus)">
            <summary>
            For the purposes of this test, Selected and SelectedPersistent are considered equal.
            </summary>
            <param name="statesFilter">If no states are specified, then false is returned.</param>
            <param name="comparand">If a state is set in states_filter, the corresponding state
            in "this" and comparand will be tested.</param>
            <returns>True if at least one tested state in "this" and comparand are identical.</returns>
            <since>6.0</since>
        </member>
        <member name="M:Rhino.Geometry.ComponentStatus.HasAllEqualStates(Rhino.Geometry.ComponentStatus,Rhino.Geometry.ComponentStatus)">
            <summary>
            For the purposes of this test, Selected and SelectedPersistent are considered equal.
            </summary>
            <param name="statesFilter">If no states are specified, then false is returned.</param>
            <param name="comparand">If a state is set in states_filter, the corresponding state
            in "this" and comparand will be tested.</param>
            <returns>True if at all tested states in "this" and comparand are identical.</returns>
            <since>6.0</since>
        </member>
        <member name="M:Rhino.Geometry.ComponentStatus.HasNoEqualStates(Rhino.Geometry.ComponentStatus,Rhino.Geometry.ComponentStatus)">
            <summary>
            For the purposes of this test, Selected and SelectedPersistent are considered equal.
            </summary>
            <param name="statesFilter">If no states are specified, then false is returned.</param>
            <param name="comparand">If a state is set in states_filter, the corresponding state
            in "this" and comparand will be tested.</param>
            <returns>True if at all tested states in "this" and comparand are identical.</returns>
            <since>6.0</since>
        </member>
        <member name="M:Rhino.Geometry.ComponentStatus.op_Addition(Rhino.Geometry.ComponentStatus,Rhino.Geometry.ComponentStatus)">
            <summary>
            Sets flags from both component states and returns a new ComponentStatus.
            </summary>
            <param name="a">The first ComponentStatus.</param>
            <param name="b">The second ComponentStatus.</param>
            <returns>A new ComponentStatus.</returns>
        </member>
        <member name="M:Rhino.Geometry.ComponentStatus.op_Equality(Rhino.Geometry.ComponentStatus,Rhino.Geometry.ComponentStatus)">
            <summary>
            Determines if two ComponentStatus objects are equal.
            </summary>
            <param name="a">The first ComponentStatus.</param>
            <param name="b">The second ComponentStatus.</param>
            <returns>true if they are exactly equal. False otherwise.</returns>
            <since>6.0</since>
        </member>
        <member name="M:Rhino.Geometry.ComponentStatus.op_Inequality(Rhino.Geometry.ComponentStatus,Rhino.Geometry.ComponentStatus)">
            <summary>
            Determines if two ComponentStatus objects differ.
            </summary>
            <param name="a">The first ComponentStatus.</param>
            <param name="b">The second ComponentStatus.</param>
            <returns>true if they are in any way different. False otherwise.</returns>
            <since>6.0</since>
        </member>
        <member name="M:Rhino.Geometry.ComponentStatus.ToString">
            <summary>
            Provides a string representation of this ComponentStatus.
            </summary>
            <returns>The representation in English.</returns>
        </member>
        <member name="M:Rhino.Geometry.ComponentStatus.Equals(Rhino.Geometry.ComponentStatus)">
            <summary>
            Determines if another ComponentStatus and this are equal.
            </summary>
            <param name="other">A ComponentStatus.</param>
            <returns>true if equal in value. false otherwise</returns>
            <since>6.0</since>
        </member>
        <member name="M:Rhino.Geometry.ComponentStatus.Equals(System.Object)">
            <summary>
            Determines if an object and this are equal.
            </summary>
            <param name="obj">An object.</param>
            <returns>true if equal in value. false otherwise</returns>
        </member>
        <member name="M:Rhino.Geometry.ComponentStatus.GetHashCode">
            <summary>
            Serves as a special hash function. The inner value is used for the purpose.
            </summary>
            <returns>An integer deriving from a bit mask.</returns>
        </member>
        <member name="T:Rhino.Geometry.Cone">
            <summary>
            Represents the center plane, radius and height values in a right circular cone.
            </summary>
        </member>
        <member name="P:Rhino.Geometry.Cone.Unset">
            <summary>
            Gets an invalid Cone.
            </summary>
            <since>5.0</since>
        </member>
        <member name="M:Rhino.Geometry.Cone.#ctor(Rhino.Geometry.Plane,System.Double,System.Double)">
            <summary>
            Initializes a new cone with a specified base plane, height and radius.
            </summary>
            <param name="plane">Base plane of cone.  The apex of the cone is at the plane's origin.</param>
            <param name="height">Height of cone.</param>
            <param name="radius">Radius of cone.</param>
            <since>5.0</since>
        </member>
        <member name="P:Rhino.Geometry.Cone.Plane">
            <summary>
            Gets or sets the base plane of the cone.  The apex of the cone is at the plane's origin.
            </summary>
            <since>5.0</since>
        </member>
        <member name="P:Rhino.Geometry.Cone.Height">
            <summary>
            Gets or sets the height of the circular right cone.
            </summary>
            <since>5.0</since>
        </member>
        <member name="P:Rhino.Geometry.Cone.Radius">
            <summary>
            Gets or sets the radius of the cone.
            </summary>
            <since>5.0</since>
        </member>
        <member name="P:Rhino.Geometry.Cone.IsValid">
            <summary>
            true if plane is valid, height is not zero and radius is not zero.
            </summary>
            <since>5.0</since>
        </member>
        <member name="P:Rhino.Geometry.Cone.BasePoint">
            <summary>Center of base circle.</summary>
            <since>5.0</since>
        </member>
        <member name="P:Rhino.Geometry.Cone.ApexPoint">
            <summary>Point at tip of the cone.</summary>
            <since>5.0</since>
        </member>
        <member name="P:Rhino.Geometry.Cone.Axis">
            <summary>Unit vector axis of cone.</summary>
            <since>5.0</since>
        </member>
        <member name="M:Rhino.Geometry.Cone.AngleInRadians">
            <summary>
            Computes the angle (in radians) between the axis and the 
            side of the cone.
            The angle and the height have the same sign.
            </summary>
            <returns>Math.Atan(Radius / Height) if the height is not 0; 0 if the radius is 0; Math.PI otherwise.</returns>
            <since>5.0</since>
        </member>
        <member name="M:Rhino.Geometry.Cone.AngleInDegrees">
            <summary>
            Computes the angle (in degrees) between the axis and the 
            side of the cone.
            The angle and the height have the same sign.
            </summary>
            <returns>An angle in degrees.</returns>
            <since>5.0</since>
        </member>
        <member name="M:Rhino.Geometry.Cone.ToNurbsSurface">
            <summary>
            Constructs a Nurbs surface representation of this Cone. 
            This is synonymous with calling NurbsSurface.CreateFromCone().
            </summary>
            <returns>A Nurbs surface representation of the cone or null.</returns>
            <since>5.0</since>
        </member>
        <member name="M:Rhino.Geometry.Cone.ToRevSurface">
            <summary>
            Constructs a RevSurface representation of this Cone. 
            This is synonymous with calling RevSurface.CreateFromCone().
            </summary>
            <returns>A RevSurface representation of the cone or null.</returns>
            <since>5.0</since>
        </member>
        <member name="M:Rhino.Geometry.Cone.ToBrep(System.Boolean)">
            <summary>
            Gets a Brep representation of the cone with a single
            face for the cone, an edge along the cone seam, 
            and vertices at the base and apex ends of this seam edge.
            The optional cap is a single face with one circular edge 
            starting and ending at the base vertex.
            </summary>
            <param name="capBottom">true if the bottom should be filled with a surface. false otherwise.</param>
            <returns>A brep (polysurface) representation of this cone values.</returns>
            <since>5.0</since>
        </member>
        <member name="M:Rhino.Geometry.Cone.EpsilonEquals(Rhino.Geometry.Cone,System.Double)">
            <summary>
            Check that all values in other are within epsilon of the values in this
            </summary>
            <param name="other"></param>
            <param name="epsilon"></param>
            <returns></returns>
            <since>5.4</since>
        </member>
        <member name="T:Rhino.Geometry.BlendContinuity">
            <summary>
            Used in curve and surface blending and matching functions.
            </summary>
            <since>5.0</since>
        </member>
        <member name="F:Rhino.Geometry.BlendContinuity.Position">
            <summary>
            G0: The curves or surfaces touch at the join point (position).
            </summary>
        </member>
        <member name="F:Rhino.Geometry.BlendContinuity.Tangency">
            <summary>
            G1: The curves or surfaces also share a common tangent direction at the join point (tangent).
            </summary>
        </member>
        <member name="F:Rhino.Geometry.BlendContinuity.Curvature">
            <summary>
            G2: The curves or surfaces also share a common center of curvature at the join point (curvature).
            </summary>
        </member>
        <member name="T:Rhino.Geometry.PreserveEnd">
            <summary>
            Preserves, or maintains, the shape of the opposite the one being edited.
            </summary>
            <since>7.6</since>
        </member>
        <member name="F:Rhino.Geometry.PreserveEnd.None">
            <summary>
            No constraint.
            </summary>
        </member>
        <member name="F:Rhino.Geometry.PreserveEnd.Position">
            <summary>
            Location only.
            </summary>
        </member>
        <member name="F:Rhino.Geometry.PreserveEnd.Tangency">
            <summary>
            Position and curve direction.
            </summary>
        </member>
        <member name="F:Rhino.Geometry.PreserveEnd.Curvature">
            <summary>
            Position, direction, and radius of curvature. 
            </summary>
        </member>
        <member name="T:Rhino.Geometry.CurveOffsetCornerStyle">
            <summary>
            Defines enumerated values for all implemented corner styles in curve offsets.
            </summary>
            <since>5.0</since>
        </member>
        <member name="F:Rhino.Geometry.CurveOffsetCornerStyle.None">
            <summary>
            The default value.
            </summary>
        </member>
        <member name="F:Rhino.Geometry.CurveOffsetCornerStyle.Sharp">
            <summary>
            Offsets and extends curves with a straight line until they intersect.
            </summary>
        </member>
        <member name="F:Rhino.Geometry.CurveOffsetCornerStyle.Round">
            <summary>
            Offsets and fillets curves with an arc of radius equal to the offset distance.
            </summary>
        </member>
        <member name="F:Rhino.Geometry.CurveOffsetCornerStyle.Smooth">
            <summary>
            Offsets and connects curves with a smooth (G1 continuity) curve.
            </summary>
        </member>
        <member name="F:Rhino.Geometry.CurveOffsetCornerStyle.Chamfer">
            <summary>
            Offsets and connects curves with a straight line between their endpoints.
            </summary>
        </member>
        <member name="T:Rhino.Geometry.CurveOffsetEndStyle">
            <summary>
            Defines enumerated values for all implemented end styles in curve offsets.
            </summary>
            <since>7.0</since>
        </member>
        <member name="F:Rhino.Geometry.CurveOffsetEndStyle.None">
            <summary>
            No closing segments are added. 
            </summary>
        </member>
        <member name="F:Rhino.Geometry.CurveOffsetEndStyle.Flat">
            <summary>
            Straight-line segments are added between the curves.
            </summary>
        </member>
        <member name="F:Rhino.Geometry.CurveOffsetEndStyle.Round">
            <summary>
            Tangent arcs are added between the curves.
            </summary>
        </member>
        <member name="T:Rhino.Geometry.CurveKnotStyle">
            <summary>
            Defines enumerated values for knot spacing styles in interpolated curves.
            </summary>
            <since>5.0</since>
        </member>
        <member name="F:Rhino.Geometry.CurveKnotStyle.Uniform">
            <summary>
            Parameter spacing between consecutive knots is 1.0.
            </summary>
        </member>
        <member name="F:Rhino.Geometry.CurveKnotStyle.Chord">
            <summary>
            Chord length spacing, requires degree=3 with CV1 and CVn1 specified.
            </summary>
        </member>
        <member name="F:Rhino.Geometry.CurveKnotStyle.ChordSquareRoot">
            <summary>
            Square root of chord length, requires degree=3 with CV1 and CVn1 specified.
            </summary>
        </member>
        <member name="F:Rhino.Geometry.CurveKnotStyle.UniformPeriodic">
            <summary>
            Periodic with uniform spacing.
            </summary>
        </member>
        <member name="F:Rhino.Geometry.CurveKnotStyle.ChordPeriodic">
            <summary>
            Periodic with chord length spacing.
            </summary>
        </member>
        <member name="F:Rhino.Geometry.CurveKnotStyle.ChordSquareRootPeriodic">
            <summary>
            Periodic with square root of chord length spacing. 
            </summary>
        </member>
        <member name="T:Rhino.Geometry.CurveOrientation">
            <summary>
            Defines enumerated values for closed curve orientations.
            </summary>
            <since>5.0</since>
        </member>
        <member name="F:Rhino.Geometry.CurveOrientation.Undefined">
            <summary>
            Unable to compute the curve's orientation.
            </summary>
        </member>
        <member name="F:Rhino.Geometry.CurveOrientation.Clockwise">
            <summary>
            The curve's orientation is clockwise in the XY plane.
            </summary>
        </member>
        <member name="F:Rhino.Geometry.CurveOrientation.CounterClockwise">
            <summary>
            The curve's orientation is counter clockwise in the XY plane.
            </summary>
        </member>
        <member name="T:Rhino.Geometry.PointContainment">
            <summary>
            Defines enumerated values for closed curve/point spatial relationships.
            </summary>
            <since>5.0</since>
        </member>
        <member name="F:Rhino.Geometry.PointContainment.Unset">
            <summary>
            Relation is meaningless.
            </summary>
        </member>
        <member name="F:Rhino.Geometry.PointContainment.Inside">
            <summary>
            Point is on the interior of the region implied by the closed curve.
            </summary>
        </member>
        <member name="F:Rhino.Geometry.PointContainment.Outside">
            <summary>
            Point is on the exterior of the region implied by the closed curve.
            </summary>
        </member>
        <member name="F:Rhino.Geometry.PointContainment.Coincident">
            <summary>
            Point is coincident with the curve and therefore neither inside not outside.
            </summary>
        </member>
        <member name="T:Rhino.Geometry.RegionContainment">
            <summary>
            Defines enumerated values for closed curve/closed curve relationships.
            </summary>
            <since>5.0</since>
        </member>
        <member name="F:Rhino.Geometry.RegionContainment.Disjoint">
            <summary>
            There is no common area between the two regions.
            </summary>
        </member>
        <member name="F:Rhino.Geometry.RegionContainment.MutualIntersection">
            <summary>
            The two curves intersect. There is therefore no full containment relationship either way.
            </summary>
        </member>
        <member name="F:Rhino.Geometry.RegionContainment.AInsideB">
            <summary>
            Region bounded by curveA (first curve) is inside of curveB (second curve).
            </summary>
        </member>
        <member name="F:Rhino.Geometry.RegionContainment.BInsideA">
            <summary>
            Region bounded by curveB (second curve) is inside of curveA (first curve).
            </summary>
        </member>
        <member name="T:Rhino.Geometry.CurveExtensionStyle">
            <summary>
            Defines enumerated values for styles to use during curve extension, such as "Line", "Arc" or "Smooth".
            </summary>
            <since>5.0</since>
        </member>
        <member name="F:Rhino.Geometry.CurveExtensionStyle.Line">
            <summary>
            Curve ends will be propagated linearly according to tangents.
            </summary>
        </member>
        <member name="F:Rhino.Geometry.CurveExtensionStyle.Arc">
            <summary>
            Curve ends will be propagated arc-wise according to curvature.
            </summary>
        </member>
        <member name="F:Rhino.Geometry.CurveExtensionStyle.Smooth">
            <summary>
            Curve ends will be propagated smoothly according to curvature.
            </summary>
        </member>
        <member name="T:Rhino.Geometry.CurveSimplifyOptions">
            <summary>
            Enumerates the options to use when simplifying a curve.
            </summary>
            <since>5.0</since>
        </member>
        <member name="F:Rhino.Geometry.CurveSimplifyOptions.None">
            <summary>
            No option is specified.
            </summary>
        </member>
        <member name="F:Rhino.Geometry.CurveSimplifyOptions.SplitAtFullyMultipleKnots">
            <summary>
            Split NurbsCurves at fully multiple knots. 
            Effectively turning single NURBS segments with kinks into multiple segments.
            </summary>
        </member>
        <member name="F:Rhino.Geometry.CurveSimplifyOptions.RebuildLines">
            <summary>
            Replace linear segments with LineCurves.
            </summary>
        </member>
        <member name="F:Rhino.Geometry.CurveSimplifyOptions.RebuildArcs">
            <summary>
            Replace partially circular segments with ArcCurves.
            </summary>
        </member>
        <member name="F:Rhino.Geometry.CurveSimplifyOptions.RebuildRationals">
            <summary>
            Replace rational NURBS curve with constant weights 
            with an equivalent non-rational NurbsCurve.
            </summary>
        </member>
        <member name="F:Rhino.Geometry.CurveSimplifyOptions.AdjustG1">
            <summary>
            Adjust Curves at G1-joins.
            </summary>
        </member>
        <member name="F:Rhino.Geometry.CurveSimplifyOptions.Merge">
            <summary>
            Merge adjacent co-linear lines or co-circular arcs 
            or combine consecutive line segments into a polyline.
            </summary>
        </member>
        <member name="F:Rhino.Geometry.CurveSimplifyOptions.All">
            <summary>
            Implies all of the simplification functions will be used.
            </summary>
        </member>
        <member name="T:Rhino.Geometry.CurveEnd">
            <summary>
            Defines the extremes of a curve through a flagged enumeration. 
            </summary>
            <example>
            <code source='examples\vbnet\ex_extendcurve.vb' lang='vbnet'/>
            <code source='examples\cs\ex_extendcurve.cs' lang='cs'/>
            <code source='examples\py\ex_extendcurve.py' lang='py'/>
            </example>
            <since>5.0</since>
        </member>
        <member name="F:Rhino.Geometry.CurveEnd.None">
            <summary>
            Not the start nor the end.
            </summary>
        </member>
        <member name="F:Rhino.Geometry.CurveEnd.Start">
            <summary>
            The frontal part of the curve.
            </summary>
        </member>
        <member name="F:Rhino.Geometry.CurveEnd.End">
            <summary>
            The tail part of the curve.
            </summary>
        </member>
        <member name="F:Rhino.Geometry.CurveEnd.Both">
            <summary>
            Both the start and the end of the curve.
            </summary>
        </member>
        <member name="T:Rhino.Geometry.CurveEvaluationSide">
            <summary>
            Defines enumerated values for the options that defines a curve evaluation side when evaluating kinks.
            </summary>
            <since>5.0</since>
        </member>
        <member name="F:Rhino.Geometry.CurveEvaluationSide.Default">
            <summary>
            The default evaluation side.
            </summary>
        </member>
        <member name="F:Rhino.Geometry.CurveEvaluationSide.Below">
            <summary>
            The below evaluation side.
            </summary>
        </member>
        <member name="F:Rhino.Geometry.CurveEvaluationSide.Above">
            <summary>
            The above evaluation side.
            </summary>
        </member>
        <member name="T:Rhino.Geometry.ConicSectionType">
            <summary>
            Defines enumerated values for types of conic sections.
            </summary>
            <since>6.0</since>
        </member>
        <member name="F:Rhino.Geometry.ConicSectionType.Unknown">
            <summary>
            The curve shape is unknown.
            </summary>
        </member>
        <member name="F:Rhino.Geometry.ConicSectionType.Circle">
            <summary>
            The curve has the shape of a circle.
            </summary>
        </member>
        <member name="F:Rhino.Geometry.ConicSectionType.Ellipse">
            <summary>
            The curve has the shape of an ellipse.
            </summary>
        </member>
        <member name="F:Rhino.Geometry.ConicSectionType.Hyperbola">
            <summary>
            The curve has the shape of a hyperbola.
            </summary>
        </member>
        <member name="F:Rhino.Geometry.ConicSectionType.Parabola">
            <summary>
            The curve has the shape of a parabola.
            </summary>
        </member>
        <member name="T:Rhino.Geometry.Curve">
            <summary>
            Represents a base class that is common to most RhinoCommon curve types.
            <para>A curve represents an entity that can be all visited by providing
            a single parameter, usually called t.</para>
            </summary>
        </member>
        <member name="M:Rhino.Geometry.Curve.CreateControlPointCurve(System.Collections.Generic.IEnumerable{Rhino.Geometry.Point3d},System.Int32)">
            <summary>
            Constructs a curve from a set of control-point locations.
            </summary>
            <param name="points">Control points.</param>
            <param name="degree">Degree of curve. The number of control points must be at least degree+1.</param>
            <since>5.0</since>
        </member>
        <member name="M:Rhino.Geometry.Curve.CreateControlPointCurve(System.Collections.Generic.IEnumerable{Rhino.Geometry.Point3d})">
            <summary>
            Constructs a control-point of degree=3 (or less).
            </summary>
            <param name="points">Control points of curve.</param>
            <since>5.0</since>
        </member>
        <member name="M:Rhino.Geometry.Curve.JoinCurves(System.Collections.Generic.IEnumerable{Rhino.Geometry.Curve})">
            <summary>
            Joins a collection of curve segments together.
            </summary>
            <param name="inputCurves">Curve segments to join.</param>
            <returns>An array of joined curves. This array can be empty.</returns>
            <since>5.0</since>
        </member>
        <member name="M:Rhino.Geometry.Curve.JoinCurves(System.Collections.Generic.IEnumerable{Rhino.Geometry.Curve},System.Double)">
            <summary>
            Joins a collection of curve segments together.
            </summary>
            <param name="inputCurves">An array, a list or any enumerable set of curve segments to join.</param>
            <param name="joinTolerance">Joining tolerance, 
            i.e. the distance between segment end-points that is allowed.</param>
            <returns>An array of joined curves. This array can be empty.</returns>
            <example>
            <code source='examples\vbnet\ex_dividebylength.vb' lang='vbnet'/>
            <code source='examples\cs\ex_dividebylength.cs' lang='cs'/>
            <code source='examples\py\ex_dividebylength.py' lang='py'/>
            </example>
            <exception cref="T:System.ArgumentNullException">If inputCurves is null.</exception>
            <since>5.0</since>
        </member>
        <member name="M:Rhino.Geometry.Curve.JoinCurves(System.Collections.Generic.IEnumerable{Rhino.Geometry.Curve},System.Double,System.Boolean)">
            <summary>
            Joins a collection of curve segments together.
            </summary>
            <param name="inputCurves">An array, a list or any enumerable set of curve segments to join.</param>
            <param name="joinTolerance">Joining tolerance, 
            i.e. the distance between segment end-points that is allowed.</param>
            <param name="preserveDirection">
            <para>If true, curve endpoints will be compared to curve start points.</para>
            <para>If false, all start and endpoints will be compared and copies of input curves may be reversed in output.</para>
            </param>
            <returns>An array of joined curves. This array can be empty.</returns>
            <exception cref="T:System.ArgumentNullException">If inputCurves is null.</exception>
            <since>5.0</since>
        </member>
        <member name="M:Rhino.Geometry.Curve.#ctor">
            <summary>
            Protected constructor for internal use.
            </summary>
        </member>
        <member name="M:Rhino.Geometry.Curve.Duplicate">
            <summary>
            Constructs an exact duplicate of this Curve.
            </summary>
            <seealso cref="M:Rhino.Geometry.Curve.DuplicateCurve"/>
            <since>5.0</since>
        </member>
        <member name="M:Rhino.Geometry.Curve.DuplicateCurve">
            <summary>
            Constructs an exact duplicate of this curve.
            </summary>
            <returns>An exact copy of this curve.</returns>
            <example>
            <code source='examples\vbnet\ex_curvereverse.vb' lang='vbnet'/>
            <code source='examples\cs\ex_curvereverse.cs' lang='cs'/>
            <code source='examples\py\ex_curvereverse.py' lang='py'/>
            </example>
            <since>5.0</since>
        </member>
        <member name="M:Rhino.Geometry.Curve.Dispose(System.Boolean)">
            <summary>
            For derived class implementers.
            <para>This method is called with argument true when class user calls Dispose(), while with argument false when
            the Garbage Collector invokes the finalizer, or Finalize() method.</para>
            <para>You must reclaim all used unmanaged resources in both cases, and can use this chance to call Dispose on disposable fields if the argument is true.</para>
            <para>Also, you must call the base virtual method within your overriding method.</para>
            </summary>
            <param name="disposing">true if the call comes from the Dispose() method; false if it comes from the Garbage Collector finalizer.</param>
        </member>
        <member name="M:Rhino.Geometry.Curve.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Protected serialization constructor for internal use.
            </summary>
            <param name="info">Serialization data.</param>
            <param name="context">Serialization stream.</param>
        </member>
        <member name="M:Rhino.Geometry.Curve.NonConstOperation">
            <summary>
            For derived classes implementers.
            <para>Defines the necessary implementation to free the instance from being constant.</para>
            </summary>
        </member>
        <member name="P:Rhino.Geometry.Curve.Domain">
            <summary>
            Gets or sets the domain of the curve.
            </summary>
            <since>5.0</since>
        </member>
        <member name="P:Rhino.Geometry.Curve.Dimension">
            <summary>
            Gets the dimension of the object.
            <para>The dimension is typically three. For parameter space trimming
            curves the dimension is two. In rare cases the dimension can
            be one or greater than three.</para>
            </summary>
            <since>5.0</since>
        </member>
        <member name="M:Rhino.Geometry.Curve.ChangeDimension(System.Int32)">
            <summary>
            Changes the dimension of a curve.
            </summary>
            <param name="desiredDimension">The desired dimension.</param>
            <returns>
            true if the curve's dimension was already desiredDimension
            or if the curve's dimension was successfully changed to desiredDimension;
            otherwise false.
            </returns>
            <since>5.0</since>
        </member>
        <member name="P:Rhino.Geometry.Curve.SpanCount">
            <summary>
            Gets the number of non-empty smooth (c-infinity) spans in the curve.
            </summary>
            <since>5.0</since>
        </member>
        <member name="P:Rhino.Geometry.Curve.Degree">
            <summary>
            Gets the maximum algebraic degree of any span
            or a good estimate if curve spans are not algebraic.
            </summary>
            <since>5.0</since>
        </member>
        <member name="M:Rhino.Geometry.Curve.IsLinear">
            <summary>
            Test a curve to see if it is linear to within RhinoMath.ZeroTolerance units (1e-12).
            </summary>
            <returns>true if the curve is linear.</returns>
            <example>
            <code source='examples\vbnet\ex_addradialdimension.vb' lang='vbnet'/>
            <code source='examples\cs\ex_addradialdimension.cs' lang='cs'/>
            <code source='examples\py\ex_addradialdimension.py' lang='py'/>
            </example>
            <since>5.0</since>
        </member>
        <member name="M:Rhino.Geometry.Curve.IsLinear(System.Double)">
            <summary>
            Test a curve to see if it is linear to within the custom tolerance.
            </summary>
            <param name="tolerance">Tolerance to use when checking linearity.</param>
            <returns>
            true if the ends of the curve are farther than tolerance apart
            and the maximum distance from any point on the curve to
            the line segment connecting the curve ends is &lt;= tolerance.
            </returns>
            <since>5.0</since>
        </member>
        <member name="M:Rhino.Geometry.Curve.IsPolyline">
            <summary>
            Several types of Curve can have the form of a polyline
            including a degree 1 NurbsCurve, a PolylineCurve,
            and a PolyCurve all of whose segments are some form of
            polyline. IsPolyline tests a curve to see if it can be
            represented as a polyline.
            </summary>
            <returns>true if this curve can be represented as a polyline; otherwise, false.</returns>
            <example>
            <code source='examples\vbnet\ex_addradialdimension.vb' lang='vbnet'/>
            <code source='examples\cs\ex_addradialdimension.cs' lang='cs'/>
            <code source='examples\py\ex_addradialdimension.py' lang='py'/>
            </example>
            <since>5.0</since>
        </member>
        <member name="M:Rhino.Geometry.Curve.TryGetPolyline(Rhino.Geometry.Polyline@)">
            <summary>
            Several types of Curve can have the form of a polyline 
            including a degree 1 NurbsCurve, a PolylineCurve, 
            and a PolyCurve all of whose segments are some form of 
            polyline. IsPolyline tests a curve to see if it can be 
            represented as a polyline.
            </summary>
            <param name="polyline">
            If true is returned, then the polyline form is returned here.
            </param>
            <returns>true if this curve can be represented as a polyline; otherwise, false.</returns>
            <since>5.0</since>
        </member>
        <member name="M:Rhino.Geometry.Curve.TryGetPolyline(Rhino.Geometry.Polyline@,System.Double[]@)">
            <summary>
            Several types of Curve can have the form of a polyline 
            including a degree 1 NurbsCurve, a PolylineCurve, 
            and a PolyCurve all of whose segments are some form of 
            polyline. IsPolyline tests a curve to see if it can be 
            represented as a polyline.
            </summary>
            <param name="polyline">
            If true is returned, then the polyline form is returned here.
            </param>
            <param name="parameters">
            if true is returned, then the parameters of the polyline
            points are returned here.
            </param>
            <returns>true if this curve can be represented as a polyline; otherwise, false.</returns>
            <since>5.0</since>
        </member>
        <member name="M:Rhino.Geometry.Curve.IsArc">
            <summary>
            Test a curve to see if it can be represented by an arc or circle within RhinoMath.ZeroTolerance.
            </summary>
            <returns>
            true if the curve can be represented by an arc or a circle within tolerance.
            </returns>
            <since>5.0</since>
        </member>
        <member name="M:Rhino.Geometry.Curve.IsArc(System.Double)">
            <summary>
            Test a curve to see if it can be represented by an arc or circle within the given tolerance.
            </summary>
            <param name="tolerance">Tolerance to use when checking.</param>
            <returns>
            true if the curve can be represented by an arc or a circle within tolerance.
            </returns>
            <since>5.0</since>
        </member>
        <member name="M:Rhino.Geometry.Curve.TryGetArc(Rhino.Geometry.Arc@)">
            <summary>
            Try to convert this curve into an Arc using RhinoMath.ZeroTolerance.
            </summary>
            <param name="arc">On success, the Arc will be filled in.</param>
            <returns>true if the curve could be converted into an arc.</returns>
            <since>5.0</since>
        </member>
        <member name="M:Rhino.Geometry.Curve.TryGetArc(Rhino.Geometry.Arc@,System.Double)">
            <summary>
            Try to convert this curve into an Arc using a custom tolerance.
            </summary>
            <param name="arc">On success, the Arc will be filled in.</param>
            <param name="tolerance">Tolerance to use when checking.</param>
            <returns>true if the curve could be converted into an arc.</returns>
            <since>5.0</since>
        </member>
        <member name="M:Rhino.Geometry.Curve.TryGetArc(Rhino.Geometry.Plane,Rhino.Geometry.Arc@)">
            <summary>
            Try to convert this curve into an Arc using RhinoMath.ZeroTolerance.
            </summary>
            <param name="plane">Plane in which the comparison is performed.</param>
            <param name="arc">On success, the Arc will be filled in.</param>
            <returns>true if the curve could be converted into an arc within the given plane.</returns>
            <since>5.0</since>
        </member>
        <member name="M:Rhino.Geometry.Curve.TryGetArc(Rhino.Geometry.Plane,Rhino.Geometry.Arc@,System.Double)">
            <summary>
            Try to convert this curve into an Arc using a custom tolerance.
            </summary>
            <param name="plane">Plane in which the comparison is performed.</param>
            <param name="arc">On success, the Arc will be filled in.</param>
            <param name="tolerance">Tolerance to use when checking.</param>
            <returns>true if the curve could be converted into an arc within the given plane.</returns>
            <since>5.0</since>
        </member>
        <member name="M:Rhino.Geometry.Curve.IsCircle">
            <summary>
            Test a curve to see if it can be represented by a circle within RhinoMath.ZeroTolerance.
            </summary>
            <returns>
            true if the Curve can be represented by a circle within tolerance.
            </returns>
            <since>5.0</since>
        </member>
        <member name="M:Rhino.Geometry.Curve.IsCircle(System.Double)">
            <summary>
            Test a curve to see if it can be represented by a circle within the given tolerance.
            </summary>
            <param name="tolerance">Tolerance to use when checking.</param>
            <returns>
            true if the curve can be represented by a circle to within tolerance.
            </returns>
            <since>5.0</since>
        </member>
        <member name="M:Rhino.Geometry.Curve.TryGetCircle(Rhino.Geometry.Circle@)">
            <summary>
            Try to convert this curve into a circle using RhinoMath.ZeroTolerance.
            </summary>
            <param name="circle">On success, the Circle will be filled in.</param>
            <returns>true if the curve could be converted into a Circle.</returns>
            <example>
            <code source='examples\vbnet\ex_customgeometryfilter.vb' lang='vbnet'/>
            <code source='examples\cs\ex_customgeometryfilter.cs' lang='cs'/>
            <code source='examples\py\ex_customgeometryfilter.py' lang='py'/>
            </example>
            <since>5.0</since>
        </member>
        <member name="M:Rhino.Geometry.Curve.TryGetCircle(Rhino.Geometry.Circle@,System.Double)">
            <summary>
            Try to convert this curve into a Circle using a custom tolerance.
            </summary>
            <param name="circle">On success, the Circle will be filled in.</param>
            <param name="tolerance">Tolerance to use when checking.</param>
            <returns>true if the curve could be converted into a Circle within tolerance.</returns>
            <example>
            <code source='examples\vbnet\ex_circlecenter.vb' lang='vbnet'/>
            <code source='examples\cs\ex_circlecenter.cs' lang='cs'/>
            <code source='examples\py\ex_circlecenter.py' lang='py'/>
            </example>
            <since>5.0</since>
        </member>
        <member name="M:Rhino.Geometry.Curve.IsEllipse">
            <summary>
            Test a curve to see if it can be represented by an ellipse within RhinoMath.ZeroTolerance.
            </summary>
            <returns>
            true if the Curve can be represented by an ellipse within tolerance.
            </returns>
            <since>5.0</since>
        </member>
        <member name="M:Rhino.Geometry.Curve.IsEllipse(System.Double)">
            <summary>
            Test a curve to see if it can be represented by an ellipse within a given tolerance.
            </summary>
            <param name="tolerance">Tolerance to use for checking.</param>
            <returns>
            true if the Curve can be represented by an ellipse within tolerance.
            </returns>
            <since>5.0</since>
        </member>
        <member name="M:Rhino.Geometry.Curve.TryGetEllipse(Rhino.Geometry.Ellipse@)">
            <summary>
            Try to convert this curve into an Ellipse within RhinoMath.ZeroTolerance.
            </summary>
            <param name="ellipse">On success, the Ellipse will be filled in.</param>
            <returns>true if the curve could be converted into an Ellipse.</returns>
            <since>5.0</since>
        </member>
        <member name="M:Rhino.Geometry.Curve.TryGetEllipse(Rhino.Geometry.Ellipse@,System.Double)">
            <summary>
            Try to convert this curve into an Ellipse using a custom tolerance.
            </summary>
            <param name="ellipse">On success, the Ellipse will be filled in.</param>
            <param name="tolerance">Tolerance to use when checking.</param>
            <returns>true if the curve could be converted into an Ellipse.</returns>
            <since>5.0</since>
        </member>
        <member name="M:Rhino.Geometry.Curve.TryGetEllipse(Rhino.Geometry.Plane,Rhino.Geometry.Ellipse@)">
            <summary>
            Try to convert this curve into an Ellipse within RhinoMath.ZeroTolerance.
            </summary>
            <param name="plane">Plane in which the comparison is performed.</param>
            <param name="ellipse">On success, the Ellipse will be filled in.</param>
            <returns>true if the curve could be converted into an Ellipse within the given plane.</returns>
            <since>5.0</since>
        </member>
        <member name="M:Rhino.Geometry.Curve.TryGetEllipse(Rhino.Geometry.Plane,Rhino.Geometry.Ellipse@,System.Double)">
            <summary>
            Try to convert this curve into an Ellipse using a custom tolerance.
            </summary>
            <param name="plane">Plane in which the comparison is performed.</param>
            <param name="ellipse">On success, the Ellipse will be filled in.</param>
            <param name="tolerance">Tolerance to use when checking.</param>
            <returns>true if the curve could be converted into an Ellipse within the given plane.</returns>
            <since>5.0</since>
        </member>
        <member name="M:Rhino.Geometry.Curve.IsPlanar">
            <summary>Test a curve for planarity.</summary>
            <returns>
            true if the curve is planar (flat) to within RhinoMath.ZeroTolerance units (1e-12).
            </returns>
            <example>
            <code source='examples\vbnet\ex_addradialdimension.vb' lang='vbnet'/>
            <code source='examples\cs\ex_addradialdimension.cs' lang='cs'/>
            <code source='examples\py\ex_addradialdimension.py' lang='py'/>
            </example>
            <since>5.0</since>
        </member>
        <member name="M:Rhino.Geometry.Curve.IsPlanar(System.Double)">
            <summary>Test a curve for planarity.</summary>
            <param name="tolerance">Tolerance to use when checking.</param>
            <returns>
            true if there is a plane such that the maximum distance from the curve to the plane is &lt;= tolerance.
            </returns>
            <since>5.0</since>
        </member>
        <member name="M:Rhino.Geometry.Curve.TryGetPlane(Rhino.Geometry.Plane@)">
            <summary>Test a curve for planarity and return the plane.</summary>
            <param name="plane">On success, the plane parameters are filled in.</param>
            <returns>
            true if there is a plane such that the maximum distance from the curve to the plane is &lt;= RhinoMath.ZeroTolerance.
            </returns>
            <example>
            <code source='examples\vbnet\ex_constrainedcopy.vb' lang='vbnet'/>
            <code source='examples\cs\ex_constrainedcopy.cs' lang='cs'/>
            <code source='examples\py\ex_constrainedcopy.py' lang='py'/>
            </example>
            <since>5.0</since>
        </member>
        <member name="M:Rhino.Geometry.Curve.TryGetPlane(Rhino.Geometry.Plane@,System.Double)">
            <summary>Test a curve for planarity and return the plane.</summary>
            <param name="plane">On success, the plane parameters are filled in.</param>
            <param name="tolerance">Tolerance to use when checking.</param>
            <returns>
            true if there is a plane such that the maximum distance from the curve to the plane is &lt;= tolerance.
            </returns>
            <since>5.0</since>
        </member>
        <member name="M:Rhino.Geometry.Curve.IsInPlane(Rhino.Geometry.Plane)">
            <summary>Test a curve to see if it lies in a specific plane.</summary>
            <param name="testPlane">Plane to test for.</param>
            <returns>
            true if the maximum distance from the curve to the testPlane is &lt;= RhinoMath.ZeroTolerance.
            </returns>
            <since>5.0</since>
        </member>
        <member name="M:Rhino.Geometry.Curve.IsInPlane(Rhino.Geometry.Plane,System.Double)">
            <summary>Test a curve to see if it lies in a specific plane.</summary>
            <param name="testPlane">Plane to test for.</param>
            <param name="tolerance">Tolerance to use when checking.</param>
            <returns>
            true if the maximum distance from the curve to the testPlane is &lt;= tolerance.
            </returns>
            <since>5.0</since>
        </member>
        <member name="M:Rhino.Geometry.Curve.ChangeClosedCurveSeam(System.Double)">
            <summary>
            If this curve is closed, then modify it so that the start/end point is at curve parameter t.
            </summary>
            <param name="t">
            Curve parameter of new start/end point. The returned curves domain will start at t.
            </param>
            <returns>true on success, false on failure.</returns>
            <since>5.0</since>
        </member>
        <member name="P:Rhino.Geometry.Curve.IsClosed">
            <summary>
            Gets a value indicating whether or not this curve is a closed curve.
            </summary>
            <since>5.0</since>
        </member>
        <member name="P:Rhino.Geometry.Curve.IsPeriodic">
            <summary>
            Gets a value indicating whether or not this curve is considered to be Periodic.
            </summary>
            <since>5.0</since>
        </member>
        <member name="M:Rhino.Geometry.Curve.IsClosable(System.Double)">
            <summary>
            Decide if it makes sense to close off this curve by moving the endpoint 
            to the start based on start-end gap size and length of curve as 
            approximated by chord defined by 6 points.
            </summary>
            <param name="tolerance">
            Maximum allowable distance between start and end. 
            If start - end gap is greater than tolerance, this function will return false.
            </param>
            <returns>true if start and end points are close enough based on above conditions.</returns>
            <since>5.0</since>
        </member>
        <member name="M:Rhino.Geometry.Curve.IsClosable(System.Double,System.Double,System.Double)">
            <summary>
            Decide if it makes sense to close off this curve by moving the endpoint
            to the start based on start-end gap size and length of curve as
            approximated by chord defined by 6 points.
            </summary>
            <param name="tolerance">
            Maximum allowable distance between start and end. 
            If start - end gap is greater than tolerance, this function will return false.
            </param>
            <param name="minimumAbsoluteSize">
            If greater than 0.0 and none of the interior sampled points are at
            least minimumAbsoluteSize from start, this function will return false.
            </param>
            <param name="minimumRelativeSize">
            If greater than 1.0 and chord length is less than 
            minimumRelativeSize*gap, this function will return false.
            </param>
            <returns>true if start and end points are close enough based on above conditions.</returns>
            <since>5.0</since>
        </member>
        <member name="M:Rhino.Geometry.Curve.ClosedCurveOrientation">
            <summary>
            Determines the orientation (counterclockwise or clockwise) of a closed, planar curve in the world XY plane.
            Only works with simple (no self intersections) closed, planar curves.
            </summary>
            <returns>The orientation of this curve with respect to world XY plane.</returns>
            <since>6.0</since>
        </member>
        <member name="M:Rhino.Geometry.Curve.ClosedCurveOrientation(Rhino.Geometry.Vector3d)">
            <summary>
            Determines the orientation (counterclockwise or clockwise) of a closed, planar curve in a given plane.
            Only works with simple (no self intersections) closed, planar curves.
            </summary>
            <param name="upDirection">A vector that is considered "up".</param>
            <returns>The orientation of this curve with respect to a defined up direction.</returns>
            <since>5.0</since>
        </member>
        <member name="M:Rhino.Geometry.Curve.ClosedCurveOrientation(Rhino.Geometry.Plane)">
            <summary>
            Determines the orientation (counterclockwise or clockwise) of a closed, planar curve in a given plane.
            Only works with simple (no self intersections) closed, planar curves.
            </summary>
            <param name="plane">
            The plane in which to solve the orientation.
            </param>
            <returns>The orientation of this curve in the given plane.</returns>
            <since>5.0</since>
        </member>
        <member name="M:Rhino.Geometry.Curve.ClosedCurveOrientation(Rhino.Geometry.Transform)">
            <summary>
            Determines the orientation (counterclockwise or clockwise) of a closed, planar curve.
            Only works with simple (no self intersections) closed, planar curves.
            </summary>
            <param name="xform">
            Transformation to map the curve to the world XY plane.
            </param>
            <returns>The orientation of this curve in the world XY-plane.</returns>
            <since>5.0</since>
        </member>
        <member name="M:Rhino.Geometry.Curve.Reverse">
            <summary>
            Reverses the direction of the curve.
            </summary>
            <returns>true on success, false on failure.</returns>
            <remarks>If reversed, the domain changes from [a,b] to [-b,-a]</remarks>
            <example>
            <code source='examples\vbnet\ex_curvereverse.vb' lang='vbnet'/>
            <code source='examples\cs\ex_curvereverse.cs' lang='cs'/>
            <code source='examples\py\ex_curvereverse.py' lang='py'/>
            </example>
            <since>5.0</since>
        </member>
        <member name="M:Rhino.Geometry.Curve.PointAt(System.Double)">
            <summary>Evaluates point at a curve parameter.</summary>
            <param name="t">Evaluation parameter.</param>
            <returns>Point (location of curve at the parameter t).</returns>
            <remarks>No error handling.</remarks>
            <example>
            <code source='examples\vbnet\ex_addradialdimension.vb' lang='vbnet'/>
            <code source='examples\cs\ex_addradialdimension.cs' lang='cs'/>
            <code source='examples\py\ex_addradialdimension.py' lang='py'/>
            </example>
            <since>5.0</since>
        </member>
        <member name="P:Rhino.Geometry.Curve.PointAtStart">
            <summary>
            Evaluates point at the start of the curve.
            </summary>
            <since>5.0</since>
        </member>
        <member name="P:Rhino.Geometry.Curve.PointAtEnd">
            <summary>
            Evaluates point at the end of the curve.
            </summary>
            <since>5.0</since>
        </member>
        <member name="M:Rhino.Geometry.Curve.SetStartPoint(Rhino.Geometry.Point3d)">
            <summary>Forces the curve to start at a specified point. 
            Not all curve types support this operation.</summary>
            <param name="point">New start point of curve.</param>
            <returns>true on success, false on failure.</returns>
            <remarks>Some start points cannot be moved. Be sure to check return code.</remarks>
            <since>5.0</since>
        </member>
        <member name="M:Rhino.Geometry.Curve.SetEndPoint(Rhino.Geometry.Point3d)">
            <summary>Forces the curve to end at a specified point. 
            Not all curve types support this operation.</summary>
            <param name="point">New end point of curve.</param>
            <returns>true on success, false on failure.</returns>
            <remarks>Some end points cannot be moved. Be sure to check return code</remarks>
            <since>5.0</since>
        </member>
        <member name="M:Rhino.Geometry.Curve.TangentAt(System.Double)">
            <summary>Evaluates the unit tangent vector at a curve parameter.</summary>
            <param name="t">Evaluation parameter.</param>
            <returns>Unit tangent vector of the curve at the parameter t.</returns>
            <remarks>No error handling.</remarks>
            <since>5.0</since>
        </member>
        <member name="P:Rhino.Geometry.Curve.TangentAtStart">
            <summary>Evaluates the unit tangent vector at the start of the curve.</summary>
            <returns>Unit tangent vector of the curve at the start point.</returns>
            <remarks>No error handling.</remarks>
            <since>5.0</since>
        </member>
        <member name="P:Rhino.Geometry.Curve.TangentAtEnd">
            <summary>Evaluate unit tangent vector at the end of the curve.</summary>
            <returns>Unit tangent vector of the curve at the end point.</returns>
            <remarks>No error handling.</remarks>
            <since>5.0</since>
        </member>
        <member name="M:Rhino.Geometry.Curve.FrameAt(System.Double,Rhino.Geometry.Plane@)">
            <summary>Returns a 3d frame at a parameter.</summary>
            <param name="t">Evaluation parameter.</param>
            <param name="plane">The frame is returned here.</param>
            <returns>true on success, false on failure.</returns>
            <since>5.0</since>
        </member>
        <member name="M:Rhino.Geometry.Curve.DerivativeAt(System.Double,System.Int32)">
            <summary>
            Evaluate the derivatives at the specified curve parameter.
            </summary>
            <param name="t">Curve parameter to evaluate.</param>
            <param name="derivativeCount">Number of derivatives to evaluate, must be at least 0.</param>
            <returns>An array of vectors that represents all the derivatives starting at zero.</returns>
            <since>5.0</since>
        </member>
        <member name="M:Rhino.Geometry.Curve.DerivativeAt(System.Double,System.Int32,Rhino.Geometry.CurveEvaluationSide)">
            <summary>
            Evaluate the derivatives at the specified curve parameter.
            </summary>
            <param name="t">Curve parameter to evaluate.</param>
            <param name="derivativeCount">Number of derivatives to evaluate, must be at least 0.</param>
            <param name="side">Side of parameter to evaluate. If the parameter is at a kink, 
            it makes a big difference whether the evaluation is from below or above.</param>
            <returns>An array of vectors that represents all the derivatives starting at zero.</returns>
            <since>5.0</since>
        </member>
        <member name="M:Rhino.Geometry.Curve.CurvatureAt(System.Double)">
            <summary>Evaluate the curvature vector at a curve parameter.</summary>
            <param name="t">Evaluation parameter.</param>
            <returns>Curvature vector of the curve at the parameter t.</returns>
            <remarks>No error handling.</remarks>
            <example>
            <code source='examples\vbnet\ex_addradialdimension.vb' lang='vbnet'/>
            <code source='examples\cs\ex_addradialdimension.cs' lang='cs'/>
            <code source='examples\py\ex_addradialdimension.py' lang='py'/>
            </example>
            <since>5.0</since>
        </member>
        <member name="M:Rhino.Geometry.Curve.IsContinuous(Rhino.Geometry.Continuity,System.Double)">
            <summary>
            Test continuity at a curve parameter value.
            </summary>
            <param name="continuityType">Type of continuity to test for.</param>
            <param name="t">Parameter to test.</param>
            <returns>
            true if the curve has at least the c type continuity at the parameter t.
            </returns>
            <since>5.0</since>
        </member>
        <member name="M:Rhino.Geometry.Curve.TorsionAt(System.Double)">
            <summary>
            Evaluate the torsion of a curve at a parameter. Sometimes also called the "second curvature", 
            torsion is the rate of change of a curve's osculating plane.
            </summary>
            <param name="t">The evaluation parameter.</param>
            <returns>The torsion if successful.</returns>
            <remarks>See Barrett O'Neill, Elementary Differential Geometry, page 69.</remarks>
            <since>7.10</since>
        </member>
        <member name="M:Rhino.Geometry.Curve.GetNextDiscontinuity(Rhino.Geometry.Continuity,System.Double,System.Double,System.Double@)">
            <summary>
            Searches for a derivative, tangent, or curvature discontinuity.
            </summary>
            <param name="continuityType">Type of continuity to search for.</param>
            <param name="t0">
            Search begins at t0. If there is a discontinuity at t0, it will be ignored. This makes it
            possible to repeatedly call GetNextDiscontinuity() and step through the discontinuities.
            </param>
            <param name="t1">
            (t0 != t1)  If there is a discontinuity at t1 it will be ignored unless continuityType is
            a locus discontinuity type and t1 is at the start or end of the curve.
            </param>
            <param name="t">If a discontinuity is found, then t reports the parameter at the discontinuity.</param>
            <returns>
            Parametric continuity tests c = (C0_continuous, ..., G2_continuous):
             true if a parametric discontinuity was found strictly between t0 and t1. Note well that
             all curves are parametrically continuous at the ends of their domains.
            
            Locus continuity tests c = (C0_locus_continuous, ...,G2_locus_continuous):
             true if a locus discontinuity was found strictly between t0 and t1 or at t1 is the at the end
             of a curve. Note well that all open curves (IsClosed()=false) are locus discontinuous at the
             ends of their domains.  All closed curves (IsClosed()=true) are at least C0_locus_continuous at 
             the ends of their domains.
            </returns>
            <since>5.0</since>
        </member>
        <member name="M:Rhino.Geometry.Curve.GetNextDiscontinuity(Rhino.Geometry.Continuity,System.Double,System.Double,System.Double,System.Double,System.Double@)">
            <summary>
            Searches for a derivative, tangent, or curvature discontinuity.
            </summary>
            <param name="continuityType">Type of continuity to search for.</param>
            <param name="t0">
            Search begins at t0. If there is a discontinuity at t0, it will be ignored. This makes it
            possible to repeatedly call GetNextDiscontinuity() and step through the discontinuities.
            </param>
            <param name="cosAngleTolerance">
            default = cos(1 degree) Used only when continuity is G1_continuous or G2_continuous.
            If the  cosine of the angle between two tangent vectors is &lt;= cos_angle_tolerance,
            then a G1 discontinuity is reported.
            </param>
            <param name="curvatureTolerance">
            (default = ON_SQRT_EPSILON) Used only when continuity is G2_continuous. If K0 and K1
            are curvatures evaluated from above and below and |K0 - K1| &gt; curvature_tolerance,
            then a curvature discontinuity is reported.
            </param>
            <param name="t1">
            (t0 != t1)  If there is a discontinuity at t1 it will be ignored unless continuityType is
            a locus discontinuity type and t1 is at the start or end of the curve.
            </param>
            <param name="t">If a discontinuity is found, then t reports the parameter at the discontinuity.</param>
            <returns>
            Parametric continuity tests c = (C0_continuous, ..., G2_continuous):
             true if a parametric discontinuity was found strictly between t0 and t1. Note well that
             all curves are parametrically continuous at the ends of their domains.
            
            Locus continuity tests c = (C0_locus_continuous, ...,G2_locus_continuous):
             true if a locus discontinuity was found strictly between t0 and t1 or at t1 is the at the end
             of a curve. Note well that all open curves (IsClosed()=false) are locus discontinuous at the
             ends of their domains.  All closed curves (IsClosed()=true) are at least C0_locus_continuous at 
             the ends of their domains.
            </returns>
            <since>7.4</since>
        </member>
        <member name="M:Rhino.Geometry.Curve.GetCurveParameterFromNurbsFormParameter(System.Double,System.Double@)">
            <summary>
            Convert a NURBS curve parameter to a curve parameter.
            </summary>
            <param name="nurbsParameter">NURBS form parameter.</param>
            <param name="curveParameter">Curve parameter.</param>
            <returns>true on success, false on failure.</returns>
            <remarks>
            If HasNurbForm returns 2, this function converts the curve parameter to the NURBS curve parameter.
            </remarks>
            <since>5.0</since>
        </member>
        <member name="M:Rhino.Geometry.Curve.GetNurbsFormParameterFromCurveParameter(System.Double,System.Double@)">
            <summary>Convert a curve parameter to a NURBS curve parameter.</summary>
            <param name="curveParameter">Curve parameter.</param>
            <param name="nurbsParameter">NURBS form parameter.</param>
            <returns>true on success, false on failure.</returns>
            <remarks>
            If GetNurbForm returns 2, this function converts the curve parameter to the NURBS curve parameter.
            </remarks>
            <since>5.0</since>
        </member>
        <member name="M:Rhino.Geometry.Curve.Trim(System.Double,System.Double)">
            <summary>
            Removes portions of the curve outside the specified interval.
            </summary>
            <param name="t0">
            Start of the trimming interval. Portions of the curve before curve(t0) are removed.
            </param>
            <param name="t1">
            End of the trimming interval. Portions of the curve after curve(t1) are removed.
            </param>
            <returns>Trimmed portion of this curve is successful, null on failure.</returns>
            <since>5.0</since>
        </member>
        <member name="M:Rhino.Geometry.Curve.Trim(Rhino.Geometry.Interval)">
            <summary>
            Removes portions of the curve outside the specified interval.
            </summary>
            <param name="domain">
            Trimming interval. Portions of the curve before curve(domain[0])
            and after curve(domain[1]) are removed.
            </param>
            <returns>Trimmed curve if successful, null on failure.</returns>
            <since>5.0</since>
        </member>
        <member name="M:Rhino.Geometry.Curve.Split(System.Double)">
            <summary>
            Splits (divides) the curve at the specified parameter. 
            The parameter must be in the interior of the curve's domain.
            </summary>
            <param name="t">
            Parameter to split the curve at in the interval returned by Domain().
            </param>
            <returns>
            Two curves on success, null on failure.
            </returns>
            <since>5.0</since>
        </member>
        <member name="M:Rhino.Geometry.Curve.Split(System.Collections.Generic.IEnumerable{System.Double})">
            <summary>
            Splits (divides) the curve at a series of specified parameters. 
            The parameter must be in the interior of the curve domain.
            </summary>
            <param name="t">
            Parameters to split the curve at in the interval returned by Domain().
            </param>
            <returns>Multiple curves on success, null on failure.</returns>
            <since>5.0</since>
        </member>
        <member name="M:Rhino.Geometry.Curve.HasNurbsForm">
            <summary>
            Does a NURBS curve representation of this curve exist?
            </summary>
            <returns>
            0   unable to create NURBS representation with desired accuracy.
            1   success - NURBS parameterization matches the curve's to the desired accuracy
            2   success - NURBS point locus matches the curve's and the domain of the NURBS
                          curve is correct. However, This curve's parameterization and the
                          NURBS curve parameterization may not match. This situation happens
                          when getting NURBS representations of curves that have a
                          transcendental parameterization like circles.
            </returns>
            <since>5.0</since>
        </member>
        <member name="M:Rhino.Geometry.Curve.ToNurbsCurve">
            <summary>
            Constructs a NURBS curve representation of this curve.
            </summary>
            <returns>NURBS representation of the curve on success, null on failure.</returns>
            <since>5.0</since>
        </member>
        <member name="M:Rhino.Geometry.Curve.ToNurbsCurve(Rhino.Geometry.Interval)">
            <summary>
            Constructs a NURBS curve representation of this curve.
            </summary>
            <param name="subdomain">The NURBS representation for this portion of the curve is returned.</param>
            <returns>NURBS representation of the curve on success, null on failure.</returns>
            <since>5.0</since>
        </member>
        <member name="M:Rhino.Geometry.Curve.SpanDomain(System.Int32)">
            <summary>
            Get the domain of the curve span with the given index. 
            Use the SpanCount property to test how many spans there are.
            </summary>
            <param name="spanIndex">Index of span.</param>
            <returns>Interval of the span with the given index.</returns>
            <since>5.0</since>
        </member>
        <member name="T:Rhino.Geometry.CurveProxy">
            <summary>
            Represent curve geometry. Usually this is part of another piece of geometry
            that can be represented as a "proxy".
            </summary>
        </member>
        <member name="M:Rhino.Geometry.CurveProxy.#ctor">
            <summary>
            Protected constructor for internal use.
            </summary>
        </member>
        <member name="P:Rhino.Geometry.CurveProxy.ProxyCurveIsReversed">
            <summary>
            True if "this" is a curve is reversed from the "real" curve geometry
            </summary>
            <since>5.10</since>
        </member>
        <member name="T:Rhino.Geometry.Cylinder">
            <summary>
            Represents the values of a plane, a radius and two heights -on top and beneath-
            that define a right circular cylinder.
            </summary>
        </member>
        <member name="P:Rhino.Geometry.Cylinder.Unset">
            <summary>
            Gets an invalid Cylinder.
            </summary>
            <since>5.0</since>
        </member>
        <member name="M:Rhino.Geometry.Cylinder.#ctor(Rhino.Geometry.Circle)">
            <summary>
            Constructs a new cylinder with infinite height.
            </summary>
            <param name="baseCircle">Base circle for infinite cylinder.</param>
            <since>5.0</since>
        </member>
        <member name="M:Rhino.Geometry.Cylinder.#ctor(Rhino.Geometry.Circle,System.Double)">
            <summary>
            Constructs a new cylinder with a finite height.
            </summary>
            <param name="baseCircle">Base circle for cylinder.</param>
            <param name="height">Height of cylinder (zero for infinite cylinder).</param>
            <example>
            <code source='examples\vbnet\ex_addcylinder.vb' lang='vbnet'/>
            <code source='examples\cs\ex_addcylinder.cs' lang='cs'/>
            <code source='examples\py\ex_addcylinder.py' lang='py'/>
            </example>
            <since>5.0</since>
        </member>
        <member name="P:Rhino.Geometry.Cylinder.IsValid">
            <summary>
            Gets a boolean value indicating whether this cylinder is valid.
            <para>A valid cylinder is represented by a valid circle and two valid heights.</para>
            </summary>
            <since>5.0</since>
        </member>
        <member name="P:Rhino.Geometry.Cylinder.IsFinite">
            <summary>
            true if the cylinder is finite (Height0 != Height1)
            false if the cylinder is infinite.
            </summary>
            <since>5.0</since>
        </member>
        <member name="P:Rhino.Geometry.Cylinder.Center">
            <summary>
            Gets the center point of the defining circle.
            </summary>
            <since>5.0</since>
        </member>
        <member name="P:Rhino.Geometry.Cylinder.Axis">
            <summary>
            Gets the axis direction of the cylinder.
            </summary>
            <since>5.0</since>
        </member>
        <member name="P:Rhino.Geometry.Cylinder.TotalHeight">
            <summary>
            Gets the height of the cylinder. 
            Infinite cylinders have a height of zero, not Double.PositiveInfinity.
            </summary>
            <since>5.0</since>
        </member>
        <member name="P:Rhino.Geometry.Cylinder.Height1">
            <summary>
            Gets or sets the start height of the cylinder.
            The center of bottom cap is: BasePlane.Origin + Height1 * BasePlane.ZAxis.
            </summary>
            <since>5.0</since>
        </member>
        <member name="P:Rhino.Geometry.Cylinder.Height2">
            <summary>
            Gets or sets the end height of the cylinder. 
            If the end height equals the start height, the cylinder is 
            presumed to be infinite.
            The center of top cap is: BasePlane.Origin + Height2 * BasePlane.ZAxis.
            </summary>
            <since>5.0</since>
        </member>
        <member name="P:Rhino.Geometry.Cylinder.Radius">
            <summary>
            Gets or sets the radius of the cylinder.
            </summary>
            <since>6.0</since>
        </member>
        <member name="P:Rhino.Geometry.Cylinder.BasePlane">
            <summary>
            Gets or sets the base plane of the cylinder.
            </summary>
            <since>6.0</since>
        </member>
        <member name="M:Rhino.Geometry.Cylinder.CircleAt(System.Double)">
            <summary>
            Compute the circle at the given elevation parameter.
            </summary>
            <param name="linearParameter">Height parameter for circle section.</param>
            <since>5.0</since>
        </member>
        <member name="M:Rhino.Geometry.Cylinder.LineAt(System.Double)">
            <summary>
            Compute the line at the given angle parameter. This line will be degenerate if the cylinder is infinite.
            </summary>
            <param name="angularParameter">Angle parameter for line section.</param>
            <since>5.0</since>
        </member>
        <member name="M:Rhino.Geometry.Cylinder.ToBrep(System.Boolean,System.Boolean)">
            <summary>
            Constructs a Brep representation of this Cylinder. 
            This is synonymous with calling NurbsSurface.CreateFromCylinder().
            </summary>
            <param name="capBottom">If true, the bottom of the cylinder will be capped.</param>
            <param name="capTop">If true, the top of the cylinder will be capped.</param>
            <returns>A Brep representation of the cylinder or null.</returns>
            <example>
            <code source='examples\vbnet\ex_addcylinder.vb' lang='vbnet'/>
            <code source='examples\cs\ex_addcylinder.cs' lang='cs'/>
            <code source='examples\py\ex_addcylinder.py' lang='py'/>
            </example>
            <since>5.0</since>
        </member>
        <member name="M:Rhino.Geometry.Cylinder.ToNurbsSurface">
            <summary>
            Constructs a Nurbs surface representation of this cylinder. 
            This is synonymous with calling NurbsSurface.CreateFromCylinder().
            </summary>
            <returns>A Nurbs surface representation of the cylinder or null.</returns>
            <since>5.0</since>
        </member>
        <member name="M:Rhino.Geometry.Cylinder.ToRevSurface">
            <summary>
            Constructs a RevSurface representation of this Cylinder. 
            This is synonymous with calling RevSurface.CreateFromCylinder().
            </summary>
            <returns>A RevSurface representation of the cylinder or null.</returns>
            <since>5.0</since>
        </member>
        <member name="M:Rhino.Geometry.Cylinder.EpsilonEquals(Rhino.Geometry.Cylinder,System.Double)">
            <summary>
            Check that all values in other are within epsilon of the values in this
            </summary>
            <param name="other"></param>
            <param name="epsilon"></param>
            <returns></returns>
            <since>5.4</since>
        </member>
        <member name="T:Rhino.Geometry.Continuity">
            <summary>
            Provides enumerated values for continuity along geometry,
            such as continuous first derivative or continuous unit tangent and curvature.
            </summary>
            <since>5.0</since>
        </member>
        <member name="F:Rhino.Geometry.Continuity.None">
            <summary>
            There is no continuity.
            </summary>
        </member>
        <member name="F:Rhino.Geometry.Continuity.C0_continuous">
            <summary>
            Continuous Function : Test for parametric continuity. In particular, all types of curves
            are considered infinitely continuous at the start/end of the evaluation domain.
            </summary>
        </member>
        <member name="F:Rhino.Geometry.Continuity.C1_continuous">
            <summary>
            Continuous first derivative : Test for parametric continuity. In particular,
            all types of curves are considered infinitely continuous at the start/end
            of the evaluation domain.
            </summary>
        </member>
        <member name="F:Rhino.Geometry.Continuity.C2_continuous">
            <summary>
            Continuous first derivative and second derivative : Test for parametric continuity.
            In particular, all types of curves are considered infinitely continuous at the
            start/end of the evaluation domain.
            </summary>
        </member>
        <member name="F:Rhino.Geometry.Continuity.G1_continuous">
            <summary>
            Continuous unit tangent : Test for parametric continuity. In particular, all types of
            curves are considered infinitely continuous at the start/end of the evaluation domain.
            </summary>
        </member>
        <member name="F:Rhino.Geometry.Continuity.G2_continuous">
            <summary>
            Continuous unit tangent and curvature : Test for parametric continuity. In particular,
            all types of curves are considered infinitely continuous at the start/end of the
            evaluation domain.
            </summary>
        </member>
        <member name="F:Rhino.Geometry.Continuity.C0_locus_continuous">
            <summary>
            Locus continuous function :
            Continuity tests using the following enum values are identical to tests using the
            preceding enum values on the INTERIOR of a curve's domain. At the END of a curve
            a "locus" test is performed in place of a parametric test. In particular, at the
            END of a domain, all open curves are locus discontinuous. At the END of a domain,
            all closed curves are at least C0_locus_continuous. By convention all Curves
            are considered locus continuous at the START of the evaluation domain. This
            convention is not strictly correct, but it was adopted to make iterative kink
            finding tools easier to use and so that locus discontinuities are reported once
            at the end parameter of a curve rather than twice.
            </summary>
        </member>
        <member name="F:Rhino.Geometry.Continuity.C1_locus_continuous">
            <summary>
            Locus continuous first derivative :
            Continuity tests using the following enum values are identical to tests using the
            preceding enum values on the INTERIOR of a curve's domain. At the END of a curve
            a "locus" test is performed in place of a parametric test. In particular, at the
            END of a domain, all open curves are locus discontinuous. At the END of a domain,
            all closed curves are at least C0_locus_continuous. By convention all Curves
            are considered locus continuous at the START of the evaluation domain. This
            convention is not strictly correct, but it was adopted to make iterative kink
            finding tools easier to use and so that locus discontinuities are reported once
            at the end parameter of a curve rather than twice.
            </summary>
        </member>
        <member name="F:Rhino.Geometry.Continuity.C2_locus_continuous">
            <summary>
            Locus continuous first and second derivative :
            Continuity tests using the following enum values are identical to tests using the
            preceding enum values on the INTERIOR of a curve's domain. At the END of a curve
            a "locus" test is performed in place of a parametric test. In particular, at the
            END of a domain, all open curves are locus discontinuous. At the END of a domain,
            all closed curves are at least C0_locus_continuous. By convention all Curves
            are considered locus continuous at the START of the evaluation domain. This
            convention is not strictly correct, but it was adopted to make iterative kink
            finding tools easier to use and so that locus discontinuities are reported once
            at the end parameter of a curve rather than twice.
            </summary>
        </member>
        <member name="F:Rhino.Geometry.Continuity.G1_locus_continuous">
            <summary>
            Locus continuous unit tangent :
            Continuity tests using the following enum values are identical to tests using the
            preceding enum values on the INTERIOR of a curve's domain. At the END of a curve
            a "locus" test is performed in place of a parametric test. In particular, at the
            END of a domain, all open curves are locus discontinuous. At the END of a domain,
            all closed curves are at least C0_locus_continuous. By convention all Curves
            are considered locus continuous at the START of the evaluation domain. This
            convention is not strictly correct, but it was adopted to make iterative kink
            finding tools easier to use and so that locus discontinuities are reported once
            at the end parameter of a curve rather than twice.
            </summary>
        </member>
        <member name="F:Rhino.Geometry.Continuity.G2_locus_continuous">
            <summary>
            Locus continuous unit tangent and curvature :
            Continuity tests using the following enum values are identical to tests using the
            preceding enum values on the INTERIOR of a curve's domain. At the END of a curve
            a "locus" test is performed in place of a parametric test. In particular, at the
            END of a domain, all open curves are locus discontinuous. At the END of a domain,
            all closed curves are at least C0_locus_continuous. By convention all Curves
            are considered locus continuous at the START of the evaluation domain. This
            convention is not strictly correct, but it was adopted to make iterative kink
            finding tools easier to use and so that locus discontinuities are reported once
            at the end parameter of a curve rather than twice.
            </summary>
        </member>
        <member name="F:Rhino.Geometry.Continuity.Cinfinity_continuous">
            <summary>
            Analytic discontinuity. Cinfinity_continuous is a euphemism for "at a knot".
            </summary>
        </member>
        <member name="F:Rhino.Geometry.Continuity.Gsmooth_continuous">
            <summary>
            Aesthetic discontinuity
            </summary>
        </member>
        <member name="T:Rhino.Geometry.MeshType">
            <summary>
            Defines enumerated values for various mesh types.
            </summary>
            <since>5.0</since>
        </member>
        <member name="F:Rhino.Geometry.MeshType.Default">
            <summary>
            The default mesh.
            </summary>
        </member>
        <member name="F:Rhino.Geometry.MeshType.Render">
            <summary>
            The render mesh.
            </summary>
        </member>
        <member name="F:Rhino.Geometry.MeshType.Analysis">
            <summary>
            The analysis mesh.
            </summary>
        </member>
        <member name="F:Rhino.Geometry.MeshType.Preview">
            <summary>
            The preview mesh.
            </summary>
        </member>
        <member name="F:Rhino.Geometry.MeshType.Any">
            <summary>
            Any mesh that is available.
            </summary>
        </member>
        <member name="T:Rhino.Geometry.LightStyle">
            <summary>
            Defines enumerated values to represent light styles or types, such as directional or spotlight.
            </summary>
            <since>5.0</since>
        </member>
        <member name="F:Rhino.Geometry.LightStyle.None">
            <summary>
            No light type. This is the default value of the enumeration type.
            </summary>
        </member>
        <member name="F:Rhino.Geometry.LightStyle.CameraDirectional">
            <summary>
            Light location and direction in camera coordinates.
            +x points to right, +y points up, +z points towards camera.
            </summary>
        </member>
        <member name="F:Rhino.Geometry.LightStyle.CameraPoint">
            <summary>
            Light location and direction in camera coordinates.
            +x points to right, +y points up, +z points towards camera.
            </summary>
        </member>
        <member name="F:Rhino.Geometry.LightStyle.CameraSpot">
            <summary>
            Light location and direction in camera coordinates.
            +x points to right, +y points up, +z points towards camera.
            </summary>
        </member>
        <member name="F:Rhino.Geometry.LightStyle.WorldDirectional">
            <summary>Light location and direction in world coordinates.</summary>
        </member>
        <member name="F:Rhino.Geometry.LightStyle.WorldPoint">
            <summary>Light location and direction in world coordinates.</summary>
        </member>
        <member name="F:Rhino.Geometry.LightStyle.WorldSpot">
            <summary>Light location and direction in world coordinates.</summary>
        </member>
        <member name="F:Rhino.Geometry.LightStyle.Ambient">
            <summary>Ambient light.</summary>
        </member>
        <member name="F:Rhino.Geometry.LightStyle.WorldLinear">
            <summary>Linear light in world coordinates.</summary>
        </member>
        <member name="F:Rhino.Geometry.LightStyle.WorldRectangular">
            <summary>Rectangular light in world coordinates.</summary>
        </member>
        <member name="T:Rhino.Geometry.ComponentIndexType">
            <summary>
            Defines enumerated values to represent component index types.
            </summary>
            <since>5.0</since>
        </member>
        <member name="F:Rhino.Geometry.ComponentIndexType.InvalidType">
            <summary>
            Not used. This is the default value of the enumeration type.
            </summary>
        </member>
        <member name="F:Rhino.Geometry.ComponentIndexType.BrepVertex">
            <summary>
            Targets a brep vertex index.
            </summary>
        </member>
        <member name="F:Rhino.Geometry.ComponentIndexType.BrepEdge">
            <summary>
            Targets a brep edge index.
            </summary>
        </member>
        <member name="F:Rhino.Geometry.ComponentIndexType.BrepFace">
            <summary>
            Targets a brep face index.
            </summary>
        </member>
        <member name="F:Rhino.Geometry.ComponentIndexType.BrepTrim">
            <summary>
            Targets a brep trim index.
            </summary>
        </member>
        <member name="F:Rhino.Geometry.ComponentIndexType.BrepLoop">
            <summary>
            Targets a brep loop index.
            </summary>
        </member>
        <member name="F:Rhino.Geometry.ComponentIndexType.MeshVertex">
            <summary>
            Targets a mesh vertex index.
            </summary>
        </member>
        <member name="F:Rhino.Geometry.ComponentIndexType.MeshTopologyVertex">
            <summary>
            Targets a mesh topology vertex index.
            </summary>
        </member>
        <member name="F:Rhino.Geometry.ComponentIndexType.MeshTopologyEdge">
            <summary>
            Targets a mesh topology edge index.
            </summary>
        </member>
        <member name="F:Rhino.Geometry.ComponentIndexType.MeshFace">
            <summary>
            Targets a mesh face index.
            </summary>
        </member>
        <member name="F:Rhino.Geometry.ComponentIndexType.MeshNgon">
            <summary>
            Targets a mesh n-gon index.
            </summary>
        </member>
        <member name="F:Rhino.Geometry.ComponentIndexType.InstanceDefinitionPart">
            <summary>
            Targets an instance definition part index.
            </summary>
        </member>
        <member name="F:Rhino.Geometry.ComponentIndexType.PolycurveSegment">
            <summary>
            Targets a polycurve segment index.
            </summary>
        </member>
        <member name="F:Rhino.Geometry.ComponentIndexType.PointCloudPoint">
            <summary>
            Targets a point cloud point index.
            </summary>
        </member>
        <member name="F:Rhino.Geometry.ComponentIndexType.GroupMember">
            <summary>
            Targets a group member index.
            </summary>
        </member>
        <member name="F:Rhino.Geometry.ComponentIndexType.ExtrusionBottomProfile">
            <summary>
            3d bottom profile curves. Index identifies profile component
            </summary>
        </member>
        <member name="F:Rhino.Geometry.ComponentIndexType.ExtrusionTopProfile">
            <summary>
            3d top profile curves. Index identifies profile component
            </summary>
        </member>
        <member name="F:Rhino.Geometry.ComponentIndexType.ExtrusionWallEdge">
            <summary>
            3d wall edge curve.
            Index/2: identifies profile component
            Index%2: 0=start, 1=end
            </summary>
        </member>
        <member name="F:Rhino.Geometry.ComponentIndexType.ExtrusionWallSurface">
            <summary>
            Side wall surfaces.
            Index identifies profile component
            </summary>
        </member>
        <member name="F:Rhino.Geometry.ComponentIndexType.ExtrusionCapSurface">
            <summary>
            Bottom and top cap surfaces. Index 0=bottom, 1=top
            </summary>
        </member>
        <member name="F:Rhino.Geometry.ComponentIndexType.ExtrusionPath">
            <summary>
            Extrusion path (axis line). Index -1=entire path, 0=start point, 1=endpoint
            </summary>
        </member>
        <member name="F:Rhino.Geometry.ComponentIndexType.SubdVertex">
            <summary>Targets a SubD vertex pointer Id. Ids are not guaranteed to be sequential.</summary>
        </member>
        <member name="F:Rhino.Geometry.ComponentIndexType.SubdEdge">
            <summary>Targets a SubD edge pointer Id. Ids are not guaranteed to be sequential.</summary>
        </member>
        <member name="F:Rhino.Geometry.ComponentIndexType.SubdFace">
            <summary>Targets a SubD face pointer Id. Ids are not guaranteed to be sequential.</summary>
        </member>
        <member name="F:Rhino.Geometry.ComponentIndexType.DimLinearPoint">
            <summary>
            Targets a linear dimension point index.
            </summary>
        </member>
        <member name="F:Rhino.Geometry.ComponentIndexType.DimRadialPoint">
            <summary>
            Targets a radial dimension point index.
            </summary>
        </member>
        <member name="F:Rhino.Geometry.ComponentIndexType.DimAngularPoint">
            <summary>
            Targets an angular dimension point index.
            </summary>
        </member>
        <member name="F:Rhino.Geometry.ComponentIndexType.DimOrdinatePoint">
            <summary>
            Targets an ordinate dimension point index.
            </summary>
        </member>
        <member name="F:Rhino.Geometry.ComponentIndexType.DimTextPoint">
            <summary>
            Targets a text point index.
            </summary>
        </member>
        <member name="F:Rhino.Geometry.ComponentIndexType.NoType">
            <summary>
            Targets no specific type.
            </summary>
        </member>
        <member name="T:Rhino.Geometry.ComponentIndex">
            <summary>
            Represents an index of an element contained in another object.
            </summary>
        </member>
        <member name="M:Rhino.Geometry.ComponentIndex.#ctor(Rhino.Geometry.ComponentIndexType,System.Int32)">
            <summary>
            Construct component index with a specific type/index combination
            </summary>
            <param name="type"></param>
            <param name="index"></param>
            <since>5.0</since>
        </member>
        <member name="P:Rhino.Geometry.ComponentIndex.ComponentIndexType">
            <summary>
            The interpretation of Index depends on the Type value.
            Type             m_index interpretation (0 based indices)
            no_type            used when context makes it clear what array is being index
            brep_vertex        Brep.m_V[] array index
            brep_edge          Brep.m_E[] array index
            brep_face          Brep.m_F[] array index
            brep_trim          Brep.m_T[] array index
            brep_loop          Brep.m_L[] array index
            mesh_vertex        Mesh.m_V[] array index
            meshtop_vertex     MeshTopology.m_topv[] array index
            meshtop_edge       MeshTopology.m_tope[] array index
            mesh_face          Mesh.m_F[] array index
            idef_part          InstanceDefinition.m_object_uuid[] array index
            polycurve_segment  PolyCurve::m_segment[] array index
            dim_linear_point   LinearDimension2::POINT_INDEX
            dim_radial_point   RadialDimension2::POINT_INDEX
            dim_angular_point  AngularDimension2::POINT_INDEX
            dim_ordinate_point OrdinateDimension2::POINT_INDEX
            dim_text_point     TextEntity2 origin point.
            </summary>
            <since>5.0</since>
        </member>
        <member name="P:Rhino.Geometry.ComponentIndex.Index">
            <summary>
            The interpretation of m_index depends on the m_type value.
            m_type             m_index interpretation (0 based indices)
            no_type            used when context makes it clear what array is being index
            brep_vertex        Brep.m_V[] array index
            brep_edge          Brep.m_E[] array index
            brep_face          Brep.m_F[] array index
            brep_trim          Brep.m_T[] array index
            brep_loop          Brep.m_L[] array index
            mesh_vertex        Mesh.m_V[] array index
            meshtop_vertex     MeshTopology.m_topv[] array index
            meshtop_edge       MeshTopology.m_tope[] array index
            mesh_face          Mesh.m_F[] array index
            idef_part          InstanceDefinition.m_object_uuid[] array index
            polycurve_segment  PolyCurve::m_segment[] array index
            dim_linear_point   LinearDimension2::POINT_INDEX
            dim_radial_point   RadialDimension2::POINT_INDEX
            dim_angular_point  AngularDimension2::POINT_INDEX
            dim_ordinate_point OrdinateDimension2::POINT_INDEX
            dim_text_point     TextEntity2 origin point.
            </summary>
            <since>5.0</since>
        </member>
        <member name="M:Rhino.Geometry.ComponentIndex.IsUnset">
            <summary>
            Return true is this component index is the same as the Unset component index
            </summary>
            <returns></returns>
            <since>7.0</since>
        </member>
        <member name="M:Rhino.Geometry.ComponentIndex.Equals(Rhino.Geometry.ComponentIndex)">
            <summary>
            Determines whether the specified <see cref="T:Rhino.Geometry.ComponentIndex" /> is equal to the current <see cref="T:Rhino.Geometry.ComponentIndex" />,
            comparing by value.
            </summary>
            <param name="other">The other <see cref="T:Rhino.Geometry.ComponentIndex" /> to compare with.</param>
            <returns>true if other has the same ComponentIndexType and Index as this; otherwise, false.</returns>
            <since>8.0</since>
        </member>
        <member name="M:Rhino.Geometry.ComponentIndex.GetHashCode">
            <summary>
            Computes the hash code for this <see cref="T:Rhino.Geometry.ComponentIndex" /> object.
            </summary>
            <returns>A hash value that might be equal for two different <see cref="T:Rhino.Geometry.ComponentIndex" /> values.</returns>
            <since>8.0</since>
        </member>
        <member name="M:Rhino.Geometry.ComponentIndex.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object" /> is equal to the current <see cref="T:Rhino.Geometry.ComponentIndex" />,
            comparing by value.
            </summary>
            <param name="obj">The other object to compare with.</param>
            <returns>true if obj is a <see cref="T:Rhino.Geometry.ComponentIndex" /> and ComponentIndexType and Index is the same; false otherwise.</returns>
            <since>8.0</since>
        </member>
        <member name="M:Rhino.Geometry.ComponentIndex.CompareTo(Rhino.Geometry.ComponentIndex)">
            <summary>
            Compares this <see cref="T:Rhino.Geometry.ComponentIndex" /> with another <see cref="T:Rhino.Geometry.ComponentIndex" />.
            </summary>
            <param name="other">The other <see cref="T:Rhino.Geometry.ComponentIndex" /> to use in comparison</param>
            <returns>
            <para> 0: if this is identical to other</para>
            <para>-1: if this.ComponentIndexType &lt; other.ComponentIndexType</para>
            <para>-1: if this.ComponentIndexType == other.ComponentIndexType and this.Index &lt; other.Index</para>
            <para>+1: otherwise.</para>
            </returns>
            <since>8.0</since>
        </member>
        <member name="M:Rhino.Geometry.ComponentIndex.op_Equality(Rhino.Geometry.ComponentIndex,Rhino.Geometry.ComponentIndex)">
            <summary>
            Determines whether two ComponentIndexes have equal values.
            </summary>
            <param name="a">The first <see cref="T:Rhino.Geometry.ComponentIndex" /></param>
            <param name="b">The second <see cref="T:Rhino.Geometry.ComponentIndex" /></param>
            <returns>True if the ComponentIndexes are equal</returns>
            <since>8.0</since>
        </member>
        <member name="M:Rhino.Geometry.ComponentIndex.op_Inequality(Rhino.Geometry.ComponentIndex,Rhino.Geometry.ComponentIndex)">
            <summary>
            Determines whether two ComponentIndexes have different values.
            </summary>
            <param name="a">The first <see cref="T:Rhino.Geometry.ComponentIndex" /></param>
            <param name="b">The second <see cref="T:Rhino.Geometry.ComponentIndex" /></param>
            <returns>True if the ComponentIndexes are unequal</returns>
            <since>8.0</since>
        </member>
        <member name="M:Rhino.Geometry.ComponentIndex.op_LessThan(Rhino.Geometry.ComponentIndex,Rhino.Geometry.ComponentIndex)">
            <summary>
            Determines whether the first <see cref="T:Rhino.Geometry.ComponentIndex" /> comes before
            the second.
            </summary>
            <param name="a">The first <see cref="T:Rhino.Geometry.ComponentIndex" /></param>
            <param name="b">The second <see cref="T:Rhino.Geometry.ComponentIndex" /></param>
            <returns>true if the first comes before the second; otherwise, false.</returns>
            <since>8.0</since>
        </member>
        <member name="M:Rhino.Geometry.ComponentIndex.op_GreaterThan(Rhino.Geometry.ComponentIndex,Rhino.Geometry.ComponentIndex)">
            <summary>
            Determines whether the first <see cref="T:Rhino.Geometry.ComponentIndex" /> comes after
            the second.
            </summary>
            <param name="a">The first <see cref="T:Rhino.Geometry.ComponentIndex" /></param>
            <param name="b">The second <see cref="T:Rhino.Geometry.ComponentIndex" /></param>
            <returns>true if the first comes after the second; otherwise, false.</returns>
            <since>8.0</since>
        </member>
        <member name="M:Rhino.Geometry.ComponentIndex.op_LessThanOrEqual(Rhino.Geometry.ComponentIndex,Rhino.Geometry.ComponentIndex)">
            <summary>
            Determines whether the first <see cref="T:Rhino.Geometry.ComponentIndex" /> comes before
            the second, or it is equal to it.
            </summary>
            <param name="a">The first <see cref="T:Rhino.Geometry.ComponentIndex" /></param>
            <param name="b">The second <see cref="T:Rhino.Geometry.ComponentIndex" /></param>
            <returns>true if the first is equal to the second or comes before it; otherwise, false</returns>
            <since>8.0</since>
        </member>
        <member name="M:Rhino.Geometry.ComponentIndex.op_GreaterThanOrEqual(Rhino.Geometry.ComponentIndex,Rhino.Geometry.ComponentIndex)">
            <summary>
            Determines whether the first <see cref="T:Rhino.Geometry.ComponentIndex" /> comes after
            the second, or it is equal to it.
            </summary>
            <param name="a">The first <see cref="T:Rhino.Geometry.ComponentIndex" /></param>
            <param name="b">The second <see cref="T:Rhino.Geometry.ComponentIndex" /></param>
            <returns>true if the first is equal to the second or comes after it; otherwise, false</returns>
            <since>8.0</since>
        </member>
        <member name="P:Rhino.Geometry.ComponentIndex.Unset">
            <summary>
            The unset value of component index.
            </summary>
            <since>5.0</since>
        </member>
        <member name="T:Rhino.Geometry.DetailView">
            <summary>
            Represents a view of the model placed on a page layout.
            </summary>
        </member>
        <member name="M:Rhino.Geometry.DetailView.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Protected serialization constructor for internal use.
            </summary>
            <param name="info">Data to be serialized.</param>
            <param name="context">Serialization stream.</param>
        </member>
        <member name="P:Rhino.Geometry.DetailView.IsParallelProjection">
            <summary>
            Gets or sets whether the view is parallel.
            </summary>
            <since>5.0</since>
        </member>
        <member name="P:Rhino.Geometry.DetailView.IsPerspectiveProjection">
            <summary>
            Gets or sets whether the view is perspective.
            </summary>
            <since>5.0</since>
        </member>
        <member name="P:Rhino.Geometry.DetailView.IsProjectionLocked">
            <summary>
            Gets or sets whether the view is locked.
            </summary>
            <example>
            <code source='examples\vbnet\ex_addlayout.vb' lang='vbnet'/>
            <code source='examples\cs\ex_addlayout.cs' lang='cs'/>
            <code source='examples\py\ex_addlayout.py' lang='py'/>
            </example>
            <since>5.0</since>
        </member>
        <member name="P:Rhino.Geometry.DetailView.PageToModelRatio">
            <summary>
            Gets the page units/model units quotient.
            </summary>
            <since>5.0</since>
        </member>
        <member name="M:Rhino.Geometry.DetailView.SetScale(System.Double,Rhino.UnitSystem,System.Double,Rhino.UnitSystem)">
            <summary>
            Sets the detail viewport's projection so geometry is displayed at a certain scale.
            </summary>
            <param name="modelLength">Reference model length.</param>
            <param name="modelUnits">Units for model length.</param>
            <param name="pageLength">Length on page that the modelLength should equal.</param>
            <param name="pageUnits">Units for page length.</param>
            <returns>
            true on success. false if the DetailView projection is perspective or input values are incongruous.
            </returns>
            <example>
            <code source='examples\vbnet\ex_addlayout.vb' lang='vbnet'/>
            <code source='examples\cs\ex_addlayout.cs' lang='cs'/>
            <code source='examples\py\ex_addlayout.py' lang='py'/>
            </example>
            <since>5.0</since>
        </member>
        <member name="T:Rhino.Geometry.LinearDimension">
            <summary> Represents a linear dimension </summary>
        </member>
        <member name="M:Rhino.Geometry.LinearDimension.#ctor">
            <since>5.0</since>
        </member>
        <member name="M:Rhino.Geometry.LinearDimension.#ctor(Rhino.Geometry.Plane,Rhino.Geometry.Point2d,Rhino.Geometry.Point2d,Rhino.Geometry.Point2d)">
            <example>
            <code source='examples\vbnet\ex_addlineardimension2.vb' lang='vbnet'/>
            <code source='examples\cs\ex_addlineardimension2.cs' lang='cs'/>
            <code source='examples\py\ex_addlineardimension2.py' lang='py'/>
            </example>
            <since>5.0</since>
        </member>
        <member name="M:Rhino.Geometry.LinearDimension.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary> Protected constructor used in serialization. </summary>
        </member>
        <member name="P:Rhino.Geometry.LinearDimension.DistanceBetweenArrowTips">
            <summary>
            Gets the distance between arrow tips.
            </summary>
            <since>5.0</since>
        </member>
        <member name="M:Rhino.Geometry.LinearDimension.SetLocations(Rhino.Geometry.Point2d,Rhino.Geometry.Point2d,Rhino.Geometry.Point2d)">
            <summary>
            Sets the three locations of the point, using two-dimensional points
            that refer to the plane of the annotation.
            </summary>
            <since>5.0</since>
        </member>
        <member name="P:Rhino.Geometry.LinearDimension.Aligned">
            <summary>
            Gets or sets a value indicating whether this annotation is aligned.
            </summary>
            <since>5.0</since>
        </member>
        <member name="P:Rhino.Geometry.LinearDimension.AnnotationType">
            <since>6.0</since>
        </member>
        <member name="M:Rhino.Geometry.LinearDimension.Create(Rhino.Geometry.AnnotationType,Rhino.DocObjects.DimensionStyle,Rhino.Geometry.Plane,Rhino.Geometry.Vector3d,Rhino.Geometry.Point3d,Rhino.Geometry.Point3d,Rhino.Geometry.Point3d,System.Double)">
            <summary>
            Initialize Dimension parameters
            </summary>
            <param name="dimtype">AnnotationType.Rotated or AnnotationType.Aligned</param>
            <param name="dimStyle">Dimension's DimensionStyle</param>
            <param name="plane">Dimension's plane</param>
            <param name="horizontal">Horizontal reference direction</param>
            <param name="defpoint1">First definition point</param>
            <param name="defpoint2">Second definition point</param>
            <param name="dimlinepoint">Point on dimension line</param>
            <param name="rotationInPlane">For Rotated style</param>
            <returns></returns>
            <since>6.0</since>
        </member>
        <member name="M:Rhino.Geometry.LinearDimension.Get3dPoints(Rhino.Geometry.Point3d@,Rhino.Geometry.Point3d@,Rhino.Geometry.Point3d@,Rhino.Geometry.Point3d@,Rhino.Geometry.Point3d@,Rhino.Geometry.Point3d@)">
            <summary> Get locations of dimension's 3d points </summary>
            <param name="extensionLine1End">First definition point</param>
            <param name="extensionLine2End">Second definition point</param>
            <param name="arrowhead1End">First arrowhead point</param>
            <param name="arrowhead2End">Second Arrowhead point</param>
            <param name="dimlinepoint">Point on dimension line</param>
            <param name="textpoint">Text location</param>
            <returns>true = success</returns>
            <since>6.0</since>
        </member>
        <member name="P:Rhino.Geometry.LinearDimension.ExtensionLine1End">
            <summary>
            End of the first extension line.
            </summary>
            <since>5.0</since>
        </member>
        <member name="P:Rhino.Geometry.LinearDimension.ExtensionLine2End">
            <summary>
            End of the second extension line.
            </summary>
            <since>5.0</since>
        </member>
        <member name="P:Rhino.Geometry.LinearDimension.Arrowhead1End">
            <summary>
            Gets the arrow head end of the first extension line.
            </summary>
            <since>5.0</since>
        </member>
        <member name="P:Rhino.Geometry.LinearDimension.Arrowhead2End">
            <summary>
            Gets the arrow head end of the second extension line.
            </summary>
            <since>5.0</since>
        </member>
        <member name="P:Rhino.Geometry.LinearDimension.DimensionLinePoint">
            <summary>
            Point on annotation plane where dimension line starts
            </summary>
            <since>6.0</since>
        </member>
        <member name="M:Rhino.Geometry.LinearDimension.GetTextRectangle(Rhino.Geometry.Point3d[]@)">
            <since>6.0</since>
        </member>
        <member name="M:Rhino.Geometry.LinearDimension.GetDistanceDisplayText(Rhino.UnitSystem,Rhino.DocObjects.DimensionStyle)">
            <since>6.0</since>
        </member>
        <member name="T:Rhino.Geometry.AngularDimension">
            <summary> 
            Represents a dimension of an entity that can be measured with an angle.
            </summary>
        </member>
        <member name="M:Rhino.Geometry.AngularDimension.#ctor">
            <summary>
            Constructs an angular dimension.
            </summary>
            <since>6.0</since>
        </member>
        <member name="M:Rhino.Geometry.AngularDimension.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Protected constructor used in serialization. 
            </summary>
        </member>
        <member name="M:Rhino.Geometry.AngularDimension.#ctor(Rhino.Geometry.Arc,System.Double)">
            <summary>
            Constructs an angular dimension from a given arc.
            </summary>
            <param name="arc">The start and end points of the arc are the start and endpoints of the dimension</param>
            <param name="offset">How far to offset the dimension location from the arc</param>
            <since>5.0</since>
        </member>
        <member name="M:Rhino.Geometry.AngularDimension.#ctor(Rhino.Geometry.Plane,Rhino.Geometry.Vector3d,Rhino.Geometry.Point3d,Rhino.Geometry.Point3d,Rhino.Geometry.Point3d,Rhino.Geometry.Point3d)">
            <summary>
            Constructs an angular dimension with extension lines starting at plane origin (arc center).
            </summary>
            <param name="plane">Dimension's plane.</param>
            <param name="horizontal">Horizontal reference direction.</param>
            <param name="centerpoint">Dimension center point.</param>
            <param name="defpoint1">Point on first extension line.</param>
            <param name="defpoint2">Point on second extension line.</param>
            <param name="dimlinepoint">Point on dimension arc.</param>
            <since>8.0</since>
        </member>
        <member name="M:Rhino.Geometry.AngularDimension.#ctor(Rhino.Geometry.Plane,Rhino.Geometry.Vector3d,Rhino.Geometry.Point3d,Rhino.Geometry.Point3d,Rhino.Geometry.Point3d,Rhino.Geometry.Point3d,Rhino.Geometry.Point3d)">
            <summary>
            Constructs an angular dimension from parameters.
            </summary>
            <param name="plane">The dimension's plane.</param>
            <param name="horizontal">The horizontal direction.</param>
            <param name="extpoint1">Start of first extension line.</param>
            <param name="extpoint2">start of second extension line.</param>
            <param name="dirpoint1">point on first extension vector.</param>
            <param name="dirpoint2">Spoint on second extension vector.</param>
            <param name="dimlinepoint">point on dimension line.</param>
            <since>8.0</since>
        </member>
        <member name="M:Rhino.Geometry.AngularDimension.#ctor(Rhino.Geometry.Line,Rhino.Geometry.Point3d,Rhino.Geometry.Line,Rhino.Geometry.Point3d,Rhino.Geometry.Point3d,System.Boolean)">
            <summary>
            Constructs an angular dimension between the lines.
            
            If the lines intersect in a single point, that point is used as the center
            of the angular dimension arc.In this case, there are eight possible angles
            to dimension.The pointOnAngularDimensionArc and pointOnLine parameters
            are used to select the correct angle to dimension. If a pointOnLine parameter
            is not set, the corresponding line's midpoint is used.
            
            If the lines are colinear, the point on the line closest to
            pointOnAngularDimensionArc is the center of the angular dimension arc.
            </summary>
            <param name="line1">The first line.</param>
            <param name="pointOnLine1">
            If specified, indicates which semi-infinite portion of line1 to dimension.
            Otherwise the midpoint of line1 as a segment is used.
            When in doubt, use Point3d.Unset.
            </param>
            <param name="line2">The second line.</param>
            If specified, indicates which semi-infinite portion of line2 to dimension.
            Otherwise the midpoint of line2 as a segment is used.
            When in doubt, use Point3d.Unset.
            <param name="pointOnLine2">
            </param>
            <param name="pointOnAngularDimensionArc">
            A point on the interior of the angular dimension arc. 
            </param>
            <param name="bSetExtensionPoints">
            If bSetExtensionPoints is true, and a pointOnLine parameter is valid, 
            that point is used as the extension point. 
            Otherwise the angular dimension arc endpoint is used.
            </param>
            <since>8.0</since>
        </member>
        <member name="M:Rhino.Geometry.AngularDimension.Create(Rhino.DocObjects.DimensionStyle,Rhino.Geometry.Plane,Rhino.Geometry.Vector3d,Rhino.Geometry.Point3d,Rhino.Geometry.Point3d,Rhino.Geometry.Point3d,Rhino.Geometry.Point3d)">
            <summary>
            Creates an angular dimension with extension lines starting at plane origin (arc center).
            </summary>
            <param name="dimStyle">Dimension's dimension style</param>
            <param name="plane">Dimension's plane.</param>
            <param name="horizontal">Horizontal reference direction.</param>
            <param name="centerpoint">Dimension center point.</param>
            <param name="defpoint1">Point on first extension line.</param>
            <param name="defpoint2">Point on second extension line.</param>
            <param name="dimlinepoint">Point on dimension arc.</param>
            <returns>The angular dimension if successful, null otherwise.</returns>
            <since>6.0</since>
        </member>
        <member name="M:Rhino.Geometry.AngularDimension.AdjustFromPoints(Rhino.Geometry.Plane,Rhino.Geometry.Point3d,Rhino.Geometry.Point3d,Rhino.Geometry.Point3d,Rhino.Geometry.Point3d)">
            <summary>
            Updates dimension geometry from point locations.
            </summary>
            <param name="plane">Dimension's plane</param>
            <param name="centerpoint">Dimension's center point</param>
            <param name="defpoint1">Point on first extension line.</param>
            <param name="defpoint2">Point on second extension line.</param>
            <param name="dimlinepoint">Point on dimension arc.</param>
            <returns>True if successful, false otherwise.</returns>
            <since>6.0</since>
        </member>
        <member name="M:Rhino.Geometry.AngularDimension.Create(System.Guid,Rhino.Geometry.Plane,Rhino.Geometry.Point3d,Rhino.Geometry.Point3d,Rhino.Geometry.Point3d,Rhino.Geometry.Point3d,Rhino.Geometry.Point3d)">
            <deprecated>8.0</deprecated>
        </member>
        <member name="M:Rhino.Geometry.AngularDimension.Create(Rhino.DocObjects.DimensionStyle,Rhino.Geometry.Plane,Rhino.Geometry.Vector3d,Rhino.Geometry.Point3d,Rhino.Geometry.Point3d,Rhino.Geometry.Point3d,Rhino.Geometry.Point3d,Rhino.Geometry.Point3d)">
            <summary>
            Creates an angular dimension from parameters.
            </summary>
            <param name="dimStyle">The dimension style.</param>
            <param name="plane">The dimension's plane.</param>
            <param name="horizontal">The horizontal direction.</param>
            <param name="extpoint1">Start of first extension line.</param>
            <param name="extpoint2">start of second extension line.</param>
            <param name="dirpoint1">point on first extension vector.</param>
            <param name="dirpoint2">Spoint on second extension vector.</param>
            <param name="dimlinepoint">point on dimension line.</param>
            <returns></returns>
            <since>8.0</since>
        </member>
        <member name="M:Rhino.Geometry.AngularDimension.AdjustFromPoints(Rhino.Geometry.Plane,Rhino.Geometry.Point3d,Rhino.Geometry.Point3d,Rhino.Geometry.Point3d,Rhino.Geometry.Point3d,Rhino.Geometry.Point3d)">
            <summary>
            Update angular dimension from point locations.
            </summary>
            <param name="plane">Dimension's plane</param>
            <param name="extpoint1">Start of first extension line.</param>
            <param name="extpoint2">start of second extension line.</param>
            <param name="dirpoint1">point on first extension vector.</param>
            <param name="dirpoint2">Spoint on second extension vector.</param>
            <param name="dimlinepoint">point on dimension line.</param>
            <returns>True if successful, false otherwise.</returns>
            <since>6.0</since>
        </member>
        <member name="M:Rhino.Geometry.AngularDimension.Create(Rhino.DocObjects.DimensionStyle,Rhino.Geometry.Line,Rhino.Geometry.Point3d,Rhino.Geometry.Line,Rhino.Geometry.Point3d,Rhino.Geometry.Point3d,System.Boolean)">
            <summary>
            The angle between the lines is dimensioned.
            
            If the lines intersect in a single point, that point is used as the center
            of the angular dimension arc.In this case, there are eight possible angles
            to dimension.The pointOnAngularDimensionArc and pointOnLine parameters
            are used to select the correct angle to dimension. If a pointOnLine parameter
            is not set, the corresponding line's midpoint is used.
            
            If the lines are colinear, the point on the line closest to
            pointOnAngularDimensionArc is the center of the angular dimension arc.
            </summary>
            <param name="dimStyle">Dimension style.</param>
            <param name="line1">The first line.</param>
            <param name="pointOnLine1">
            If specified, indicates which semi-infinite portion of line1 to dimension.
            Otherwise the midpoint of line1 as a segment is used.
            When in doubt, use Point3d.Unset.
            </param>
            <param name="line2">The second line.</param>
            If specified, indicates which semi-infinite portion of line2 to dimension.
            Otherwise the midpoint of line2 as a segment is used.
            When in doubt, use Point3d.Unset.
            <param name="pointOnLine2">
            </param>
            <param name="pointOnAngularDimensionArc">
            A point on the interior of the angular dimension arc. 
            </param>
            <param name="bSetExtensionPoints">
            If bSetExtensionPoints is true, and a pointOnLine parameter is valid, 
            that point is used as the extension point. 
            Otherwise the angular dimension arc endpoint is used.
            </param>
            <returns>The angular dimension if successful, null otherwise.</returns>
            <since>8.0</since>
        </member>
        <member name="M:Rhino.Geometry.AngularDimension.Get3dPoints(Rhino.Geometry.Point3d@,Rhino.Geometry.Point3d@,Rhino.Geometry.Point3d@,Rhino.Geometry.Point3d@,Rhino.Geometry.Point3d@,Rhino.Geometry.Point3d@,Rhino.Geometry.Point3d@)">
            <summary>
            Get locations of dimension's 3d points
            </summary>
            <param name="centerpoint">Dimension's center point</param>
            <param name="defpoint1">First definition point</param>
            <param name="defpoint2">Second definition point</param>
            <param name="arrowpoint1">First arrow point</param>
            <param name="arrowpoint2">Second arrow point</param>
            <param name="dimlinepoint">Point on dimension line</param>
            <param name="textpoint">Text location point</param>
            <returns></returns>
            <since>6.0</since>
        </member>
        <member name="P:Rhino.Geometry.AngularDimension.CenterPoint">
            <since>6.0</since>
        </member>
        <member name="P:Rhino.Geometry.AngularDimension.DefPoint1">
            <since>6.0</since>
        </member>
        <member name="P:Rhino.Geometry.AngularDimension.DefPoint2">
            <since>6.0</since>
        </member>
        <member name="P:Rhino.Geometry.AngularDimension.DimlinePoint">
            <since>6.0</since>
        </member>
        <member name="P:Rhino.Geometry.AngularDimension.ArrowPoint1">
            <since>6.0</since>
        </member>
        <member name="P:Rhino.Geometry.AngularDimension.ArrowPoint2">
            <since>6.0</since>
        </member>
        <member name="M:Rhino.Geometry.AngularDimension.GetTextRectangle(Rhino.Geometry.Point3d[]@)">
            <since>6.0</since>
        </member>
        <member name="M:Rhino.Geometry.AngularDimension.GetDisplayLines(Rhino.DocObjects.DimensionStyle,System.Double,Rhino.Geometry.Line[]@,Rhino.Geometry.Arc[]@)">
            <since>6.0</since>
        </member>
        <member name="M:Rhino.Geometry.AngularDimension.GetAngleDisplayText(Rhino.DocObjects.DimensionStyle)">
            <since>6.0</since>
        </member>
        <member name="P:Rhino.Geometry.AngularDimension.AngleFormat">
            <since>6.0</since>
        </member>
        <member name="P:Rhino.Geometry.AngularDimension.AngleResolution">
            <since>6.0</since>
        </member>
        <member name="P:Rhino.Geometry.AngularDimension.AngleRoundoff">
            <since>6.0</since>
        </member>
        <member name="P:Rhino.Geometry.AngularDimension.AngleZeroSuppression">
            <since>6.0</since>
        </member>
        <member name="T:Rhino.Geometry.RadialDimension">
            <summary> 
            Represents a dimension of a circular entity that can be measured with radius or diameter.
            </summary>
        </member>
        <member name="M:Rhino.Geometry.RadialDimension.#ctor">
            <summary>
            Constructs a radial dimension.
            </summary>
            <since>6.0</since>
        </member>
        <member name="M:Rhino.Geometry.RadialDimension.#ctor(Rhino.Geometry.AnnotationType,Rhino.Geometry.Plane,Rhino.Geometry.Point3d,Rhino.Geometry.Point3d,Rhino.Geometry.Point3d)">
            <summary>
            Constructs a radial dimension from parameters.
            </summary>
            <param name="dimtype">AnnotationType.Diameter or AnnotationType.Radius</param>
            <param name="plane">Dimension's plane</param>
            <param name="centerpoint">Dimension's center point</param>
            <param name="radiuspoint">Point on dimension radius</param>
            <param name="dimlinepoint">Point on dimension line</param>
            <since>8.0</since>
        </member>
        <member name="M:Rhino.Geometry.RadialDimension.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary> Protected constructor used in serialization. </summary>
        </member>
        <member name="P:Rhino.Geometry.RadialDimension.AnnotationType">
            <since>6.0</since>
        </member>
        <member name="P:Rhino.Geometry.RadialDimension.IsDiameterDimension">
            <summary>
            Gets a value indicating whether the value refers to the diameter, rather than the radius.
            </summary>
            <since>5.0</since>
        </member>
        <member name="M:Rhino.Geometry.RadialDimension.Create(Rhino.DocObjects.DimensionStyle,Rhino.Geometry.AnnotationType,Rhino.Geometry.Plane,Rhino.Geometry.Point3d,Rhino.Geometry.Point3d,Rhino.Geometry.Point3d)">
            <summary>
            Initialize Dimension parameters
            </summary>
            <param name="dimStyle">Dimension's dimstyle</param>
            <param name="dimtype">AnnotationType.Diameter or AnnotationType.Radius</param>
            <param name="plane">Dimension's plane</param>
            <param name="centerpoint">Dimension's center point</param>
            <param name="radiuspoint">Point on dimension radius</param>
            <param name="dimlinepoint">Point on dimension line</param>
            <returns></returns>
            <since>6.0</since>
        </member>
        <member name="M:Rhino.Geometry.RadialDimension.AdjustFromPoints(Rhino.Geometry.Plane,Rhino.Geometry.Point3d,Rhino.Geometry.Point3d,Rhino.Geometry.Point3d,System.Double)">
            <summary>
            Update Dimension geometry from point locations
            </summary>
            <param name="plane">Dimension's plane</param>
            <param name="centerpoint">Dimension's center point</param>
            <param name="radiuspoint">Point on dimension radius</param>
            <param name="dimlinepoint">Point on dimension line</param>
            <param name="rotationInPlane">Rotation around plane origin</param>
            <returns></returns>
            <since>6.0</since>
        </member>
        <member name="M:Rhino.Geometry.RadialDimension.Get3dPoints(Rhino.Geometry.Point3d@,Rhino.Geometry.Point3d@,Rhino.Geometry.Point3d@,Rhino.Geometry.Point3d@)">
            <summary>
            Get locations of dimension's 3d points
            </summary>
            <param name="centerpoint">Dimension's center point</param>
            <param name="radiuspoint">Point on dimension's radius</param>
            <param name="kneepoint">Point where dimension line jogs</param>
            <param name="dimlinepoint">Point on dimension line</param>
            <returns></returns>
            <since>6.0</since>
        </member>
        <member name="P:Rhino.Geometry.RadialDimension.CenterPoint">
            <since>6.0</since>
        </member>
        <member name="P:Rhino.Geometry.RadialDimension.RadiusPoint">
            <since>6.0</since>
        </member>
        <member name="P:Rhino.Geometry.RadialDimension.DimlinePoint">
            <since>6.0</since>
        </member>
        <member name="P:Rhino.Geometry.RadialDimension.KneePoint">
            <since>6.0</since>
        </member>
        <member name="M:Rhino.Geometry.RadialDimension.GetTextRectangle(Rhino.Geometry.Point3d[]@)">
            <since>6.0</since>
        </member>
        <member name="M:Rhino.Geometry.RadialDimension.GetDistanceDisplayText(Rhino.UnitSystem,Rhino.DocObjects.DimensionStyle)">
            <since>6.0</since>
        </member>
        <member name="P:Rhino.Geometry.RadialDimension.LeaderTextHorizontalAlignment">
            <summary>
            Gets or sets the horizontal alignment of the radial dimension's text
            </summary>
            <since>6.9</since>
        </member>
        <member name="P:Rhino.Geometry.RadialDimension.LeaderArrowType">
            <since>6.0</since>
        </member>
        <member name="P:Rhino.Geometry.RadialDimension.LeaderArrowSize">
            <since>6.0</since>
        </member>
        <member name="P:Rhino.Geometry.RadialDimension.LeaderArrowBlockId">
            <since>6.0</since>
        </member>
        <member name="P:Rhino.Geometry.RadialDimension.LeaderCurveStyle">
            <since>6.0</since>
        </member>
        <member name="P:Rhino.Geometry.RadialDimension.TextOrientation">
            <since>6.0</since>
        </member>
        <member name="P:Rhino.Geometry.RadialDimension.TextLocation">
            <since>6.0</since>
        </member>
        <member name="P:Rhino.Geometry.RadialDimension.TextAngleType">
            <since>6.0</since>
        </member>
        <member name="T:Rhino.Geometry.Centermark">
            <summary>Represents a center mark dimension.</summary>
        </member>
        <member name="M:Rhino.Geometry.Centermark.#ctor">
            <summary>
            Constructs a new center mark dimension.
            </summary>
            <since>6.0</since>
        </member>
        <member name="M:Rhino.Geometry.Centermark.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Protected constructor used in serialization.
            </summary>
        </member>
        <member name="M:Rhino.Geometry.Centermark.#ctor(Rhino.Geometry.Plane,Rhino.Geometry.Point3d,System.Double)">
            <summary>
            Constructs a new center mark dimension.
            </summary>
            <param name="plane">Dimension's plane.</param>
            <param name="centerPoint">Dimension's center point.</param>
            <param name="radius">Center mark's radius.</param>
            <since>8.0</since>
        </member>
        <member name="M:Rhino.Geometry.Centermark.#ctor(Rhino.Geometry.Plane,Rhino.Geometry.Curve,System.Double)">
            <summary>
            Constructs a new center mark dimension.
            </summary>
            <param name="plane">Dimension's plane.</param>
            <param name="curve">Curve used to determine the center mark's radius.</param>
            <param name="curveParameter">Parameter on curve used to determine the center mark's radius.</param>
            <since>8.0</since>
        </member>
        <member name="M:Rhino.Geometry.Centermark.Create(Rhino.DocObjects.DimensionStyle,Rhino.Geometry.Plane,Rhino.Geometry.Point3d,System.Double)">
            <summary>Creates a new center mark dimension.</summary>
            <param name="dimStyle">Dimension's dimension style.</param>
            <param name="plane">Dimension's plane.</param>
            <param name="centerPoint">Dimension's center point.</param>
            <param name="radius">Center mark's radius.</param>
            <returns>A new center mark if successful, null otherwise.</returns>
            <since>6.0</since>
        </member>
        <member name="M:Rhino.Geometry.Centermark.Create(Rhino.DocObjects.DimensionStyle,Rhino.Geometry.Plane,Rhino.Geometry.Curve,System.Double)">
            <summary>
            <summary>Creates a new center mark dimension.</summary>
            </summary>
            <param name="dimStyle">Dimension's dimension style.</param>
            <param name="plane">Dimension's plane.</param>
            <param name="curve">Curve used to determine the center mark's radius.</param>
            <param name="curveParameter">Parameter on curve used to determine the center mark's radius.</param>
            <returns>A new center mark if successful, null otherwise.</returns>
            <exception cref="T:System.ArgumentNullException"></exception>
            <since>8.0</since>
        </member>
        <member name="M:Rhino.Geometry.Centermark.AdjustFromPoints(Rhino.Geometry.Plane,Rhino.Geometry.Point3d)">
            <summary>
            Update dimension geometry from point locations.
            </summary>
            <param name="plane">Dimension's plane.</param>
            <param name="centerPoint">Dimension's center point.</param>
            <returns>True if successful, false otherwise.</returns>
            <since>8.0</since>
        </member>
        <member name="P:Rhino.Geometry.Centermark.Radius">
            <summary>
            Gets or sets the center mark's radius.
            </summary>
            <since>8.0</since>
        </member>
        <member name="T:Rhino.Geometry.Ellipse">
            <summary>
            Represents the values of a plane and the two semi-axes radii in an ellipse.
            </summary>
        </member>
        <member name="M:Rhino.Geometry.Ellipse.#ctor(Rhino.Geometry.Plane,System.Double,System.Double)">
            <summary>
            Initializes a new ellipse from base plane and both principal radii.
            </summary>
            <param name="plane">Base plane of ellipse.</param>
            <param name="radius1">Ellipse radius along base plane X direction.</param>
            <param name="radius2">Ellipse radius along base plane Y direction.</param>
            <since>5.0</since>
        </member>
        <member name="M:Rhino.Geometry.Ellipse.#ctor(Rhino.Geometry.Point3d,Rhino.Geometry.Point3d,Rhino.Geometry.Point3d)">
            <summary>
            Initializes a new ellipse from a center point and the two semi-axes intersections.
            </summary>
            <param name="center">A center for the ellipse. The average of the foci.</param>
            <param name="second">The intersection of the ellipse X axis with the ellipse itself.</param>
            <param name="third">A point that determines the radius along the Y semi-axis.
            <para>If the point is at right angle with the (center - second point) vector,
            it will be the intersection of the ellipse Y axis with the ellipse itself.</para>
            </param>
            <since>5.0</since>
        </member>
        <member name="P:Rhino.Geometry.Ellipse.Plane">
            <summary>
            Gets or sets the base plane of the ellipse.
            </summary>
            <since>5.0</since>
        </member>
        <member name="P:Rhino.Geometry.Ellipse.Radius1">
            <summary>
            Gets or sets the radius of the ellipse along the base plane X semi-axis.
            </summary>
            <since>5.0</since>
        </member>
        <member name="P:Rhino.Geometry.Ellipse.Radius2">
            <summary>
            Gets or sets the radius of the ellipse along the base plane Y semi-axis.
            </summary>
            <since>5.0</since>
        </member>
        <member name="P:Rhino.Geometry.Ellipse.Center">
            <summary>
            Gets or sets the center of the ellipse.
            </summary>
            <since>7.16</since>
        </member>
        <member name="P:Rhino.Geometry.Ellipse.FocalDistance">
            <summary>
            Gets the distance from the center to a focus.
            </summary>
            <since>7.16</since>
        </member>
        <member name="P:Rhino.Geometry.Ellipse.IsValid">
            <summary>
            Returns an indication of the validity of this ellipse.
            </summary>
            <since>6.0</since>
        </member>
        <member name="M:Rhino.Geometry.Ellipse.GetFoci(Rhino.Geometry.Point3d@,Rhino.Geometry.Point3d@)">
            <summary>
            Gets the foci. The foci are two points whose sum of distances from any point on the ellipse is always the same.
            </summary>
            <param name="F1">The first focus.</param>
            <param name="F2">The second focus.</param>
            <since>7.16</since>
        </member>
        <member name="M:Rhino.Geometry.Ellipse.ToNurbsCurve">
            <summary>
            Constructs a nurbs curve representation of this ellipse. 
            <para>This is equivalent to calling NurbsCurve.CreateFromEllipse().</para>
            </summary>
            <returns>A nurbs curve representation of this ellipse or null if no such representation could be made.</returns>
            <since>5.0</since>
        </member>
        <member name="M:Rhino.Geometry.Ellipse.EpsilonEquals(Rhino.Geometry.Ellipse,System.Double)">
            <summary>
            Check that all values in other are within epsilon of the values in this
            </summary>
            <param name="other"></param>
            <param name="epsilon"></param>
            <returns></returns>
            <since>5.4</since>
        </member>
        <member name="T:Rhino.Geometry.Point2f">
            <summary>
            Represents the two coordinates of a point in two-dimensional space,
            using <see cref="T:System.Single"/>-precision floating point numbers.
            </summary>
        </member>
        <member name="M:Rhino.Geometry.Point2f.#ctor(System.Single,System.Single)">
            <summary>
            Initializes a new two-dimensional point from two components.
            </summary>
            <param name="x">X component of vector.</param>
            <param name="y">Y component of vector.</param>
            <since>5.0</since>
        </member>
        <member name="M:Rhino.Geometry.Point2f.#ctor(System.Double,System.Double)">
            <summary>
            Initializes a new two-dimensional point from two double-precision floating point numbers as coordinates.
            <para>Coordinates will be internally converted to floating point numbers. This might cause precision loss.</para>
            </summary>
            <param name="x">X component of vector.</param>
            <param name="y">Y component of vector.</param>
            <since>5.0</since>
        </member>
        <member name="P:Rhino.Geometry.Point2f.Unset">
            <summary>
            Gets the standard unset point.
            </summary>
            <since>5.0</since>
        </member>
        <member name="P:Rhino.Geometry.Point2f.IsValid">
            <summary>
            Gets a value indicating whether this point is considered valid.
            </summary>
            <since>5.0</since>
        </member>
        <member name="P:Rhino.Geometry.Point2f.X">
            <summary>
            Gets or sets the X (first) component of the vector.
            </summary>
            <since>5.0</since>
        </member>
        <member name="P:Rhino.Geometry.Point2f.Y">
            <summary>
            Gets or sets the Y (second) component of the vector.
            </summary>
            <since>5.0</since>
        </member>
        <member name="M:Rhino.Geometry.Point2f.Equals(System.Object)">
            <summary>
            Determines whether the specified System.Object is a <see cref="T:Rhino.Geometry.Point2f"/> and has the same values as the present point.
            </summary>
            <param name="obj">The specified object.</param>
            <returns>true if obj is Point2f and has the same coordinates as this; otherwise false.</returns>
        </member>
        <member name="M:Rhino.Geometry.Point2f.Equals(Rhino.Geometry.Point2f)">
            <summary>
            Determines whether the specified <see cref="T:Rhino.Geometry.Point2f"/> has the same values as the present point.
            </summary>
            <param name="point">The specified point.</param>
            <returns>true if point has the same coordinates as this; otherwise false.</returns>
            <since>5.0</since>
        </member>
        <member name="M:Rhino.Geometry.Point2f.EpsilonEquals(Rhino.Geometry.Point2f,System.Single)">
            <summary>
            Check that all values in other are within epsilon of the values in this
            </summary>
            <param name="other"></param>
            <param name="epsilon"></param>
            <returns></returns>
            <since>5.4</since>
        </member>
        <member name="M:Rhino.Geometry.Point2f.CompareTo(Rhino.Geometry.Point2f)">
            <summary>
            Compares this <see cref="T:Rhino.Geometry.Point2f" /> with another <see cref="T:Rhino.Geometry.Point2f" />.
            <para>Coordinates evaluation priority is first X, then Y.</para>
            </summary>
            <param name="other">The other <see cref="T:Rhino.Geometry.Point2f" /> to use in comparison.</param>
            <returns>
            <para> 0: if this is identical to other</para>
            <para>-1: if this.X &lt; other.X</para>
            <para>-1: if this.X == other.X and this.Y &lt; other.Y</para>
            <para>+1: otherwise.</para>
            </returns>
            <since>5.0</since>
        </member>
        <member name="M:Rhino.Geometry.Point2f.GetHashCode">
            <summary>
            Computes a hash number that represents the current point.
            </summary>
            <returns>A hash code that is not unique for each point.</returns>
        </member>
        <member name="M:Rhino.Geometry.Point2f.ToString">
            <summary>
            Constructs the string representation for the current point.
            </summary>
            <returns>The point representation in the form X,Y.</returns>
        </member>
        <member name="M:Rhino.Geometry.Point2f.ToString(System.String,System.IFormatProvider)">
            <inheritdoc />
            <since>7.0</since>
        </member>
        <member name="P:Rhino.Geometry.Point2f.Item(System.Int32)">
            <summary>
            Accesses the coordinates of this point.
            </summary>
            <param name="index">Either 0 or 1.</param>
            <returns>If index is 0, the X (first) coordinate. If index is 1, the Y (second) coordinate.</returns>
        </member>
        <member name="M:Rhino.Geometry.Point2f.op_Equality(Rhino.Geometry.Point2f,Rhino.Geometry.Point2f)">
            <summary>
            Determines whether two <see cref="T:Rhino.Geometry.Point2f"/> have equal values.
            </summary>
            <param name="a">The first point.</param>
            <param name="b">The second point.</param>
            <returns>true if the coordinates of the two points are exactly equal; otherwise false.</returns>
            <since>5.0</since>
        </member>
        <member name="M:Rhino.Geometry.Point2f.op_Inequality(Rhino.Geometry.Point2f,Rhino.Geometry.Point2f)">
            <summary>
            Determines whether two <see cref="T:Rhino.Geometry.Point2f"/> have different values.
            </summary>
            <param name="a">The first point.</param>
            <param name="b">The second point.</param>
            <returns>true if the two points differ in any coordinate; false otherwise.</returns>
            <since>5.0</since>
        </member>
        <member name="M:Rhino.Geometry.Point2f.op_LessThan(Rhino.Geometry.Point2f,Rhino.Geometry.Point2f)">
            <summary>
            Determines whether the first specified <see cref="T:Rhino.Geometry.Point2f"/> comes before
            (has inferior sorting value than) the second point.
            <para>Coordinates evaluation priority is first X, then Y.</para>
            </summary>
            <param name="a">First point.</param>
            <param name="b">Second point.</param>
            <returns>true if a.X is smaller than b.X, or a.X == b.X and a.Y is smaller than b.Y; otherwise, false.</returns>
            <since>5.0</since>
        </member>
        <member name="M:Rhino.Geometry.Point2f.op_LessThanOrEqual(Rhino.Geometry.Point2f,Rhino.Geometry.Point2f)">
            <summary>
            Determines whether the first specified <see cref="T:Rhino.Geometry.Point2f"/> comes before
            (has inferior sorting value than) the second point, or it is equal to it.
            <para>Coordinates evaluation priority is first X, then Y.</para>
            </summary>
            <param name="a">First point.</param>
            <param name="b">Second point.</param>
            <returns>true if a.X is smaller than b.X, or a.X == b.X and a.Y &lt;= b.Y; otherwise, false.</returns>
            <since>5.0</since>
        </member>
        <member name="M:Rhino.Geometry.Point2f.op_GreaterThan(Rhino.Geometry.Point2f,Rhino.Geometry.Point2f)">
            <summary>
            Determines whether the first specified <see cref="T:Rhino.Geometry.Point2f"/> comes after
            (has superior sorting value than) the second point.
            <para>Coordinates evaluation priority is first X, then Y.</para>
            </summary>
            <param name="a">First point.</param>
            <param name="b">Second point.</param>
            <returns>true if a.X is larger than b.X, or a.X == b.X and a.Y is larger than b.Y; otherwise, false.</returns>
            <since>5.0</since>
        </member>
        <member name="M:Rhino.Geometry.Point2f.op_GreaterThanOrEqual(Rhino.Geometry.Point2f,Rhino.Geometry.Point2f)">
            <summary>
            Determines whether the first specified <see cref="T:Rhino.Geometry.Point2f"/> comes after
            (has superior sorting value than) the second point, or it is equal to it.
            <para>Coordinates evaluation priority is first X, then Y.</para>
            </summary>
            <param name="a">First point.</param>
            <param name="b">Second point.</param>
            <returns>true if a.X is larger than b.X, or a.X == b.X and a.Y &gt;= b.Y; otherwise, false.</returns>
            <since>5.0</since>
        </member>
        <member name="M:Rhino.Geometry.Point2f.op_Explicit(Rhino.Geometry.Point2d)~Rhino.Geometry.Point2f">
            <summary>
            Converts a double-precision point in a single-precision point.
            Needs explicit casting to help retain precision.
            </summary>
            <param name="point">A point.</param>
            <returns>The resulting point.</returns>
        </member>
        <member name="M:Rhino.Geometry.Point2f.op_Addition(Rhino.Geometry.Point2f,Rhino.Geometry.Point2f)">
            <summary>
            Sums two <see cref="T:Rhino.Geometry.Point2f"/>s.
            </summary>
            <param name="a">First point.</param>
            <param name="b">Second point.</param>
            <returns>An added Vector2f.</returns>
        </member>
        <member name="M:Rhino.Geometry.Point2f.op_Subtraction(Rhino.Geometry.Point2f,Rhino.Geometry.Point2f)">
            <summary>
            Subtracts two <see cref="T:Rhino.Geometry.Point2f"/>s.
            </summary>
            <param name="a">First point.</param>
            <param name="b">Second point.</param>
            <returns>A subtracted Vector2f.</returns>
            <since>6.0</since>
        </member>
        <member name="M:Rhino.Geometry.Point2f.op_Multiply(Rhino.Geometry.Point2f,System.Single)">
            <summary>
            Multiplies a <see cref="T:Rhino.Geometry.Point2f"/> by a scalar.
            </summary>
            <param name="a">First point.</param>
            <param name="b">Scalar.</param>
            <returns>A multiplied Point2f.</returns>
            <since>6.0</since>
        </member>
        <member name="M:Rhino.Geometry.Point2f.op_Division(Rhino.Geometry.Point2f,System.Single)">
            <summary>
            Divides a <see cref="T:Rhino.Geometry.Point2f"/> by a scalar.
            </summary>
            <param name="a">First point.</param>
            <param name="b">Scalar.</param>
            <returns>A divided Point2f.</returns>
            <since>6.0</since>
        </member>
        <member name="M:Rhino.Geometry.Point2f.DistanceTo(Rhino.Geometry.Point2f)">
            <summary>
            Computes the distance between two points.
            </summary>
            <param name="other">Other point for distance measurement.</param>
            <returns>The length of the line between this and the other point; or 0 if any of the points is not valid.</returns>
        </member>
        <member name="M:Rhino.Geometry.Point2f.DistanceToSquared(Rhino.Geometry.Point2f)">
            <summary>
            Computes the squared distance between two points.
            </summary>
            <param name="other">Other point for distance measurement.</param>
            <returns>The squared length of the line between this and the other point; or 0 if any of the points is not valid.</returns>
            <since>7.14</since>
        </member>
        <member name="T:Rhino.Geometry.Point3f">
            <summary>
            Represents the three coordinates of a point in three-dimensional space,
            using <see cref="T:System.Single"/>-precision floating point numbers.
            </summary>
        </member>
        <member name="M:Rhino.Geometry.Point3f.#ctor(System.Single,System.Single,System.Single)">
            <summary>
            Initializes a new two-dimensional vector from two components.
            </summary>
            <param name="x">X component of vector.</param>
            <param name="y">Y component of vector.</param>
            <param name="z">Z component of vector.</param>
            <since>5.0</since>
        </member>
        <member name="P:Rhino.Geometry.Point3f.Origin">
            <summary>
            Gets the value of a point at location 0,0,0.
            </summary>
            <since>5.0</since>
        </member>
        <member name="P:Rhino.Geometry.Point3f.Unset">
            <summary>
            Gets the value of a point at location RhinoMath.UnsetValue,RhinoMath.UnsetValue,RhinoMath.UnsetValue.
            </summary>
            <since>5.0</since>
        </member>
        <member name="P:Rhino.Geometry.Point3f.X">
            <summary>
            Gets or sets the X (first) component of the vector.
            </summary>
            <since>5.0</since>
        </member>
        <member name="P:Rhino.Geometry.Point3f.Y">
            <summary>
            Gets or sets the Y (second) component of the vector.
            </summary>
            <since>5.0</since>
        </member>
        <member name="P:Rhino.Geometry.Point3f.Z">
            <summary>
            Gets or sets the Z (third) component of the vector.
            </summary>
            <since>5.0</since>
        </member>
        <member name="M:Rhino.Geometry.Point3f.Equals(System.Object)">
            <summary>
            Determines whether the specified System.Object is a Point3f and has the same values as the present point.
            </summary>
            <param name="obj">The specified object.</param>
            <returns>true if obj is Point3f and has the same coordinates as this; otherwise false.</returns>
        </member>
        <member name="M:Rhino.Geometry.Point3f.Equals(Rhino.Geometry.Point3f)">
            <summary>
            Determines whether the specified Point3f has the same values as the present point.
            </summary>
            <param name="point">The specified point.</param>
            <returns>true if point has the same coordinates as this; otherwise false.</returns>
            <since>5.0</since>
        </member>
        <member name="M:Rhino.Geometry.Point3f.EpsilonEquals(Rhino.Geometry.Point3f,System.Single)">
            <summary>
            Check that all values in other are within epsilon of the values in this
            </summary>
            <param name="other"></param>
            <param name="epsilon"></param>
            <returns></returns>
            <since>5.4</since>
        </member>
        <member name="M:Rhino.Geometry.Point3f.CompareTo(Rhino.Geometry.Point3f)">
            <summary>
            Compares this <see cref="T:Rhino.Geometry.Point3f" /> with another <see cref="T:Rhino.Geometry.Point3f" />.
            <para>Component evaluation priority is first X, then Y, then Z.</para>
            </summary>
            <param name="other">The other <see cref="T:Rhino.Geometry.Point3d" /> to use in comparison.</param>
            <returns>
            <para> 0: if this is identical to other</para>
            <para>-1: if this.X &lt; other.X</para>
            <para>-1: if this.X == other.X and this.Y &lt; other.Y</para>
            <para>-1: if this.X == other.X and this.Y == other.Y and this.Z &lt; other.Z</para>
            <para>+1: otherwise.</para>
            </returns>
            <since>5.0</since>
        </member>
        <member name="M:Rhino.Geometry.Point3f.GetHashCode">
            <summary>
            Computes a hash code for the present point.
            </summary>
            <returns>A non-unique integer that represents this point.</returns>
        </member>
        <member name="M:Rhino.Geometry.Point3f.ToString">
            <summary>
            Constructs the string representation for the current point.
            </summary>
            <returns>The point representation in the form X,Y,Z.</returns>
        </member>
        <member name="M:Rhino.Geometry.Point3f.ToString(System.String,System.IFormatProvider)">
            <inheritdoc />
            <since>7.0</since>
        </member>
        <member name="P:Rhino.Geometry.Point3f.IsValid">
            <summary>
            Each coordinate of the point must pass the <see cref="M:Rhino.RhinoMath.IsValidSingle(System.Single)"/> test.
            </summary>
            <since>5.0</since>
        </member>
        <member name="M:Rhino.Geometry.Point3f.DistanceTo(Rhino.Geometry.Point3f)">
            <summary>
            Computes the distance between two points.
            </summary>
            <param name="other">Other point for distance measurement.</param>
            <returns>The length of the line between this and the other point; or 0 if any of the points is not valid.</returns>
            <example>
            <code source='examples\vbnet\ex_intersectcurves.vb' lang='vbnet'/>
            <code source='examples\cs\ex_intersectcurves.cs' lang='cs'/>
            <code source='examples\py\ex_intersectcurves.py' lang='py'/>
            </example>
            <since>5.0</since>
        </member>
        <member name="M:Rhino.Geometry.Point3f.DistanceToSquared(Rhino.Geometry.Point3f)">
            <summary>
            Computes the squared distance between two points.
            </summary>
            <param name="other">Other point for distance measurement.</param>
            <returns>The squared length of the line between this and the other point; or 0 if any of the points is not valid.</returns>
            <since>7.14</since>
        </member>
        <member name="M:Rhino.Geometry.Point3f.Transform(Rhino.Geometry.Transform)">
            <summary>
            Transforms the present point in place. The transformation matrix acts on the left of the point. i.e.,
            <para>result = transformation*point</para>
            </summary>
            <param name="xform">Transformation to apply.</param>
            <since>5.0</since>
        </member>
        <member name="M:Rhino.Geometry.Point3f.op_Equality(Rhino.Geometry.Point3f,Rhino.Geometry.Point3f)">
            <summary>
            Determines whether two points have equal values.
            </summary>
            <param name="a">The first point.</param>
            <param name="b">The second point.</param>
            <returns>true if the coordinates of the two points are exactly equal; otherwise false.</returns>
            <since>5.0</since>
        </member>
        <member name="M:Rhino.Geometry.Point3f.op_Inequality(Rhino.Geometry.Point3f,Rhino.Geometry.Point3f)">
            <summary>
            Determines whether two points have different values.
            </summary>
            <param name="a">The first point.</param>
            <param name="b">The second point.</param>
            <returns>true if the two points differ in any coordinate; false otherwise.</returns>
            <since>5.0</since>
        </member>
        <member name="M:Rhino.Geometry.Point3f.op_LessThan(Rhino.Geometry.Point3f,Rhino.Geometry.Point3f)">
            <summary>
            Determines whether the first specified point comes before (has inferior sorting value than) the second point.
            <para>Coordinates evaluation priority is first X, then Y, then Z.</para>
            </summary>
            <param name="a">The first point.</param>
            <param name="b">The second point.</param>
            <returns>true if a.X is smaller than b.X,
            or a.X == b.X and a.Y is smaller than b.Y,
            or a.X == b.X and a.Y == b.Y and a.Z is smaller than b.Z;
            otherwise, false.</returns>
            <since>5.0</since>
        </member>
        <member name="M:Rhino.Geometry.Point3f.op_LessThanOrEqual(Rhino.Geometry.Point3f,Rhino.Geometry.Point3f)">
            <summary>
            Determines whether the first specified point comes before
            (has inferior sorting value than) the second point, or it is equal to it.
            <para>Coordinates evaluation priority is first X, then Y, then Z.</para>
            </summary>
            <param name="a">The first point.</param>
            <param name="b">The second point.</param>
            <returns>true if a.X is smaller than b.X,
            or a.X == b.X and a.Y is smaller than b.Y,
            or a.X == b.X and a.Y == b.Y and a.Z &lt;= b.Z;
            otherwise, false.</returns>
            <since>5.0</since>
        </member>
        <member name="M:Rhino.Geometry.Point3f.op_GreaterThan(Rhino.Geometry.Point3f,Rhino.Geometry.Point3f)">
            <summary>
            Determines whether the first specified point comes after (has superior sorting value than) the second point.
            <para>Coordinates evaluation priority is first X, then Y, then Z.</para>
            </summary>
            <param name="a">The first point.</param>
            <param name="b">The second point.</param>
            <returns>true if a.X is larger than b.X,
            or a.X == b.X and a.Y is larger than b.Y,
            or a.X == b.X and a.Y == b.Y and a.Z is larger than b.Z;
            otherwise, false.</returns>
            <since>5.0</since>
        </member>
        <member name="M:Rhino.Geometry.Point3f.op_GreaterThanOrEqual(Rhino.Geometry.Point3f,Rhino.Geometry.Point3f)">
            <summary>
            Determines whether the first specified point comes after
            (has superior sorting value than) the second point, or it is equal to it.
            <para>Coordinates evaluation priority is first X, then Y, then Z.</para>
            </summary>
            <param name="a">The first point.</param>
            <param name="b">The second point.</param>
            <returns>true if a.X is larger than b.X,
            or a.X == b.X and a.Y is larger than b.Y,
            or a.X == b.X and a.Y == b.Y and a.Z &gt;= b.Z;
            otherwise, false.</returns>
            <since>5.0</since>
        </member>
        <member name="M:Rhino.Geometry.Point3f.op_Subtraction(Rhino.Geometry.Point3f,Rhino.Geometry.Point3f)">
            <summary>
            Subtracts a point from another point.
            </summary>
            <param name="point1">A point.</param>
            <param name="point2">Another point.</param>
            <returns>A new vector that is the difference of point minus vector.</returns>
            <since>5.0</since>
        </member>
        <member name="M:Rhino.Geometry.Point3f.op_Addition(Rhino.Geometry.Point3f,Rhino.Geometry.Point3f)">
            <summary>
            Adds a point to another point.
            </summary>
            <param name="point1">A point.</param>
            <param name="point2">Another point.</param>
            <returns>A new vector that is the sum of point1 plus point2.</returns>
        </member>
        <member name="M:Rhino.Geometry.Point3f.Subtract(Rhino.Geometry.Point3f,Rhino.Geometry.Point3f)">
            <summary>
            Subtracts a point from another point.
            <para>(Provided for languages that do not support operator overloading. You can use the - operator otherwise)</para>
            </summary>
            <param name="point1">A point.</param>
            <param name="point2">Another point.</param>
            <returns>A new vector that is the difference of point minus vector.</returns>
            <since>5.0</since>
        </member>
        <member name="M:Rhino.Geometry.Point3f.op_Explicit(Rhino.Geometry.Point3d)~Rhino.Geometry.Point3f">
            <summary>
            Converts a double-precision point in a single-precision point.
            Needs explicit casting to help retain precision.
            </summary>
            <param name="point">A point.</param>
            <returns>The resulting point.</returns>
        </member>
        <member name="M:Rhino.Geometry.Point3f.op_Explicit(Rhino.Geometry.Point3f)~Rhino.Geometry.Vector3f">
            <summary>
            Converts a single-precision point in a single-precision vector.
            Needs explicit casting to help retain precision.
            </summary>
            <param name="point">A point.</param>
            <returns>The resulting point.</returns>
        </member>
        <member name="M:Rhino.Geometry.Point3f.op_Multiply(Rhino.Geometry.Point3f,System.Single)">
            <summary>
            Multiplies a point by a factor.
            </summary>
            <param name="point">A point.</param>
            <param name="value">A value.</param>
            <returns>A new vector that is the multiplication of point by value.</returns>
            <since>6.0</since>
        </member>
        <member name="M:Rhino.Geometry.Point3f.op_Multiply(System.Single,Rhino.Geometry.Point3f)">
            <summary>
            Multiplies a point by a factor.
            </summary>
            <param name="point">A point.</param>
            <param name="value">A value.</param>
            <returns>A new vector that is the multiplication of point by value.</returns>
            <since>6.0</since>
        </member>
        <member name="T:Rhino.Geometry.Vector2f">
            <summary>
            Represents the two components of a vector in two-dimensional space,
            using <see cref="T:System.Single"/>-precision floating point numbers.
            </summary>
        </member>
        <member name="M:Rhino.Geometry.Vector2f.#ctor(System.Single,System.Single)">
            <summary>
            Creates an instance.
            </summary>
            <param name="x">X component.</param>
            <param name="y">Y component.</param>
            <since>6.0</since>
        </member>
        <member name="P:Rhino.Geometry.Vector2f.X">
            <summary>
            Gets or sets the X (first) component of this vector.
            </summary>
            <since>5.0</since>
        </member>
        <member name="P:Rhino.Geometry.Vector2f.Y">
            <summary>
            Gets or sets the Y (second) component of this vector.
            </summary>
            <since>5.0</since>
        </member>
        <member name="P:Rhino.Geometry.Vector2f.SquareLength">
            <summary>
            Returns the square of the length of this vector.
            This method does not check for the validity of its inputs.
            </summary>
            <since>6.0</since>
        </member>
        <member name="M:Rhino.Geometry.Vector2f.Equals(System.Object)">
            <summary>
            Determines whether the specified System.Object is a Vector2f and has the same values as the present vector.
            </summary>
            <param name="obj">The specified object.</param>
            <returns>true if obj is Vector2f and has the same coordinates as this; otherwise false.</returns>
        </member>
        <member name="M:Rhino.Geometry.Vector2f.Equals(Rhino.Geometry.Vector2f)">
            <summary>
            Determines whether the specified vector has the same values as the present vector.
            </summary>
            <param name="vector">The specified vector.</param>
            <returns>true if obj is Vector2f and has the same coordinates as this; otherwise false.</returns>
            <since>5.0</since>
        </member>
        <member name="M:Rhino.Geometry.Vector2f.EpsilonEquals(Rhino.Geometry.Vector2f,System.Single)">
            <summary>
            Check that all values in other are within epsilon of the values in this
            </summary>
            <param name="other"></param>
            <param name="epsilon"></param>
            <returns></returns>
            <since>5.4</since>
        </member>
        <member name="M:Rhino.Geometry.Vector2f.CompareTo(Rhino.Geometry.Vector2f)">
            <summary>
            Compares this <see cref="T:Rhino.Geometry.Vector2f" /> with another <see cref="T:Rhino.Geometry.Vector2f" />.
            <para>Components evaluation priority is first X, then Y.</para>
            </summary>
            <param name="other">The other <see cref="T:Rhino.Geometry.Vector2f" /> to use in comparison.</param>
            <returns>
            <para> 0: if this is identical to other</para>
            <para>-1: if this.X &lt; other.X</para>
            <para>-1: if this.X == other.X and this.Y &lt; other.Y</para>
            <para>+1: otherwise.</para>
            </returns>
            <since>5.0</since>
        </member>
        <member name="P:Rhino.Geometry.Vector2f.IsValid">
            <summary>
            Returns an indication regarding the validity of this vector.
            </summary>
            <since>6.0</since>
        </member>
        <member name="M:Rhino.Geometry.Vector2f.GetHashCode">
            <summary>
            Computes a hash number that represents the current vector.
            </summary>
            <returns>A hash code that is not unique for each vector.</returns>
        </member>
        <member name="M:Rhino.Geometry.Vector2f.ToString">
            <summary>
            Constructs the string representation of the current vector.
            </summary>
            <returns>The vector representation in the form X,Y,Z.</returns>
        </member>
        <member name="M:Rhino.Geometry.Vector2f.ToString(System.String,System.IFormatProvider)">
            <inheritdoc />
            <since>7.0</since>
        </member>
        <member name="M:Rhino.Geometry.Vector2f.op_Equality(Rhino.Geometry.Vector2f,Rhino.Geometry.Vector2f)">
            <summary>
            Determines whether two vectors have equal values.
            </summary>
            <param name="a">The first vector.</param>
            <param name="b">The second vector.</param>
            <returns>true if the components of the two vectors are exactly equal; otherwise false.</returns>
            <since>5.0</since>
        </member>
        <member name="M:Rhino.Geometry.Vector2f.op_Inequality(Rhino.Geometry.Vector2f,Rhino.Geometry.Vector2f)">
            <summary>
            Determines whether two vectors have different values.
            </summary>
            <param name="a">The first vector.</param>
            <param name="b">The second vector.</param>
            <returns>true if the two vectors differ in any component; false otherwise.</returns>
            <since>5.0</since>
        </member>
        <member name="M:Rhino.Geometry.Vector2f.op_LessThan(Rhino.Geometry.Vector2f,Rhino.Geometry.Vector2f)">
            <summary>
            Determines whether the first specified vector comes before
            (has inferior sorting value than) the second vector.
            <para>Components have decreasing evaluation priority: first X, then Y.</para>
            </summary>
            <param name="a">First vector.</param>
            <param name="b">Second vector.</param>
            <returns>true if a.X is smaller than b.X, or a.X == b.X and a.Y is smaller than b.Y; otherwise, false.</returns>
            <since>5.0</since>
        </member>
        <member name="M:Rhino.Geometry.Vector2f.op_LessThanOrEqual(Rhino.Geometry.Vector2f,Rhino.Geometry.Vector2f)">
            <summary>
            Determines whether the first specified vector comes before
            (has inferior sorting value than) the second vector, or it is equal to it.
            <para>Components have decreasing evaluation priority: first X, then Y.</para>
            </summary>
            <param name="a">First vector.</param>
            <param name="b">Second vector.</param>
            <returns>true if a.X is smaller than b.X, or a.X == b.X and a.Y &lt;= b.Y; otherwise, false.</returns>
            <since>5.0</since>
        </member>
        <member name="M:Rhino.Geometry.Vector2f.op_GreaterThan(Rhino.Geometry.Vector2f,Rhino.Geometry.Vector2f)">
            <summary>
            Determines whether the first specified vector comes after (has superior sorting value than) the second vector.
            <para>Components have decreasing evaluation priority: first X, then Y.</para>
            </summary>
            <param name="a">First vector.</param>
            <param name="b">Second vector.</param>
            <returns>true if a.X is larger than b.X, or a.X == b.X and a.Y is larger than b.Y; otherwise, false.</returns>
            <since>5.0</since>
        </member>
        <member name="M:Rhino.Geometry.Vector2f.op_GreaterThanOrEqual(Rhino.Geometry.Vector2f,Rhino.Geometry.Vector2f)">
            <summary>
            Determines whether the first specified vector comes after
            (has superior sorting value than) the second vector, or it is equal to it.
            <para>Components have decreasing evaluation priority: first X, then Y.</para>
            </summary>
            <param name="a">First vector.</param>
            <param name="b">Second vector.</param>
            <returns>true if a.X is larger than b.X, or a.X == b.X and a.Y &gt;= b.Y; otherwise, false.</returns>
            <since>5.0</since>
        </member>
        <member name="M:Rhino.Geometry.Vector2f.op_Multiply(Rhino.Geometry.Vector2f,Rhino.Geometry.Vector2f)">
            <summary>
            Multiplies two <see cref="T:Rhino.Geometry.Vector2f"/> together, returning the dot (internal) product of the two.
            </summary>
            <param name="point1">The first point.</param>
            <param name="point2">The second point.</param>
            <returns>A value that results from the coordinate-wise multiplication of point1 and point2.</returns>
            <since>6.0</since>
        </member>
        <member name="M:Rhino.Geometry.Vector2f.Multiply(Rhino.Geometry.Vector2f,Rhino.Geometry.Vector2f)">
            <summary>
            Multiplies two <see cref="T:Rhino.Geometry.Vector2f"/> together, returning the dot (internal) product of the two.
            <para>(Provided for languages that do not support operator overloading. You can use the * operator otherwise)</para>
            </summary>
            <param name="point1">The first point.</param>
            <param name="point2">The second point.</param>
            <returns>A value that results from the coordinate-wise multiplication of point1 and point2.</returns>
            <since>6.0</since>
        </member>
        <member name="M:Rhino.Geometry.Vector2f.op_Subtraction(Rhino.Geometry.Vector2f,Rhino.Geometry.Vector2f)">
            <summary>
            Computes the difference between two vectors.
            </summary>
            <param name="a">First vector.</param>
            <param name="b">Second vector.</param>
            <returns>The difference.</returns>
            <since>6.0</since>
        </member>
        <member name="M:Rhino.Geometry.Vector2f.op_Addition(Rhino.Geometry.Vector2f,Rhino.Geometry.Vector2f)">
            <summary>
            Computes the sum between two vectors.
            </summary>
            <param name="a">First vector.</param>
            <param name="b">Second vector.</param>
            <returns>The difference.</returns>
        </member>
        <member name="T:Rhino.Geometry.Vector3f">
            <summary>
            Represents the three components of a vector in three-dimensional space,
            using <see cref="T:System.Single"/>-precision floating point numbers.
            </summary>
        </member>
        <member name="M:Rhino.Geometry.Vector3f.#ctor(System.Single,System.Single,System.Single)">
            <summary>
            Constructs a new vector from 3 single precision numbers.
            </summary>
            <param name="x">X component of vector.</param>
            <param name="y">Y component of vector.</param>
            <param name="z">Z component of vector.</param>
            <since>5.0</since>
        </member>
        <member name="P:Rhino.Geometry.Vector3f.Zero">
            <summary>
            Gets the value of the vector with components 0,0,0.
            </summary>
            <since>5.0</since>
        </member>
        <member name="P:Rhino.Geometry.Vector3f.XAxis">
            <summary>
            Gets the value of the vector with components 1,0,0.
            </summary>
            <since>5.0</since>
        </member>
        <member name="P:Rhino.Geometry.Vector3f.YAxis">
            <summary>
            Gets the value of the vector with components 0,1,0.
            </summary>
            <since>5.0</since>
        </member>
        <member name="P:Rhino.Geometry.Vector3f.ZAxis">
            <summary>
            Gets the value of the vector with components 0,0,1.
            </summary>
            <since>5.0</since>
        </member>
        <member name="P:Rhino.Geometry.Vector3f.Unset">
            <summary>
            Gets the value of the vector with each component set to RhinoMath.UnsetValue.
            </summary>
            <since>5.0</since>
        </member>
        <member name="P:Rhino.Geometry.Vector3f.X">
            <summary>
            Gets or sets the X (first) component of this vector.
            </summary>
            <since>5.0</since>
        </member>
        <member name="P:Rhino.Geometry.Vector3f.Y">
            <summary>
            Gets or sets the Y (second) component of this vector.
            </summary>
            <since>5.0</since>
        </member>
        <member name="P:Rhino.Geometry.Vector3f.Z">
            <summary>
            Gets or sets the Z (third) component of this vector.
            </summary>
            <since>5.0</since>
        </member>
        <member name="P:Rhino.Geometry.Vector3f.IsZero">
            <summary>
            Gets a value indicating whether the X, Y, and Z values are all equal to 0.0.
            </summary>
            <since>6.0</since>
        </member>
        <member name="P:Rhino.Geometry.Vector3f.IsUnitVector">
            <summary>
            Gets a value indicating whether or not this is a unit vector. 
            A unit vector has length 1.
            </summary>
            <since>6.0</since>
        </member>
        <member name="P:Rhino.Geometry.Vector3f.IsValid">
            <summary>
            Returns an indication regarding the validity of this vector.
            </summary>
            <since>6.0</since>
        </member>
        <member name="M:Rhino.Geometry.Vector3f.Equals(System.Object)">
            <summary>
            Determines whether the specified System.Object is a Vector3f and has the same values as the present vector.
            </summary>
            <param name="obj">The specified object.</param>
            <returns>true if obj is Vector3f and has the same components as this; otherwise false.</returns>
        </member>
        <member name="M:Rhino.Geometry.Vector3f.Equals(Rhino.Geometry.Vector3f)">
            <summary>
            Determines whether the specified vector has the same values as the present vector.
            </summary>
            <param name="vector">The specified vector.</param>
            <returns>true if vector has the same components as this; otherwise false.</returns>
            <since>5.0</since>
        </member>
        <member name="M:Rhino.Geometry.Vector3f.EpsilonEquals(Rhino.Geometry.Vector3f,System.Single)">
            <summary>
            Check that all values in other are within epsilon of the values in this
            </summary>
            <param name="other"></param>
            <param name="epsilon"></param>
            <returns></returns>
            <since>5.4</since>
        </member>
        <member name="M:Rhino.Geometry.Vector3f.CompareTo(Rhino.Geometry.Vector3f)">
            <summary>
            Compares this <see cref="T:Rhino.Geometry.Vector3f" /> with another <see cref="T:Rhino.Geometry.Vector3f" />.
            <para>Component evaluation priority is first X, then Y, then Z.</para>
            </summary>
            <param name="other">The other <see cref="T:Rhino.Geometry.Vector3f" /> to use in comparison.</param>
            <returns>
            <para> 0: if this is identical to other</para>
            <para>-1: if this.X &lt; other.X</para>
            <para>-1: if this.X == other.X and this.Y &lt; other.Y</para>
            <para>-1: if this.X == other.X and this.Y == other.Y and this.Z &lt; other.Z</para>
            <para>+1: otherwise.</para>
            </returns>
            <since>5.0</since>
        </member>
        <member name="M:Rhino.Geometry.Vector3f.GetHashCode">
            <summary>
            Computes a hash number that represents the current vector.
            </summary>
            <returns>A hash code that is not unique for each vector.</returns>
        </member>
        <member name="M:Rhino.Geometry.Vector3f.ToString">
            <summary>
            Constructs the string representation of the current vector.
            </summary>
            <returns>The vector representation in the form X,Y,Z.</returns>
        </member>
        <member name="M:Rhino.Geometry.Vector3f.ToString(System.String,System.IFormatProvider)">
            <inheritdoc />
            <since>7.0</since>
        </member>
        <member name="M:Rhino.Geometry.Vector3f.Unitize">
            <summary>
            Unitizes the vector in place. A unit vector has length 1 unit. 
            <para>An invalid or zero length vector cannot be unitized.</para>
            </summary>
            <returns>true on success or false on failure.</returns>
            <since>5.0</since>
        </member>
        <member name="M:Rhino.Geometry.Vector3f.Transform(Rhino.Geometry.Transform)">
            <summary>
            Transforms the vector in place.
            <para>The transformation matrix acts on the left of the vector; i.e.,</para>
            <para>result = transformation*vector</para>
            </summary>
            <param name="transformation">Transformation matrix to apply.</param>
            <since>5.0</since>
        </member>
        <member name="M:Rhino.Geometry.Vector3f.Rotate(System.Double,Rhino.Geometry.Vector3f)">
            <summary>
            Rotates this vector around a given axis.
            </summary>
            <param name="angleRadians">Angle of rotation (in radians).</param>
            <param name="rotationAxis">Axis of rotation.</param>
            <returns>true on success, false on failure.</returns>
            <since>5.0</since>
        </member>
        <member name="M:Rhino.Geometry.Vector3f.Reverse">
            <summary>
             Reverses this vector in place (reverses the direction).
             <para>If this vector contains RhinoMath.UnsetValue, the 
             reverse will also be invalid and false will be returned.</para>
            </summary>
            <remarks>Similar to <see cref="M:Rhino.Geometry.Vector3f.Negate(Rhino.Geometry.Vector3f)">Negate</see>, that is only provided for CLR language compliance.</remarks>
            <returns>true on success or false if the vector is invalid.</returns>
             <since>5.0</since>
        </member>
        <member name="M:Rhino.Geometry.Vector3f.PerpendicularTo(Rhino.Geometry.Vector3f)">
            <summary>
             Sets this vector to be perpendicular to another vector. 
             Result is not unitized.
            </summary>
             <param name="other">Vector to use as guide.</param>
            <returns>true on success, false if input vector is zero or invalid.</returns>
             <since>5.0</since>
        </member>
        <member name="M:Rhino.Geometry.Vector3f.op_Equality(Rhino.Geometry.Vector3f,Rhino.Geometry.Vector3f)">
            <summary>
            Determines whether two vectors have equal values.
            </summary>
            <param name="a">The first vector.</param>
            <param name="b">The second vector.</param>
            <returns>true if the components of the two vectors are exactly equal; otherwise false.</returns>
            <since>5.0</since>
        </member>
        <member name="M:Rhino.Geometry.Vector3f.op_Inequality(Rhino.Geometry.Vector3f,Rhino.Geometry.Vector3f)">
            <summary>
            Determines whether two vectors have different values.
            </summary>
            <param name="a">The first vector.</param>
            <param name="b">The second vector.</param>
            <returns>true if the two vectors differ in any component; false otherwise.</returns>
            <since>5.0</since>
        </member>
        <member name="M:Rhino.Geometry.Vector3f.op_LessThan(Rhino.Geometry.Vector3f,Rhino.Geometry.Vector3f)">
            <summary>
            Determines whether the first specified vector comes before
            (has inferior sorting value than) the second vector.
            <para>Components evaluation priority is first X, then Y, then Z.</para>
            </summary>
            <param name="a">The first vector.</param>
            <param name="b">The second vector.</param>
            <returns>true if a.X is smaller than b.X,
            or a.X == b.X and a.Y is smaller than b.Y,
            or a.X == b.X and a.Y == b.Y and a.Z is smaller than b.Z;
            otherwise, false.</returns>
            <since>5.0</since>
        </member>
        <member name="M:Rhino.Geometry.Vector3f.op_LessThanOrEqual(Rhino.Geometry.Vector3f,Rhino.Geometry.Vector3f)">
            <summary>
            Determines whether the first specified vector comes before
            (has inferior sorting value than) the second vector, or it is equal to it.
            <para>Components evaluation priority is first X, then Y, then Z.</para>
            </summary>
            <param name="a">The first vector.</param>
            <param name="b">The second vector.</param>
            <returns>true if a.X is smaller than b.X,
            or a.X == b.X and a.Y is smaller than b.Y,
            or a.X == b.X and a.Y == b.Y and a.Z &lt;= b.Z;
            otherwise, false.</returns>
            <since>5.0</since>
        </member>
        <member name="M:Rhino.Geometry.Vector3f.op_GreaterThan(Rhino.Geometry.Vector3f,Rhino.Geometry.Vector3f)">
            <summary>
            Determines whether the first specified vector comes after (has superior sorting value than)
            the second vector.
            <para>Components evaluation priority is first X, then Y, then Z.</para>
            </summary>
            <param name="a">The first vector.</param>
            <param name="b">The second vector.</param>
            <returns>true if a.X is larger than b.X,
            or a.X == b.X and a.Y is larger than b.Y,
            or a.X == b.X and a.Y == b.Y and a.Z is larger than b.Z;
            otherwise, false.</returns>
            <since>5.0</since>
        </member>
        <member name="M:Rhino.Geometry.Vector3f.op_GreaterThanOrEqual(Rhino.Geometry.Vector3f,Rhino.Geometry.Vector3f)">
            <summary>
            Determines whether the first specified vector comes after (has superior sorting value than)
            the second vector, or it is equal to it.
            <para>Components evaluation priority is first X, then Y, then Z.</para>
            </summary>
            <param name="a">The first vector.</param>
            <param name="b">The second vector.</param>
            <returns>true if a.X is larger than b.X,
            or a.X == b.X and a.Y is larger than b.Y,
            or a.X == b.X and a.Y == b.Y and a.Z &gt;= b.Z;
            otherwise, false.</returns>
            <since>5.0</since>
        </member>
        <member name="M:Rhino.Geometry.Vector3f.op_Addition(Rhino.Geometry.Vector3f,Rhino.Geometry.Vector3f)">
            <summary>
            Sums up two vectors.
            </summary>
            <param name="vector1">A vector.</param>
            <param name="vector2">A second vector.</param>
            <returns>A new vector that results from the component-wise addition of the two vectors.</returns>
        </member>
        <member name="M:Rhino.Geometry.Vector3f.Add(Rhino.Geometry.Vector3f,Rhino.Geometry.Vector3f)">
            <summary>
            Sums up two vectors.
            <para>(Provided for languages that do not support operator overloading. You can use the + operator otherwise)</para>
            </summary>
            <param name="vector1">A vector.</param>
            <param name="vector2">A second vector.</param>
            <returns>A new vector that results from the component-wise addition of the two vectors.</returns>
            <since>6.0</since>
        </member>
        <member name="M:Rhino.Geometry.Vector3f.op_Addition(Rhino.Geometry.Point3f,Rhino.Geometry.Vector3f)">
            <summary>
            Sums up a point and a vector, and returns a new point.
            </summary>
            <param name="point">A point.</param>
            <param name="vector">A vector.</param>
            <returns>A new point that results from the addition of point and vector.</returns>
        </member>
        <member name="M:Rhino.Geometry.Vector3f.op_UnaryNegation(Rhino.Geometry.Vector3f)">
            <summary>
            Computes the opposite vector.
            </summary>
            <param name="vector">A vector to negate.</param>
            <returns>A new vector where all components were multiplied by -1.</returns>
            <since>6.0</since>
        </member>
        <member name="M:Rhino.Geometry.Vector3f.op_Subtraction(Rhino.Geometry.Vector3f,Rhino.Geometry.Vector3f)">
            <summary>
            Subtracts the second vector from the first one.
            </summary>
            <param name="vector1">A vector.</param>
            <param name="vector2">A second vector.</param>
            <returns>A new vector that results from the component-wise difference of vector1 - vector2.</returns>
            <since>6.0</since>
        </member>
        <member name="M:Rhino.Geometry.Vector3f.Subtract(Rhino.Geometry.Vector3f,Rhino.Geometry.Vector3f)">
            <summary>
            Subtracts the second vector from the first one.
            <para>(Provided for languages that do not support operator overloading. You can use the - operator otherwise)</para>
            </summary>
            <param name="vector1">A vector.</param>
            <param name="vector2">A second vector.</param>
            <returns>A new vector that results from the component-wise difference of vector1 - vector2.</returns>
            <since>6.0</since>
        </member>
        <member name="M:Rhino.Geometry.Vector3f.Negate(Rhino.Geometry.Vector3f)">
            <summary>
            Computes the reversed vector.
            <para>(Provided for languages that do not support operator overloading. You can use the - unary operator otherwise)</para>
            </summary>
            <remarks>This is similar to <see cref="M:Rhino.Geometry.Vector3f.Reverse">Reverse()</see>, but is static for CLR compliance, and with default name.</remarks>
            <param name="vector">A vector to negate.</param>
            <returns>A new vector where all components were multiplied by -1.</returns>
            <since>6.0</since>
        </member>
        <member name="M:Rhino.Geometry.Vector3f.Add(Rhino.Geometry.Point3f,Rhino.Geometry.Vector3f)">
            <summary>
            Sums up a point and a vector, and returns a new point.
            <para>(Provided for languages that do not support operator overloading. You can use the + operator otherwise)</para>
            </summary>
            <param name="point">A point.</param>
            <param name="vector">A vector.</param>
            <returns>A new point that results from the addition of point and vector.</returns>
            <since>5.0</since>
        </member>
        <member name="M:Rhino.Geometry.Vector3f.op_Multiply(Rhino.Geometry.Vector3f,System.Single)">
            <summary>
            Multiplies a vector by a number, having the effect of scaling it.
            </summary>
            <param name="vector">A vector.</param>
            <param name="t">A number.</param>
            <returns>A new vector that is the original vector coordinate-wise multiplied by t.</returns>
            <since>5.0</since>
        </member>
        <member name="M:Rhino.Geometry.Vector3f.op_Multiply(Rhino.Geometry.Vector3f,Rhino.Geometry.Vector3f)">
            <summary>
            Multiplies two <see cref="T:Rhino.Geometry.Vector3f"/> together, returning the dot (internal) product of the two.
            This is not the cross product.
            </summary>
            <param name="point1">The first point.</param>
            <param name="point2">The second point.</param>
            <returns>A value that results from the coordinate-wise multiplication of point1 and point2.</returns>
            <since>5.0</since>
        </member>
        <member name="M:Rhino.Geometry.Vector3f.Multiply(Rhino.Geometry.Vector3f,System.Single)">
            <summary>
            Multiplies a vector by a number, having the effect of scaling it.
            <para>(Provided for languages that do not support operator overloading. You can use the * operator otherwise)</para>
            </summary>
            <param name="vector">A vector.</param>
            <param name="t">A number.</param>
            <returns>A new vector that is the original vector coordinate-wise multiplied by t.</returns>
            <since>5.0</since>
        </member>
        <member name="M:Rhino.Geometry.Vector3f.op_Multiply(System.Single,Rhino.Geometry.Vector3f)">
            <summary>
            Multiplies a vector by a number, having the effect of scaling it.
            </summary>
            <param name="t">A number.</param>
            <param name="vector">A vector.</param>
            <returns>A new vector that is the original vector coordinate-wise multiplied by t.</returns>
            <since>5.0</since>
        </member>
        <member name="M:Rhino.Geometry.Vector3f.Multiply(System.Single,Rhino.Geometry.Vector3f)">
            <summary>
            Multiplies a vector by a number, having the effect of scaling it.
            <para>(Provided for languages that do not support operator overloading. You can use the * operator otherwise)</para>
            </summary>
            <param name="t">A number.</param>
            <param name="vector">A vector.</param>
            <returns>A new vector that is the original vector coordinate-wise multiplied by t.</returns>
            <since>5.0</since>
        </member>
        <member name="M:Rhino.Geometry.Vector3f.Multiply(Rhino.Geometry.Vector3f,Rhino.Geometry.Vector3f)">
            <summary>
            Multiplies two <see cref="T:Rhino.Geometry.Vector3f"/> together, returning the dot (internal) product of the two.
            This is not the cross product.
            <para>(Provided for languages that do not support operator overloading. You can use the * operator otherwise)</para>
            </summary>
            <param name="point1">The first point.</param>
            <param name="point2">The second point.</param>
            <returns>A value that results from the coordinate-wise multiplication of point1 and point2.</returns>
            <since>6.0</since>
        </member>
        <member name="M:Rhino.Geometry.Vector3f.op_Division(Rhino.Geometry.Vector3f,System.Double)">
            <summary>
            Divides a <see cref="T:Rhino.Geometry.Vector3f"/> by a number, having the effect of shrinking it, t times.
            </summary>
            <param name="vector">A vector.</param>
            <param name="t">A number.</param>
            <returns>A new vector that is component-wise divided by t.</returns>
            <since>6.0</since>
        </member>
        <member name="M:Rhino.Geometry.Vector3f.op_Division(Rhino.Geometry.Vector3f,System.Single)">
            <summary>
            Divides a <see cref="T:Rhino.Geometry.Vector3f"/> by a number, having the effect of shrinking it, t times.
            </summary>
            <param name="vector">A vector.</param>
            <param name="t">A number.</param>
            <returns>A new vector that is component-wise divided by t.</returns>
            <since>6.0</since>
        </member>
        <member name="M:Rhino.Geometry.Vector3f.Divide(Rhino.Geometry.Vector3f,System.Double)">
            <summary>
            Divides a <see cref="T:Rhino.Geometry.Vector3f"/> by a number, having the effect of shrinking it, t times.
            <para>(Provided for languages that do not support operator overloading. You can use the / operator otherwise)</para>
            </summary>
            <param name="vector">A vector.</param>
            <param name="t">A number.</param>
            <returns>A new vector that is component-wise divided by t.</returns>
            <since>6.0</since>
        </member>
        <member name="M:Rhino.Geometry.Vector3f.Divide(Rhino.Geometry.Vector3f,System.Single)">
            <summary>
            Divides a <see cref="T:Rhino.Geometry.Vector3f"/> by a number, having the effect of shrinking it, t times.
            <para>(Provided for languages that do not support operator overloading. You can use the / operator otherwise)</para>
            </summary>
            <param name="vector">A vector.</param>
            <param name="t">A number.</param>
            <returns>A new vector that is component-wise divided by t.</returns>
            <since>6.0</since>
        </member>
        <member name="M:Rhino.Geometry.Vector3f.CrossProduct(Rhino.Geometry.Vector3f,Rhino.Geometry.Vector3f)">
            <summary>
            Computes the cross product (or vector product, or exterior product) of two vectors.
            <para>This operation is not commutative.</para>
            </summary>
            <param name="a">First vector.</param>
            <param name="b">Second vector.</param>
            <returns>A new vector that is perpendicular to both a and b,
            <para>has Length == a.Length * b.Length and</para>
            <para>with a result that is oriented following the right hand rule.</para>
            </returns>
            <since>5.0</since>
        </member>
        <member name="P:Rhino.Geometry.Vector3f.SquareLength">
            <summary>
            Returns the square length of the vector.
            This property does not check for the validity of the inputs.
            </summary>
            <since>6.0</since>
        </member>
        <member name="P:Rhino.Geometry.Vector3f.Length">
            <summary>
            Computes the length (or magnitude, or size) of this vector.
            This is an application of Pythagoras' theorem.
            If this vector is invalid, its length is considered 0.
            </summary>
            <since>5.0</since>
        </member>
        <member name="M:Rhino.Geometry.Vector3f.op_Explicit(Rhino.Geometry.Vector3d)~Rhino.Geometry.Vector3f">
            <summary>
            Converts a double-precision vector in a single-precision vector.
            Needs explicit casting to help retain precision.
            </summary>
            <param name="vector">A vector.</param>
            <returns>The resulting vector.</returns>
        </member>
        <member name="T:Rhino.Geometry.GeometryBase">
            <summary>
            Provides a common base for most geometric classes. This class is abstract.
            </summary>
        </member>
        <member name="M:Rhino.Geometry.GeometryBase.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Protected constructor for internal use.
            </summary>
            <param name="info">Serialization data.</param>
            <param name="context">Serialization stream.</param>
        </member>
        <member name="M:Rhino.Geometry.GeometryBase.OnSwitchToNonConst">
            <summary>
            Is called when a non-constant operation occurs.
            </summary>
        </member>
        <member name="P:Rhino.Geometry.GeometryBase.IsDocumentControlled">
            <summary>
            If true this object may not be modified. Any properties or functions that attempt
            to modify this object when it is set to "IsReadOnly" will throw a NotSupportedException.
            </summary>
            <since>5.0</since>
        </member>
        <member name="M:Rhino.Geometry.GeometryBase.DuplicateShallow">
            <summary>
            Constructs a light copy of this object. By "light", it is meant that the same
            underlying data is used until something is done to attempt to change it. For example,
            you could have a shallow copy of a very heavy mesh object and the same underlying
            data will be used when doing things like inspecting the number of faces on the mesh.
            If you modify the location of one of the mesh vertices, the shallow copy will create
            a full duplicate of the underlying mesh data and the shallow copy will become a
            deep copy.
            </summary>
            <returns>An object of the same type as this object.
            <para>This behavior is overridden by implementing classes.</para></returns>
            <since>5.0</since>
        </member>
        <member name="M:Rhino.Geometry.GeometryBase.Duplicate">
            <summary>
            Constructs a deep (full) copy of this object.
            </summary>
            <returns>An object of the same type as this, with the same properties and behavior.</returns>
            <since>5.0</since>
        </member>
        <member name="P:Rhino.Geometry.GeometryBase.ObjectType">
            <summary>
            Useful for switch statements that need to differentiate between
            basic object types like points, curves, surfaces, and so on.
            </summary>
            <since>5.0</since>
        </member>
        <member name="M:Rhino.Geometry.GeometryBase.Transform(Rhino.Geometry.Transform)">
            <summary>
            Transforms the geometry. If the input Transform has a SimilarityType of
            OrientationReversing, you may want to consider flipping the transformed
            geometry after calling this function when it makes sense. For example,
            you may want to call Flip() on a Brep after transforming it.
            </summary>
            <param name="xform">
            Transformation to apply to geometry.
            </param>
            <returns>true if geometry successfully transformed.</returns>
            <since>5.0</since>
        </member>
        <member name="M:Rhino.Geometry.GeometryBase.Translate(Rhino.Geometry.Vector3d)">
            <summary>Translates the object along the specified vector.</summary>
            <param name="translationVector">A moving vector.</param>
            <returns>true if geometry successfully translated.</returns>
            <since>5.0</since>
        </member>
        <member name="M:Rhino.Geometry.GeometryBase.Translate(System.Double,System.Double,System.Double)">
            <summary>Translates the object along the specified vector.</summary>
            <param name="x">The X component.</param>
            <param name="y">The Y component.</param>
            <param name="z">The Z component.</param>
            <returns>true if geometry successfully translated.</returns>
            <since>5.0</since>
        </member>
        <member name="M:Rhino.Geometry.GeometryBase.Scale(System.Double)">
            <summary>
            Scales the object by the specified factor. The scale is centered at the origin.
            </summary>
            <param name="scaleFactor">The uniform scaling factor.</param>
            <returns>true if geometry successfully scaled.</returns>
            <since>5.0</since>
        </member>
        <member name="M:Rhino.Geometry.GeometryBase.Rotate(System.Double,Rhino.Geometry.Vector3d,Rhino.Geometry.Point3d)">
            <summary>
            Rotates the object about the specified axis. A positive rotation 
            angle results in a counter-clockwise rotation about the axis (right hand rule).
            </summary>
            <param name="angleRadians">Angle of rotation in radians.</param>
            <param name="rotationAxis">Direction of the axis of rotation.</param>
            <param name="rotationCenter">Point on the axis of rotation.</param>
            <returns>true if geometry successfully rotated.</returns>
            <since>5.0</since>
        </member>
        <member name="M:Rhino.Geometry.GeometryBase.MemoryEstimate">
            <summary>
            Computes an estimate of the number of bytes that this object is using in memory.
            </summary>
            <returns>An estimated memory footprint.</returns>
            <since>5.0</since>
        </member>
        <member name="M:Rhino.Geometry.GeometryBase.DataCRC(System.UInt32)">
            <summary>
            Returns a CRC calculated from the information that defines the object.
            This CRC can be used as a quick way to see if two objects are not identical.
            </summary>
            <param name="currentRemainder">The current remainder value.</param>
            <returns>CRC of the information the defines the object.</returns>
            <since>7.20</since>
        </member>
        <member name="M:Rhino.Geometry.GeometryBase.GetBoundingBox(System.Boolean)">
            <summary>
            Bounding box solver. Gets the world axis aligned bounding box for the geometry.
            </summary>
            <param name="accurate">If true, a physically accurate bounding box will be computed. 
            If not, a bounding box estimate will be computed. For some geometry types there is no 
            difference between the estimate and the accurate bounding box. Estimated bounding boxes 
            can be computed much (much) faster than accurate (or "tight") bounding boxes. 
            Estimated bounding boxes are always similar to or larger than accurate bounding boxes.</param>
            <returns>
            The bounding box of the geometry in world coordinates or BoundingBox.Empty 
            if not bounding box could be found.
            </returns>
            <example>
            <code source='examples\vbnet\ex_curveboundingbox.vb' lang='vbnet'/>
            <code source='examples\cs\ex_curveboundingbox.cs' lang='cs'/>
            <code source='examples\py\ex_curveboundingbox.py' lang='py'/>
            </example>
            <since>5.0</since>
        </member>
        <member name="M:Rhino.Geometry.GeometryBase.GetBoundingBox(Rhino.Geometry.Transform)">
            <summary>
            Aligned Bounding box solver. Gets the world axis aligned bounding box for the transformed geometry.
            </summary>
            <param name="xform">Transformation to apply to object prior to the BoundingBox computation. 
            The geometry itself is not modified.</param>
            <returns>The accurate bounding box of the transformed geometry in world coordinates 
            or BoundingBox.Empty if not bounding box could be found.</returns>
            <since>5.0</since>
        </member>
        <member name="M:Rhino.Geometry.GeometryBase.GetBoundingBox(Rhino.Geometry.Plane)">
            <summary>
            Aligned Bounding box solver. Gets the plane aligned bounding box.
            </summary>
            <param name="plane">Orientation plane for BoundingBox.</param>
            <returns>A BoundingBox in plane coordinates.</returns>
            <example>
            <code source='examples\vbnet\ex_curveboundingbox.vb' lang='vbnet'/>
            <code source='examples\cs\ex_curveboundingbox.cs' lang='cs'/>
            <code source='examples\py\ex_curveboundingbox.py' lang='py'/>
            </example>
            <since>5.0</since>
        </member>
        <member name="M:Rhino.Geometry.GeometryBase.GetBoundingBox(Rhino.Geometry.Plane,Rhino.Geometry.Box@)">
            <summary>
            Aligned Bounding box solver. Gets the plane aligned bounding box.
            </summary>
            <param name="plane">Orientation plane for BoundingBox.</param>
            <param name="worldBox">Aligned box in World coordinates.</param>
            <returns>A BoundingBox in plane coordinates.</returns>
            <since>5.0</since>
        </member>
        <member name="P:Rhino.Geometry.GeometryBase.IsDeformable">
            <summary>
            true if object can be accurately modified with "squishy" transformations like
            projections, shears, and non-uniform scaling.
            </summary>
            <since>5.0</since>
        </member>
        <member name="M:Rhino.Geometry.GeometryBase.MakeDeformable">
            <summary>
            If possible, converts the object into a form that can be accurately modified
            with "squishy" transformations like projections, shears, an non-uniform scaling.
            </summary>
            <returns>
            false if object cannot be converted to a deformable object. true if object was
            already deformable or was converted into a deformable object.
            </returns>
            <since>5.0</since>
        </member>
        <member name="P:Rhino.Geometry.GeometryBase.HasBrepForm">
            <summary>
            Returns true if the Brep.TryConvertBrep function will be successful for this object
            </summary>
            <since>5.6</since>
        </member>
        <member name="M:Rhino.Geometry.GeometryBase.ComponentIndex">
            <summary>
            If this piece of geometry is a component in something larger, like a BrepEdge
            in a Brep, then this function returns the component index.
            </summary>
            <returns>
            This object's component index.  If this object is not a sub-piece of a larger
            geometric entity, then the returned index has 
            m_type = ComponentIndex.InvalidType
            and m_index = -1.
            </returns>
            <since>5.0</since>
        </member>
        <member name="M:Rhino.Geometry.GeometryBase.SetUserString(System.String,System.String)">
            <summary>
            Attach a user string (key,value combination) to this geometry.
            </summary>
            <param name="key">id used to retrieve this string.</param>
            <param name="value">string associated with key.</param>
            <returns>true on success.</returns>
            <since>5.0</since>
        </member>
        <member name="M:Rhino.Geometry.GeometryBase.GetUserString(System.String)">
            <summary>
            Gets user string from this geometry.
            </summary>
            <param name="key">id used to retrieve the string.</param>
            <returns>string associated with the key if successful. null if no key was found.</returns>
            <since>5.0</since>
        </member>
        <member name="P:Rhino.Geometry.GeometryBase.UserStringCount">
            <summary>
            Gets the amount of user strings.
            </summary>
            <since>5.0</since>
        </member>
        <member name="M:Rhino.Geometry.GeometryBase.GetUserStrings">
            <summary>
            Gets a copy of all (user key string, user value string) pairs attached to this geometry.
            </summary>
            <returns>A new collection.</returns>
            <since>5.0</since>
        </member>
        <member name="M:Rhino.Geometry.GeometryBase.Dispose(System.Boolean)">
            <summary>
            Overridden in order to destroy local display cache information
            </summary>
            <param name="disposing"></param>
        </member>
        <member name="M:Rhino.Geometry.GeometryBase.NonConstOperation">
            <summary>
            Destroy cache handle
            </summary>
        </member>
        <member name="M:Rhino.Geometry.GeometryBase.GeometryReferenceEquals(Rhino.Geometry.GeometryBase,Rhino.Geometry.GeometryBase)">
            <summary>
            Determines if two objects are respectively shallow copies,
            new managed instantiations of the same geometry, or similar
            internal references to the exact same geometry, both in managed and in unmanaged code.
            </summary>
            <param name="one">The first object</param>
            <param name="other">The other object</param>
            <returns>True if indeed the objects are really the same. False otherwise.</returns>
            <since>7.2</since>
        </member>
        <member name="T:Rhino.Geometry.Hatch">
            <summary>
            Represents a hatch in planar boundary loop or loops.
            This is a 2d entity with a plane defining a local coordinate system.
            The loops, patterns, angles, etc are all in this local coordinate system.
            The Hatch object manages the plane and loop array
            Fill definitions are in the HatchPattern or class derived from HatchPattern
            Hatch has an index to get the pattern definition from the pattern table.
            </summary>
        </member>
        <member name="M:Rhino.Geometry.Hatch.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Protected constructor for internal use.
            </summary>
            <param name="info">Serialization data.</param>
            <param name="context">Serialization stream.</param>
        </member>
        <member name="M:Rhino.Geometry.Hatch.CreateFromBrep(Rhino.Geometry.Brep,System.Int32,System.Int32,System.Double,System.Double,Rhino.Geometry.Point3d)">
            <summary>
            Create a hatch from a planar face of a Brep
            </summary>
            <param name="brep"></param>
            <param name="brepFaceIndex"></param>
            <param name="hatchPatternIndex"></param>
            <param name="rotationRadians"></param>
            <param name="scale"></param>
            <param name="basePoint"></param>
            <returns></returns>
            <since>7.18</since>
        </member>
        <member name="M:Rhino.Geometry.Hatch.Create(Rhino.Geometry.Plane,Rhino.Geometry.Curve,System.Collections.Generic.IEnumerable{Rhino.Geometry.Curve},System.Int32,System.Double,System.Double)">
            <summary>
            Create a hatch with a given set of outer and inner loops
            </summary>
            <param name="hatchPlane"></param>
            <param name="outerLoop">2d closed curve representing outer boundary of hatch</param>
            <param name="innerLoops">2d closed curves for inner boundaries</param>
            <param name="hatchPatternIndex"></param>
            <param name="rotationRadians"></param>
            <param name="scale"></param>
            <returns></returns>
            <since>7.18</since>
        </member>
        <member name="M:Rhino.Geometry.Hatch.Get3dCurves(System.Boolean)">
            <summary>
            Gets 3d curves that define the boundaries of the hatch
            </summary>
            <param name="outer">true to get the outer curves, false to get the inner curves</param>
            <returns></returns>
            <since>5.0</since>
        </member>
        <member name="P:Rhino.Geometry.Hatch.PatternIndex">
            <summary>
            Gets or sets the index of the pattern in the document hatch pattern table.
            </summary>
            <example>
            <code source='examples\vbnet\ex_replacehatchpattern.vb' lang='vbnet'/>
            <code source='examples\cs\ex_replacehatchpattern.cs' lang='cs'/>
            <code source='examples\py\ex_replacehatchpattern.py' lang='py'/>
            </example>
            <since>5.0</since>
        </member>
        <member name="P:Rhino.Geometry.Hatch.PatternRotation">
            <summary>
            Gets or sets the relative rotation of the pattern.
            </summary>
            <since>5.0</since>
        </member>
        <member name="P:Rhino.Geometry.Hatch.BasePoint">
            <summary>
            Gets or sets the hatch pattern base point
            </summary>
            <since>6.11</since>
        </member>
        <member name="P:Rhino.Geometry.Hatch.Plane">
            <summary>
            Gets or sets the hatch plane
            </summary>
            <since>6.11</since>
        </member>
        <member name="P:Rhino.Geometry.Hatch.PatternScale">
            <summary>
            Gets or sets the scaling factor of the pattern.
            </summary>
            <since>5.0</since>
        </member>
        <member name="M:Rhino.Geometry.Hatch.ScalePattern(Rhino.Geometry.Transform)">
            <summary>
            Scale the hatch's pattern
            </summary>
            <param name="xform"></param>
            <since>6.11</since>
        </member>
        <member name="M:Rhino.Geometry.Hatch.GetGradientFill">
            <summary>
            Get gradient fill information for this hatch. If the "GradientType" for
            the fill is None, then this hatch doesn't have any gradient fill.
            </summary>
            <returns></returns>
            <since>7.0</since>
        </member>
        <member name="M:Rhino.Geometry.Hatch.SetGradientFill(Rhino.Display.ColorGradient)">
            <summary>
            </summary>
            <param name="fill"></param>
            <since>7.0</since>
        </member>
        <member name="T:Rhino.Geometry.InstanceDefinitionGeometry">
            <summary>
            Represents a block definition in a File3dm. This is the same as
            Rhino.DocObjects.InstanceDefinition, but not associated with a RhinoDoc.
            </summary>
        </member>
        <member name="M:Rhino.Geometry.InstanceDefinitionGeometry.#ctor">
            <summary>
            Initializes a new block definition.
            </summary>
            <since>5.0</since>
        </member>
        <member name="P:Rhino.Geometry.InstanceDefinitionGeometry.Description">
            <summary>
            Gets or sets the description of the definition.
            </summary>
            <since>5.0</since>
        </member>
        <member name="P:Rhino.Geometry.InstanceDefinitionGeometry.Url">
            <summary>
            Gets or sets the URL or hyperlink of the definition.
            </summary>
            <since>7.0</since>
        </member>
        <member name="P:Rhino.Geometry.InstanceDefinitionGeometry.UrlDescription">
            <summary>
            Gets or sets the description of the URL or hyperlink of the definition.
            </summary>
            <since>7.0</since>
        </member>
        <member name="P:Rhino.Geometry.InstanceDefinitionGeometry.SourceArchive">
            <summary>
            Gets the full file path for linked instance definitions.
            </summary>
            <since>8.0</since>
        </member>
        <member name="P:Rhino.Geometry.InstanceDefinitionGeometry.ComponentType">
            <summary>
            Returns <see cref="F:Rhino.DocObjects.ModelComponentType.InstanceDefinition"/>.
            </summary>
            <since>6.0</since>
        </member>
        <member name="M:Rhino.Geometry.InstanceDefinitionGeometry.GetObjectIds">
            <summary>
            list of object ids in the instance geometry table
            </summary>
            <returns></returns>
            <since>5.6</since>
        </member>
        <member name="T:Rhino.Geometry.InstanceReferenceGeometry">
            <summary>
            Represents a reference to the geometry in a block definition.
            </summary>
        </member>
        <member name="M:Rhino.Geometry.InstanceReferenceGeometry.#ctor(System.Guid,Rhino.Geometry.Transform)">
            <summary>
            Constructor used when creating nested instance references.
            </summary>
            <param name="instanceDefinitionId"></param>
            <param name="transform"></param>
            <example>
            <code source='examples\cs\ex_nestedblock.cs' lang='cs'/>
            </example>
            <since>5.1</since>
        </member>
        <member name="M:Rhino.Geometry.InstanceReferenceGeometry.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Protected constructor for internal use.
            </summary>
            <param name="info">Serialization data.</param>
            <param name="context">Serialization stream.</param>
        </member>
        <member name="P:Rhino.Geometry.InstanceReferenceGeometry.ParentIdefId">
            <summary>
            The unique id for the parent instance definition of this instance reference.
            </summary>
            <since>5.6</since>
        </member>
        <member name="P:Rhino.Geometry.InstanceReferenceGeometry.Xform">
            <summary>Transformation for this reference.</summary>
            <since>5.6</since>
        </member>
        <member name="T:Rhino.Geometry.Intersect.Intersection">
            <summary>
            Provides static methods for the computation of intersections, projections, sections and similar.
            </summary>
        </member>
        <member name="M:Rhino.Geometry.Intersect.Intersection.LineLine(Rhino.Geometry.Line,Rhino.Geometry.Line,System.Double@,System.Double@,System.Double,System.Boolean)">
            <summary>
            Intersects two lines.
            </summary>
            <param name="lineA">First line for intersection.</param>
            <param name="lineB">Second line for intersection.</param>
            <param name="a">
            Parameter on lineA that is closest to LineB. 
            The shortest distance between the lines is the chord from lineA.PointAt(a) to lineB.PointAt(b)
            </param>
            <param name="b">
            Parameter on lineB that is closest to LineA. 
            The shortest distance between the lines is the chord from lineA.PointAt(a) to lineB.PointAt(b)
            </param>
            <param name="tolerance">
            If tolerance > 0.0, then an intersection is reported only if the distance between the points is &lt;= tolerance. 
            If tolerance &lt;= 0.0, then the closest point between the lines is reported.
            </param>
            <param name="finiteSegments">
            If true, the input lines are treated as finite segments. 
            If false, the input lines are treated as infinite lines.
            </param>
            <returns>
            true if a closest point can be calculated and the result passes the tolerance parameter test; otherwise false.
            </returns>
            <remarks>
            If the lines are exactly parallel, meaning the system of equations used to find a and b 
            has no numerical solution, then false is returned. If the lines are nearly parallel, which 
            is often numerically true even if you think the lines look exactly parallel, then the 
            closest points are found and true is returned. So, if you care about weeding out "parallel" 
            lines, then you need to do something like the following:
            <code lang="cs">
            bool rc = Intersect.LineLine(lineA, lineB, out a, out b, tolerance, segments);
            if (rc)
            {
              double angle_tol = RhinoMath.ToRadians(1.0); // or whatever
              double parallel_tol = Math.Cos(angle_tol);
              if ( Math.Abs(lineA.UnitTangent * lineB.UnitTangent) >= parallel_tol )
              {
                ... do whatever you think is appropriate
              }
            }
            </code>
            <code lang="vb">
            Dim rc As Boolean = Intersect.LineLine(lineA, lineB, a, b, tolerance, segments)
            If (rc) Then
              Dim angle_tol As Double = RhinoMath.ToRadians(1.0) 'or whatever
              Dim parallel_tolerance As Double = Math.Cos(angle_tol)
              If (Math.Abs(lineA.UnitTangent * lineB.UnitTangent) >= parallel_tolerance) Then
                ... do whatever you think is appropriate
              End If
            End If
            </code>
            </remarks>
            <since>5.0</since>
        </member>
        <member name="M:Rhino.Geometry.Intersect.Intersection.LineLine(Rhino.Geometry.Line,Rhino.Geometry.Line,System.Double@,System.Double@)">
            <summary>
            Find the unique closest-points pair between two infinite lines, if it exists.
            </summary>
            <param name="lineA">First line.</param>
            <param name="lineB">Second line.</param>
            <param name="a">
            Parameter on lineA that is closest to lineB.
            </param>
            <param name="b">
            Parameter on lineB that is closest to lineA. 
            The shortest distance between the lines is the chord from lineA.PointAt(a) to lineB.PointAt(b)
            </param>
            <returns>
            true if points are found and false if the lines are numerically parallel. 
            Numerically parallel means the 2x2 matrix:
            <para>+AoA  -AoB</para>
            <para>-AoB  +BoB</para>
            is numerically singular, where A = (lineA.To - lineA.From) and B = (lineB.To-lineB.From).
            </returns>
            <example>
            <code source='examples\vbnet\ex_intersectlines.vb' lang='vbnet'/>
            <code source='examples\cs\ex_intersectlines.cs' lang='cs'/>
            <code source='examples\py\ex_intersectlines.py' lang='py'/>
            </example>
            <since>5.0</since>
        </member>
        <member name="M:Rhino.Geometry.Intersect.Intersection.LinePlane(Rhino.Geometry.Line,Rhino.Geometry.Plane,System.Double@)">
            <summary>
            Intersects a line and a plane. This function only returns true if the 
            intersection result is a single point (i.e. if the line is coincident with 
            the plane then no intersection is assumed).
            </summary>
            <param name="line">Line for intersection.</param>
            <param name="plane">Plane to intersect.</param>
            <param name="lineParameter">Parameter on line where intersection occurs. 
            If the parameter is not within the {0, 1} Interval then the finite segment 
            does not intersect the plane.</param>
            <returns>true on success, false on failure.</returns>
            <since>5.0</since>
        </member>
        <member name="M:Rhino.Geometry.Intersect.Intersection.PlanePlane(Rhino.Geometry.Plane,Rhino.Geometry.Plane,Rhino.Geometry.Line@)">
            <summary>
            Intersects two planes and return the intersection line. If the planes are 
            parallel or coincident, no intersection is assumed.
            </summary>
            <param name="planeA">First plane for intersection.</param>
            <param name="planeB">Second plane for intersection.</param>
            <param name="intersectionLine">If this function returns true, 
            the intersectionLine parameter will return the line where the planes intersect.</param>
            <returns>true on success, false on failure.</returns>
            <since>5.0</since>
        </member>
        <member name="M:Rhino.Geometry.Intersect.Intersection.PlanePlanePlane(Rhino.Geometry.Plane,Rhino.Geometry.Plane,Rhino.Geometry.Plane,Rhino.Geometry.Point3d@)">
            <summary>
            Intersects three planes to find the single point they all share.
            </summary>
            <param name="planeA">First plane for intersection.</param>
            <param name="planeB">Second plane for intersection.</param>
            <param name="planeC">Third plane for intersection.</param>
            <param name="intersectionPoint">Point where all three planes converge.</param>
            <returns>true on success, false on failure. If at least two out of the three planes 
            are parallel or coincident, failure is assumed.</returns>
            <since>5.0</since>
        </member>
        <member name="M:Rhino.Geometry.Intersect.Intersection.PlaneCircle(Rhino.Geometry.Plane,Rhino.Geometry.Circle,System.Double@,System.Double@)">
            <summary>
            Intersects a plane with a circle using exact calculations.
            </summary>
            <param name="plane">Plane to intersect.</param>
            <param name="circle">Circe to intersect.</param>
            <param name="firstCircleParameter">First intersection parameter on circle if successful or RhinoMath.UnsetValue if not.</param>
            <param name="secondCircleParameter">Second intersection parameter on circle if successful or RhinoMath.UnsetValue if not.</param>
            <returns>The type of intersection that occurred.</returns>
            <since>5.0</since>
        </member>
        <member name="M:Rhino.Geometry.Intersect.Intersection.PlaneSphere(Rhino.Geometry.Plane,Rhino.Geometry.Sphere,Rhino.Geometry.Circle@)">
            <summary>
            Intersects a plane with a sphere using exact calculations.
            </summary>
            <param name="plane">Plane to intersect.</param>
            <param name="sphere">Sphere to intersect.</param>
            <param name="intersectionCircle">Intersection result.</param>
            <returns>If <see cref="F:Rhino.Geometry.Intersect.PlaneSphereIntersection.None"/> is returned, the intersectionCircle has a radius of zero and the center point 
            is the point on the plane closest to the sphere.</returns>
            <since>5.0</since>
        </member>
        <member name="M:Rhino.Geometry.Intersect.Intersection.LineCircle(Rhino.Geometry.Line,Rhino.Geometry.Circle,System.Double@,Rhino.Geometry.Point3d@,System.Double@,Rhino.Geometry.Point3d@)">
            <summary>
            Intersects a line with a circle using exact calculations.
            </summary>
            <param name="line">Line for intersection.</param>
            <param name="circle">Circle for intersection.</param>
            <param name="t1">Parameter on line for first intersection.</param>
            <param name="point1">Point on circle closest to first intersection.</param>
            <param name="t2">Parameter on line for second intersection.</param>
            <param name="point2">Point on circle closest to second intersection.</param>
            <returns>
            If <see cref="F:Rhino.Geometry.Intersect.LineCircleIntersection.Single"/> is returned, only t1 and point1 will have valid values. 
            If <see cref="F:Rhino.Geometry.Intersect.LineCircleIntersection.Multiple"/> is returned, t2 and point2 will also be filled out.
            </returns>
            <example>
            <code source='examples\vbnet\ex_intersectlinecircle.vb' lang='vbnet'/>
            <code source='examples\cs\ex_intersectlinecircle.cs' lang='cs'/>
            <code source='examples\py\ex_intersectlinecircle.py' lang='py'/>
            </example>
            <since>5.0</since>
        </member>
        <member name="M:Rhino.Geometry.Intersect.Intersection.LineSphere(Rhino.Geometry.Line,Rhino.Geometry.Sphere,Rhino.Geometry.Point3d@,Rhino.Geometry.Point3d@)">
            <summary>
            Intersects a line with a sphere using exact calculations.
            </summary>
            <param name="line">Line for intersection.</param>
            <param name="sphere">Sphere for intersection.</param>
            <param name="intersectionPoint1">First intersection point.</param>
            <param name="intersectionPoint2">Second intersection point.</param>
            <returns>If <see cref="F:Rhino.Geometry.Intersect.LineSphereIntersection.None"/> is returned, the first point is the point on the line closest to the sphere and 
            the second point is the point on the sphere closest to the line. 
            If <see cref="F:Rhino.Geometry.Intersect.LineSphereIntersection.Single"/> is returned, the first point is the point on the line and the second point is the 
            same point on the sphere.</returns>
            <since>5.0</since>
        </member>
        <member name="M:Rhino.Geometry.Intersect.Intersection.LineCylinder(Rhino.Geometry.Line,Rhino.Geometry.Cylinder,Rhino.Geometry.Point3d@,Rhino.Geometry.Point3d@)">
            <summary>
            Intersects a line with a cylinder using exact calculations.
            </summary>
            <param name="line">Line for intersection.</param>
            <param name="cylinder">Cylinder for intersection.</param>
            <param name="intersectionPoint1">First intersection point.</param>
            <param name="intersectionPoint2">Second intersection point.</param>
            <returns>If None is returned, the first point is the point on the line closest
            to the cylinder and the second point is the point on the cylinder closest to
            the line. 
            <para>If <see cref="F:Rhino.Geometry.Intersect.LineCylinderIntersection.Single"/> is returned, the first point
            is the point on the line and the second point is the  same point on the
            cylinder.</para></returns>
            <since>5.0</since>
        </member>
        <member name="M:Rhino.Geometry.Intersect.Intersection.SphereSphere(Rhino.Geometry.Sphere,Rhino.Geometry.Sphere,Rhino.Geometry.Circle@)">
            <summary>
            Intersects two spheres using exact calculations.
            </summary>
            <param name="sphereA">First sphere to intersect.</param>
            <param name="sphereB">Second sphere to intersect.</param>
            <param name="intersectionCircle">
            If intersection is a point, then that point will be the center, radius 0.
            </param>
            <returns>
            The intersection type.
            </returns>
            <since>5.0</since>
        </member>
        <member name="M:Rhino.Geometry.Intersect.Intersection.ArcArc(Rhino.Geometry.Arc,Rhino.Geometry.Arc,Rhino.Geometry.Point3d@,Rhino.Geometry.Point3d@)">
            <summary>
            Intersects two arcs using exact calculations.
            </summary>
            <param name="arcA">First arc to intersect.</param>
            <param name="arcB">Second arc to intersect.</param>
            <param name="intersectionPoint1">First intersection point.</param>
            <param name="intersectionPoint2">Second intersection point.</param>
            <returns>The intersection type.</returns>
            <since>7.12</since>
        </member>
        <member name="M:Rhino.Geometry.Intersect.Intersection.CircleCircle(Rhino.Geometry.Circle,Rhino.Geometry.Circle,Rhino.Geometry.Point3d@,Rhino.Geometry.Point3d@)">
            <summary>
            Intersects two circles using exact calculations.
            </summary>
            <param name="circleA">First circle to intersect.</param>
            <param name="circleB">Second circle to intersect.</param>
            <param name="intersectionPoint1">First intersection point.</param>
            <param name="intersectionPoint2">Second intersection point.</param>
            <returns>The intersection type.</returns>
            <since>7.12</since>
        </member>
        <member name="M:Rhino.Geometry.Intersect.Intersection.LineBox(Rhino.Geometry.Line,Rhino.Geometry.BoundingBox,System.Double,Rhino.Geometry.Interval@)">
            <summary>
            Intersects an infinite line and an axis aligned bounding box.
            </summary>
            <param name="box">BoundingBox to intersect.</param>
            <param name="line">Line for intersection.</param>
            <param name="tolerance">
            If tolerance &gt; 0.0, then the intersection is performed against a box 
            that has each side moved out by tolerance.
            </param>
            <param name="lineParameters">
            The chord from line.PointAt(lineParameters.T0) to line.PointAt(lineParameters.T1) is the intersection.
            </param>
            <returns>true if the line intersects the box, false if no intersection occurs.</returns>
            <since>5.0</since>
        </member>
        <member name="M:Rhino.Geometry.Intersect.Intersection.LineBox(Rhino.Geometry.Line,Rhino.Geometry.Box,System.Double,Rhino.Geometry.Interval@)">
            <summary>
            Intersects an infinite line with a box volume.
            </summary>
            <param name="box">Box to intersect.</param>
            <param name="line">Line for intersection.</param>
            <param name="tolerance">
            If tolerance &gt; 0.0, then the intersection is performed against a box 
            that has each side moved out by tolerance.
            </param>
            <param name="lineParameters">
            The chord from line.PointAt(lineParameters.T0) to line.PointAt(lineParameters.T1) is the intersection.
            </param>
            <returns>true if the line intersects the box, false if no intersection occurs.</returns>
            <since>5.0</since>
        </member>
        <member name="M:Rhino.Geometry.Intersect.Intersection.ExtendThroughBox(Rhino.Geometry.Plane,Rhino.Geometry.BoundingBox,System.Double)">
            <summary>
            Utility function for creating a PlaneSurface through a Box.
            </summary>
            <param name="plane">Plane to extend.</param>
            <param name="box">Box to extend through.</param>
            <param name="fuzzyness">Box will be inflated by this amount.</param>
            <returns>A Plane surface through the box or null.</returns>
        </member>
        <member name="T:Rhino.Geometry.Intersect.PlaneCircleIntersection">
            <summary>
            Represents all possible cases of a Plane|Circle intersection event.
            </summary>
            <since>5.0</since>
        </member>
        <member name="F:Rhino.Geometry.Intersect.PlaneCircleIntersection.None">
            <summary>
            No intersections. Either because radius is too small or because circle plane is parallel but not coincident with the intersection plane.
            </summary>
        </member>
        <member name="F:Rhino.Geometry.Intersect.PlaneCircleIntersection.Tangent">
            <summary>
            Tangent (one point) intersection.
            </summary>
        </member>
        <member name="F:Rhino.Geometry.Intersect.PlaneCircleIntersection.Secant">
            <summary>
            Secant (two point) intersection.
            </summary>
        </member>
        <member name="F:Rhino.Geometry.Intersect.PlaneCircleIntersection.Parallel">
            <summary>
            Circle and plane are planar but not coincident. 
            Parallel indicates no intersection took place.
            </summary>
        </member>
        <member name="F:Rhino.Geometry.Intersect.PlaneCircleIntersection.Coincident">
            <summary>
            Circle and plane are co-planar, they intersect everywhere.
            </summary>
        </member>
        <member name="T:Rhino.Geometry.Intersect.PlaneSphereIntersection">
            <summary>
            Represents all possible cases of a Plane|Sphere intersection event.
            </summary>
            <since>5.0</since>
        </member>
        <member name="F:Rhino.Geometry.Intersect.PlaneSphereIntersection.None">
            <summary>
            No intersections.
            </summary>
        </member>
        <member name="F:Rhino.Geometry.Intersect.PlaneSphereIntersection.Point">
            <summary>
            Tangent intersection.
            </summary>
        </member>
        <member name="F:Rhino.Geometry.Intersect.PlaneSphereIntersection.Circle">
            <summary>
            Circular intersection.
            </summary>
        </member>
        <member name="T:Rhino.Geometry.Intersect.LineCircleIntersection">
            <summary>
            Represents all possible cases of a Line|Circle intersection event.
            </summary>
            <since>5.0</since>
        </member>
        <member name="F:Rhino.Geometry.Intersect.LineCircleIntersection.None">
            <summary>
            No intersections.
            </summary>
        </member>
        <member name="F:Rhino.Geometry.Intersect.LineCircleIntersection.Single">
            <summary>
            One intersection.
            </summary>
        </member>
        <member name="F:Rhino.Geometry.Intersect.LineCircleIntersection.Multiple">
            <summary>
            Two intersections.
            </summary>
        </member>
        <member name="T:Rhino.Geometry.Intersect.LineSphereIntersection">
            <summary>
            Represents all possible cases of a Line|Sphere intersection event.
            </summary>
            <since>5.0</since>
        </member>
        <member name="F:Rhino.Geometry.Intersect.LineSphereIntersection.None">
            <summary>
            No intersections.
            </summary>
        </member>
        <member name="F:Rhino.Geometry.Intersect.LineSphereIntersection.Single">
            <summary>
            One intersection.
            </summary>
        </member>
        <member name="F:Rhino.Geometry.Intersect.LineSphereIntersection.Multiple">
            <summary>
            Two intersections.
            </summary>
        </member>
        <member name="T:Rhino.Geometry.Intersect.LineCylinderIntersection">
            <summary>
            Represents all possible cases of a Line|Cylinder intersection event.
            </summary>
            <since>5.0</since>
        </member>
        <member name="F:Rhino.Geometry.Intersect.LineCylinderIntersection.None">
            <summary>
            No intersections.
            </summary>
        </member>
        <member name="F:Rhino.Geometry.Intersect.LineCylinderIntersection.Single">
            <summary>
            One intersection.
            </summary>
        </member>
        <member name="F:Rhino.Geometry.Intersect.LineCylinderIntersection.Multiple">
            <summary>
            Two intersections.
            </summary>
        </member>
        <member name="F:Rhino.Geometry.Intersect.LineCylinderIntersection.Overlap">
            <summary>
            Line lies on cylinder.
            </summary>
        </member>
        <member name="T:Rhino.Geometry.Intersect.SphereSphereIntersection">
            <summary>
            Represents all possible cases of a Sphere|Sphere intersection event.
            </summary>
            <since>5.0</since>
        </member>
        <member name="F:Rhino.Geometry.Intersect.SphereSphereIntersection.None">
            <summary>
            Spheres do not intersect.
            </summary>
        </member>
        <member name="F:Rhino.Geometry.Intersect.SphereSphereIntersection.Point">
            <summary>
            Spheres touch at a single point.
            </summary>
        </member>
        <member name="F:Rhino.Geometry.Intersect.SphereSphereIntersection.Circle">
            <summary>
            Spheres intersect at a circle.
            </summary>
        </member>
        <member name="F:Rhino.Geometry.Intersect.SphereSphereIntersection.Overlap">
            <summary>
            Spheres are identical.
            </summary>
        </member>
        <member name="T:Rhino.Geometry.Intersect.ArcArcIntersection">
            <summary>
            Represents all possible cases of a Arc|Arc intersection event.
            </summary>
            <since>7.12</since>
        </member>
        <member name="F:Rhino.Geometry.Intersect.ArcArcIntersection.None">
            <summary>
            Arcs do not intersect.
            </summary>
        </member>
        <member name="F:Rhino.Geometry.Intersect.ArcArcIntersection.Single">
            <summary>
            Arcs touch at a one point.
            </summary>
        </member>
        <member name="F:Rhino.Geometry.Intersect.ArcArcIntersection.Multiple">
            <summary>
            Arcs intersect at two points.
            </summary>
        </member>
        <member name="F:Rhino.Geometry.Intersect.ArcArcIntersection.Overlap">
            <summary>
            Arcs are cocircular and overlap.
            </summary>
        </member>
        <member name="T:Rhino.Geometry.Intersect.CircleCircleIntersection">
            <summary>
            Represents all possible cases of a Circle|Circle intersection event.
            </summary>
            <since>7.12</since>
        </member>
        <member name="F:Rhino.Geometry.Intersect.CircleCircleIntersection.None">
            <summary>
            Circles do not intersect.
            </summary>
        </member>
        <member name="F:Rhino.Geometry.Intersect.CircleCircleIntersection.Single">
            <summary>
            Circles touch at a one point.
            </summary>
        </member>
        <member name="F:Rhino.Geometry.Intersect.CircleCircleIntersection.Multiple">
            <summary>
            Circles intersect at two points.
            </summary>
        </member>
        <member name="F:Rhino.Geometry.Intersect.CircleCircleIntersection.Overlap">
            <summary>
            Circles are identical.
            </summary>
        </member>
        <member name="T:Rhino.Geometry.Intersect.IntersectionEvent">
            <summary>
            Provides all the information for a single Curve Intersection event.
            </summary>
        </member>
        <member name="P:Rhino.Geometry.Intersect.IntersectionEvent.IsPoint">
            <summary>
            All curve intersection events are either a single point or an overlap.
            </summary>
            <since>5.0</since>
        </member>
        <member name="P:Rhino.Geometry.Intersect.IntersectionEvent.IsOverlap">
            <summary>
            All curve intersection events are either a single point or an overlap.
            </summary>
            <example>
            <code source='examples\vbnet\ex_curvesurfaceintersect.vb' lang='vbnet'/>
            <code source='examples\cs\ex_curvesurfaceintersect.cs' lang='cs'/>
            <code source='examples\py\ex_curvesurfaceintersect.py' lang='py'/>
            </example>
            <since>5.0</since>
        </member>
        <member name="P:Rhino.Geometry.Intersect.IntersectionEvent.PointA">
            <summary>
            Gets the point on Curve A where the intersection occurred. 
            If the intersection type is overlap, then this will return the 
            start of the overlap region.
            </summary>
            <since>5.0</since>
        </member>
        <member name="P:Rhino.Geometry.Intersect.IntersectionEvent.PointA2">
            <summary>
            Gets the end point of the overlap on Curve A. 
            If the intersection type is not overlap, this value is meaningless.
            </summary>
            <since>5.0</since>
        </member>
        <member name="P:Rhino.Geometry.Intersect.IntersectionEvent.PointB">
            <summary>
            Gets the point on Curve B (or Surface B) where the intersection occurred. 
            If the intersection type is overlap, then this will return the 
            start of the overlap region.
            </summary>
            <since>5.0</since>
        </member>
        <member name="P:Rhino.Geometry.Intersect.IntersectionEvent.PointB2">
            <summary>
            Gets the end point of the overlap on Curve B (or Surface B). 
            If the intersection type is not overlap, this value is meaningless.
            </summary>
            <since>5.0</since>
        </member>
        <member name="P:Rhino.Geometry.Intersect.IntersectionEvent.ParameterA">
            <summary>
            Gets the parameter on Curve A where the intersection occurred. 
            If the intersection type is overlap, then this will return the 
            start of the overlap region.
            </summary>
            <since>5.0</since>
        </member>
        <member name="P:Rhino.Geometry.Intersect.IntersectionEvent.ParameterB">
            <summary>
            Gets the parameter on Curve B where the intersection occurred. 
            If the intersection type is overlap, then this will return the 
            start of the overlap region.
            </summary>
            <since>5.0</since>
        </member>
        <member name="P:Rhino.Geometry.Intersect.IntersectionEvent.OverlapA">
            <summary>
            Gets the interval on curve A where the overlap occurs. 
            If the intersection type is not overlap, this value is meaningless.
            </summary>
            <since>5.0</since>
        </member>
        <member name="P:Rhino.Geometry.Intersect.IntersectionEvent.OverlapB">
            <summary>
            Gets the interval on curve B where the overlap occurs. 
            If the intersection type is not overlap, this value is meaningless.
            </summary>
            <since>5.0</since>
        </member>
        <member name="M:Rhino.Geometry.Intersect.IntersectionEvent.SurfacePointParameter(System.Double@,System.Double@)">
            <summary>
            If this instance records a Curve|Surface intersection event, 
            <i>and</i> the intersection type is <b>point</b>, then use this function 
            to get the U and V parameters on the surface where the intersection occurs.
            </summary>
            <param name="u">Parameter on surface u direction where the intersection occurs.</param>
            <param name="v">Parameter on surface v direction where the intersection occurs.</param>
            <since>5.0</since>
        </member>
        <member name="M:Rhino.Geometry.Intersect.IntersectionEvent.SurfaceOverlapParameter(Rhino.Geometry.Interval@,Rhino.Geometry.Interval@)">
            <summary>
            If this instance records a Curve|Surface intersection event, 
            <i>and</i> the intersection type if <b>overlap</b>, then use this function 
            to get the U and V domains on the surface where the overlap occurs.
            </summary>
            <param name="uDomain">Domain along surface U direction for overlap event.</param>
            <param name="vDomain">Domain along surface V direction for overlap event.</param>
            <since>5.0</since>
        </member>
        <member name="M:Rhino.Geometry.Intersect.IntersectionEvent.CompareEquivalent(Rhino.Geometry.Intersect.IntersectionEvent,Rhino.Geometry.Intersect.IntersectionEvent,System.Double)">
            <summary>
            Compare intersection events.
            </summary>
            <param name="eventA">The first intersection event to compare.</param>
            <param name="eventB">The second intersection event to compare.</param>
            <param name="relativePointTolerance">The comparison tolerance. If RhinoMath.UnsetValue, then RhinoMath.SqrtEpsilon is used.</param>
            <returns>true if the two inputs represent the same intersection, false otherwise.</returns>
            <since>7.0</since>
        </member>
        <member name="M:Rhino.Geometry.Intersect.IntersectionEvent.CompareEquivalent(Rhino.Geometry.Intersect.IntersectionEvent,Rhino.Geometry.Intersect.IntersectionEvent,System.Double,Rhino.FileIO.TextLog)">
            <summary>
            Compare intersection events.
            </summary>
            <param name="eventA">The first intersection event to compare.</param>
            <param name="eventB">The second intersection event to compare.</param>
            <param name="relativePointTolerance">The comparison tolerance. If RhinoMath.UnsetValue, then RhinoMath.SqrtEpsilon is used.</param>
            <param name="log">If not null and false is returned, then a description of the error is appended to log.</param>
            <returns></returns>
            <since>7.0</since>
        </member>
        <member name="T:Rhino.Geometry.Arrowhead">
            <summary> Arrowhead used by annotation </summary>
        </member>
        <member name="M:Rhino.Geometry.Arrowhead.#ctor">
            <summary> Constructor </summary>
            <since>6.0</since>
        </member>
        <member name="M:Rhino.Geometry.Arrowhead.#ctor(Rhino.DocObjects.DimensionStyle.ArrowType,System.Guid)">
            <summary> Constructor </summary>  
            <param name="arrowType"> type of this arrowhead </param>
            <param name="blockId"> Guid of the block used for user defined display </param>
            <since>6.0</since>
        </member>
        <member name="P:Rhino.Geometry.Arrowhead.BlockId">
            <summary> Id of block used for user-defined arrowhead </summary>
            <since>6.0</since>
        </member>
        <member name="P:Rhino.Geometry.Arrowhead.ArrowType">
            <summary> Type of arrowhead used by annotation </summary>
            <since>6.0</since>
        </member>
        <member name="T:Rhino.Geometry.Leader">
            <summary> Leader geometry class </summary>
        </member>
        <member name="M:Rhino.Geometry.Leader.#ctor(System.IntPtr,System.Object)">
            <summary>
            internal constructor
            </summary>
            <param name="nativePointer"></param>
            <param name="parent"></param>
        </member>
        <member name="M:Rhino.Geometry.Leader.#ctor">
            <summary> Constructor </summary>
            <since>6.0</since>
        </member>
        <member name="M:Rhino.Geometry.Leader.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Protected serialization constructor for internal use.
            </summary>
            <param name="info">Serialization data.</param>
            <param name="context">Serialization stream.</param>
        </member>
        <member name="M:Rhino.Geometry.Leader.Create(System.String,Rhino.Geometry.Plane,Rhino.DocObjects.DimensionStyle,Rhino.Geometry.Point3d[])">
            <summary>
             Creates a Leader geometry object
            </summary>
            <param name="text"></param>
            <param name="plane"></param>
            <param name="dimstyle"></param>
            <param name="points"></param>
            <returns></returns>
            <since>6.0</since>
        </member>
        <member name="M:Rhino.Geometry.Leader.CreateWithRichText(System.String,Rhino.Geometry.Plane,Rhino.DocObjects.DimensionStyle,Rhino.Geometry.Point3d[])">
            <summary>
             Creates a Leader geometry object
            </summary>
            <param name="richText"></param>
            <param name="plane"></param>
            <param name="dimstyle"></param>
            <param name="points"></param>
            <returns></returns>
            <since>6.0</since>
        </member>
        <member name="P:Rhino.Geometry.Leader.Curve">
            <summary> Gets the curve used by this leader </summary>
            <since>6.0</since>
        </member>
        <member name="P:Rhino.Geometry.Leader.Points2D">
            <summary>
            Get or set the 2d points defining the curve used by this leader
            </summary>
            <since>6.0</since>
        </member>
        <member name="P:Rhino.Geometry.Leader.Points3D">
            <summary>
            Get or set the 3d points defining the curve used by this leader
            </summary>
            <since>6.0</since>
        </member>
        <member name="P:Rhino.Geometry.Leader.LeaderTextHorizontalAlignment">
            <summary>
            Gets or sets the horizontal alignment of the leader's text
            </summary>
            <since>6.0</since>
        </member>
        <member name="P:Rhino.Geometry.Leader.LeaderTextVerticalAlignment">
            <summary>
            Gets or sets the vertical alignment of the leader's text
            </summary>
            <since>6.0</since>
        </member>
        <member name="P:Rhino.Geometry.Leader.LeaderArrowType">
            <summary>
            The arrowhead type for the leader
            </summary>
            <since>6.0</since>
        </member>
        <member name="P:Rhino.Geometry.Leader.LeaderArrowBlockId">
            <summary>
            Id of the block used as the arrow for the leader when the arrow type is 'User arrow'
            </summary>
            <since>6.0</since>
        </member>
        <member name="P:Rhino.Geometry.Leader.LeaderArrowSize">
            <summary>
            The size of the leader arrow
            </summary>
            <since>6.0</since>
        </member>
        <member name="P:Rhino.Geometry.Leader.LeaderCurveStyle">
            <summary>
            The style of the leader curve: polyline or spline
            </summary>
            <since>6.0</since>
        </member>
        <member name="P:Rhino.Geometry.Leader.LeaderContentAngleStyle">
            <summary>
            Angle for text of leader text
            </summary>
            <since>6.0</since>
        </member>
        <member name="P:Rhino.Geometry.Leader.LeaderHasLanding">
            <summary>
            Returns true if the leader has a landing line
            </summary>
            <since>6.0</since>
        </member>
        <member name="P:Rhino.Geometry.Leader.LeaderLandingLength">
            <summary>
            Gets or sets the length of the landing line
            </summary>
            <since>6.0</since>
        </member>
        <member name="T:Rhino.Geometry.Light">
            <summary>
            Represents a light that shines in the modeling space.
            </summary>
        </member>
        <member name="M:Rhino.Geometry.Light.#ctor">
            <summary>
            Initializes a new light.
            </summary>
            <since>5.0</since>
        </member>
        <member name="M:Rhino.Geometry.Light.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Protected constructor used in serialization.
            </summary>
            <param name="info">Serialization data.</param>
            <param name="context">Serialization stream.</param>
        </member>
        <member name="P:Rhino.Geometry.Light.IsEnabled">
            <summary>
            Gets or sets a value that defines if the light is turned on (true) or off (false).
            </summary>
            <since>5.0</since>
        </member>
        <member name="P:Rhino.Geometry.Light.LightStyle">
            <summary>
            Gets or sets a light style on this camera.
            </summary>
            <since>5.0</since>
        </member>
        <member name="P:Rhino.Geometry.Light.LightIndex">
            <summary>
            Calls ON_Light::LightIndex etc
            </summary>
        </member>
        <member name="P:Rhino.Geometry.Light.IsPointLight">
            <summary>
            Gets a value indicating whether the light style
            is <see cref="P:Rhino.Geometry.Light.LightStyle"/> CameraPoint or WorldPoint.
            </summary>
            <since>5.0</since>
        </member>
        <member name="P:Rhino.Geometry.Light.IsDirectionalLight">
            <summary>
            Gets a value indicating whether the light style
            is <see cref="P:Rhino.Geometry.Light.LightStyle"/> CameraDirectional or WorldDirectional.
            </summary>
            <since>5.0</since>
        </member>
        <member name="P:Rhino.Geometry.Light.IsSpotLight">
            <summary>
            Gets a value indicating whether the light style
            is <see cref="P:Rhino.Geometry.Light.LightStyle"/> CameraSpot or WorldSpot.
            </summary>
            <since>5.0</since>
        </member>
        <member name="P:Rhino.Geometry.Light.IsLinearLight">
            <summary>
            Gets a value indicating whether the light style
            is <see cref="P:Rhino.Geometry.Light.LightStyle"/> WorldLinear.
            </summary>
            <since>5.0</since>
        </member>
        <member name="P:Rhino.Geometry.Light.IsRectangularLight">
            <summary>
            Gets a value indicating whether the light style
            is <see cref="P:Rhino.Geometry.Light.LightStyle"/> WorldRectangular.
            </summary>
            <since>5.0</since>
        </member>
        <member name="P:Rhino.Geometry.Light.CoordinateSystem">
            <summary>
            Gets a value, determined by LightStyle, that explains whether
            the camera directions are relative to World or Camera spaces.
            </summary>
            <since>5.0</since>
        </member>
        <member name="P:Rhino.Geometry.Light.Location">
            <summary>
            Gets or sets the light or 3D position or location.
            </summary>
            <since>5.0</since>
        </member>
        <member name="P:Rhino.Geometry.Light.Direction">
            <summary>
            Gets or sets the vector direction of the camera.
            </summary>
            <since>5.0</since>
        </member>
        <member name="P:Rhino.Geometry.Light.PerpendicularDirection">
            <summary>
            Gets a perpendicular vector to the camera direction.
            </summary>
            <since>5.0</since>
        </member>
        <member name="P:Rhino.Geometry.Light.Intensity">
            <summary>
            Gets or sets the light intensity.
            </summary>
            <since>5.0</since>
        </member>
        <member name="P:Rhino.Geometry.Light.PowerWatts">
            <summary>
            Gets or sets the light power in watts (W).
            </summary>
            <since>5.0</since>
        </member>
        <member name="P:Rhino.Geometry.Light.PowerLumens">
            <summary>
            Gets or sets the light power in lumens (lm).
            </summary>
            <since>5.0</since>
        </member>
        <member name="P:Rhino.Geometry.Light.PowerCandela">
            <summary>
            Gets or sets the light power in candelas (cd).
            </summary>
            <since>5.0</since>
        </member>
        <member name="P:Rhino.Geometry.Light.Ambient">
            <summary>
            Gets or sets the ambient color.
            </summary>
            <since>5.0</since>
        </member>
        <member name="P:Rhino.Geometry.Light.Diffuse">
            <summary>
            Gets or sets the diffuse color.
            </summary>
            <example>
            <code source='examples\vbnet\ex_modifylightcolor.vb' lang='vbnet'/>
            <code source='examples\cs\ex_modifylightcolor.cs' lang='cs'/>
            <code source='examples\py\ex_modifylightcolor.py' lang='py'/>
            </example>
            <since>5.0</since>
        </member>
        <member name="P:Rhino.Geometry.Light.Specular">
            <summary>
            Gets or sets the specular color.
            </summary>
            <since>5.0</since>
        </member>
        <member name="M:Rhino.Geometry.Light.SetAttenuation(System.Double,System.Double,System.Double)">
            <summary>
            Sets the attenuation settings (ignored for "directional" and "ambient" lights).
            <para>attenuation = 1/(a0 + d*a1 + d^2*a2) where d = distance to light.</para>
            </summary>
            <param name="a0">The new constant attenuation divisor term.</param>
            <param name="a1">The new reverse linear attenuation divisor term.</param>
            <param name="a2">The new reverse quadratic attenuation divisor term.</param>
            <since>5.0</since>
        </member>
        <member name="P:Rhino.Geometry.Light.AttenuationVector">
            <summary>
            Gets or Sets the attenuation vector.
            </summary>
            <since>5.7</since>
        </member>
        <member name="M:Rhino.Geometry.Light.GetAttenuation(System.Double)">
            <summary>
            Gets the attenuation settings (ignored for "directional" and "ambient" lights).
            <para>attenuation = 1/(a0 + d*a1 + d^2*a2) where d = distance to light.</para>
            </summary>
            <param name="d">The distance to evaluate.</param>
            <returns>0 if a0 + d*a1 + d^2*a2 &lt;= 0.</returns>
            <since>5.0</since>
        </member>
        <member name="P:Rhino.Geometry.Light.SpotAngleRadians">
            <summary>
            Gets or sets the spot angle in radians.
            <para>Ignored for non-spot lights.</para>
            <para>angle = 0 to pi/2  (0 to 90 degrees).</para>
            </summary>
            <since>5.0</since>
        </member>
        <member name="P:Rhino.Geometry.Light.SpotExponent">
            <summary>
            The spot exponent varies from 0.0 to 128.0 and provides
            an exponential interface for controlling the focus or 
            concentration of a spotlight (like the 
            OpenGL GL_SPOT_EXPONENT parameter).  The spot exponent
            and hot spot parameters are linked; changing one will
            change the other.
            A hot spot setting of 0.0 corresponds to a spot exponent of 128.
            A hot spot setting of 1.0 corresponds to a spot exponent of 0.0.
            </summary>
            <since>5.0</since>
        </member>
        <member name="P:Rhino.Geometry.Light.HotSpot">
            <summary>
            The hot spot setting runs from 0.0 to 1.0 and is used to
            provides a linear interface for controlling the focus or 
            concentration of a spotlight.
            A hot spot setting of 0.0 corresponds to a spot exponent of 128.
            A hot spot setting of 1.0 corresponds to a spot exponent of 0.0.
            </summary>
            <since>5.0</since>
        </member>
        <member name="M:Rhino.Geometry.Light.GetSpotLightRadii(System.Double@,System.Double@)">
            <summary>
            Gets the spot light radii.
            </summary>
            <param name="innerRadius">The inner radius. This out parameter is assigned during this call.</param>
            <param name="outerRadius">The outer radius. This out parameter is assigned during this call.</param>
            <returns>true if operation succeeded; otherwise, false.</returns>
            <since>5.0</since>
        </member>
        <member name="P:Rhino.Geometry.Light.Length">
            <summary>
            Gets or sets the height in linear and rectangular lights.
            <para>(ignored for non-linear/rectangular lights.)</para>
            </summary>
            <since>5.0</since>
        </member>
        <member name="P:Rhino.Geometry.Light.Width">
            <summary>
            Gets or sets the width in linear and rectangular lights.
            <para>(ignored for non-linear/rectangular lights.)</para>
            </summary>
            <since>5.0</since>
        </member>
        <member name="P:Rhino.Geometry.Light.SpotLightShadowIntensity">
            <summary>
            Gets or sets the spot light shadow intensity.
            <para>(ignored for non-spot lights.)</para>
            </summary>
            <since>5.0</since>
        </member>
        <member name="P:Rhino.Geometry.Light.ShadowIntensity">
            <summary>
            Gets or sets the shadow intensity for the light.
            </summary>
            <since>6.0</since>
        </member>
        <member name="P:Rhino.Geometry.Light.Name">
            <summary>
            Gets or sets the spot light name.
            </summary>
            <since>5.0</since>
        </member>
        <member name="P:Rhino.Geometry.Light.Id">
            <summary>Gets the ID of this light.</summary>
            <since>6.0</since>
        </member>
        <member name="F:Rhino.Geometry.Light.ConstantAttenuationVector">
            <summary>
            Vector denoting a constant light attenuation.
            </summary>
        </member>
        <member name="F:Rhino.Geometry.Light.LinearAttenuationVector">
            <summary>
            Vector denoting a linear light attenuation.
            </summary>
        </member>
        <member name="F:Rhino.Geometry.Light.InverseSquaredAttenuationVector">
            <summary>
            Vector denoting an inverse squared light attenuation.
            </summary>
        </member>
        <member name="T:Rhino.Geometry.Light.Attenuation">
            <summary>
            Types of light attenuation available.
            </summary>
            <since>7.0</since>
        </member>
        <member name="F:Rhino.Geometry.Light.Attenuation.Constant">
            <summary>
            Constant light attenuation, meaning no light energy fall-off.
            </summary>
        </member>
        <member name="F:Rhino.Geometry.Light.Attenuation.Linear">
            <summary>
            Linear light attenuation, meaning linear light energy fall-off.
            </summary>
        </member>
        <member name="F:Rhino.Geometry.Light.Attenuation.InverseSquared">
            <summary>
            Inverse squared light attenuation, meaning light energy falls off in spherical order.
            </summary>
        </member>
        <member name="P:Rhino.Geometry.Light.AttenuationType">
            <summary>
            Get the type of attenuation for this light.
            </summary>
            <since>7.0</since>
        </member>
        <member name="T:Rhino.Geometry.Line">
            <summary>
            Represents the value of start and end points in a single line segment.
            </summary>
        </member>
        <member name="P:Rhino.Geometry.Line.From">
            <summary>
            Start point of line segment.
            </summary>
            <since>5.0</since>
        </member>
        <member name="P:Rhino.Geometry.Line.FromX">
            <summary>
            Gets or sets the X coordinate of the line From point.
            </summary>
            <since>5.0</since>
        </member>
        <member name="P:Rhino.Geometry.Line.FromY">
            <summary>
            Gets or sets the Y coordinate of the line From point.
            </summary>
            <since>5.0</since>
        </member>
        <member name="P:Rhino.Geometry.Line.FromZ">
            <summary>
            Gets or sets the Z coordinate of the line From point.
            </summary>
            <since>5.0</since>
        </member>
        <member name="P:Rhino.Geometry.Line.To">
            <summary>
            End point of line segment.
            </summary>
            <since>5.0</since>
        </member>
        <member name="P:Rhino.Geometry.Line.ToX">
            <summary>
            Gets or sets the X coordinate of the line To point.
            </summary>
            <since>5.0</since>
        </member>
        <member name="P:Rhino.Geometry.Line.ToY">
            <summary>
            Gets or sets the Y coordinate of the line To point.
            </summary>
            <since>5.0</since>
        </member>
        <member name="P:Rhino.Geometry.Line.ToZ">
            <summary>
            Gets or sets the Z coordinate of the line To point.
            </summary>
            <since>5.0</since>
        </member>
        <member name="M:Rhino.Geometry.Line.#ctor(Rhino.Geometry.Point3d,Rhino.Geometry.Point3d)">
            <summary>
            Constructs a new line segment between two points.
            </summary>
            <param name="from">Start point of line.</param>
            <param name="to">End point of line.</param>
            <since>5.0</since>
        </member>
        <member name="M:Rhino.Geometry.Line.#ctor(Rhino.Geometry.Point3d,Rhino.Geometry.Vector3d)">
            <summary>
            Constructs a new line segment from start point and span vector.
            </summary>
            <param name="start">Start point of line segment.</param>
            <param name="span">Direction and length of line segment.</param>
            <since>5.0</since>
        </member>
        <member name="M:Rhino.Geometry.Line.#ctor(Rhino.Geometry.Point3d,Rhino.Geometry.Vector3d,System.Double)">
            <summary>
            Constructs a new line segment from start point, direction and length.
            </summary>
            <param name="start">Start point of line segment.</param>
            <param name="direction">Direction of line segment.</param>
            <param name="length">Length of line segment.</param>
            <since>5.0</since>
        </member>
        <member name="M:Rhino.Geometry.Line.#ctor(System.Double,System.Double,System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Constructs a new line segment between two points.
            </summary>
            <param name="x0">The X coordinate of the first point.</param>
            <param name="y0">The Y coordinate of the first point.</param>
            <param name="z0">The Z coordinate of the first point.</param>
            <param name="x1">The X coordinate of the second point.</param>
            <param name="y1">The Y coordinate of the second point.</param>
            <param name="z1">The Z coordinate of the second point.</param>
            <since>5.0</since>
        </member>
        <member name="P:Rhino.Geometry.Line.Unset">
            <summary>
            Gets a line segment which has <see cref="P:Rhino.Geometry.Point3d.Unset"/> end points.
            </summary>
            <since>5.0</since>
        </member>
        <member name="P:Rhino.Geometry.Line.IsValid">
            <summary>
            Gets a value indicating whether or not this line is valid. 
            Valid lines must have valid start and end points, and the points must not be equal.
            </summary>
            <since>5.0</since>
        </member>
        <member name="P:Rhino.Geometry.Line.Length">
            <summary>
            Gets or sets the length of this line segment. 
            Note that a negative length will invert the line segment without 
            making the actual length negative. The line From point will remain fixed 
            when a new Length is set.
            </summary>
            <since>5.0</since>
        </member>
        <member name="P:Rhino.Geometry.Line.Direction">
            <summary>
            Gets the direction of this line segment. 
            The length of the direction vector equals the length of 
            the line segment.
            </summary>
            <example>
            <code source='examples\vbnet\ex_intersectlines.vb' lang='vbnet'/>
            <code source='examples\cs\ex_intersectlines.cs' lang='cs'/>
            <code source='examples\py\ex_intersectlines.py' lang='py'/>
            </example>
            <since>5.0</since>
        </member>
        <member name="P:Rhino.Geometry.Line.UnitTangent">
            <summary>
            Gets the tangent of the line segment. 
            Note that tangent vectors are always unit vectors.
            </summary>
            <value>Sets only the direction of the line, the length is maintained.</value>
            <since>5.0</since>
        </member>
        <member name="P:Rhino.Geometry.Line.BoundingBox">
            <summary>
            Gets the line's 3d axis aligned bounding box.
            </summary>
            <returns>3d bounding box.</returns>
            <since>5.0</since>
        </member>
        <member name="M:Rhino.Geometry.Line.op_Equality(Rhino.Geometry.Line,Rhino.Geometry.Line)">
            <summary>
            Determines whether two lines have the same value.
            </summary>
            <param name="a">A line.</param>
            <param name="b">Another line.</param>
            <returns>true if a has the same coordinates as b; otherwise false.</returns>
            <since>5.0</since>
        </member>
        <member name="M:Rhino.Geometry.Line.op_Inequality(Rhino.Geometry.Line,Rhino.Geometry.Line)">
            <summary>
            Determines whether two lines have different values.
            </summary>
            <param name="a">A line.</param>
            <param name="b">Another line.</param>
            <returns>true if a has any coordinate that distinguishes it from b; otherwise false.</returns>
            <since>5.0</since>
        </member>
        <member name="M:Rhino.Geometry.Line.Equals(System.Object)">
            <summary>
            Determines whether an object is a line that has the same value as this line.
            </summary>
            <param name="obj">An object.</param>
            <returns>true if obj is a Line and has the same coordinates as this; otherwise false.</returns>
        </member>
        <member name="M:Rhino.Geometry.Line.Equals(Rhino.Geometry.Line)">
            <summary>
            Determines whether a line has the same value as this line.
            </summary>
            <param name="other">A line.</param>
            <returns>true if other has the same coordinates as this; otherwise false.</returns>
            <since>5.0</since>
        </member>
        <member name="M:Rhino.Geometry.Line.EpsilonEquals(Rhino.Geometry.Line,System.Double)">
            <summary>
            Check that all values in other are within epsilon of the values in this
            </summary>
            <param name="other"></param>
            <param name="epsilon"></param>
            <returns></returns>
            <since>5.4</since>
        </member>
        <member name="M:Rhino.Geometry.Line.GetHashCode">
            <summary>
            Computes a hash number that represents this line.
            </summary>
            <returns>A number that is not unique to the value of this line.</returns>
        </member>
        <member name="M:Rhino.Geometry.Line.ToString">
            <summary>
            Constructs the string representation of this line, in the form "From,To".
            </summary>
            <returns>A text string.</returns>
        </member>
        <member name="M:Rhino.Geometry.Line.ToString(System.String,System.IFormatProvider)">
            <inheritdoc />
            <since>7.0</since>
        </member>
        <member name="M:Rhino.Geometry.Line.Flip">
            <summary>
            Flip the endpoints of the line segment.
            </summary>
            <since>5.0</since>
        </member>
        <member name="M:Rhino.Geometry.Line.PointAt(System.Double)">
            <summary>
            Evaluates the line at the specified parameter.
            </summary>
            <param name="t">Parameter to evaluate line segment at. Line parameters are normalized parameters.</param>
            <returns>The point at the specified parameter.</returns>
            <example>
            <code source='examples\vbnet\ex_intersectlines.vb' lang='vbnet'/>
            <code source='examples\cs\ex_intersectlines.cs' lang='cs'/>
            <code source='examples\py\ex_intersectlines.py' lang='py'/>
            </example>
            <since>5.0</since>
        </member>
        <member name="M:Rhino.Geometry.Line.ClosestParameter(Rhino.Geometry.Point3d)">
            <summary>
            Finds the parameter on the infinite line segment that is closest to a test point.
            </summary>
            <param name="testPoint">Point to project onto the line.</param>
            <returns>The parameter on the line that is closest to testPoint.</returns>
            <since>5.0</since>
        </member>
        <member name="M:Rhino.Geometry.Line.ClosestPoint(Rhino.Geometry.Point3d,System.Boolean)">
            <summary>
            Finds the point on the (in)finite line segment that is closest to a test point.
            </summary>
            <param name="testPoint">Point to project onto the line.</param>
            <param name="limitToFiniteSegment">If true, the projection is limited to the finite line segment.</param>
            <returns>The point on the (in)finite line that is closest to testPoint.</returns>
            <since>5.0</since>
        </member>
        <member name="M:Rhino.Geometry.Line.DistanceTo(Rhino.Geometry.Point3d,System.Boolean)">
            <summary>
            Compute the shortest distance between this line segment and a test point.
            </summary>
            <param name="testPoint">Point for distance computation.</param>
            <param name="limitToFiniteSegment">If true, the distance is limited to the finite line segment.</param>
            <returns>The shortest distance between this line segment and testPoint.</returns>
            <since>5.0</since>
        </member>
        <member name="M:Rhino.Geometry.Line.MinimumDistanceTo(Rhino.Geometry.Point3d)">
            <summary>
            Finds the shortest distance between this line as a finite segment
            and a test point.
            </summary>
            <param name="testPoint">A point to test.</param>
            <returns>The minimum distance.</returns>
            <since>5.0</since>
        </member>
        <member name="M:Rhino.Geometry.Line.MinimumDistanceTo(Rhino.Geometry.Line)">
            <summary>
            Finds the shortest distance between this line as a finite segment
            and another finite segment.
            </summary>
            <param name="testLine">A line to test.</param>
            <returns>The minimum distance.</returns>
            <since>5.0</since>
        </member>
        <member name="M:Rhino.Geometry.Line.MaximumDistanceTo(Rhino.Geometry.Point3d)">
            <summary>
            Finds the largest distance between this line as a finite segment
            and a test point.
            </summary>
            <param name="testPoint">A point to test.</param>
            <returns>The maximum distance.</returns>
            <since>5.0</since>
        </member>
        <member name="M:Rhino.Geometry.Line.MaximumDistanceTo(Rhino.Geometry.Line)">
            <summary>
            Finds the largest distance between this line as a finite segment
            and another finite segment.
            </summary>
            <param name="testLine">A line to test.</param>
            <returns>The maximum distance.</returns>
            <since>5.0</since>
        </member>
        <member name="M:Rhino.Geometry.Line.Transform(Rhino.Geometry.Transform)">
            <summary>
            Transform the line using a Transformation matrix.
            </summary>
            <param name="xform">Transform to apply to this line.</param>
            <returns>true on success, false on failure.</returns>
            <since>5.0</since>
        </member>
        <member name="M:Rhino.Geometry.Line.ToNurbsCurve">
            <summary>
            Constructs a nurbs curve representation of this line. 
            This amounts to the same as calling NurbsCurve.CreateFromLine().
            </summary>
            <returns>A nurbs curve representation of this line or null if no such representation could be made.</returns>
            <since>5.0</since>
        </member>
        <member name="M:Rhino.Geometry.Line.PointAtLength(System.Double)">
            <summary>
            Computes a point located at a specific metric distance from the line origin (<see cref="P:Rhino.Geometry.Line.From"/>).
            <para>If line start and end coincide, then the start point is always returned.</para>
            </summary>
            <param name="distance">A positive, 0, or a negative value that will be the distance from <see cref="P:Rhino.Geometry.Line.From"/>.</param>
            <returns>The newly found point.</returns>
            <since>6.0</since>
        </member>
        <member name="M:Rhino.Geometry.Line.Extend(System.Double,System.Double)">
            <summary>
            Extend the line by custom distances on both sides.
            </summary>
            <param name="startLength">
            Distance to extend the line at the start point. 
            Positive distance result in longer lines.
            </param>
            <param name="endLength">
            Distance to extend the line at the end point. 
            Positive distance result in longer lines.
            </param>
            <returns>true on success, false on failure.</returns>
            <since>5.0</since>
        </member>
        <member name="M:Rhino.Geometry.Line.ExtendThroughBox(Rhino.Geometry.BoundingBox)">
            <summary>
            Ensure the line extends all the way through a box. 
            Note, this does not result in the shortest possible line 
            that overlaps the box.
            </summary>
            <param name="box">Box to extend through.</param>
            <returns>true on success, false on failure.</returns>
            <since>5.0</since>
        </member>
        <member name="M:Rhino.Geometry.Line.ExtendThroughBox(Rhino.Geometry.BoundingBox,System.Double)">
            <summary>
            Ensure the line extends all the way through a box. 
            Note, this does not result in the shortest possible line that overlaps the box.
            </summary>
            <param name="box">Box to extend through.</param>
            <param name="additionalLength">Additional length to append at both sides of the line.</param>
            <returns>true on success, false on failure.</returns>
            <since>5.0</since>
        </member>
        <member name="M:Rhino.Geometry.Line.ExtendThroughBox(Rhino.Geometry.Box)">
            <summary>
            Ensure the line extends all the way through a box. 
            Note, this does not result in the shortest possible line that overlaps the box.
            </summary>
            <param name="box">Box to extend through.</param>
            <returns>true on success, false on failure.</returns>
            <since>5.0</since>
        </member>
        <member name="M:Rhino.Geometry.Line.ExtendThroughBox(Rhino.Geometry.Box,System.Double)">
            <summary>
            Ensure the line extends all the way through a box. 
            Note, this does not result in the shortest possible line that overlaps the box.
            </summary>
            <param name="box">Box to extend through.</param>
            <param name="additionalLength">Additional length to append at both sides of the line.</param>
            <returns>true on success, false on failure.</returns>
            <since>5.0</since>
        </member>
        <member name="M:Rhino.Geometry.Line.TryGetPlane(Rhino.Geometry.Plane@)">
            <summary>
            Gets a plane that contains the line. The origin of the plane is at the start of the line.
            If possible, a plane parallel to the world XY, YZ, or ZX plane is returned.
            </summary>
            <param name="plane">If the return value is true, the plane out parameter is assigned during this call.</param>
            <returns>true on success.</returns>
            <since>5.0</since>
        </member>
        <member name="T:Rhino.Geometry.Triangle3d">
            <summary>
            Represents a triangle, modeled using double three points that use double-precision floating point numbers.
            </summary>
        </member>
        <member name="M:Rhino.Geometry.Triangle3d.#ctor(Rhino.Geometry.Point3d,Rhino.Geometry.Point3d,Rhino.Geometry.Point3d)">
            <summary>
            Instantiates a new triangle.
            </summary>
            <param name="a">First point.</param>
            <param name="b">Second point.</param>
            <param name="c">Third point.</param>
            <since>7.1</since>
        </member>
        <member name="P:Rhino.Geometry.Triangle3d.A">
            <summary>
            Gets the first triangle corner.
            </summary>
            <since>7.1</since>
        </member>
        <member name="P:Rhino.Geometry.Triangle3d.B">
            <summary>
            Gets the second triangle corner.
            </summary>
            <since>7.1</since>
        </member>
        <member name="P:Rhino.Geometry.Triangle3d.C">
            <summary>
            Gets the third triangle corner.
            </summary>
            <since>7.1</since>
        </member>
        <member name="P:Rhino.Geometry.Triangle3d.Circumcircle">
            <summary>
            Gets the circumcircle of this triangle.
            </summary>
            <since>7.1</since>
        </member>
        <member name="P:Rhino.Geometry.Triangle3d.BoundingBox">
            <summary>
            Gets the bounding box of this triangle.
            </summary>
            <since>7.1</since>
        </member>
        <member name="P:Rhino.Geometry.Triangle3d.AngleA">
            <summary>
            Gets the angle at the A corner.
            </summary>
            <since>7.1</since>
        </member>
        <member name="P:Rhino.Geometry.Triangle3d.AngleB">
            <summary>
            Gets the angle at the B corner.
            </summary>
            <since>7.1</since>
        </member>
        <member name="P:Rhino.Geometry.Triangle3d.AngleC">
            <summary>
            Gets the angle at the C corner.
            </summary>
            <since>7.1</since>
        </member>
        <member name="P:Rhino.Geometry.Triangle3d.AB">
            <summary>
            Gets the triangle edge connecting the A and B corners.
            </summary>
            <since>7.1</since>
        </member>
        <member name="P:Rhino.Geometry.Triangle3d.BC">
            <summary>
            Gets the triangle edge connecting the B and C corners.
            </summary>
            <since>7.1</since>
        </member>
        <member name="P:Rhino.Geometry.Triangle3d.CA">
            <summary>
            Gets the triangle edge connecting the C and A corners.
            </summary>
            <since>7.1</since>
        </member>
        <member name="P:Rhino.Geometry.Triangle3d.MedianA">
            <summary>
            Gets the median line starting at corner A.
            </summary>
            <since>7.1</since>
        </member>
        <member name="P:Rhino.Geometry.Triangle3d.MedianB">
            <summary>
            Gets the median line starting at corner B.
            </summary>
            <since>7.1</since>
        </member>
        <member name="P:Rhino.Geometry.Triangle3d.MedianC">
            <summary>
            Gets the median line starting at corner C.
            </summary>
            <since>7.1</since>
        </member>
        <member name="P:Rhino.Geometry.Triangle3d.AltitudeA">
            <summary>
            Gets the altitude line starting at corner A.
            </summary>
            <since>7.1</since>
        </member>
        <member name="P:Rhino.Geometry.Triangle3d.AltitudeB">
            <summary>
            Gets the altitude line starting at corner B.
            </summary>
            <since>7.1</since>
        </member>
        <member name="P:Rhino.Geometry.Triangle3d.AltitudeC">
            <summary>
            Gets the altitude line starting at corner C.
            </summary>
            <since>7.1</since>
        </member>
        <member name="P:Rhino.Geometry.Triangle3d.PerpendicularAB">
            <summary>
            Gets the perpendicular bisector for edge AB.
            </summary>
            <since>7.1</since>
        </member>
        <member name="P:Rhino.Geometry.Triangle3d.PerpendicularBC">
            <summary>
            Gets the perpendicular bisector for edge BC.
            </summary>
            <since>7.1</since>
        </member>
        <member name="P:Rhino.Geometry.Triangle3d.PerpendicularCA">
            <summary>
            Gets the perpendicular bisector for edge CA.
            </summary>
            <since>7.1</since>
        </member>
        <member name="P:Rhino.Geometry.Triangle3d.Perimeter">
            <summary>
            Gets the perimeter of this triangle. This is the sum of the lengths of all edges.
            </summary>
            <since>7.1</since>
        </member>
        <member name="P:Rhino.Geometry.Triangle3d.Area">
            <summary>
            Gets the area inside this triangle.
            </summary>
            <since>7.1</since>
        </member>
        <member name="P:Rhino.Geometry.Triangle3d.AreaCenter">
            <summary>
            Gets the triangle area centroid.
            </summary>
            <since>7.1</since>
        </member>
        <member name="P:Rhino.Geometry.Triangle3d.Orthocenter">
            <summary>
            Gets the triangle orthocenter.
            </summary>
            <since>7.1</since>
        </member>
        <member name="P:Rhino.Geometry.Triangle3d.Circumcenter">
            <summary>
            Gets the triangle circumcenter.
            </summary>
            <since>7.1</since>
        </member>
        <member name="M:Rhino.Geometry.Triangle3d.TripleLineIntersect(Rhino.Geometry.Line,Rhino.Geometry.Line,Rhino.Geometry.Line)">
            <summary>
            Compute the average point of three lines intersecting.
            This method assumes the lines all intersect at a single point,
            though performs additional work to reduce the error.
            </summary>
        </member>
        <member name="M:Rhino.Geometry.Triangle3d.Transform(Rhino.Geometry.Transform)">
            <summary>
            Transform this triangle.
            </summary>
            <since>7.1</since>
        </member>
        <member name="M:Rhino.Geometry.Triangle3d.ToPolyline">
            <summary>
            Create a polyline from this triangle.
            </summary>
            <since>7.1</since>
        </member>
        <member name="M:Rhino.Geometry.Triangle3d.ToMesh">
            <summary>
            Create a mesh from this triangle.
            </summary>
            <since>7.1</since>
        </member>
        <member name="M:Rhino.Geometry.Triangle3d.WithA(Rhino.Geometry.Point3d)">
            <summary>
            Replace the A corner.
            </summary>
            <since>7.1</since>
        </member>
        <member name="M:Rhino.Geometry.Triangle3d.WithB(Rhino.Geometry.Point3d)">
            <summary>
            Replace the B corner.
            </summary>
            <since>7.1</since>
        </member>
        <member name="M:Rhino.Geometry.Triangle3d.WithC(Rhino.Geometry.Point3d)">
            <summary>
            Replace the C corner.
            </summary>
            <since>7.1</since>
        </member>
        <member name="M:Rhino.Geometry.Triangle3d.PointAtBarycentricCoords(Rhino.Geometry.Point2d)">
            <summary>
            Gets a point within this triangle using barycentric coordinates.
            </summary>
            <param name="coords">Barycentric mass for vertex B and C. A is valued as (1 - B - C).</param>
            <returns>Point at barycentric mass.</returns>
            <since>7.1</since>
        </member>
        <member name="M:Rhino.Geometry.Triangle3d.BarycentricCoordsAt(Rhino.Geometry.Point3d,System.Double@)">
            <summary>
            Gets the projection of a point onto the barycentric coordinates.
            </summary>
            <param name="point">Point to project.</param>
            <param name="signedHeight">A value indicating the height of the intersection in world units,
            negative if the point is situated under the triangle.</param>
            <returns>The computed barycentric mass values relating to B and C for point.</returns>
            <since>7.1</since>
        </member>
        <member name="M:Rhino.Geometry.Triangle3d.PointAlongBoundary(System.Double)">
            <summary>
            Gets the point along the boundary of the triangle.
            The triangle boundary has a domain [0, 3] where each
            subsequent unit domain maps to a different edge.
            </summary>
            <param name="t">Parameter along boundary.</param>
            <since>7.1</since>
        </member>
        <member name="M:Rhino.Geometry.Triangle3d.ClosestParameterOnBoundary(Rhino.Geometry.Point3d)">
            <summary>
            Gets the parameter on the triangle boundary closest to a test point.
            </summary>
            <since>7.1</since>
        </member>
        <member name="M:Rhino.Geometry.Triangle3d.ClosestPointOnBoundary(Rhino.Geometry.Point3d)">
            <summary>
            Gets the point on the triangle boundary closest to a test point.
            </summary>
            <since>7.1</since>
        </member>
        <member name="M:Rhino.Geometry.Triangle3d.PointOnInterior(System.Double,System.Double)">
            <summary>
            Gets the point on the triangle using the AB and AC primary axes.
            </summary>
            <param name="u">Parameter along the AB edge.</param>
            <param name="v">Parameter along the AC edge.</param>
            <returns>Point at parameter.</returns>
            <since>7.1</since>
        </member>
        <member name="T:Rhino.Geometry.LineCurve">
            <summary>
            Represents a linear curve.
            </summary>
        </member>
        <member name="M:Rhino.Geometry.LineCurve.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Rhino.Geometry.LineCurve"/> class.
            </summary>
            <since>5.0</since>
        </member>
        <member name="M:Rhino.Geometry.LineCurve.#ctor(Rhino.Geometry.LineCurve)">
            <summary>
            Initializes a new instance of the <see cref="T:Rhino.Geometry.LineCurve"/> class, by
            copying values from another linear curve.
            </summary>
            <since>5.0</since>
        </member>
        <member name="M:Rhino.Geometry.LineCurve.#ctor(Rhino.Geometry.Point2d,Rhino.Geometry.Point2d)">
            <summary>
            Initializes a new instance of the <see cref="T:Rhino.Geometry.LineCurve"/> class, by
            setting start and end point from two <see cref="T:Rhino.Geometry.Point2d">2D points</see>.</summary>
            <param name="from">A start point.</param>
            <param name="to">An end point.</param>
            <since>5.0</since>
        </member>
        <member name="M:Rhino.Geometry.LineCurve.#ctor(Rhino.Geometry.Point3d,Rhino.Geometry.Point3d)">
            <example>
            <code source='examples\vbnet\ex_addtruncatedcone.vb' lang='vbnet'/>
            <code source='examples\cs\ex_addtruncatedcone.cs' lang='cs'/>
            <code source='examples\py\ex_addtruncatedcone.py' lang='py'/>
            </example>
            <summary>
            Initializes a new instance of the <see cref="T:Rhino.Geometry.LineCurve"/> class, by
            setting start and end point from two <see cref="T:Rhino.Geometry.Point3d">3D points</see>.</summary>
            <param name="from">A start point.</param>
            <param name="to">An end point.</param>
            <since>5.0</since>
        </member>
        <member name="M:Rhino.Geometry.LineCurve.#ctor(Rhino.Geometry.Line)">
            <summary>
            Initializes a new instance of the <see cref="T:Rhino.Geometry.LineCurve"/> class, by
            retrieving its value from a <see cref="P:Rhino.Geometry.LineCurve.Line">line</see>.
            </summary>
            <param name="line">A line to use as model.</param>
            <since>5.0</since>
        </member>
        <member name="M:Rhino.Geometry.LineCurve.#ctor(Rhino.Geometry.Line,System.Double,System.Double)">
            <summary>
            Initializes a new instance of the <see cref="T:Rhino.Geometry.LineCurve"/> class, by
            retrieving its value from a <see cref="P:Rhino.Geometry.LineCurve.Line">line</see> and setting the domain.
            </summary>
            <param name="line">A line to use as model.</param>
            <param name="t0">The new domain start.</param>
            <param name="t1">The new domain end.</param>
            <since>5.0</since>
        </member>
        <member name="M:Rhino.Geometry.LineCurve.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Protected constructor used in serialization.
            </summary>
            <param name="info">Serialization data.</param>
            <param name="context">Serialization stream.</param>
        </member>
        <member name="P:Rhino.Geometry.LineCurve.Line">
            <summary>
            Gets or sets the Line value inside this curve.
            </summary>
            <since>5.0</since>
        </member>
        <member name="T:Rhino.Geometry.Matrix">
            <summary>
            Represents an arbitrarily sized matrix of <see cref="T:System.Double">double</see>-precision
            floating point numbers. If you are working with a 4x4 matrix, then you may want
            to use the <see cref="T:Rhino.Geometry.Transform"/> class instead.
            </summary>
        </member>
        <member name="M:Rhino.Geometry.Matrix.#ctor(System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the matrix.
            </summary>
            <param name="rowCount">A positive integer, or 0, for the number of rows.</param>
            <param name="columnCount">A positive integer, or 0, for the number of columns.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">If either rowCount, or columnCount
            or both are negative.</exception>
            <since>5.0</since>
        </member>
        <member name="M:Rhino.Geometry.Matrix.#ctor(Rhino.Geometry.Transform)">
            <summary>
            Initializes a new instance of the matrix based on a 4x4 matrix <see cref="T:Rhino.Geometry.Transform"/>.
            </summary>
            <param name="xform">A 4x4 matrix to copy from.</param>
            <since>5.0</since>
        </member>
        <member name="M:Rhino.Geometry.Matrix.Duplicate">
            <summary>
            Create a duplicate of this matrix.
            </summary>
            <returns>An exact duplicate of this matrix.</returns>
            <since>5.1</since>
        </member>
        <member name="M:Rhino.Geometry.Matrix.Finalize">
            <summary>
            Passively reclaims unmanaged resources when the class user did not explicitly call Dispose().
            </summary>
        </member>
        <member name="M:Rhino.Geometry.Matrix.Dispose">
            <summary>
            Actively reclaims unmanaged resources that this instance uses.
            </summary>
            <since>5.0</since>
        </member>
        <member name="M:Rhino.Geometry.Matrix.Dispose(System.Boolean)">
            <summary>
            For derived class implementers.
            <para>This method is called with argument true when class user calls Dispose(), while with argument false when
            the Garbage Collector invokes the finalizer, or Finalize() method.</para>
            <para>You must reclaim all used unmanaged resources in both cases, and can use this chance to call Dispose on disposable fields if the argument is true.</para>
            <para>Also, you must call the base virtual method within your overriding method.</para>
            </summary>
            <param name="disposing">true if the call comes from the Dispose() method; false if it comes from the Garbage Collector finalizer.</param>
        </member>
        <member name="P:Rhino.Geometry.Matrix.Item(System.Int32,System.Int32)">
            <summary>
            Gets or sets the matrix value at the given row and column indices.
            </summary>
            <param name="row">Index of row to access.</param>
            <param name="column">Index of column to access.</param>
            <returns>The value at [row, column].</returns>
            <value>The new value at [row, column].</value>
        </member>
        <member name="P:Rhino.Geometry.Matrix.IsValid">
            <summary>
            Gets a value indicating whether this matrix is valid.
            </summary>
            <since>5.0</since>
        </member>
        <member name="P:Rhino.Geometry.Matrix.IsSquare">
            <summary>
            Gets a value indicating whether this matrix has the same number of rows
            and columns. 0x0 matrices are not considered square.
            </summary>
            <since>5.0</since>
        </member>
        <member name="P:Rhino.Geometry.Matrix.RowCount">
            <summary>
            Gets the amount of rows.
            </summary>
            <since>5.0</since>
        </member>
        <member name="P:Rhino.Geometry.Matrix.ColumnCount">
            <summary>
            Gets the amount of columns.
            </summary>
            <since>5.0</since>
        </member>
        <member name="M:Rhino.Geometry.Matrix.Zero">
            <summary>
            Sets all values inside the matrix to zero.
            </summary>
            <since>5.0</since>
        </member>
        <member name="M:Rhino.Geometry.Matrix.SetDiagonal(System.Double)">
            <summary>
            Sets diagonal value and zeros off all non-diagonal values.
            </summary>
            <param name="d">The new diagonal value.</param>
            <since>5.0</since>
        </member>
        <member name="M:Rhino.Geometry.Matrix.Transpose">
            <summary>
            Modifies this matrix to be its transpose.
            <para>This is like swapping rows with columns.</para>
            <para>http://en.wikipedia.org/wiki/Transpose</para>
            </summary>
            <returns>true if operation succeeded; otherwise false.</returns>
            <since>5.0</since>
        </member>
        <member name="M:Rhino.Geometry.Matrix.SwapRows(System.Int32,System.Int32)">
            <summary>
            Exchanges two rows.
            </summary>
            <param name="rowA">A first row.</param>
            <param name="rowB">Another row.</param>
            <returns>true if operation succeeded; otherwise false.</returns>
            <since>5.0</since>
        </member>
        <member name="M:Rhino.Geometry.Matrix.SwapColumns(System.Int32,System.Int32)">
            <summary>
            Exchanges two columns.
            </summary>
            <param name="columnA">A first column.</param>
            <param name="columnB">Another column.</param>
            <returns>true if operation succeeded; otherwise false.</returns>
            <since>5.0</since>
        </member>
        <member name="M:Rhino.Geometry.Matrix.Invert(System.Double)">
            <summary>
            Modifies this matrix to become its own inverse.
            <para>Matrix might be non-invertible (singular) and the return value will be false.</para>
            </summary>
            <param name="zeroTolerance">The admitted tolerance for 0.</param>
            <returns>true if operation succeeded; otherwise false.</returns>
            <since>5.0</since>
        </member>
        <member name="M:Rhino.Geometry.Matrix.op_Multiply(Rhino.Geometry.Matrix,Rhino.Geometry.Matrix)">
            <summary>
            Multiplies two matrices and returns a new product matrix.
            </summary>
            <param name="a">A first matrix to use in calculation.</param>
            <param name="b">Another matrix to use in calculation.</param>
            <returns>The product matrix.</returns>
            <exception cref="T:System.ArgumentException">
            When a.ColumnCount != b.RowCount.
            </exception>
            <since>5.0</since>
        </member>
        <member name="M:Rhino.Geometry.Matrix.op_Addition(Rhino.Geometry.Matrix,Rhino.Geometry.Matrix)">
            <summary>
            Adds two matrices and returns a new sum matrix.
            </summary>
            <param name="a">A first matrix to use in calculation.</param>
            <param name="b">Another matrix to use in calculation.</param>
            <returns>The sum matrix.</returns>
            <exception cref="T:System.ArgumentException">
            When the two matrices are not the same size.
            </exception>
        </member>
        <member name="M:Rhino.Geometry.Matrix.Scale(System.Double)">
            <summary>
            Modifies the current matrix by multiplying its values by a number.
            </summary>
            <param name="s">A scale factor.</param>
            <since>5.0</since>
        </member>
        <member name="M:Rhino.Geometry.Matrix.RowReduce(System.Double,System.Double@,System.Double@)">
            <summary>Row reduces a matrix to calculate rank and determinant.</summary>
            <param name="zeroTolerance">
            (&gt;=0.0) zero tolerance for pivot test.  If a the absolute value of
            a pivot is &lt;= zeroTolerance, then the pivot is assumed to be zero.
            </param>
            <param name="determinant">value of determinant is returned here.</param>
            <param name="pivot">value of the smallest pivot is returned here.</param>
            <returns>Rank of the matrix.</returns>
            <remarks>
            The matrix itself is row reduced so that the result is an upper
            triangular matrix with 1's on the diagonal.
            </remarks>
            <since>5.0</since>
        </member>
        <member name="M:Rhino.Geometry.Matrix.RowReduce(System.Double,System.Double[],System.Double@)">
            <summary>
            Row reduces a matrix as the first step in solving M*X=b where
            b is a column of values.
            </summary>
            <param name="zeroTolerance">
            (&gt;=0.0) zero tolerance for pivot test. If the absolute value of a pivot
            is &lt;= zero_tolerance, then the pivot is assumed to be zero.
            </param>
            <param name="b">an array of RowCount values that is row reduced with the matrix.
            </param>
            <param name="pivot">the value of the smallest pivot is returned here.</param>
            <returns>Rank of the matrix.</returns>
            <remarks>
            The matrix itself is row reduced so that the result is an upper
            triangular matrix with 1's on the diagonal.
            </remarks>
            <since>5.0</since>
        </member>
        <member name="M:Rhino.Geometry.Matrix.RowReduce(System.Double,Rhino.Geometry.Point3d[],System.Double@)">
            <summary>
            Row reduces a matrix as the first step in solving M*X=b where
            b is a column of 3d points.
            </summary>
            <param name="zeroTolerance">
            (&gt;=0.0) zero tolerance for pivot test. If the absolute value of a pivot
            is &lt;= zero_tolerance, then the pivot is assumed to be zero.
            </param>
            <param name="b">An array of RowCount 3d points that is row reduced with the matrix.
            </param>
            <param name="pivot">The value of the smallest pivot is returned here.</param>
            <returns>Rank of the matrix.</returns>
            <remarks>
            The matrix itself is row reduced so that the result is an upper
            triangular matrix with 1's on the diagonal.
            </remarks>
            <since>5.0</since>
        </member>
        <member name="M:Rhino.Geometry.Matrix.BackSolve(System.Double,System.Double[])">
            <summary>
            Solves M*x=b where M is upper triangular with a unit diagonal and
            b is a column of values.
            </summary>
            <param name="zeroTolerance">(&gt;=0.0) used to test for "zero" values in b
            in under determined systems of equations.</param>
            <param name="b">The values in B[RowCount],...,B[B.Length-1] are tested to
            make sure they are within "zeroTolerance".</param>
            <returns>
            Array of length ColumnCount on success. null on error.
            </returns>
            <since>5.0</since>
        </member>
        <member name="M:Rhino.Geometry.Matrix.BackSolvePoints(System.Double,Rhino.Geometry.Point3d[])">
            <summary>
            Solves M*x=b where M is upper triangular with a unit diagonal and
            b is a column of 3d points.
            </summary>
            <param name="zeroTolerance">(&gt;=0.0) used to test for "zero" values in b
            in under determined systems of equations.</param>
            <param name="b">The values in B[RowCount],...,B[B.Length-1] are tested to
            make sure they are "zero".</param>
            <returns>
            Array of length ColumnCount on success. null on error.
            </returns>
            <since>5.0</since>
        </member>
        <member name="P:Rhino.Geometry.Matrix.IsRowOrthogonal">
            <summary>
            Gets a value indicating whether the matrix is row orthogonal.
            </summary>
            <since>5.0</since>
        </member>
        <member name="P:Rhino.Geometry.Matrix.IsColumnOrthogonal">
            <summary>
            Gets a value indicating whether the matrix is column orthogonal.
            </summary>
            <since>5.0</since>
        </member>
        <member name="P:Rhino.Geometry.Matrix.IsRowOrthoNormal">
            <summary>
            Gets a value indicating whether the matrix is row orthonormal.
            </summary>
            <since>5.0</since>
        </member>
        <member name="P:Rhino.Geometry.Matrix.IsColumnOrthoNormal">
            <summary>
            Gets a value indicating whether the matrix is column orthonormal.
            </summary>
            <since>5.0</since>
        </member>
        <member name="M:Rhino.Geometry.Matrix.GetHashCode">
            <summary>
            Gets the hash code for this matrix. The hash code will change 
            when the matrix changes so you cannot change matrices while they are stored in 
            hash tables.
            </summary>
            <returns>Hash code.</returns>
        </member>
        <member name="T:Rhino.Geometry.MeshingParameterStyle">
            <summary>
            Type of Mesh Parameters used by the RhinoDoc for meshing objects
            </summary>
            <since>5.1</since>
        </member>
        <member name="F:Rhino.Geometry.MeshingParameterStyle.None">
            <summary>No style</summary>
        </member>
        <member name="F:Rhino.Geometry.MeshingParameterStyle.Fast">
            <summary></summary>
        </member>
        <member name="F:Rhino.Geometry.MeshingParameterStyle.Quality">
            <summary></summary>
        </member>
        <member name="F:Rhino.Geometry.MeshingParameterStyle.Custom">
            <summary></summary>
        </member>
        <member name="F:Rhino.Geometry.MeshingParameterStyle.PerObject">
            <summary></summary>
        </member>
        <member name="T:Rhino.Geometry.MeshingParameterTextureRange">
            <summary>
            Defines how to pack render/meshes textures.
            </summary>
            <since>6.0</since>
        </member>
        <member name="F:Rhino.Geometry.MeshingParameterTextureRange.Unset">
            <summary>This value is not set.</summary>
        </member>
        <member name="F:Rhino.Geometry.MeshingParameterTextureRange.UnpackedUnscaledNormalized">
            <summary>
            Each face has a normalized texture range [0,1]x[0,1].
            The normalized coordinate is calculated using the
            entire surface domain.  For meshes of trimmed
            surfaces when the active area is a small subset of
            the entire surface, there will be large regions of
            unused texture space in [0,1]x[0,1].  When the 3d region
            being meshed is far from being square-ish, there will be
            a substantial amount of distortion mapping [0,1]x[0,1]
            texture space to the 3d mesh.
            </summary>
        </member>
        <member name="F:Rhino.Geometry.MeshingParameterTextureRange.PackedScaledNormalized">
            <summary>
            Each face is assigned a texture range that is a 
            sub-rectangle of [0,1]x[0,1].  The sub-rectangles are 
            mutually disjoint and packed into [0,1]x[0,1]
            in a way that minimizes distortion and maximizes the
            coverage of [0,1]x[0,1].
            When the surface or surfaces being meshed are trimmed,
            this option takes into account only the region of the
            base surface the mesh covers and uses as much of 
            [0,1]x[0,1] as possible. (default)
            </summary>
        </member>
        <member name="T:Rhino.Geometry.SubDDisplayParameters">
            <summary>
            A collection of parameters that are passed to functions that calculate a various representations of SubD objects.
            </summary>
            <since>7.18</since>
        </member>
        <member name="M:Rhino.Geometry.SubDDisplayParameters.#ctor">
            <summary>
            Initializes a new instance with default values.
            </summary>
            <since>7.18</since>
        </member>
        <member name="M:Rhino.Geometry.SubDDisplayParameters.Finalize">
            <summary>
            Passively reclaims unmanaged resources when the class user did not explicitly call Dispose().
            </summary>
        </member>
        <member name="M:Rhino.Geometry.SubDDisplayParameters.Dispose">
            <summary>
            Actively reclaims unmanaged resources that this instance uses.
            </summary>
            <since>7.18</since>
        </member>
        <member name="M:Rhino.Geometry.SubDDisplayParameters.Dispose(System.Boolean)">
            <summary>
            For derived class implementers.
            <para>This method is called with argument true when class user calls Dispose(), while with argument false when
            the Garbage Collector invokes the finalizer, or Finalize() method.</para>
            <para>You must reclaim all used unmanaged resources in both cases, and can use this chance to call Dispose on disposable fields if the argument is true.</para>
            <para>Also, you must call the base virtual method within your overriding method.</para>
            </summary>
            <param name="disposing">true if the call comes from the Dispose() method; false if it comes from the Garbage Collector finalizer.</param>
        </member>
        <member name="T:Rhino.Geometry.SubDDisplayParameters.Density">
            <summary>
            Density enumeration
            </summary>
            <since>7.18</since>
        </member>
        <member name="F:Rhino.Geometry.SubDDisplayParameters.Density.UnsetDensity">
            <summary>
            Indicates the SubD display mesh density has not be set.
            </summary>
        </member>
        <member name="F:Rhino.Geometry.SubDDisplayParameters.Density.MinimumUserInterfaceDensity">
            <summary>
             The minimum SubD display density that can be se in Rhino user interface is ExtraCoarseDensity (1).
            </summary>
        </member>
        <member name="F:Rhino.Geometry.SubDDisplayParameters.Density.MaximumUserInterfaceDensity">
            <summary>
            The maximum SubD display density that can be se in Rhino user interface is ExtraFineDensity (5).
            </summary>
        </member>
        <member name="F:Rhino.Geometry.SubDDisplayParameters.Density.MinimumAdaptiveDensity">
            <summary>
             SubD display density values &lt;= MinimumAdaptiveDensity will never be adaptively reduced.
             SubD display density values &gt; MinimumAdaptiveDensity may be adaptively reduced to a value &gt;= MinimumAdaptiveDensity.
            </summary>
        </member>
        <member name="F:Rhino.Geometry.SubDDisplayParameters.Density.MinimumDensity">
            <summary>
            Each SubD quad will generate 1 display mesh quads in a 1x1 grid.
            This density can only be used with SubDs where every face is a quad.
            User interface code never returns this density. 
            </summary>
        </member>
        <member name="F:Rhino.Geometry.SubDDisplayParameters.Density.ExtraCoarseDensity">
            <summary>
            When interpreted as an absolute SubD display density, each SubD quad will generate 
            4 display mesh quads in a 2x2 grid and each SubD N-gon will generate N display mesh quads.
            Adaptive reductions do not apply to this density.
            This is the minimum SubD display density.
            </summary>
        </member>
        <member name="F:Rhino.Geometry.SubDDisplayParameters.Density.CoarseDensity">
            <summary>
            When interpreted as an absolute SubD display density, each SubD quad will generate 
            16 display mesh quads in a 4x4 grid and each SubD N-gon will generate N*4 display mesh quads.
            Adaptive reductions do not apply to this density.
            </summary>
        </member>
        <member name="F:Rhino.Geometry.SubDDisplayParameters.Density.MediumDensity">
            <summary>
            When interpreted as an absolute SubD display density, each SubD quad will generate 
            64 display mesh quads in an 8x8 grid and each SubD N-gon will generate N*8 display mesh quads.
            When a SubD has more than 8000 faces, adaptive MediumDensity is reduced to CoarseDensity.
            </summary>
        </member>
        <member name="F:Rhino.Geometry.SubDDisplayParameters.Density.FineDensity">
            <summary>
            When interpreted as an absolute SubD display density, each SubD quad will generate 
            256 display mesh quads in a 16x16 grid and each SubD N-gon will generate N*16 display mesh quads.
            When a SubD has more than 2000 faces, adaptive FineDensity is reduced to adaptive MediumDensity.
            </summary>
        </member>
        <member name="F:Rhino.Geometry.SubDDisplayParameters.Density.DefaultDensity">
            <summary>
            When interpreted as an absolute SubD display density, each SubD quad will generate 
            256 display mesh quads in a 16x16 grid and each SubD N-gon will generate N*16 display mesh quads.
            When a SubD has more than 2000 faces, adaptive DefaultDensity is reduced to adaptive MediumDensity.
            This is the default value for creating mesh approximations of SubD surface.  
            When treadted as an adaptive setting, it produces acceptable results for most SubDs.
            </summary>
        </member>
        <member name="F:Rhino.Geometry.SubDDisplayParameters.Density.ExtraFineDensity">
            <summary>
            When interpreted as an absolute SubD display density, each SubD quad will generate 
            1024 display mesh quads in a 32x32 grid and each SubD N-gon will generate N*32 display mesh quads.
            When a SubD has more than 500 faces, adaptive ExtraFineDensity is reduced to adaptive FineDensity.
            </summary>
        </member>
        <member name="F:Rhino.Geometry.SubDDisplayParameters.Density.MaximumDensity">
             <summary>
             When interpreted as an absolute SubD display density, each SubD quad will generate 
             4096 display mesh quads in a 64x64 grid and each SubD N-gon will generate N*64 display mesh quads.
             SubDDisplayParameters.AdaptiveDensity() determines if the subd display density is 
             treated adaptively or absolutely.
             This value creates ridiculously dense display meshes and should generally be avoided. 
             No Rhino user interface will create this value.
            </summary>
        </member>
        <member name="M:Rhino.Geometry.SubDDisplayParameters.ClampDisplayDensity(System.UInt32)">
            <summary>
            Limits display density to a value useful in user interface code. 
            </summary>
            <param name="displayDensity"></param>
            <returns>The clamped value.</returns>
            <since>7.18</since>
        </member>
        <member name="P:Rhino.Geometry.SubDDisplayParameters.AdaptiveDisplayMeshQuadMaximum">
            <summary>
            When the SubD display density is adaptive (default), AdaptiveMeshQuadMaximum
            specifies the approximate number of display mesh quads to permit before
            reducing the SubD display mesh density. 
            </summary>
            <since>7.18</since>
        </member>
        <member name="M:Rhino.Geometry.SubDDisplayParameters.Empty">
            <summary>
            Get an empty SubDDisplayParameters.
            </summary>
            <returns>The SubD display parameters.</returns>
            <since>7.18</since>
        </member>
        <member name="M:Rhino.Geometry.SubDDisplayParameters.ExtraCoarse">
            <summary>
            Parameters for an extra course limit surface display mesh.
            SubD display density = adaptive SubDDisplayParameters.Density.ExtraCoarseDensity.
            </summary>
            <returns>The SubD display parameters.</returns>
            <since>7.18</since>
        </member>
        <member name="M:Rhino.Geometry.SubDDisplayParameters.Coarse">
            <summary>
            Parameters for a course limit surface display mesh.
            SubD display density = adaptive SubDDisplayParameters.Density.CoarseDensity.
            </summary>
            <returns>The SubD display parameters.</returns>
            <since>7.18</since>
        </member>
        <member name="M:Rhino.Geometry.SubDDisplayParameters.Medium">
            <summary>
            Parameters for a medium limit surface display mesh.
            SubD display density = adaptive SubDDisplayParameters.Density.MediumDensity.
            </summary>
            <returns>The SubD display parameters.</returns>
            <since>7.18</since>
        </member>
        <member name="M:Rhino.Geometry.SubDDisplayParameters.Fine">
            <summary>
            Parameters for a fine limit surface display mesh.
            SubD display density = adaptive SubDDisplayParameters.Density.FineDensity.
            </summary>
            <returns>The SubD display parameters.</returns>
            <since>7.18</since>
        </member>
        <member name="M:Rhino.Geometry.SubDDisplayParameters.ExtraFine">
            <summary>
             Parameters for an extra fine limit surface display mesh.
            SubD display density = adaptive SubDDisplayParameters.Density.ExtraFineDensity.
            </summary>
            <returns>The SubD display parameters.</returns>
            <since>7.18</since>
        </member>
        <member name="M:Rhino.Geometry.SubDDisplayParameters.Default">
            <summary>
             Parameters for the default limit surface display mesh.
            SubD display density = adaptive SubDDisplayParameters.Density.DefaultDensity.
            </summary>
            <returns>The SubD display parameters.</returns>
            <since>7.18</since>
        </member>
        <member name="M:Rhino.Geometry.SubDDisplayParameters.AbsoluteDisplayDensityFromSubDFaceCount(System.UInt32,System.UInt32)">
            <summary>
            Gets the absolute SubD display density for SubD with subdFaceCount faces.
            </summary>
            <param name="adaptiveSubDDisplayDensity">
            A value &lt;= SubDDisplayParameters.Density.MaximumDensity.
            When in doubt, pass SubDDisplayParameters.Density.DefaultDensity.
            </param>
            <param name="subDFaceCount">Number of SubD faces.</param>
            <returns>
            The absolute SubD display density is &lt;= adaptiveSubDDisplayDensity and &lt;= SubDDisplayParameters.Density.MaximumDensity.
            </returns>
            <since>7.18</since>
        </member>
        <member name="M:Rhino.Geometry.SubDDisplayParameters.AbsoluteDisplayDensityFromSubD(System.UInt32,Rhino.Geometry.SubD)">
            <summary>
            Gets absolute SubD display density for subd.
            </summary>
            <param name="adaptiveSubDDisplayDensity">
            A value &lt;= SubDDisplayParameters.Density.MaximumDensity.
            When in doubt, pass SubDDisplayParameters.Density.DefaultDensity.
            </param>
            <param name="subd">
            In the cases when the SubD in question is not available, like user interface code that applies in general 
            and to unknown SubDs, pass SubD.Empty.
            </param>
            <returns>
            The absolute SubD display density is &lt;= adaptiveSubDDisplayDensity and &lt;= SubDDisplayParameters.Density.MaximumDensity.
            </returns>
            <since>7.18</since>
        </member>
        <member name="M:Rhino.Geometry.SubDDisplayParameters.CreateFromDisplayDensity(System.UInt32)">
            <summary>
            In most applications, the caller sets the mesh density and leaves the other parameters set to the default values.
            </summary>
            <param name="adaptiveSubDDisplayDensity">
            A value &lt;= SubDDisplayParameters.Density.MaximumDensity. When in doubt, pass SubDDisplayParameters.Density.DefaultDensity.
            Values &lt; SubDDisplayParameters.Density.MinimumAdaptiveDensity are treated as SubDDisplayParameters.Density.MinimumAdaptiveDensity.
            All other invalid input values are treated as SubDDisplayParameters.Density.DefaultDensity.
            </param>
            <returns>The SubD display parameters.</returns>
            <since>7.18</since>
        </member>
        <member name="M:Rhino.Geometry.SubDDisplayParameters.CreateFromAbsoluteDisplayDensity(System.UInt32)">
            <summary>
            Use of absolute display density is strongly discouraged. 
            SubDs can have a single face or millions of faces.
            Adaptive display meshing produces more desirable results in almost all cases.
            </summary>
            <param name="absoluteSubDDisplayDensity">
            A value &lt;= SubDDisplayParameters.Density.MaximumDensity.
            When in doubt, pass SubDDisplayParameters.Density.DefaultDensity.
            </param>
            <returns>The SubD display parameters.</returns>
            <since>7.18</since>
        </member>
        <member name="M:Rhino.Geometry.SubDDisplayParameters.CreateFromMeshDensity(System.Double)">
            <summary>
            This function creates SubDDisplayParameters from a user interface "slider" like Rhino's simple mesh controls.
            </summary>
            <param name="normalizedMeshDensity">A double between 0.0 and 1.0.</param>
            <returns>A valid ON_SubDDisplayParameters with the specified subd display density.</returns>
            <since>7.18</since>
        </member>
        <member name="P:Rhino.Geometry.SubDDisplayParameters.DisplayDensityIsAdaptive">
            <summary>
            True if the SubD display density setting is adaptive and approximate display
            mesh quad count is capped at SubDDisplayParameters::AdaptiveDisplayMeshQuadMaximum.
            </summary>
            <since>7.18</since>
        </member>
        <member name="P:Rhino.Geometry.SubDDisplayParameters.DisplayDensityIsAbsolute">
            <summary>
            True if the SubD display density setting is absolute.
            </summary>
            <since>7.18</since>
        </member>
        <member name="M:Rhino.Geometry.SubDDisplayParameters.DisplayDensity(Rhino.Geometry.SubD)">
            <summary>
            Gets the absolute display density to use when creating display meshes for SubD.
            When adaptive reduction is enabled, subd.Faces.Count is used to determine
            the appropriate display density.
            </summary>
            <param name="subd">The SubD object.</param>
            <returns>The display density.</returns>
            <since>7.18</since>
        </member>
        <member name="M:Rhino.Geometry.SubDDisplayParameters.SetAdaptiveDisplayDensity(System.UInt32)">
            <summary>
            Set an adaptive SubD display density that caps display mesh quad count at SubDDisplayParameters.AdaptiveDisplayMeshQuadMaximum.
            </summary>
            <param name="adaptiveDisplayDensity">
            adaptiveDisplayDensity &lt;= SubDDisplayParameters.Density.MaximumDensity.
            Values &lt;= SubDDisplayParameters.Density.MinimumAdaptiveDensity will never be adaptively reduced during display mesh creation.
            </param>
            <since>7.18</since>
        </member>
        <member name="M:Rhino.Geometry.SubDDisplayParameters.SetAbsoluteDisplayDensity(System.UInt32)">
            <summary>
            In almast all cases, you are better off using SetAdaptiveDisplayDensity().
            </summary>
            <param name="absoluteDisplayDensity">absoluteDisplayDensity &lt;= SubDDisplayParameters.Density.MaximumDensity.</param>
            <since>7.18</since>
        </member>
        <member name="P:Rhino.Geometry.SubDDisplayParameters.MeshLocation">
            <summary>
            The MeshLocation property determines if the mesh is on the SubD's control net or the SubD's surface.
            </summary>
            <since>7.18</since>
        </member>
        <member name="M:Rhino.Geometry.SubDDisplayParameters.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <inheritdoc/>
            <since>8.0</since>
        </member>
        <member name="M:Rhino.Geometry.SubDDisplayParameters.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Called by BinaryFormatter.Deserialize to create a new MeshParamaters
            object.
            </summary>
            <param name="info"></param>
            <param name="context"></param>
            <since>8.0</since>
        </member>
        <member name="M:Rhino.Geometry.SubDDisplayParameters.ToEncodedString">
            <summary>
            Returns a encoded string that represents the MeshingParameters.
            </summary>
            <returns>
            A encoded string that represents the MeshingParameters.
            </returns>
            <since>8.0</since>
        </member>
        <member name="M:Rhino.Geometry.SubDDisplayParameters.FromEncodedString(System.String)">
            <summary>
            Converts encoded serialized string into a MeshingParameters
            </summary>
            <param name="value">
            Encoded string returned by MeshingParameters.ToString()
            </param>
            <returns>
            Returns a new MeshingParameters created by decoding and deserializing
            the string or null if value is invalid.
            </returns>
            <since>8.0</since>
        </member>
        <member name="T:Rhino.Geometry.SerializableExtensions">
            <summary>
            Call used to extend SerializationInfo and encode/decode serialized string
            </summary>
        </member>
        <member name="M:Rhino.Geometry.SerializableExtensions.ToEncodedString(System.Runtime.Serialization.ISerializable)">
            <summary>
            Returns a encoded string that represents the MeshingParameters.
            </summary>
            <returns>
            A encoded string that represents the MeshingParameters.
            </returns>
            <since>8.0</since>
        </member>
        <member name="M:Rhino.Geometry.SerializableExtensions.FromEncodedString``1(System.String)">
            <summary>
            Converts encoded serialized string into a MeshingParameters
            </summary>
            <param name="value">
            Encoded string returned by MeshingParameters.ToString()
            </param>
            <returns>
            Returns a new MeshingParameters created by decoding and deserializing
            the string or null if value is invalid.
            </returns>
            <since>8.0</since>
        </member>
        <member name="T:Rhino.Geometry.MeshingParameters">
            <summary>
            Represents settings used for creating a mesh representation of a brep or surface.
            </summary>
        </member>
        <member name="M:Rhino.Geometry.MeshingParameters.#ctor">
            <summary>
            Initializes a new instance with default values.
            <para>Initial values are same as <see cref="P:Rhino.Geometry.MeshingParameters.Default"/>.</para>
            </summary>
            <since>5.0</since>
        </member>
        <member name="M:Rhino.Geometry.MeshingParameters.#ctor(Rhino.Geometry.MeshingParameters)">
            <summary>
            Initializes a new instance copying values from source.
            <para>Initial values are same as <see cref="P:Rhino.Geometry.MeshingParameters.Default"/>.</para>
            </summary>
            <since>8.0</since>
        </member>
        <member name="M:Rhino.Geometry.MeshingParameters.#ctor(System.Double)">
            <summary>
            Initializes a new instance with simple values, 
            similar to that of Rhino's meshing slider interface.
            </summary>
            <param name="density">
            The density and number of mesh polygons, where 0.0 &lt;= density &lt;= 1.0,
            where 0 quickly creates coarse meshes, and 1 slowly creates dense meshes.
            </param>
            <since>6.0</since>
        </member>
        <member name="M:Rhino.Geometry.MeshingParameters.#ctor(System.Double,System.Double)">
            <summary>
            Initializes a new instance with simple values, 
            similar to that of Rhino's meshing slider interface.
            </summary>
            <param name="density">
            The density and number of mesh polygons, where 0.0 &lt;= density &lt;= 1.0,
            where 0 quickly creates coarse meshes, and 1 slowly creates dense meshes.
            </param>
            <param name="minimumEdgeLength">The minimum allowed mesh edge length.</param>
            <since>6.0</since>
        </member>
        <member name="M:Rhino.Geometry.MeshingParameters.Finalize">
            <summary>
            Passively reclaims unmanaged resources when the class user did not explicitly call Dispose().
            </summary>
        </member>
        <member name="M:Rhino.Geometry.MeshingParameters.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <inheritdoc/>
            <since>8.0</since>
        </member>
        <member name="M:Rhino.Geometry.MeshingParameters.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Called by BinaryFormatter.Deserialize to create a new MeshParamaters
            object.
            </summary>
            <param name="info"></param>
            <param name="context"></param>
            <since>8.0</since>
        </member>
        <member name="M:Rhino.Geometry.MeshingParameters.ToEncodedString">
            <summary>
            Returns a encoded string that represents the MeshingParameters.
            </summary>
            <returns>
            A encoded string that represents the MeshingParameters.
            </returns>
            <since>8.0</since>
        </member>
        <member name="M:Rhino.Geometry.MeshingParameters.FromEncodedString(System.String)">
            <summary>
            Converts encoded serialized string into a MeshingParameters
            </summary>
            <param name="value">
            Encoded string returned by MeshingParameters.ToString()
            </param>
            <returns>
            Returns a new MeshingParameters created by decoding and deserializing
            the string or null if value is invalid.
            </returns>
            <since>8.0</since>
        </member>
        <member name="M:Rhino.Geometry.MeshingParameters.Dispose">
            <summary>
            Actively reclaims unmanaged resources that this instance uses.
            </summary>
            <since>5.0</since>
        </member>
        <member name="M:Rhino.Geometry.MeshingParameters.Dispose(System.Boolean)">
            <summary>
            For derived class implementers.
            <para>This method is called with argument true when class user calls Dispose(), while with argument false when
            the Garbage Collector invokes the finalizer, or Finalize() method.</para>
            <para>You must reclaim all used unmanaged resources in both cases, and can use this chance to call Dispose on disposable fields if the argument is true.</para>
            <para>Also, you must call the base virtual method within your overriding method.</para>
            </summary>
            <param name="disposing">true if the call comes from the Dispose() method; false if it comes from the Garbage Collector finalizer.</param>
        </member>
        <member name="M:Rhino.Geometry.MeshingParameters.GetHashCode">
            <summary>
            Computes a hash number that represents the current MeshingParameters.
            </summary>
            <returns>A hash code for MeshingParameters.</returns>
        </member>
        <member name="M:Rhino.Geometry.MeshingParameters.Equals(System.Object)">
            <summary>
            Determines whether the specified MeshingParameters has the same values as the present MeshingParameters.
            </summary>
            <param name="obj">The specified MeshingParameters.</param>
            <returns>true if MeshingParameters has the same values as this; otherwise false.</returns>
            <since>8.0</since>
        </member>
        <member name="M:Rhino.Geometry.MeshingParameters.Equals(Rhino.Geometry.MeshingParameters)">
            <summary>
            Determines whether the specified MeshingParameters has the same values as the present MeshingParameters.
            </summary>
            <param name="other">The specified MeshingParameters.</param>
            <returns>true if MeshingParameters has the same values as this; otherwise false.</returns>
            <since>8.0</since>
        </member>
        <member name="M:Rhino.Geometry.MeshingParameters.op_Equality(Rhino.Geometry.MeshingParameters,Rhino.Geometry.MeshingParameters)">
            <summary>
            Determines whether the two MeshingParameters have equal values.
            </summary>
            <param name="mp1">The first MeshingParameters.</param>
            <param name="mp2">The second MeshingParameters.</param>
            <returns>true if all of components of the two MeshingParameters are equal; otherwise false.</returns>
            <since>8.0</since>
        </member>
        <member name="M:Rhino.Geometry.MeshingParameters.op_Inequality(Rhino.Geometry.MeshingParameters,Rhino.Geometry.MeshingParameters)">
            <summary>
            Determines whether the two MeshingParameters do not have equal values.
            </summary>
            <param name="mp1">The first MeshingParameters.</param>
            <param name="mp2">The second MeshingParameters.</param>
            <returns>true if any components of the two MeshingParameters are not equal; otherwise false.</returns>
            <since>8.0</since>
        </member>
        <member name="P:Rhino.Geometry.MeshingParameters.Minimal">
            <summary>Gets minimal meshing parameters.</summary>
            <example>
            <code source='examples\vbnet\ex_createmeshfrombrep.vb' lang='vbnet'/>
            <code source='examples\cs\ex_createmeshfrombrep.cs' lang='cs'/>
            <code source='examples\py\ex_createmeshfrombrep.py' lang='py'/>
            </example>
            <since>5.0</since>
        </member>
        <member name="P:Rhino.Geometry.MeshingParameters.Default">
            <summary>
            Gets mesh creation parameters to create the default render mesh.
            Only use this if you plan on specifying your own custom meshing
            parameters.
            </summary>
            <example>
            <code source='examples\vbnet\ex_createmeshfrombrep.vb' lang='vbnet'/>
            <code source='examples\cs\ex_createmeshfrombrep.cs' lang='cs'/>
            <code source='examples\py\ex_createmeshfrombrep.py' lang='py'/>
            </example>
            <since>5.0</since>
        </member>
        <member name="P:Rhino.Geometry.MeshingParameters.Coarse">
            <summary>
            Gets mesh creation parameters for coarse meshing. 
            <para>This corresponds with the "Jagged and Faster" default in Rhino.</para>
            </summary>
            <example>
            <code source='examples\vbnet\ex_createmeshfrombrep.vb' lang='vbnet'/>
            <code source='examples\cs\ex_createmeshfrombrep.cs' lang='cs'/>
            <code source='examples\py\ex_createmeshfrombrep.py' lang='py'/>
            </example>
            <since>5.0</since>
        </member>
        <member name="P:Rhino.Geometry.MeshingParameters.FastRenderMesh">
            <summary>
            Gets mesh creation parameters to create the a render mesh when 
            meshing speed is preferred over mesh quality.
            </summary>
            <since>6.0</since>
        </member>
        <member name="P:Rhino.Geometry.MeshingParameters.Smooth">
            <summary>
            Gets mesh creation parameters for smooth meshing. 
            <para>This corresponds with the "Smooth and Slower" default in Rhino.</para>
            </summary>
            <example>
            <code source='examples\vbnet\ex_createmeshfrombrep.vb' lang='vbnet'/>
            <code source='examples\cs\ex_createmeshfrombrep.cs' lang='cs'/>
            <code source='examples\py\ex_createmeshfrombrep.py' lang='py'/>
            </example>
            <since>5.0</since>
        </member>
        <member name="P:Rhino.Geometry.MeshingParameters.QualityRenderMesh">
            <summary>
            Gets mesh creation parameters to create the a render mesh when mesh 
            quality is preferred over meshing speed.
            </summary>
            <since>6.0</since>
        </member>
        <member name="P:Rhino.Geometry.MeshingParameters.DefaultAnalysisMesh">
            <summary>
            Gets mesh creation parameters to create the default analysis mesh.
            </summary>
            <since>6.0</since>
        </member>
        <member name="P:Rhino.Geometry.MeshingParameters.TextureRange">
            <summary>
            Gets or sets how and if textures will be packed.
            </summary>
            <since>6.0</since>
        </member>
        <member name="P:Rhino.Geometry.MeshingParameters.JaggedSeams">
            <summary>
            Gets or sets whether or not the mesh is allowed to have jagged seams. 
            When this flag is set to true, meshes on either side of a Brep Edge will not match up.
            </summary>
            <since>5.0</since>
        </member>
        <member name="P:Rhino.Geometry.MeshingParameters.RefineGrid">
            <summary>
            Gets or sets a value indicating whether or not the sampling grid can be refined 
            when certain tolerances are not met.
            </summary>
            <since>5.0</since>
        </member>
        <member name="P:Rhino.Geometry.MeshingParameters.DoublePrecision">
            <summary>
            Gets or sets a value indicating whether or not the mesh should have
            double precision vertices in addition to the floats.
            </summary>
            <since>8.0</since>
        </member>
        <member name="P:Rhino.Geometry.MeshingParameters.SimplePlanes">
            <summary>
            Gets or sets a value indicating whether or not planar areas are allowed 
            to be meshed in a simplified manner.
            </summary>
            <since>5.0</since>
        </member>
        <member name="P:Rhino.Geometry.MeshingParameters.ComputeCurvature">
            <summary>
            Gets or sets a value indicating whether or not surface curvature 
            data will be embedded in the mesh.
            </summary>
            <since>5.0</since>
        </member>
        <member name="P:Rhino.Geometry.MeshingParameters.ClosedObjectPostProcess">
            <summary>
            Gets or sets a value indicating whether or not to post process non-closed meshes
            that should be closed. If the Brep being meshed is closed, JaggedSeams = false, 
            and ClosedObjectPostProcess = true, and the resulting mesh is not closed, then a
            post meshing process is applied to find and close gaps in the mesh. Typically the
            resulting mesh is not closed because the input Brep has a geometric flaw, like
            loops in trimming curve.
            </summary>
            <since>6.0</since>
        </member>
        <member name="P:Rhino.Geometry.MeshingParameters.GridMinCount">
            <summary>
            Gets or sets the minimum number of grid quads in the initial sampling grid.
            </summary>
            <since>5.0</since>
        </member>
        <member name="P:Rhino.Geometry.MeshingParameters.GridMaxCount">
            <summary>
            Gets or sets the maximum number of grid quads in the initial sampling grid.
            </summary>
            <since>5.0</since>
        </member>
        <member name="P:Rhino.Geometry.MeshingParameters.GridAngle">
            <summary>
            Gets or sets the maximum allowed angle difference (in radians) 
            for a single sampling quad. The angle pertains to the surface normals.
            </summary>
            <since>5.0</since>
        </member>
        <member name="P:Rhino.Geometry.MeshingParameters.GridAspectRatio">
            <summary>
            Gets or sets the maximum allowed aspect ratio of sampling quads.
            </summary>
            <since>5.0</since>
        </member>
        <member name="P:Rhino.Geometry.MeshingParameters.GridAmplification">
            <summary>
            Gets or sets the grid amplification factor. 
            Values lower than 1.0 will decrease the number of initial quads, 
            values higher than 1.0 will increase the number of initial quads.
            </summary>
            <since>5.0</since>
        </member>
        <member name="P:Rhino.Geometry.MeshingParameters.Tolerance">
            <summary>
            Gets or sets the maximum allowed edge deviation. 
            This tolerance is measured between the center of the mesh edge and the surface.
            </summary>
            <since>5.0</since>
        </member>
        <member name="P:Rhino.Geometry.MeshingParameters.MinimumTolerance">
            <summary>
            Gets or sets the minimum tolerance.
            </summary>
            <since>5.0</since>
        </member>
        <member name="P:Rhino.Geometry.MeshingParameters.RelativeTolerance">
            <summary>
            Gets or sets the relative tolerance.
            </summary>
            <since>5.0</since>
        </member>
        <member name="P:Rhino.Geometry.MeshingParameters.MinimumEdgeLength">
            <summary>
            Gets or sets the minimum allowed mesh edge length.
            </summary>
            <since>5.0</since>
        </member>
        <member name="P:Rhino.Geometry.MeshingParameters.MaximumEdgeLength">
            <summary>
            Gets or sets the maximum allowed mesh edge length.
            </summary>
            <since>5.0</since>
        </member>
        <member name="P:Rhino.Geometry.MeshingParameters.RefineAngle">
            <summary>
            Gets or sets the mesh parameter refine angle in radians.
            </summary>
            <since>5.0</since>
        </member>
        <member name="P:Rhino.Geometry.MeshingParameters.RefineAngleInDegrees">
            <summary>
            Gets or sets the mesh parameter refine angle in degrees.
            </summary>
            <since>8.0</since>
        </member>
        <member name="M:Rhino.Geometry.MeshingParameters.SubDDisplayParameters">
            <summary>
            Gets the SubD display parameters.
            </summary>
            <returns>The SubD display parameters.</returns>
            <since>7.18</since>
        </member>
        <member name="M:Rhino.Geometry.MeshingParameters.SetSubDDisplayParameters(Rhino.Geometry.SubDDisplayParameters)">
            <summary>
            Sets the SubD display parameters.
            </summary>
            <param name="subDDisplayParameters">The SubD display parameters.</param>
            <since>7.18</since>
        </member>
        <member name="M:Rhino.Geometry.MeshingParameters.CopyFrom(Rhino.Geometry.MeshingParameters)">
            <summary>
            Call this method to copy MeshingParameters from another instance.
            </summary>
            <param name="source"></param>
            <since>8.0</since>
        </member>
        <member name="T:Rhino.Geometry.MeshPart">
            <summary>
            Represents a portion of a mesh for partitioning
            </summary>
        </member>
        <member name="P:Rhino.Geometry.MeshPart.StartVertexIndex">
            <summary>Start of subinterval of parent mesh vertex array</summary>
            <since>5.6</since>
        </member>
        <member name="P:Rhino.Geometry.MeshPart.EndVertexIndex">
            <summary>End of subinterval of parent mesh vertex array</summary>
            <since>5.6</since>
        </member>
        <member name="P:Rhino.Geometry.MeshPart.StartFaceIndex">
            <summary>Start of subinterval of parent mesh face array</summary>
            <since>5.6</since>
        </member>
        <member name="P:Rhino.Geometry.MeshPart.EndFaceIndex">
            <summary>End of subinterval of parent mesh face array</summary>
            <since>5.6</since>
        </member>
        <member name="P:Rhino.Geometry.MeshPart.VertexCount">
            <summary>EndVertexIndex - StartVertexIndex</summary>
            <since>5.6</since>
        </member>
        <member name="P:Rhino.Geometry.MeshPart.TriangleCount">
            <summary></summary>
            <since>5.6</since>
        </member>
        <member name="T:Rhino.Geometry.MeshThicknessMeasurement">
            <summary>
            Thickness measurement used in the mesh thickness solver.
            </summary>
        </member>
        <member name="M:Rhino.Geometry.MeshThicknessMeasurement.#ctor(System.Int32,System.Int32,System.Double,Rhino.Geometry.Point3d,Rhino.Geometry.Point3d)">
            <summary>
            Create a new thickness measurement.
            </summary>
            <param name="meshIndex">Index of mesh within collection of meshes.</param>
            <param name="vertexIndex">Index of mesh vertex.</param>
            <param name="thickness">Thickness of mesh at vertex.</param>
            <param name="point">Vertex location.</param>
            <param name="oppositePoint">Opposite location.</param>
            <since>6.0</since>
        </member>
        <member name="P:Rhino.Geometry.MeshThicknessMeasurement.MeshIndex">
            <summary>
            Gets the index of the mesh associated with this thickness measurement.
            </summary>
            <since>6.0</since>
        </member>
        <member name="P:Rhino.Geometry.MeshThicknessMeasurement.VertexIndex">
            <summary>
            Gets the index of the vertex associated with this thickness measurement.
            </summary>
            <since>6.0</since>
        </member>
        <member name="P:Rhino.Geometry.MeshThicknessMeasurement.Thickness">
            <summary>
            Gets the local thickness of the mesh.
            </summary>
            <since>6.0</since>
        </member>
        <member name="P:Rhino.Geometry.MeshThicknessMeasurement.Point">
            <summary>
            Gets the location of the thickness measurement.
            </summary>
            <since>6.0</since>
        </member>
        <member name="P:Rhino.Geometry.MeshThicknessMeasurement.OppositePoint">
            <summary>
            Gets the point opposite to the measurement point.
            </summary>
            <since>6.0</since>
        </member>
        <member name="T:Rhino.Geometry.ReduceMeshParameters">
            <summary>
            Parameters for Reduce method
            </summary>
        </member>
        <member name="M:Rhino.Geometry.ReduceMeshParameters.#ctor">
            <summary>
            Constructs a polygon reduction parameter object with default values.
            Users of this class should not rely on default values to stay constant
            across service releases.
            </summary>
            <since>6.0</since>
        </member>
        <member name="P:Rhino.Geometry.ReduceMeshParameters.DesiredPolygonCount">
            <summary>Desired or target number of faces</summary>
            <since>6.0</since>
        </member>
        <member name="P:Rhino.Geometry.ReduceMeshParameters.AllowDistortion">
            <summary>If true mesh appearance is not changed even if the target polygon count is not reached</summary>
            <since>6.0</since>
        </member>
        <member name="P:Rhino.Geometry.ReduceMeshParameters.Accuracy">
            <summary>Integer from 1 to 10 telling how accurate reduction algorithm
            to use. Greater number gives more accurate results</summary>
            <since>6.0</since>
        </member>
        <member name="P:Rhino.Geometry.ReduceMeshParameters.NormalizeMeshSize">
            <summary>If true mesh is fitted to an axis aligned unit cube until reduction is complete</summary>
            <since>6.0</since>
        </member>
        <member name="P:Rhino.Geometry.ReduceMeshParameters.Error">
            <summary></summary>
            <since>6.0</since>
        </member>
        <member name="P:Rhino.Geometry.ReduceMeshParameters.FaceTags">
            <summary></summary>
            <since>6.0</since>
        </member>
        <member name="P:Rhino.Geometry.ReduceMeshParameters.LockedComponents">
            <summary>List of topological mesh vertices and mesh vertices that will not be moved or deleted in reduction process.
            Each mesh vertex will lock the corresponding topological mesh vertex. In other words it is not possible to have a
            locked and non-locked mesh vertex at the same location.</summary>
            <since>6.0</since>
        </member>
        <member name="P:Rhino.Geometry.ReduceMeshParameters.CancelToken">
            <summary></summary>
            <since>6.0</since>
        </member>
        <member name="P:Rhino.Geometry.ReduceMeshParameters.ProgressReporter">
            <summary></summary>
            <since>6.0</since>
        </member>
        <member name="T:Rhino.Geometry.QuadRemeshParameters">
            <summary>
            Parameters for QuadRemesh method
            </summary>
        </member>
        <member name="P:Rhino.Geometry.QuadRemeshParameters.TargetEdgeLength">
            <summary>
            When TargetEdgeLength is greater than 0 TargetQuadCount will be re-computed with
            the target goal of an approximated edge length based on the area of the input mesh
            e.g TargetQuadCount = Input mesh Area * sqr(TargetEdgeLength)
            AdaptiveSize as well as AdaptiveQuadCount will also be ignored;
            </summary>
            <since>7.8</since>
        </member>
        <member name="P:Rhino.Geometry.QuadRemeshParameters.TargetQuadCount">
            <summary>
            The number of quads to try to achieve in the final re-meshed object
            Note: This value is overridden if TargetEdgeLength > 0
            </summary>
            <since>7.0</since>
        </member>
        <member name="P:Rhino.Geometry.QuadRemeshParameters.AdaptiveSize">
            <summary>
            Larger values results in for quad sizes that adjust to match input curvature.
            Smaller values results in more uniform quad sizes at the risk of less feature preservation.
            Range [0 - 100]
            Note: this value is ignored when TargetEdgeLength > 0
            </summary>
            <since>7.0</since>
        </member>
        <member name="P:Rhino.Geometry.QuadRemeshParameters.AdaptiveQuadCount">
            <summary>
            Respect the original Target Quad Count value as much as possible.
            True returns more quads than TargetQuadCount depending on amount of high-curvature areas.
            Note: this value is ignored when TargetEdgeLength > 0
            </summary>
            <since>7.0</since>
        </member>
        <member name="P:Rhino.Geometry.QuadRemeshParameters.DetectHardEdges">
            <summary>
            When enabled the hard edges in models will be retained.
            </summary>
            <since>7.0</since>
        </member>
        <member name="P:Rhino.Geometry.QuadRemeshParameters.GuideCurveInfluence">
            <summary>
            0 = Approximate
            1 = Interpolate Edge Ring
            2 = Interpolate Edge Loop
            This value is ignored if Guide Curves are not supplied
            </summary>
            <since>7.0</since>
        </member>
        <member name="P:Rhino.Geometry.QuadRemeshParameters.PreserveMeshArrayEdgesMode">
            <summary>
            0=off, 1=On(Smart), 2=On(Strict) :
            Mesh array's created from Breps will have their brep face edge boundaries retained.
            Smart - Small or insignificant input faces are ignored.
            Strict - All input faces are factored in re-meshed result.
            </summary>
            <since>7.0</since>
        </member>
        <member name="P:Rhino.Geometry.QuadRemeshParameters.SymmetryAxis">
            <summary> Symmetry axis to use for symmetric re-meshing </summary>
            <since>7.0</since>
        </member>
        <member name="T:Rhino.Geometry.QuadRemeshSymmetryAxis">
            <summary> Symmetrical meshing axis </summary>
            <since>7.0</since>
        </member>
        <member name="F:Rhino.Geometry.QuadRemeshSymmetryAxis.None">
            <summary> No symmetric re-meshing</summary>
        </member>
        <member name="F:Rhino.Geometry.QuadRemeshSymmetryAxis.X">
            <summary> Symmetry across X axis</summary>
        </member>
        <member name="F:Rhino.Geometry.QuadRemeshSymmetryAxis.Y">
            <summary> Symmetry across Y axis</summary>
        </member>
        <member name="F:Rhino.Geometry.QuadRemeshSymmetryAxis.Z">
            <summary> Symmetry across Z axis</summary>
        </member>
        <member name="T:Rhino.Geometry.ShrinkWrapParameters">
            <summary>
            Parameters for ShrinkWrap method
            </summary>
            <since>8.0</since>
        </member>
        <member name="P:Rhino.Geometry.ShrinkWrapParameters.TargetEdgeLength">
            <summary>
            The desired target edge length in document units
            Smaller values equal more mesh resolution at the expense of larger mesh sizes
            </summary>
            <since>8.0</since>
        </member>
        <member name="P:Rhino.Geometry.ShrinkWrapParameters.Offset">
            <summary>
            Distance to offset outward or inward
            </summary>
            <since>8.0</since>
        </member>
        <member name="P:Rhino.Geometry.ShrinkWrapParameters.SmoothingIterations">
            <summary>
            Number of times to apply smoothing
            </summary>
            <since>8.0</since>
        </member>
        <member name="P:Rhino.Geometry.ShrinkWrapParameters.FillHolesInInputObjects">
            <summary>
            Any input meshes will have "Fill Holes" applied to them before volume creation
            This value is ignored when input objects are Point Clouds
            </summary>
            <since>8.0</since>
        </member>
        <member name="P:Rhino.Geometry.ShrinkWrapParameters.PolygonOptimization">
            <summary>
            0 - 100 the percentage of optimization desired.
            Polygons will be reduced in areas of lower curvature
            Lower values result in better feature preservation at the cost of more polygons
            </summary>
            <since>8.0</since>
        </member>
        <member name="P:Rhino.Geometry.ShrinkWrapParameters.InflateVerticesAndPoints">
            <summary>
            Inflate mesh vertices, points and point clouds
            Mesh vertices will be inflated as though the mesh were a point cloud
            </summary>
        </member>
        <member name="T:Rhino.Geometry.Mesh">
            <summary>
            Represents a geometry type that is defined by vertices and faces.
            <para>This is often called a face-vertex mesh.</para>
            </summary>
        </member>
        <member name="M:Rhino.Geometry.Mesh.CreateFromSubDControlNet(Rhino.Geometry.SubD)">
            <summary>Create a mesh from a SubD control net</summary>
            <param name="subd"></param>
            <returns>mesh representing control net on success, null on failure</returns>
            <since>7.0</since>
        </member>
        <member name="M:Rhino.Geometry.Mesh.CreateFromSubDControlNetWithTextureCoordinates(Rhino.Geometry.SubD)">
            <summary>Create a mesh from a SubD control net including texture coordinates</summary>
            <param name="subd"></param>
            <returns>mesh representing control net on success, null on failure</returns>
        </member>
        <member name="M:Rhino.Geometry.Mesh.CreateFromSurfaceControlNet(Rhino.Geometry.Surface)">
            <summary>
            Calculate a mesh representation of a surface's control net.
            </summary>
            <param name="surface">The surface.</param>
            <returns>Mesh representing the surface control net on success, null on failure</returns>
            <since>7.18</since>
        </member>
        <member name="M:Rhino.Geometry.Mesh.#ctor">
            <summary>Initializes a new empty mesh.</summary>
            <example>
            <code source='examples\vbnet\ex_addmesh.vb' lang='vbnet'/>
            <code source='examples\cs\ex_addmesh.cs' lang='cs'/>
            <code source='examples\py\ex_addmesh.py' lang='py'/>
            </example>
            <since>5.0</since>
        </member>
        <member name="M:Rhino.Geometry.Mesh.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Protected constructor for internal use.
            </summary>
            <param name="info">Serialization data.</param>
            <param name="context">Serialization stream.</param>
        </member>
        <member name="M:Rhino.Geometry.Mesh.OnSwitchToNonConst">
            <summary>
            Performs some memory cleanup if necessary
            </summary>
        </member>
        <member name="M:Rhino.Geometry.Mesh.NonConstOperation">
            <summary> Clear local cache on non constant calls </summary>
        </member>
        <member name="M:Rhino.Geometry.Mesh.CopyFrom(Rhino.Geometry.Mesh)">
            <summary>
            Copies mesh values into this mesh from another mesh.
            </summary>
            <param name="other">The other mesh to copy from.</param>
            <exception cref="T:System.ArgumentNullException">If other is null.</exception>
            <since>5.0</since>
        </member>
        <member name="M:Rhino.Geometry.Mesh.Duplicate">
            <summary>
            Constructs a copy of this mesh.
            This is the same as <see cref="M:Rhino.Geometry.Mesh.DuplicateMesh"/>.
            </summary>
            <returns>A mesh.</returns>
            <since>5.0</since>
        </member>
        <member name="M:Rhino.Geometry.Mesh.DuplicateMesh">
            <summary>Constructs a copy of this mesh.
            This is the same as <see cref="M:Rhino.Geometry.Mesh.Duplicate"/>.
            </summary>
            <since>5.0</since>
        </member>
        <member name="P:Rhino.Geometry.Mesh.IsClosed">
            <summary>
            Returns true if every mesh "edge" has two or more faces.
            </summary>
            <since>5.0</since>
        </member>
        <member name="P:Rhino.Geometry.Mesh.IsOriented">
            <summary>
            Returns true if the mesh is manifold and every pair of faces that share an "edge" have compatible orientations.
            </summary>
            <since>7.6</since>
        </member>
        <member name="P:Rhino.Geometry.Mesh.IsSolid">
            <summary>
            Returns true if the mesh is solid. A "solid" is a closed oriented manifold.
            </summary>
            <since>7.6</since>
        </member>
        <member name="M:Rhino.Geometry.Mesh.IsManifold">
            <summary>
            Returns true if every mesh "edge" has at most two faces.
            </summary>
            <returns>true if the mesh is manifold, false otherwise.</returns>
            <since>7.6</since>
        </member>
        <member name="M:Rhino.Geometry.Mesh.IsManifold(System.Boolean,System.Boolean@,System.Boolean@)">
            <summary>
            Gets a value indicating whether or not the mesh is manifold. 
            A manifold mesh does not have any edge that borders more than two faces.
            </summary>
            <param name="topologicalTest">
            If true, the query treats coincident vertices as the same.
            </param>
            <param name="isOriented">
            isOriented will be set to true if the mesh is a manifold 
            and adjacent faces have compatible face normals.
            </param>
            <param name="hasBoundary">
            hasBoundary will be set to true if the mesh is a manifold 
            and there is at least one "edge" with no more than one adjacent face.
            </param>
            <returns>true if every mesh "edge" has at most two adjacent faces.</returns>
            <since>5.0</since>
        </member>
        <member name="P:Rhino.Geometry.Mesh.HasCachedTextureCoordinates">
            <summary>
            Will return true if SetCachedTextureCoordinates has been called;
            otherwise will return false.
            </summary>
            <since>5.10</since>
        </member>
        <member name="P:Rhino.Geometry.Mesh.HasPrincipalCurvatures">
            <summary>
            HasPrincipalCurvatures
            </summary>
            <since>7.0</since>
        </member>
        <member name="P:Rhino.Geometry.Mesh.Vertices">
            <summary>
            Gets access to the vertices set of this mesh.
            </summary>
            <example>
            <code source='examples\vbnet\ex_addmesh.vb' lang='vbnet'/>
            <code source='examples\cs\ex_addmesh.cs' lang='cs'/>
            <code source='examples\py\ex_addmesh.py' lang='py'/>
            </example>
            <since>5.0</since>
        </member>
        <member name="P:Rhino.Geometry.Mesh.TopologyVertices">
            <summary>
            Gets the <see cref="T:Rhino.Geometry.Collections.MeshTopologyVertexList"/> object associated with this mesh.
            <para>This object stores vertex connectivity and the indices of vertices
            that were unified while computing the edge topology.</para>
            </summary>
            <since>5.0</since>
        </member>
        <member name="P:Rhino.Geometry.Mesh.TopologyEdges">
            <summary>
            Gets the <see cref="T:Rhino.Geometry.Collections.MeshTopologyEdgeList"/> object associated with this mesh.
            <para>This object stores edge connectivity.</para>
            </summary>
            <since>5.0</since>
        </member>
        <member name="P:Rhino.Geometry.Mesh.Normals">
            <summary>
            Gets access to the vertex normal collection in this mesh.
            </summary>
            <example>
            <code source='examples\vbnet\ex_addmesh.vb' lang='vbnet'/>
            <code source='examples\cs\ex_addmesh.cs' lang='cs'/>
            <code source='examples\py\ex_addmesh.py' lang='py'/>
            </example>
            <since>5.0</since>
        </member>
        <member name="P:Rhino.Geometry.Mesh.Faces">
            <summary>
            Gets access to the mesh face list.
            </summary>
            <example>
            <code source='examples\vbnet\ex_addmesh.vb' lang='vbnet'/>
            <code source='examples\cs\ex_addmesh.cs' lang='cs'/>
            <code source='examples\py\ex_addmesh.py' lang='py'/>
            </example>
            <since>5.0</since>
        </member>
        <member name="P:Rhino.Geometry.Mesh.Ngons">
            <summary>
            Gets access to the mesh ngon list.
            <para>Ngons represent groups of Faces (triangles + quads).</para>
            <para>Faces are used to tessellate an Ngon internally.</para>
            <para>When a triangle or quad is referenced in the Ngon list, it is no longer visualized and
            conceived as a single entity, but takes part of the Ngon.</para>
            <para>If you need to get access to both Ngons and the faces that are not referenced by Ngons,
            that is, all polygons that are visible in the mesh, then use the
            <see cref="M:Rhino.Geometry.Mesh.GetNgonAndFacesEnumerable"/> helper method.</para>
            </summary>
            <since>6.0</since>
        </member>
        <member name="P:Rhino.Geometry.Mesh.FaceNormals">
            <summary>
            Gets access to the face normal collection in this mesh.
            </summary>
            <since>5.0</since>
        </member>
        <member name="P:Rhino.Geometry.Mesh.VertexColors">
            <summary>
            Gets access to the (optional) vertex color collection in this mesh.
            </summary>
            <since>5.0</since>
        </member>
        <member name="P:Rhino.Geometry.Mesh.TextureCoordinates">
            <summary>
            Gets access to the vertex texture coordinate collection in this mesh.
            </summary>
            <since>5.0</since>
        </member>
        <member name="P:Rhino.Geometry.Mesh.ComponentStates">
            <summary>
            Gets access to the vertex hidden/visibility collection in this mesh.
            This is a runtime property and it is not saved in the 3dm file.
            </summary>
            <since>6.0</since>
        </member>
        <member name="M:Rhino.Geometry.Mesh.ClearTextureData">
            <summary>
            Removes all texture coordinate information from this mesh.
            </summary>
            <since>5.0</since>
        </member>
        <member name="M:Rhino.Geometry.Mesh.ClearSurfaceData">
            <summary>
            Removes surface parameters, curvature parameters and surface statistics from the mesh.
            </summary>
            <since>6.0</since>
        </member>
        <member name="M:Rhino.Geometry.Mesh.SetSurfaceParametersFromTextureCoordinates">
            <summary>
            If the mesh does not have surface evaluation parameters,
            has texture coordinates, and the surface parameters can
            be set in a way so the existing texture coordinates can
            be computed from the surface parameters, then this function
            sets the surface parameters. This is useful when meshes
            that have texture coordinates and do not have surface
            parameters want to set the surface parameters in a way
            so that the texture mapping of type
            TextureMappingType.SurfaceParameters
            will restore the texture coordinates.
            </summary>
            <returns>
            true - successful
            false - failure - no changes made to the mesh
            </returns>
            <since>8.0</since>
        </member>
        <member name="M:Rhino.Geometry.Mesh.DestroyTopology">
            <summary>
            Removes topology data, forcing all topology information to be recomputed.
            </summary>
            <since>6.0</since>
        </member>
        <member name="M:Rhino.Geometry.Mesh.DestroyTree">
            <summary>
            Destroys the mesh vertex access tree.
            </summary>
            <since>6.0</since>
        </member>
        <member name="M:Rhino.Geometry.Mesh.DestroyPartition">
            <summary>
            Destroys mesh partition.
            </summary>
            <since>6.0</since>
        </member>
        <member name="M:Rhino.Geometry.Mesh.EvaluateMeshGeometry(Rhino.Geometry.Surface)">
            <summary>
            If the mesh has SurfaceParameters, the surface is evaluated at
            these parameters and the mesh geometry is updated.
            </summary>
            <param name="surface">An input surface.</param>
            <returns>true if the operation succeeded; false otherwise.</returns>
            <since>5.0</since>
        </member>
        <member name="M:Rhino.Geometry.Mesh.SetTextureCoordinates(Rhino.Render.TextureMapping,Rhino.Geometry.Transform,System.Boolean)">
            <summary>
            Set texture coordinates using given mapping and applying given transform.
            
            Set lazy to false to generate texture coordinates right away.
            </summary>
            <param name="tm">Texture mapping</param>
            <param name="xf">Transform to apply to the texture mapping</param>
            <param name="lazy">Whether to generate lazily (true) or right away (false)</param>
            <since>6.0</since>
        </member>
        <member name="M:Rhino.Geometry.Mesh.SetTextureCoordinates(Rhino.Render.TextureMapping,Rhino.Geometry.Transform,System.Boolean,System.Boolean)">
            <summary>
            Set texture coordinates using given mapping and applying given transform.
            
            Set lazy to false to generate texture coordinates right away.
            </summary>
            <param name="tm">Texture mapping</param>
            <param name="xf">Transform to apply to the texture mapping</param>
            <param name="lazy">Whether to generate lazily (true) or right away (false)</param>
            <param name="seamCheck">If true then some mesh edges might be unwelded to better 
            represent UV discontinuities in the texture mapping.
            This only happens for the following mappings:
            Box, Sphere, Cylinder</param>
            <since>7.0</since>
        </member>
        <member name="M:Rhino.Geometry.Mesh.SetCachedTextureCoordinates(Rhino.Render.TextureMapping,Rhino.Geometry.Transform@)">
            <summary>
            Set cached texture coordinates using the specified mapping.
            </summary>
            <param name="tm"></param>
            <param name="xf"></param>
            <since>5.10</since>
        </member>
        <member name="M:Rhino.Geometry.Mesh.GetCachedTextureCoordinates(System.Guid)">
            <summary>
            Call this method to get cached texture coordinates for a texture
            mapping with the specified Id.
            </summary>
            <param name="textureMappingId">
            Texture mapping Id
            </param>
            <returns>
            Object which allows access to coordinates and other props.
            </returns>
            <since>5.10</since>
        </member>
        <member name="M:Rhino.Geometry.Mesh.InvalidateCachedTextureCoordinates(System.Boolean)">
            <summary>
            Invalidates all cached texture coordinates. Call this
            function when you have made changes that will affect
            the texture coordinates on the mesh.
            </summary>
            <param name="bOnlyInvalidateCachedSurfaceParameterMapping">
            If true then only cached surface parameter mapping
            texture coordinates will be invalidated. Use this
            after making changes to the m_S array.
            </param>
            <since>8.0</since>
        </member>
        <member name="M:Rhino.Geometry.Mesh.Compact">
            <summary>
            Removes any unreferenced objects from arrays, re-indexes as needed 
            and shrinks arrays to minimum required size.
            </summary>
            <returns>true on success, false on failure.</returns>
            <example>
            <code source='examples\vbnet\ex_addmesh.vb' lang='vbnet'/>
            <code source='examples\cs\ex_addmesh.cs' lang='cs'/>
            <code source='examples\py\ex_addmesh.py' lang='py'/>
            </example>
            <since>5.0</since>
        </member>
        <member name="M:Rhino.Geometry.Mesh.Flip(System.Boolean,System.Boolean,System.Boolean)">
            <summary>Reverses the direction of the mesh.</summary>
            <param name="vertexNormals">If true, vertex normals will be reversed.</param>
            <param name="faceNormals">If true, face normals will be reversed.</param>
            <param name="faceOrientation">If true, face orientations will be reversed.</param>
            <since>5.0</since>
        </member>
        <member name="M:Rhino.Geometry.Mesh.Flip(System.Boolean,System.Boolean,System.Boolean,System.Boolean)">
            <summary>Reverses the direction of the mesh.</summary>
            <param name="vertexNormals">If true, vertex normals will be reversed.</param>
            <param name="faceNormals">If true, face normals will be reversed.</param>
            <param name="faceOrientation">If true, face orientations will be reversed.</param>
            <param name="ngonsBoundaryDirection">If true, ngon boundaries will be reversed</param>
            <since>7.0</since>
        </member>
        <member name="M:Rhino.Geometry.Mesh.SolidOrientation">
            <summary>
            Determines orientation of a "solid" mesh.
            </summary>
            <returns>
            <para>+1 = mesh is solid with outward facing normals.</para>
            <para>-1 = mesh is solid with inward facing normals.</para>
            <para>0 = mesh is not solid.</para>
            </returns>
            <since>5.0</since>
        </member>
        <member name="M:Rhino.Geometry.Mesh.Append(Rhino.Geometry.Mesh)">
            <summary>
            Appends a copy of another mesh to this one and updates indices of appended mesh parts.
            </summary>
            <param name="other">Mesh to append to this one.</param>
            <example>
            <code source='examples\vbnet\ex_createmeshfrombrep.vb' lang='vbnet'/>
            <code source='examples\cs\ex_createmeshfrombrep.cs' lang='cs'/>
            <code source='examples\py\ex_createmeshfrombrep.py' lang='py'/>
            </example>
            <since>5.0</since>
        </member>
        <member name="M:Rhino.Geometry.Mesh.Append(System.Collections.Generic.IEnumerable{Rhino.Geometry.Mesh})">
            <summary>
            Append a list of meshes. This function is much more efficient than making
            repeated calls to Mesh.Append(Mesh) when lots of meshes are being joined
            into a single large mesh.
            </summary>
            <param name="meshes">Meshes to append to this one.</param>
            <since>6.8</since>
        </member>
        <member name="M:Rhino.Geometry.Mesh.GetNakedEdgePointStatus">
            <summary>
            Returns an array of Boolean values equal in length to the number of vertices in this
            mesh. Each value corresponds to a mesh vertex and is set to true if the vertex is
            not completely surrounded by faces.
            </summary>
            <returns>An array of true/false flags that, at each index, reveals if the corresponding
            vertex is completely surrounded by faces.</returns>
            <since>5.0</since>
        </member>
        <member name="M:Rhino.Geometry.Mesh.CreatePartitions(System.Int32,System.Int32)">
            <summary>
            In ancient times (or modern smart phone times), some rendering engines
            were only able to process small batches of triangles and the
            CreatePartitions() function was provided to partition the mesh into
            subsets of vertices and faces that those rendering engines could handle.
            </summary>
            <param name="maximumVertexCount"></param>
            <param name="maximumTriangleCount"></param>
            <returns>true on success</returns>
            <since>5.6</since>
        </member>
        <member name="P:Rhino.Geometry.Mesh.PartitionCount">
            <summary>
            Number of partition information chunks stored on this mesh based
            on the last call to CreatePartitions
            </summary>
            <since>5.6</since>
        </member>
        <member name="M:Rhino.Geometry.Mesh.GetPartition(System.Int32)">
            <summary>
            Retrieves a partition. See <see cref="M:Rhino.Geometry.Mesh.CreatePartitions(System.Int32,System.Int32)"/> for details.
            </summary>
            <param name="which">The partition index.</param>
            <returns></returns>
            <since>5.6</since>
        </member>
        <member name="M:Rhino.Geometry.Mesh.GetNgonAndFacesEnumerable">
            <summary>
            Retrieves a complete enumerable, i.e., one that provides an iterator over every face that is present,
            no matter if defined as a triangle, a quad, or a strictly over-four-sided ngon.
            </summary>
            <returns>The enumerator capable of enumerating through <see cref="P:Rhino.Geometry.Mesh.Ngons">Mesh.Ngons</see>> Mesh.Ngons and Faces</returns>
            <since>6.0</since>
        </member>
        <member name="M:Rhino.Geometry.Mesh.GetNgonAndFacesCount">
            <summary>
            Retrieves the count of items that <see cref="M:Rhino.Geometry.Mesh.GetNgonAndFacesEnumerable"/> will provide.
            </summary>
            <returns>The amount of faces that are not part of an ngon + the amount of ngons.</returns>
            <since>6.0</since>
        </member>
        <member name="T:Rhino.Geometry.MeshBooleanOptions">
            <summary>
            Contains a set of data to pass to boolean options.
            </summary>
        </member>
        <member name="P:Rhino.Geometry.MeshBooleanOptions.Tolerance">
            <summary>
            Gets or sets a tolerance value for intersections and overlaps.
            <seealso cref="!:Intersect.Intersection.MeshIntersectionsTolerancesCoefficient"/>
            </summary>
            <value>The default value is <see cref="F:Rhino.RhinoMath.ZeroTolerance"/>*10. However, this is
            only a reference value for testing and geometry developers should generally use the 
            document tolerance, multiplied by 
            <see cref="!:Intersect.Intersection.MeshIntersectionsTolerancesCoefficient"/>.</value>
            <since>8.0</since>
        </member>
        <member name="P:Rhino.Geometry.MeshBooleanOptions.TextLog">
            <summary>
            Gets or sets a text log to write computed operations into.
            </summary>
            <since>8.0</since>
        </member>
        <member name="P:Rhino.Geometry.MeshBooleanOptions.CancellationToken">
            <summary>
            A token that allows to request the cancellation of the operation.
            </summary>
            <since>8.0</since>
        </member>
        <member name="P:Rhino.Geometry.MeshBooleanOptions.ProgressReporter">
            <summary>
            Gets or sets the object that is responsible to keep track of calculation progression.
            </summary>
            <since>8.0</since>
        </member>
        <member name="T:Rhino.Geometry.MeshFace">
            <summary>
            Represents the values of the four indices of a mesh face quad.
            <para>If the third and fourth values are the same, this face represents a
            triangle.</para>
            </summary>
        </member>
        <member name="M:Rhino.Geometry.MeshFace.#ctor(System.Int32,System.Int32,System.Int32)">
            <summary>
            Constructs a new triangular Mesh face.
            </summary>
            <param name="a">Index of first corner.</param>
            <param name="b">Index of second corner.</param>
            <param name="c">Index of third corner.</param>
            <since>5.0</since>
        </member>
        <member name="M:Rhino.Geometry.MeshFace.#ctor(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Constructs a new quadrangular Mesh face.
            </summary>
            <param name="a">Index of first corner.</param>
            <param name="b">Index of second corner.</param>
            <param name="c">Index of third corner.</param>
            <param name="d">Index of fourth corner.</param>
            <since>5.0</since>
        </member>
        <member name="P:Rhino.Geometry.MeshFace.Unset">
            <summary>
            Gets an Unset MeshFace. Unset faces have Int32.MinValue for all corner indices.
            </summary>
            <since>5.0</since>
        </member>
        <member name="P:Rhino.Geometry.MeshFace.DebuggerDisplayUtil">
            <summary>
            Internal property that figures out the debugger display for mesh Faces.
            </summary>
        </member>
        <member name="P:Rhino.Geometry.MeshFace.A">
            <summary>
            Gets or sets the first corner index of the mesh face.
            </summary>
            <since>5.0</since>
        </member>
        <member name="P:Rhino.Geometry.MeshFace.B">
            <summary>
            Gets or sets the second corner index of the mesh face.
            </summary>
            <since>5.0</since>
        </member>
        <member name="P:Rhino.Geometry.MeshFace.C">
            <summary>
            Gets or sets the third corner index of the mesh face.
            </summary>
            <since>5.0</since>
        </member>
        <member name="P:Rhino.Geometry.MeshFace.D">
            <summary>
            Gets or sets the fourth corner index of the mesh face. 
            If D equals C, the mesh face is considered to be a triangle 
            rather than a quad.
            </summary>
            <since>5.0</since>
        </member>
        <member name="P:Rhino.Geometry.MeshFace.Item(System.Int32)">
            <summary>
            Gets or sets the vertex index associated with an entry in this face.
            </summary>
            <param name="index">A number in interval [0-3] that refers to an index of a vertex in this face.</param>
            <returns>The vertex index associated with this mesh face.</returns>
        </member>
        <member name="M:Rhino.Geometry.MeshFace.IsValid">
            <summary>
            Gets a value indicating whether or not this mesh face 
            is considered to be valid. Note that even valid mesh faces 
            could potentially be invalid in the context of a specific Mesh, 
            if one or more of the corner indices exceeds the number of 
            vertices on the mesh. If you want to perform a complete 
            validity check, use IsValid(int) instead.
            </summary>
            <since>5.0</since>
        </member>
        <member name="M:Rhino.Geometry.MeshFace.IsValid(System.Int32)">
            <summary>
            Gets a value indicating whether or not this mesh face 
            is considered to be valid. Unlike the simple IsValid function, 
            this function takes upper bound indices into account.
            </summary>
            <param name="vertexCount">Number of vertices in the mesh that this face is a part of.</param>
            <returns>true if the face is considered valid, false if not.</returns>
            <since>5.0</since>
        </member>
        <member name="M:Rhino.Geometry.MeshFace.IsValid(Rhino.Geometry.Point3d[])">
            <summary>
            Gets a value indicating whether or not this mesh face 
            is considered to be valid. Unlike the simple IsValid function, 
            this function takes actual point locations into account.
            </summary>
            <param name="points">Array of vertices with which to validate the face.</param>
            <returns>true if the face is considered valid, false if not.</returns>
            <since>6.0</since>
        </member>
        <member name="M:Rhino.Geometry.MeshFace.Repair(Rhino.Geometry.Point3d[])">
            <summary>
            Attempts to repair this mesh face by taking both face indexes and 
            actual vertex locations into account. 
            </summary>
            <param name="points">Array of vertices with which to consider when repairing the face.</param>
            <returns>true if the face was repaired, false if not.</returns>
            <remarks>This function assumes the face is invalid and attempts to repair unconditionally.  It is
            only worthwhile to call Repair on faces where IsValid returns false.
            </remarks>
            <since>6.0</since>
        </member>
        <member name="M:Rhino.Geometry.MeshFace.IsValidEx(Rhino.Geometry.Point3d[]@)">
            <summary>
            Gets a value indicating whether or not this mesh face 
            is considered to be valid. Unlike the simple IsValid function, 
            this function takes actual point locations into account.
            </summary>
            <param name="points">Array of vertices with which to validate the face.</param>
            <returns>true if the face is considered valid, false if not.</returns>
            <since>6.5</since>
        </member>
        <member name="M:Rhino.Geometry.MeshFace.RepairEx(Rhino.Geometry.Point3d[]@)">
            <summary>
            Attempts to repair this mesh face by taking both face indexes and 
            actual vertex locations into account. 
            </summary>
            <param name="points">Array of vertices with which to consider when repairing the face.</param>
            <returns>true if the face was repaired, false if not.</returns>
            <remarks>This function assumes the face is invalid and attempts to repair unconditionally.  It is
            only worthwhile to call Repair on faces where IsValid returns false.
            
            This function is the analog of UnsafeNativeMethods.ON_MeshFace_Repair done completely here to avoid 
            copying the point array.
            </remarks>
            <since>6.5</since>
        </member>
        <member name="P:Rhino.Geometry.MeshFace.IsTriangle">
            <summary>
            Gets a value indicating whether or not this mesh face is a triangle. 
            A mesh face is considered to be a triangle when C equals D, thus it is 
            possible for an Invalid mesh face to also be a triangle.
            </summary>
            <since>5.0</since>
        </member>
        <member name="P:Rhino.Geometry.MeshFace.IsQuad">
            <summary>
            Gets a value indicating whether or not this mesh face is a quad. 
            A mesh face is considered to be a triangle when C does not equal D, 
            thus it is possible for an Invalid mesh face to also be a quad.
            </summary>
            <since>5.0</since>
        </member>
        <member name="M:Rhino.Geometry.MeshFace.Set(System.Int32,System.Int32,System.Int32)">
            <summary>
            Sets all the corners for this face as a triangle.
            </summary>
            <param name="a">Index of first corner.</param>
            <param name="b">Index of second corner.</param>
            <param name="c">Index of third corner.</param>
            <since>5.0</since>
        </member>
        <member name="M:Rhino.Geometry.MeshFace.Set(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Sets all the corners for this face as a quad.
            </summary>
            <param name="a">Index of first corner.</param>
            <param name="b">Index of second corner.</param>
            <param name="c">Index of third corner.</param>
            <param name="d">Index of fourth corner.</param>
            <since>5.0</since>
        </member>
        <member name="M:Rhino.Geometry.MeshFace.Flip">
            <summary>
            Reverses the orientation of the face by swapping corners. 
            The first corner is always maintained.
            </summary>
            <since>5.0</since>
        </member>
        <member name="M:Rhino.Geometry.MeshFace.Equals(Rhino.Geometry.MeshFace)">
            <summary>
            Returns a value indicating whether the other mesh face
            has precisely the same value as the current one.
            </summary>
            <param name="other">The other mesh face for comparison.</param>
            <returns>true if the other face is, also orderly, equal
            to the present one; otherwise false.</returns>
            <since>6.0</since>
        </member>
        <member name="M:Rhino.Geometry.MeshFace.Equals(System.Object)">
            <summary>
            Returns a value indicating whether the other object obj
            has precisely the same value as the current one.
            </summary>
            <param name="obj">Any object the represents the other mesh face for comparison.</param>
            <returns>true if obj is a mesh face that, also orderly, equals
            to the present one; otherwise false.</returns>
        </member>
        <member name="M:Rhino.Geometry.MeshFace.GetHashCode">
            <summary>
            Returns a runtime-stable hash code for the current mesh face.
            You are not allowed to rely on persistence of this hash code in
            serialization, but for each version of RhinoCommon, this hash code
            will be the same for each mesh face.
            </summary>
            <returns>A non-unique integer that represents this mesh face.</returns>
        </member>
        <member name="M:Rhino.Geometry.MeshFace.op_Equality(Rhino.Geometry.MeshFace,Rhino.Geometry.MeshFace)">
            <summary>
            Determines whether two <see cref="T:Rhino.Geometry.MeshFace"/> structures have equal values.
            </summary>
            <param name="a">The first MeshFace.</param>
            <param name="b">The second MeshFace.</param>
            <returns>true if the indices of the two points are exactly equal; otherwise false.</returns>
            <since>6.0</since>
        </member>
        <member name="M:Rhino.Geometry.MeshFace.op_Inequality(Rhino.Geometry.MeshFace,Rhino.Geometry.MeshFace)">
            <summary>
            Determines whether two <see cref="T:Rhino.Geometry.MeshFace"/> structures have different values.
            </summary>
            <param name="a">The first MeshFace.</param>
            <param name="b">The second MeshFace.</param>
            <returns>true if the indices of the two points are in any way different; otherwise false.</returns>
            <since>6.0</since>
        </member>
        <member name="M:Rhino.Geometry.MeshFace.ToString">
            <summary>
            Returns a string representation for this <see cref="T:Rhino.Geometry.MeshFace"/>.
            This is to provide a meaningful visualization of this structure
            and is subject to change in newer releases.
            </summary>
            <returns>The string representation.</returns>
        </member>
        <member name="M:Rhino.Geometry.MeshFace.CompareTo(Rhino.Geometry.MeshFace)">
            <summary>
            Compares this <see cref="T:Rhino.Geometry.MeshFace" /> with another <see cref="T:Rhino.Geometry.MeshFace" />
            and returns a value of 1, 0, or -1, referring to dictionary order.
            <para>Index evaluation priority is first A, then B, then C, then D.</para>
            </summary>
            <param name="other">The other <see cref="T:Rhino.Geometry.MeshFace" /> to use in comparison.</param>
            <returns>
            <para> 0: if this is identical to other</para>
            <para>-1: if this &lt; other. Priority is for index of corner A first, then B, then C, then D.</para>
            <para>+1: otherwise.</para>
            </returns>
            <since>6.0</since>
        </member>
        <member name="T:Rhino.Geometry.MeshNgon">
            <summary>
            Represents a mesh ngon.
            <para>When retrieved from the Ngon property of a mesh,
            this contains faces that have edge valence strictly higher than 4.</para>
            <para>When retrieving Ngons from <see cref="M:Rhino.Geometry.Mesh.GetNgonAndFacesEnumerable"/>,
            this might contain also triangles and quads.</para>
            </summary>
        </member>
        <member name="M:Rhino.Geometry.MeshNgon.Create(System.Collections.Generic.IList{System.Int32},System.Collections.Generic.IList{System.Int32})">
            <summary>
            Constructs an ngon from lists of mesh vertex and face indexes.
            </summary>
            <param name="meshVertexIndexList">
            A list of mesh vertex indexes that define the outer boundary of the ngon. The mesh vertex indexes must be in the correct order.
            </param>
            <param name="meshFaceIndexList">
            A list of mesh face indexes that define the interior of the ngon. The mesh face indexes
            may be in any order.
            </param>
            <returns></returns>
            <since>6.0</since>
        </member>
        <member name="P:Rhino.Geometry.MeshNgon.Empty">
            <summary>
            Gets an empty MeshNgon.
            </summary>
            <since>6.0</since>
        </member>
        <member name="P:Rhino.Geometry.MeshNgon.DebuggerDisplayUtil">
            <summary>
            Internal property that figures out the debugger display for mesh Faces.
            </summary>
        </member>
        <member name="P:Rhino.Geometry.MeshNgon.BoundaryVertexCount">
            <summary>
            Get the number of vertices in this ngon.
            <seealso cref="T:Rhino.Geometry.MeshNgon"/> about length information.
            </summary>
            <since>6.0</since>
        </member>
        <member name="P:Rhino.Geometry.MeshNgon.FaceCount">
            <summary>
            Get the number of faces in this ngon.
            </summary>
            <since>6.0</since>
        </member>
        <member name="P:Rhino.Geometry.MeshNgon.Item(System.Int32)">
            <summary>
            Get a mesh vertex index from the ngon's vertex index list.
            </summary>
            <param name="index">A mesh vertex number between 0 and MeshNgon.VertexCount-1 that refers to a mesh vertex index in this ngon.</param>
            <returns>A mesh vertex index.</returns>
            <seealso cref="T:Rhino.Geometry.MeshNgon"/> about length information.
        </member>
        <member name="M:Rhino.Geometry.MeshNgon.BoundaryVertexIndexList">
            <summary>
            Get the outer boundary mesh vertex list of the ngon.
            <para>Vertices are sorted counterclockwise with respect to the direction of the face,
            although the degree by which vertex normals will respect this might vary.</para>
            </summary>
            <returns>A list of mesh vertex indexes.</returns>
            <seealso cref="T:Rhino.Geometry.MeshNgon"/> about length information.
            <since>6.0</since>
        </member>
        <member name="M:Rhino.Geometry.MeshNgon.FaceIndexList">
            <summary>
            Get the ngon's mesh face index list.
            </summary>
            <returns>A list of mesh face indexes.</returns>
            <since>6.0</since>
        </member>
        <member name="M:Rhino.Geometry.MeshNgon.Set(System.Collections.Generic.IList{System.Int32},System.Collections.Generic.IList{System.Int32})">
            <summary>
            Set the ngon vertex and face index lists.
            </summary>
            <param name="meshVertexIndexList">
            A list of mesh vertex indexes that define the outer boundary of the ngon. The mesh vertex indexes must be in the correct order.
            </param>
            <param name="meshFaceIndexList">
            A list of mesh face indexes that define the interior of the ngon. The mesh face indexes
            may be in any order.
            </param>
            <since>6.0</since>
        </member>
        <member name="M:Rhino.Geometry.MeshNgon.Equals(Rhino.Geometry.MeshNgon)">
            <summary>
            Determines if this ngon and otherNgon are identical.
            </summary>
            <param name="otherNgon">The other ngon for comparison.</param>
            <returns>true if otherNgon is identical to this ngon; otherwise false.
            </returns>
            <since>6.0</since>
        </member>
        <member name="M:Rhino.Geometry.MeshNgon.Equals(System.Object)">
            <summary>
            Determines if otherObj is a MeshNgon and is identical to this ngon.
            </summary>
            <param name="otherObj">Any object the represents the other mesh face for comparison.</param>
            <returns>true if otherObj is a MeshNgon and is identical to this ngon; otherwise false.
            </returns>
        </member>
        <member name="M:Rhino.Geometry.MeshNgon.GetHashCode">
            <summary>
            Returns a runtime-stable hash code for the current mesh ngon.
            You are not allowed to rely on persistence of this hash code in
            serialization, but for each instance of the application, this hash code
            will be the same for ngons with identical vertex and face lists.
            </summary>
            <returns>A non-unique integer that represents this mesh ngon.</returns>
        </member>
        <member name="M:Rhino.Geometry.MeshNgon.op_Equality(Rhino.Geometry.MeshNgon,Rhino.Geometry.MeshNgon)">
            <summary>
            Determines whether two <see cref="T:Rhino.Geometry.MeshNgon"/> structures have equal values.
            </summary>
            <param name="a">The first MeshNgon.</param>
            <param name="b">The second MeshNgon.</param>
            <returns>true if the vertex and face index lists are identical; otherwise false.</returns>
            <since>6.0</since>
        </member>
        <member name="M:Rhino.Geometry.MeshNgon.op_Inequality(Rhino.Geometry.MeshNgon,Rhino.Geometry.MeshNgon)">
            <summary>
            Determines whether two <see cref="T:Rhino.Geometry.MeshNgon"/> structures have different values.
            </summary>
            <param name="a">The first MeshNgon.</param>
            <param name="b">The second MeshNgon.</param>
            <returns>true if the vertex or face index lists are different in any way; otherwise false.</returns>
            <since>6.0</since>
        </member>
        <member name="M:Rhino.Geometry.MeshNgon.ToString">
            <summary>
            Returns a string representation for this <see cref="T:Rhino.Geometry.MeshNgon"/>.
            This is to provide a meaningful visualization of this structure
            and is subject to change in newer releases.
            </summary>
            <returns>The string representation.</returns>
        </member>
        <member name="M:Rhino.Geometry.MeshNgon.CompareTo(Rhino.Geometry.MeshNgon)">
            <summary>
            Compares this <see cref="T:Rhino.Geometry.MeshNgon" /> with otherNgon
            and returns a value of 1, 0, or -1.
            <para>Priority is for vertex count, then face count,
            then vertex index list values, then face index list values.
            </para>
            </summary>
            <param name="otherNgon">The other <see cref="T:Rhino.Geometry.MeshNgon" /> to use in comparison.</param>
            <returns>
            <para> 0: if this is identical to otherNgon</para>
            <para>-1: if this &lt; otherNgon. </para>
            <para>+1: if this &gt; otherNgon.</para>
            </returns>
            <since>6.0</since>
        </member>
        <member name="T:Rhino.Geometry.KnotStyle">
            <summary>
            Knot styles for NURBS curves and surfaces.
            If a knot vector meets the conditions of two styles,
            then the style with the lowest value is used.
            </summary>
            <since>7.0</since>
        </member>
        <member name="F:Rhino.Geometry.KnotStyle.Unknown">
            <summary>
            Unknown knot style
            </summary>
        </member>
        <member name="F:Rhino.Geometry.KnotStyle.Uniform">
            <summary>
            Uniform knots (ends not clamped).
            </summary>
        </member>
        <member name="F:Rhino.Geometry.KnotStyle.QuasiUniform">
            <summary>
            Uniform knots (clamped ends, degree >= 2).
            </summary>
        </member>
        <member name="F:Rhino.Geometry.KnotStyle.PiecewiseBezier">
            <summary>
            All internal knots have full multiplicity.
            </summary>
        </member>
        <member name="F:Rhino.Geometry.KnotStyle.ClampedEnd">
            <summary>
            Clamped end knots (with at least one interior non-uniform knot).
            </summary>
        </member>
        <member name="F:Rhino.Geometry.KnotStyle.NonUniform">
            <summary>
            Known to be none of the other styles
            </summary>
        </member>
        <member name="T:Rhino.Geometry.NurbsCurve">
            <summary>
            Represents a Non Uniform Rational B-Splines (NURBS) curve.
            </summary>
        </member>
        <member name="M:Rhino.Geometry.NurbsCurve.CreateFromLine(Rhino.Geometry.Line)">
            <summary>
            Gets a non-rational, degree 1 NURBS curve representation of the line.
            </summary>
            <returns>Curve on success, null on failure.</returns>
            <since>5.0</since>
        </member>
        <member name="M:Rhino.Geometry.NurbsCurve.CreateFromArc(Rhino.Geometry.Arc)">
            <summary>
            Gets a rational degree 2 NURBS curve representation
            of the arc. Note that the parameterization of NURBS curve
            does not match arc's transcendental parameterization.
            </summary>
            <param name="arc"></param>
            <returns>Curve on success, null on failure.</returns>
            <since>5.0</since>
        </member>
        <member name="M:Rhino.Geometry.NurbsCurve.CreateFromCircle(Rhino.Geometry.Circle)">
            <summary>
            Gets a rational degree 2 NURBS curve representation
            of the circle. Note that the parameterization of NURBS curve
            does not match circle's transcendental parameterization.  
            Use GetRadianFromNurbFormParameter() and
            GetParameterFromRadian() to convert between the NURBS curve 
            parameter and the transcendental parameter.
            </summary>
            <returns>Curve on success, null on failure.</returns>
            <since>5.0</since>
        </member>
        <member name="M:Rhino.Geometry.NurbsCurve.CreateFromEllipse(Rhino.Geometry.Ellipse)">
            <summary>
            Gets a rational degree 2 NURBS curve representation of the ellipse.
            <para>Note that the parameterization of the NURBS curve does not match
            with the transcendental parameterization of the ellipsis.</para>
            </summary>
            <returns>A NURBS curve representation of this ellipse or null if no such representation could be made.</returns>
            <since>5.0</since>
        </member>
        <member name="M:Rhino.Geometry.NurbsCurve.IsDuplicate(Rhino.Geometry.NurbsCurve,Rhino.Geometry.NurbsCurve,System.Boolean,System.Double)">
            <summary>
            Determines if two curves are similar.
            </summary>
            <param name="curveA">First curve used in comparison.</param>
            <param name="curveB">Second curve used in comparison.</param>
            <param name="ignoreParameterization">if true, parameterization and orientation are ignored.</param>
            <param name="tolerance">tolerance to use when comparing control points.</param>
            <returns>true if curves are similar within tolerance.</returns>
            <since>5.0</since>
        </member>
        <member name="M:Rhino.Geometry.NurbsCurve.Create(System.Boolean,System.Int32,System.Collections.Generic.IEnumerable{Rhino.Geometry.Point3d})">
            <summary>
            Constructs a 3D NURBS curve from a list of control points.
            </summary>
            <param name="periodic">If true, create a periodic uniform curve. If false, create a clamped uniform curve.</param>
            <param name="degree">(>=1) degree=order-1.</param>
            <param name="points">control vertex locations.</param>
            <returns>
            new NURBS curve on success
            null on error.
            </returns>
            <example>
            <code source='examples\vbnet\ex_addnurbscurve.vb' lang='vbnet'/>
            <code source='examples\cs\ex_addnurbscurve.cs' lang='cs'/>
            <code source='examples\py\ex_addnurbscurve.py' lang='py'/>
            </example>
            <since>5.0</since>
        </member>
        <member name="M:Rhino.Geometry.NurbsCurve.#ctor(Rhino.Geometry.NurbsCurve)">
            <summary>
            Initializes a NURBS curve by copying its values from another NURBS curve.
            </summary>
            <param name="other">The other curve. This value can be null.</param>
            <since>5.0</since>
        </member>
        <member name="M:Rhino.Geometry.NurbsCurve.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Protected constructor for internal use.
            </summary>
            <param name="info">Serialization data.</param>
            <param name="context">Serialization stream.</param>
        </member>
        <member name="M:Rhino.Geometry.NurbsCurve.#ctor(System.Int32,System.Int32)">
            <summary>
            Constructs a new NURBS curve with a specific degree and control point count.
            </summary>
            <param name="degree">Degree of curve. Must be equal to or larger than 1 and smaller than or equal to 11.</param>
            <param name="pointCount">Number of control-points.</param>
            <since>5.0</since>
        </member>
        <member name="M:Rhino.Geometry.NurbsCurve.#ctor(System.Int32,System.Boolean,System.Int32,System.Int32)">
            <summary>
            Constructs a new NURBS curve with knot and CV memory allocated.
            </summary>
            <param name="dimension">&gt;=1.</param>
            <param name="rational">true to make a rational NURBS.</param>
            <param name="order">(&gt;= 2) The order=degree+1.</param>
            <param name="pointCount">(&gt;= order) number of control vertices.</param>
            <example>
            <code source='examples\vbnet\ex_addnurbscircle.vb' lang='vbnet'/>
            <code source='examples\cs\ex_addnurbscircle.cs' lang='cs'/>
            <code source='examples\py\ex_addnurbscircle.py' lang='py'/>
            </example>
            <since>5.0</since>
        </member>
        <member name="P:Rhino.Geometry.NurbsCurve.Order">
            <summary>
            Gets the order of the curve. Order = Degree + 1.
            </summary>
            <since>5.0</since>
        </member>
        <member name="P:Rhino.Geometry.NurbsCurve.IsRational">
            <summary>
            Gets a value indicating whether or not the curve is rational. 
            Rational curves have control-points with custom weights.
            </summary>
            <since>5.0</since>
        </member>
        <member name="P:Rhino.Geometry.NurbsCurve.Knots">
            <summary>
            Gets access to the knots (or "knot vector") of this NURBS curve.
            </summary>
            <example>
            <code source='examples\vbnet\ex_addnurbscircle.vb' lang='vbnet'/>
            <code source='examples\cs\ex_addnurbscircle.cs' lang='cs'/>
            <code source='examples\py\ex_addnurbscircle.py' lang='py'/>
            </example>
            <since>5.0</since>
        </member>
        <member name="P:Rhino.Geometry.NurbsCurve.Points">
            <summary>
            Gets access to the control points of this NURBS curve.
            </summary>
            <since>5.0</since>
        </member>
        <member name="M:Rhino.Geometry.NurbsCurve.IncreaseDegree(System.Int32)">
            <summary>
            Increase the degree of this curve.
            </summary>
            <param name="desiredDegree">The desired degree. 
            Degrees should be number between and including 1 and 11.</param>
            <returns>true on success, false on failure.</returns>
            <example>
            <code source='examples\vbnet\ex_nurbscurveincreasedegree.vb' lang='vbnet'/>
            <code source='examples\cs\ex_nurbscurveincreasedegree.cs' lang='cs'/>
            <code source='examples\py\ex_nurbscurveincreasedegree.py' lang='py'/>
            </example>
            <since>5.0</since>
        </member>
        <member name="P:Rhino.Geometry.NurbsCurve.HasBezierSpans">
            <summary>
            Returns true if the NURBS curve has Bezier spans (all distinct knots have multiplicity = degree)
            </summary>
            <since>5.0</since>
        </member>
        <member name="M:Rhino.Geometry.NurbsCurve.MakePiecewiseBezier(System.Boolean)">
            <summary>
            Clamps ends and adds knots so the NURBS curve has Bezier spans 
            (all distinct knots have multiplicity = degree).
            </summary>
            <param name="setEndWeightsToOne">
            If true and the first or last weight is not one, then the first and
            last spans are re-parameterized so that the end weights are one.
            </param>
            <returns>true on success, false on failure.</returns>
            <since>5.0</since>
        </member>
        <member name="M:Rhino.Geometry.NurbsCurve.Reparameterize(System.Double)">
            <summary>
            Use a linear fractional transformation to re-parameterize the NURBS curve.
            This does not change the curve's domain.
            </summary>
            <param name="c">
            re-parameterization constant (generally speaking, c should be > 0). The
            control points and knots are adjusted so that
            output_nurbs(t) = input_nurbs(lambda(t)), where lambda(t) = c*t/( (c-1)*t + 1 ).
            Note that lambda(0) = 0, lambda(1) = 1, lambda'(t) > 0, 
            lambda'(0) = c and lambda'(1) = 1/c.
            </param>
            <returns>true if successful.</returns>
            <remarks>
            The CV and knot values are values are changed so that output_nurbs(t) = input_nurbs(lambda(t)).
            </remarks>
            <since>5.0</since>
        </member>
        <member name="M:Rhino.Geometry.NurbsCurve.Append(Rhino.Geometry.NurbsCurve)">
            <summary>
            Appends a NURBS curve to this curve.
            </summary>
            <param name="nurbsCurve">The NURBS curve to append.</param>
            <returns></returns>
            <since>7.13</since>
        </member>
        <member name="M:Rhino.Geometry.NurbsCurve.GrevilleParameter(System.Int32)">
            <summary>
            Gets the greville (edit point) parameter that belongs 
            to the control point at the specified index.
            </summary>
            <param name="index">Index of Greville (Edit) point.</param>
            <since>5.0</since>
        </member>
        <member name="M:Rhino.Geometry.NurbsCurve.GrevillePoint(System.Int32)">
            <summary>
            Gets the Greville parameter that belongs 
            to the control point at the specified index.
            </summary>
            <param name="index">Index of Greville point.</param>
            <since>5.0</since>
        </member>
        <member name="M:Rhino.Geometry.NurbsCurve.GrevilleParameters">
            <summary>
            Gets all Greville parameters for this curve.
            </summary>
            <since>5.0</since>
        </member>
        <member name="M:Rhino.Geometry.NurbsCurve.GrevillePoints">
            <summary>
            Gets all Greville points for this curve.
            </summary>
            <since>5.0</since>
        </member>
        <member name="M:Rhino.Geometry.NurbsCurve.EpsilonEquals(Rhino.Geometry.NurbsCurve,System.Double)">
            <summary>
            Check that all values in other are within epsilon of the values in this
            </summary>
            <param name="other"></param>
            <param name="epsilon"></param>
            <returns></returns>
            <since>5.4</since>
        </member>
        <member name="M:Rhino.Geometry.NurbsCurve.ConvertSpanToBezier(System.Int32)">
            <summary>
            Converts a span of the NURBS curve into a Bezier. 
            </summary>
            <param name="spanIndex">The span index, where (0 &lt;= spanIndex &lt;= Points.Count - Order).</param>
            <returns>Bezier curve if successful, null otherwise.</returns>
            <since>7.25</since>
        </member>
        <member name="T:Rhino.Geometry.ControlPoint">
            <summary>
            Represents control point geometry with three-dimensional position and weight.
            </summary>
        </member>
        <member name="M:Rhino.Geometry.ControlPoint.#ctor(System.Double,System.Double,System.Double)">
            <summary>
            Constructs a new world 3-D, or Euclidean, control point.
            The 4-D representation is (x, y, z, 1.0).
            </summary>
            <param name="x">X coordinate of the control point.</param>
            <param name="y">Y coordinate of the control point.</param>
            <param name="z">Z coordinate of the control point.</param>
            <since>5.0</since>
        </member>
        <member name="M:Rhino.Geometry.ControlPoint.#ctor(System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Constructs a new homogeneous control point, where the 4-D representation is (x, y, z, w).
            The world 3-D, or Euclidean, representation is (x/w, y/w, z/w).
            </summary>
            <param name="x">X coordinate of the control point.</param>
            <param name="y">Y coordinate of the control point.</param>
            <param name="z">Z coordinate of the control point.</param>
            <param name="weight">Weight factor of the control point. You should not use weights less than or equal to zero.</param>
            <remarks>
            For expert use only. If you do not understand homogeneous coordinates, then
            use an override that accepts world 3-D, or Euclidean, coordinates as input.
            </remarks>
            <since>5.0</since>
        </member>
        <member name="M:Rhino.Geometry.ControlPoint.#ctor(Rhino.Geometry.Point3d)">
            <summary>
            Constructs a new world 3-D, or Euclidean, control point.
            The 4-D representation of this is (x, y, z, 1.0).
            </summary>
            <param name="pt">Coordinates of the control point.</param>
            <since>5.0</since>
        </member>
        <member name="M:Rhino.Geometry.ControlPoint.#ctor(Rhino.Geometry.Point3d,System.Double)">
            <summary>
            Constructs a control point from a world 3-D, or Euclidean, location and a weight.
            The world 3-D, or Euclidean, representation is (x/w, y/w, z/w).
            </summary>
            <param name="euclideanPt">Coordinates of the control point.</param>
            <param name="weight">Weight factor of the control point. You should not use weights less than or equal to zero.</param>
            <since>5.0</since>
        </member>
        <member name="M:Rhino.Geometry.ControlPoint.#ctor(Rhino.Geometry.Point4d)">
            <summary>
            Constructs a new homogeneous control point, where the 4-D representation is (x, y, z, w).
            The world 3-D, or Euclidean, representation is (x/w, y/w, z/w).
            </summary>
            <param name="pt">Coordinates of the control point.</param>
            <remarks>
            For expert use only. If you do not understand homogeneous coordinates, then
            use an override that accepts world 3-D, or Euclidean, coordinates as input.
            </remarks>
            <since>5.0</since>
        </member>
        <member name="P:Rhino.Geometry.ControlPoint.Unset">
            <summary>
            Gets the predefined, unset control point.
            </summary>
            <since>5.0</since>
        </member>
        <member name="P:Rhino.Geometry.ControlPoint.Location">
            <summary>
            Gets or sets world 3-D, or Euclidean location of the control point. 
            </summary>
            <since>5.0</since>
        </member>
        <member name="P:Rhino.Geometry.ControlPoint.X">
            <summary>
            Gets or sets the X coordinate of the control point.
            </summary>
            <since>6.0</since>
        </member>
        <member name="P:Rhino.Geometry.ControlPoint.Y">
            <summary>
            Gets or sets the Y coordinate of the control point.
            </summary>
            <since>6.0</since>
        </member>
        <member name="P:Rhino.Geometry.ControlPoint.Z">
            <summary>
            Gets or sets the Z coordinate of the control point.
            </summary>
            <since>6.0</since>
        </member>
        <member name="P:Rhino.Geometry.ControlPoint.Weight">
            <summary>
            Gets or sets the weight of this control point.
            </summary>
            <since>5.0</since>
        </member>
        <member name="M:Rhino.Geometry.ControlPoint.EpsilonEquals(Rhino.Geometry.ControlPoint,System.Double)">
            <summary>
            Check that all values in other are within epsilon of the values in this
            </summary>
            <param name="other"></param>
            <param name="epsilon"></param>
            <returns></returns>
            <since>5.4</since>
        </member>
        <member name="M:Rhino.Geometry.ControlPoint.Equals(Rhino.Geometry.ControlPoint)">
            <summary>
            Determines if two points exactly match.
            </summary>
            <param name="other">The other point.</param>
            <returns>True if the other control point exactly matches this one.</returns>
            <since>6.0</since>
        </member>
        <member name="T:Rhino.Geometry.NurbsSurface">
            <summary>
            Represents a Non Uniform Rational B-Splines (NURBS) surface.
            </summary>
        </member>
        <member name="M:Rhino.Geometry.NurbsSurface.Create(System.Int32,System.Boolean,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Constructs a new NURBS surface with internal uninitialized arrays.
            </summary>
            <param name="dimension">The number of dimensions.<para>&gt;= 1. This value is usually 3.</para></param>
            <param name="isRational">true to make a rational NURBS.</param>
            <param name="order0">The order in U direction.<para>&gt;= 2.</para></param>
            <param name="order1">The order in V direction.<para>&gt;= 2.</para></param>
            <param name="controlPointCount0">Control point count in U direction.<para>&gt;= order0.</para></param>
            <param name="controlPointCount1">Control point count in V direction.<para>&gt;= order1.</para></param>
            <returns>A new NURBS surface, or null on error.</returns>
            <example>
            <code source='examples\vbnet\ex_createsurfaceexample.vb' lang='vbnet'/>
            <code source='examples\cs\ex_createsurfaceexample.cs' lang='cs'/>
            <code source='examples\py\ex_createsurfaceexample.py' lang='py'/>
            </example>
            <since>5.0</since>
        </member>
        <member name="M:Rhino.Geometry.NurbsSurface.CreateFromCone(Rhino.Geometry.Cone)">
            <summary>
            Constructs a new NURBS surfaces from cone data.
            </summary>
            <param name="cone">A cone value.</param>
            <returns>A new NURBS surface, or null on error.</returns>
            <since>5.0</since>
        </member>
        <member name="M:Rhino.Geometry.NurbsSurface.CreateFromCylinder(Rhino.Geometry.Cylinder)">
            <summary>
            Constructs a new NURBS surfaces from cylinder data.
            </summary>
            <param name="cylinder">A cylinder value.</param>
            <returns>A new NURBS surface, or null on error.</returns>
            <since>5.0</since>
        </member>
        <member name="M:Rhino.Geometry.NurbsSurface.CreateFromSphere(Rhino.Geometry.Sphere)">
            <summary>
            Constructs a new NURBS surfaces from sphere data.
            </summary>
            <param name="sphere">A sphere value.</param>
            <returns>A new NURBS surface, or null on error.</returns>
            <since>5.0</since>
        </member>
        <member name="M:Rhino.Geometry.NurbsSurface.CreateFromTorus(Rhino.Geometry.Torus)">
            <summary>
            Constructs a new NURBS surfaces from torus data.
            </summary>
            <param name="torus">A torus value.</param>
            <returns>A new NURBS surface, or null on error.</returns>
            <since>5.0</since>
        </member>
        <member name="M:Rhino.Geometry.NurbsSurface.CreateRuledSurface(Rhino.Geometry.Curve,Rhino.Geometry.Curve)">
            <summary>
            Constructs a ruled surface between two curves. Curves must share the same knot-vector.
            </summary>
            <param name="curveA">First curve.</param>
            <param name="curveB">Second curve.</param>
            <returns>A ruled surface on success or null on failure.</returns>
            <since>5.0</since>
        </member>
        <member name="M:Rhino.Geometry.NurbsSurface.#ctor(Rhino.Geometry.NurbsSurface)">
            <summary>
            Initializes a new NURBS surface by copying the values from another surface.
            </summary>
            <param name="other">Another surface.</param>
            <since>5.0</since>
        </member>
        <member name="M:Rhino.Geometry.NurbsSurface.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Protected constructor for internal use.
            </summary>
            <param name="info">Serialization data.</param>
            <param name="context">Serialization stream.</param>
        </member>
        <member name="P:Rhino.Geometry.NurbsSurface.KnotsU">
            <summary>
            The U direction knot vector.
            </summary>
            <example>
            <code source='examples\vbnet\ex_createsurfaceexample.vb' lang='vbnet'/>
            <code source='examples\cs\ex_createsurfaceexample.cs' lang='cs'/>
            <code source='examples\py\ex_createsurfaceexample.py' lang='py'/>
            </example>
            <since>5.0</since>
        </member>
        <member name="P:Rhino.Geometry.NurbsSurface.KnotsV">
            <summary>
            The V direction knot vector.
            </summary>
            <example>
            <code source='examples\vbnet\ex_createsurfaceexample.vb' lang='vbnet'/>
            <code source='examples\cs\ex_createsurfaceexample.cs' lang='cs'/>
            <code source='examples\py\ex_createsurfaceexample.py' lang='py'/>
            </example>
            <since>5.0</since>
        </member>
        <member name="P:Rhino.Geometry.NurbsSurface.Points">
            <summary>
            Gets a collection of surface control points that form this surface.
            </summary>
            <example>
            <code source='examples\vbnet\ex_createsurfaceexample.vb' lang='vbnet'/>
            <code source='examples\cs\ex_createsurfaceexample.cs' lang='cs'/>
            <code source='examples\py\ex_createsurfaceexample.py' lang='py'/>
            </example>
            <since>5.0</since>
        </member>
        <member name="P:Rhino.Geometry.NurbsSurface.IsRational">
            <summary>
            Gets a value indicating whether or not the NURBS surface is rational.
            </summary>
            <since>5.0</since>
        </member>
        <member name="M:Rhino.Geometry.NurbsSurface.MakeRational">
            <summary>
            Makes this surface rational.
            </summary>
            <returns>true if the operation succeeded; otherwise, false.</returns>
            <since>5.0</since>
        </member>
        <member name="M:Rhino.Geometry.NurbsSurface.MakeNonRational">
            <summary>
            Makes this surface non-rational.
            </summary>
            <returns>true if the operation succeeded; otherwise, false.</returns>
            <since>5.0</since>
        </member>
        <member name="M:Rhino.Geometry.NurbsSurface.IncreaseDegreeU(System.Int32)">
            <summary>
            Increase the degree of this surface in U direction.
            </summary>
            <param name="desiredDegree">The desired degree. 
            Degrees should be number between and including 1 and 11.</param>
            <returns>true on success, false on failure.</returns>
            <example>
            <code source='examples\vbnet\ex_nurbssurfaceincreasedegree.vb' lang='vbnet'/>
            <code source='examples\cs\ex_nurbssurfaceincreasedegree.cs' lang='cs'/>
            <code source='examples\py\ex_nurbssurfaceincreasedegree.py' lang='py'/>
            </example>
            <since>5.10</since>
        </member>
        <member name="M:Rhino.Geometry.NurbsSurface.IncreaseDegreeV(System.Int32)">
            <summary>
            Increase the degree of this surface in V direction.
            </summary>
            <param name="desiredDegree">The desired degree. 
            Degrees should be number between and including 1 and 11.</param>
            <returns>true on success, false on failure.</returns>
            <example>
            <code source='examples\vbnet\ex_nurbssurfaceincreasedegree.vb' lang='vbnet'/>
            <code source='examples\cs\ex_nurbssurfaceincreasedegree.cs' lang='cs'/>
            <code source='examples\py\ex_nurbssurfaceincreasedegree.py' lang='py'/>
            </example>
            <since>5.10</since>
        </member>
        <member name="M:Rhino.Geometry.NurbsSurface.CopyFrom(Rhino.Geometry.NurbsSurface)">
            <summary>
            Copies this NURBS surface from another NURBS surface.
            </summary>
            <param name="other">The other NURBS surface to use as source.</param>
            <since>5.0</since>
        </member>
        <member name="M:Rhino.Geometry.NurbsSurface.ConvertSpanToBezier(System.Int32,System.Int32)">
            <summary>
            Convert a NURBS surface bispan into a Bezier surface.
            </summary>
            <param name="spanIndex0">Specifies the "u" span</param>
            <param name="spanIndex1">Specifies the "v" span</param>
            <returns>Bezier surface on success</returns>
            <since>7.1</since>
        </member>
        <member name="M:Rhino.Geometry.NurbsSurface.EpsilonEquals(Rhino.Geometry.NurbsSurface,System.Double)">
            <summary>
            Check that all values in other are within epsilon of the values in this
            </summary>
            <param name="other"></param>
            <param name="epsilon"></param>
            <returns></returns>
            <since>5.4</since>
        </member>
        <member name="P:Rhino.Geometry.NurbsSurface.OrderU">
            <summary>
            Gets the order in the U direction.
            </summary>
            <since>5.0</since>
        </member>
        <member name="P:Rhino.Geometry.NurbsSurface.OrderV">
            <summary>
            Gets the order in the V direction.
            </summary>
            <since>5.0</since>
        </member>
        <member name="T:Rhino.Geometry.MorphControl">
            <summary>
            Represents a geometry that is able to control the morphing behavior of some other geometry.
            </summary>
        </member>
        <member name="M:Rhino.Geometry.MorphControl.#ctor(Rhino.Geometry.NurbsCurve,Rhino.Geometry.NurbsCurve)">
            <summary>
            Constructs a MorphControl that allows for morphing between two curves.
            </summary>
            <param name="originCurve">The origin curve for morphing.</param>
            <param name="targetCurve">The target curve for morphing.</param>
            <since>5.0</since>
        </member>
        <member name="M:Rhino.Geometry.MorphControl.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Protected constructor for internal use.
            </summary>
            <param name="info">Serialization data.</param>
            <param name="context">Serialization stream.</param>
        </member>
        <member name="P:Rhino.Geometry.MorphControl.SpaceMorphTolerance">
            <summary>
            The 3d fitting tolerance used when morphing surfaces and breps.
            The default is 0.0 and any value &lt;= 0.0 is ignored by morphing functions.
            The value returned by Tolerance does not affect the way meshes and points are morphed.
            </summary>
            <since>5.0</since>
        </member>
        <member name="P:Rhino.Geometry.MorphControl.QuickPreview">
            <summary>
            true if the morph should be done as quickly as possible because the
            result is being used for some type of dynamic preview.  If QuickPreview
            is true, the tolerance may be ignored. The QuickPreview value does not
            affect the way meshes and points are morphed. The default is false.
            </summary>
            <since>5.0</since>
        </member>
        <member name="P:Rhino.Geometry.MorphControl.PreserveStructure">
            <summary>
            true if the morph should be done in a way that preserves the structure
            of the geometry.  In particular, for NURBS objects, true  means that
            only the control points are moved.  The PreserveStructure value does not
            affect the way meshes and points are morphed. The default is false.
            </summary>
            <since>5.0</since>
        </member>
        <member name="P:Rhino.Geometry.MorphControl.Curve">
            <summary>
            Returns the morph control's curve.  While this should never be null, the 
            calling function should check.  
            </summary>
            <since>6.0</since>
        </member>
        <member name="P:Rhino.Geometry.MorphControl.Surface">
            <summary>
            Returns the morph control's surface.  While this should never be null, the 
            calling function should check.  
            </summary>
            <since>6.0</since>
        </member>
        <member name="T:Rhino.Geometry.HermiteSurface">
            <summary>
            Create an ON_NurbsSurface satisfying Hermite interpolation conditions at a grid of points.
            </summary>
        </member>
        <member name="M:Rhino.Geometry.HermiteSurface.ConstPointer">
            <summary>
            Gets the const (immutable) pointer of this class.
            </summary>
            <returns>The const pointer.</returns>
            <since>7.0</since>
        </member>
        <member name="M:Rhino.Geometry.HermiteSurface.NonConstPointer">
            <summary>
            Gets the non-const pointer (for modification) of this class.
            </summary>
            <returns>The non-const pointer.</returns>
            <since>7.0</since>
        </member>
        <member name="M:Rhino.Geometry.HermiteSurface.#ctor">
            <summary>
            Initializes a new <see cref="T:Rhino.Geometry.HermiteSurface"/> instance.
            </summary>
            <since>7.0</since>
        </member>
        <member name="M:Rhino.Geometry.HermiteSurface.#ctor(System.Int32,System.Int32)">
            <summary>
            Initializes a new <see cref="T:Rhino.Geometry.HermiteSurface"/> instance.
            </summary>
            <param name="uCount">The number of parameters in the "u" direction.</param>
            <param name="vCount">The number of parameters in the "v" direction.</param>
            <since>7.0</since>
        </member>
        <member name="P:Rhino.Geometry.HermiteSurface.IsValid">
            <summary>
            Returns true if the all of values in all of the internal data structures contain valid values, false otherwise.
            </summary>
            <since>7.0</since>
        </member>
        <member name="P:Rhino.Geometry.HermiteSurface.UCount">
            <summary>
            Gets the number of parameters in the "u" direction.
            </summary>
            <since>7.0</since>
        </member>
        <member name="P:Rhino.Geometry.HermiteSurface.VCount">
            <summary>
            Gets the number of parameters in the "v" direction.
            </summary>
            <since>7.0</since>
        </member>
        <member name="M:Rhino.Geometry.HermiteSurface.UParameterAt(System.Int32)">
            <summary>
            Gets the "u" parameter at an index. These parameters are strictly increasing.
            </summary>
            <param name="index">The index.</param>
            <returns>The parameter.</returns>
            <since>7.0</since>
        </member>
        <member name="M:Rhino.Geometry.HermiteSurface.SetUParameterAt(System.Int32,System.Double)">
            <summary>
            Sets the "u" parameter at an index. These parameters are strictly increasing.
            </summary>
            <param name="index">The index.</param>
            <param name="parameter">The parameter value.</param>
            <since>7.0</since>
        </member>
        <member name="M:Rhino.Geometry.HermiteSurface.VParameterAt(System.Int32)">
            <summary>
            Gets the "v" parameter at an index. These parameters are strictly increasing.
            </summary>
            <param name="index">The index.</param>
            <returns>The parameter.</returns>
            <since>7.0</since>
        </member>
        <member name="M:Rhino.Geometry.HermiteSurface.SetVParameterAt(System.Int32,System.Double)">
            <summary>
            Sets the "v" parameter at an index. These parameters are strictly increasing.
            </summary>
            <param name="index">The index.</param>
            <param name="parameter">The parameter value.</param>
            <since>7.0</since>
        </member>
        <member name="M:Rhino.Geometry.HermiteSurface.PointAt(System.Int32,System.Int32)">
            <summary>
            Gets the interpolation point at the u,v parameter location.
            </summary>
            <param name="uIndex">The "u" index.</param>
            <param name="vIndex">The "v" index.</param>
            <returns>The point location.</returns>
            <since>7.0</since>
        </member>
        <member name="M:Rhino.Geometry.HermiteSurface.SetPointAt(System.Int32,System.Int32,Rhino.Geometry.Point3d)">
            <summary>
            Sets the interpolation point at the u,v parameter location.
            </summary>
            <param name="uIndex">The "u" index.</param>
            <param name="vIndex">The "v" index.</param>
            <param name="point">The point location.</param>
            <since>7.0</since>
        </member>
        <member name="M:Rhino.Geometry.HermiteSurface.UTangentAt(System.Int32,System.Int32)">
            <summary>
            Get the "u" tangent direction (actually first derivative) to interpolate at the u,v parameter location.
            </summary>
            <param name="uIndex">The "u" index.</param>
            <param name="vIndex">The "v" index.</param>
            <returns>The tangent direction.</returns>
            <since>7.0</since>
        </member>
        <member name="M:Rhino.Geometry.HermiteSurface.SetUTangentAt(System.Int32,System.Int32,Rhino.Geometry.Vector3d)">
            <summary>
            Set the "u" tangent direction (actually first derivative) to interpolate at the u,v parameter location.
            </summary>
            <param name="uIndex">The "u" index.</param>
            <param name="vIndex">The "v" index.</param>
            <param name="tangent">The tangent direction.</param>
            <since>7.0</since>
        </member>
        <member name="M:Rhino.Geometry.HermiteSurface.VTangentAt(System.Int32,System.Int32)">
            <summary>
            Get the "v" tangent direction (actually first derivative) to interpolate at the u,v parameter location.
            </summary>
            <param name="uIndex">The "u" index.</param>
            <param name="vIndex">The "v" index.</param>
            <returns>The tangent direction.</returns>
            <since>7.0</since>
        </member>
        <member name="M:Rhino.Geometry.HermiteSurface.SetVTangentAt(System.Int32,System.Int32,Rhino.Geometry.Vector3d)">
            <summary>
            Set the "v" tangent direction (actually first derivative) to interpolate at the u,v parameter location.
            </summary>
            <param name="uIndex">The "u" index.</param>
            <param name="vIndex">The "v" index.</param>
            <param name="tangent">The tangent direction.</param>
            <since>7.0</since>
        </member>
        <member name="M:Rhino.Geometry.HermiteSurface.TwistAt(System.Int32,System.Int32)">
            <summary>
            Get the twist direction (mixed second partial derivative) to interpolate at the u,v parameter location.
            </summary>
            <param name="uIndex">The "u" index.</param>
            <param name="vIndex">The "v" index.</param>
            <returns>The twist direction.</returns>
            <since>7.0</since>
        </member>
        <member name="M:Rhino.Geometry.HermiteSurface.SetTwistAt(System.Int32,System.Int32,Rhino.Geometry.Vector3d)">
            <summary>
            Set the twist direction (mixed second partial derivative) to interpolate at the u,v parameter location.
            </summary>
            <param name="uIndex">The "u" index.</param>
            <param name="vIndex">The "v" index.</param>
            <param name="twist">The twist direction.</param>
            <since>7.0</since>
        </member>
        <member name="M:Rhino.Geometry.HermiteSurface.ToNurbsSurface">
            <summary>
            Constructs a NURBS surface satisfying the Hermite interpolation conditions.
            </summary>
            <returns>A NURBS surface is successful, null otherwise.</returns>
            <since>7.0</since>
        </member>
        <member name="M:Rhino.Geometry.HermiteSurface.Finalize">
            <summary>
            Passively reclaims unmanaged resources when the class user did not explicitly call Dispose().
            </summary>
        </member>
        <member name="M:Rhino.Geometry.HermiteSurface.Dispose">
            <summary>
            Actively reclaims unmanaged resources that this instance uses.
            </summary>
            <since>7.0</since>
        </member>
        <member name="T:Rhino.Geometry.PlaneFitResult">
            <summary>
            Enumerates all possible outcomes of a Least-Squares plane fitting operation.
            </summary>
            <since>5.0</since>
        </member>
        <member name="F:Rhino.Geometry.PlaneFitResult.Failure">
            <summary>
            No plane could be found.
            </summary>
        </member>
        <member name="F:Rhino.Geometry.PlaneFitResult.Success">
            <summary>
            A plane was successfully fitted.
            </summary>
        </member>
        <member name="F:Rhino.Geometry.PlaneFitResult.Inconclusive">
            <summary>
            A valid plane was found, but it is an inconclusive result. 
            This might happen with co-linear points for example.
            </summary>
        </member>
        <member name="T:Rhino.Geometry.Plane">
            <summary>
            Represents the value of a center point and two axes in a plane in three dimensions.
            </summary>
        </member>
        <member name="P:Rhino.Geometry.Plane.Origin">
            <summary>
            Gets or sets the origin point of this plane.
            </summary>
            <since>5.0</since>
        </member>
        <member name="P:Rhino.Geometry.Plane.OriginX">
            <summary>
            Gets or sets the X coordinate of the origin of this plane.
            </summary>
            <since>5.0</since>
        </member>
        <member name="P:Rhino.Geometry.Plane.OriginY">
            <summary>
            Gets or sets the Y coordinate of the origin of this plane.
            </summary>
            <since>5.0</since>
        </member>
        <member name="P:Rhino.Geometry.Plane.OriginZ">
            <summary>
            Gets or sets the Z coordinate of the origin of this plane.
            </summary>
            <since>5.0</since>
        </member>
        <member name="P:Rhino.Geometry.Plane.XAxis">
            <summary>
            Gets or sets the X axis vector of this plane.
            </summary>
            <since>5.0</since>
        </member>
        <member name="P:Rhino.Geometry.Plane.YAxis">
            <summary>
            Gets or sets the Y axis vector of this plane.
            </summary>
            <since>5.0</since>
        </member>
        <member name="P:Rhino.Geometry.Plane.ZAxis">
            <summary>
            Gets or sets the Z axis vector of this plane.
            </summary>
            <since>5.0</since>
        </member>
        <member name="P:Rhino.Geometry.Plane.WorldXY">
            <summary>
            plane coincident with the World XY plane.
            </summary>
            <since>5.0</since>
        </member>
        <member name="P:Rhino.Geometry.Plane.WorldYZ">
            <summary>
            plane coincident with the World YZ plane.
            </summary>
            <since>5.0</since>
        </member>
        <member name="P:Rhino.Geometry.Plane.WorldZX">
            <summary>
            plane coincident with the World ZX plane.
            </summary>
            <since>5.0</since>
        </member>
        <member name="P:Rhino.Geometry.Plane.Unset">
            <summary>
            Gets a plane that contains Unset origin and axis vectors.
            </summary>
            <since>5.0</since>
        </member>
        <member name="M:Rhino.Geometry.Plane.#ctor(Rhino.Geometry.Plane)">
            <summary>Copy constructor.
            </summary>
            <param name="other">The source plane value.</param>
            <since>5.0</since>
        </member>
        <member name="M:Rhino.Geometry.Plane.#ctor(Rhino.Geometry.Point3d,Rhino.Geometry.Vector3d)">
            <summary>
            Constructs a plane from a point and a normal vector.
            </summary>
            <param name="origin">Origin point of the plane.</param>
            <param name="normal">Non-zero normal to the plane.</param>
            <seealso>CreateFromNormal</seealso>
            <example>
            <code source='examples\vbnet\ex_addcylinder.vb' lang='vbnet'/>
            <code source='examples\cs\ex_addcylinder.cs' lang='cs'/>
            <code source='examples\py\ex_addcylinder.py' lang='py'/>
            </example>
            <since>5.0</since>
        </member>
        <member name="M:Rhino.Geometry.Plane.#ctor(Rhino.Geometry.Point3d,Rhino.Geometry.Vector3d,Rhino.Geometry.Vector3d)">
            <summary>
            Constructs a plane from a point and two vectors in the plane.
            </summary>
            <param name='origin'>Origin point of the plane.</param>
            <param name='xDirection'>
            Non-zero vector in the plane that determines the x-axis direction.
            </param>
            <param name='yDirection'>
            Non-zero vector not parallel to x_dir that is used to determine the
            y-axis direction. y_dir does not need to be perpendicular to x_dir.
            </param>
            <since>5.0</since>
        </member>
        <member name="M:Rhino.Geometry.Plane.#ctor(Rhino.Geometry.Point3d,Rhino.Geometry.Point3d,Rhino.Geometry.Point3d)">
            <summary>
            Initializes a plane from three non-collinear points.
            </summary>
            <param name='origin'>Origin point of the plane.</param>
            <param name='xPoint'>
            Second point in the plane. The x-axis will be parallel to x_point-origin.
            </param>
            <param name='yPoint'>
            Third point on the plane that is not collinear with the first two points.
            taxis*(y_point-origin) will be &gt; 0.
            </param>
            <example>
            <code source='examples\vbnet\ex_addclippingplane.vb' lang='vbnet'/>
            <code source='examples\cs\ex_addclippingplane.cs' lang='cs'/>
            <code source='examples\py\ex_addclippingplane.py' lang='py'/>
            </example>
            <since>5.0</since>
        </member>
        <member name="M:Rhino.Geometry.Plane.#ctor(System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Constructs a plane from an equation
            Ax+By+Cz+D=0.
            </summary>
            <since>5.0</since>
        </member>
        <member name="M:Rhino.Geometry.Plane.CreateFromFrame(Rhino.Geometry.Point3d,Rhino.Geometry.Vector3d,Rhino.Geometry.Vector3d)">
            <summary>
            Constructs a plane from a point, and two vectors in the plane.
            </summary>
            <param name="origin">Point on the plane.</param>
            <param name="xDirection">Non-zero vector in the plane that determines the XAxis direction.</param>
            <param name="yDirection">
            Non-zero vector not parallel to xDirection that is used to determine the YAxis direction. 
            Note, yDirection does not have to be perpendicular to xDirection.
            </param>
            <returns>A valid plane if successful, or Plane.Unset on failure.</returns>
            <since>8.0</since>
        </member>
        <member name="M:Rhino.Geometry.Plane.CreateFromNormal(Rhino.Geometry.Point3d,Rhino.Geometry.Vector3d)">
            <summary>
            Constructs a plane from a point and normal vector.
            </summary>
            <param name="origin">Point on the plane.</param>
            <param name="normal">Non-zero normal to the plane.</param>
            <returns>A valid plane if successful, or Plane.Unset on failure.</returns>
            <since>8.0</since>
        </member>
        <member name="M:Rhino.Geometry.Plane.CreateFromNormalYup(Rhino.Geometry.Point3d,Rhino.Geometry.Vector3d,Rhino.Geometry.Vector3d)">
            <summary>
            Construct a plane from a point, a normal vector, and a vector that projects to the positive YAxis.
            </summary>
            <param name="origin">Point on the plane.</param>
            <param name="normal">Non-zero normal to the plane.</param>
            <param name="yDirection">Non-zero vector, linearly independent from normal, that projects to the positive YAxis of the plane.</param>
            <returns>A valid plane if successful, or Plane.Unset on failure.</returns>
            <since>8.0</since>
        </member>
        <member name="M:Rhino.Geometry.Plane.CreateFromPoints(Rhino.Geometry.Point3d,Rhino.Geometry.Point3d,Rhino.Geometry.Point3d)">
            <summary>
            Construct a plane from three non-collinear points.
            </summary>
            <param name="origin">Point on the plane.</param>
            <param name="xPoint">Second point in the plane. XAxis will be parallel to xPoint-origin.</param>
            <param name="yPoint">
            Third point on the plane that is not collinear with the first two points, where
            YAxis*(yPoint-origin) will be &gt; 0.</param>
            <returns>A valid plane if successful, or Plane.Unset on failure.</returns>
            <since>8.0</since>
        </member>
        <member name="M:Rhino.Geometry.Plane.op_Equality(Rhino.Geometry.Plane,Rhino.Geometry.Plane)">
            <summary>
            Determines if two planes are equal.
            </summary>
            <param name="a">A first plane.</param>
            <param name="b">A second plane.</param>
            <returns>true if the two planes have all equal components; false otherwise.</returns>
            <since>5.0</since>
        </member>
        <member name="M:Rhino.Geometry.Plane.op_Inequality(Rhino.Geometry.Plane,Rhino.Geometry.Plane)">
            <summary>
            Determines if two planes are different.
            </summary>
            <param name="a">A first plane.</param>
            <param name="b">A second plane.</param>
            <returns>true if the two planes have any different component components; false otherwise.</returns>
            <since>5.0</since>
        </member>
        <member name="M:Rhino.Geometry.Plane.Equals(System.Object)">
            <summary>
            Determines if an object is a plane and has the same components as this plane.
            </summary>
            <param name="obj">An object.</param>
            <returns>true if obj is a plane and has the same components as this plane; false otherwise.</returns>
        </member>
        <member name="M:Rhino.Geometry.Plane.Equals(Rhino.Geometry.Plane)">
            <summary>
            Determines if another plane has the same components as this plane.
            </summary>
            <param name="plane">A plane.</param>
            <returns>true if plane has the same components as this plane; false otherwise.</returns>
            <since>5.0</since>
        </member>
        <member name="M:Rhino.Geometry.Plane.GetHashCode">
            <summary>
            Gets a non-unique hashing code for this entity.
            </summary>
            <returns>A particular number for a specific instance of plane.</returns>
        </member>
        <member name="M:Rhino.Geometry.Plane.ToString">
            <summary>
            Constructs the string representation of this plane.
            </summary>
            <returns>Text.</returns>
        </member>
        <member name="M:Rhino.Geometry.Plane.ToString(System.String,System.IFormatProvider)">
            <inheritdoc />
            <since>7.0</since>
        </member>
        <member name="P:Rhino.Geometry.Plane.Normal">
            <summary>
            Gets the normal of this plane. This is essentially the ZAxis of the plane.
            </summary>
            <since>5.0</since>
        </member>
        <member name="P:Rhino.Geometry.Plane.IsValid">
            <summary>
            Gets a value indicating whether or not this is a valid plane. 
            A plane is considered to be valid when all fields contain reasonable 
            information and the equation jibes with point and z-axis.
            </summary>
            <since>5.0</since>
        </member>
        <member name="M:Rhino.Geometry.Plane.GetPlaneEquation">
            <summary>
            Gets the plane equation for this plane in the format of Ax+By+Cz+D=0.
            </summary>
            <returns>
            Array of four values.
            </returns>
            <since>5.0</since>
        </member>
        <member name="M:Rhino.Geometry.Plane.UpdateEquation">
            <summary>
            Update Equations
            </summary>
            <returns>
            bool
            </returns>
            <since>6.0</since>
        </member>
        <member name="M:Rhino.Geometry.Plane.ValueAt(Rhino.Geometry.Point3d)">
            <summary>
            Get the value of the plane equation at the point.
            </summary>
            <param name="p">evaluation point.</param>
            <returns>returns pe[0]*p.X + pe[1]*p.Y + pe[2]*p.Z + pe[3] where
            pe[0], pe[1], pe[2] and pe[3] are the coefficients of the plane equation.
            
            </returns>
            <since>5.7</since>
        </member>
        <member name="M:Rhino.Geometry.Plane.PointAt(System.Double,System.Double)">
            <summary>
            Evaluate a point on the plane.
            </summary>
            <param name="u">evaluation parameter.</param>
            <param name="v">evaluation parameter.</param>
            <returns>plane.origin + u*plane.xaxis + v*plane.yaxis.</returns>
            <since>5.0</since>
        </member>
        <member name="M:Rhino.Geometry.Plane.IsCoplanar(Rhino.Geometry.Plane)">
            <summary>
            Test if this plane is co-planar with a another plane.
            </summary>
            <param name="plane">The plane to test.</param>
            <returns>True if this plane is co-planar with the test plane, false otherwise.</returns>
            <since>8.0</since>
        </member>
        <member name="M:Rhino.Geometry.Plane.IsCoplanar(Rhino.Geometry.Plane,System.Double)">
            <summary>
            Test if this plane is co-planar with a another plane.
            </summary>
            <param name="plane">The plane to test.</param>
            <param name="tolerance">Testing tolerance.</param>
            <returns>True if this plane is co-planar with the test plane, false otherwise.</returns>
            <since>8.0</since>
        </member>
        <member name="M:Rhino.Geometry.Plane.PointAt(System.Double,System.Double,System.Double)">
            <summary>
            Evaluate a point on the plane.
            </summary>
            <param name="u">evaluation parameter.</param>
            <param name="v">evaluation parameter.</param>
            <param name="w">evaluation parameter.</param>
            <returns>plane.origin + u*plane.xaxis + v*plane.yaxis + z*plane.zaxis.</returns>
            <since>5.0</since>
        </member>
        <member name="M:Rhino.Geometry.Plane.ExtendThroughBox(Rhino.Geometry.BoundingBox,Rhino.Geometry.Interval@,Rhino.Geometry.Interval@)">
            <summary>
            Extends this plane through a bounding box. 
            </summary>
            <param name="box">A box to use as minimal extension boundary.</param>
            <param name="s">
            If this function returns true, 
            the s parameter returns the Interval on the plane along the X direction that will 
            encompass the Box.
            </param>
            <param name="t">
            If this function returns true, 
            the t parameter returns the Interval on the plane along the Y direction that will 
            encompass the Box.
            </param>
            <returns>true on success, false on failure.</returns>
            <since>5.0</since>
        </member>
        <member name="M:Rhino.Geometry.Plane.ExtendThroughBox(Rhino.Geometry.Box,Rhino.Geometry.Interval@,Rhino.Geometry.Interval@)">
            <summary>
            Extend this plane through a Box. 
            </summary>
            <param name="box">A box to use for extension.</param>
            <param name="s">
            If this function returns true, 
            the s parameter returns the Interval on the plane along the X direction that will 
            encompass the Box.
            </param>
            <param name="t">
            If this function returns true, 
            the t parameter returns the Interval on the plane along the Y direction that will 
            encompass the Box.
            </param>
            <returns>true on success, false on failure.</returns>
            <since>5.0</since>
        </member>
        <member name="M:Rhino.Geometry.Plane.ClosestParameter(Rhino.Geometry.Point3d,System.Double@,System.Double@)">
            <summary>
            Gets the parameters of the point on the plane closest to a test point.
            </summary>
            <param name="testPoint">Point to get close to.</param>
            <param name="s">Parameter along plane X-direction.</param>
            <param name="t">Parameter along plane Y-direction.</param>
            <returns>
            true if a parameter could be found, 
            false if the point could not be projected successfully.
            </returns>
            <example>
            <code source='examples\vbnet\ex_addlineardimension2.vb' lang='vbnet'/>
            <code source='examples\cs\ex_addlineardimension2.cs' lang='cs'/>
            <code source='examples\py\ex_addlineardimension2.py' lang='py'/>
            </example>
            <since>5.0</since>
        </member>
        <member name="M:Rhino.Geometry.Plane.ClosestPoint(Rhino.Geometry.Point3d)">
            <summary>
            Gets the point on the plane closest to a test point.
            </summary>
            <param name="testPoint">Point to get close to.</param>
            <returns>
            The point on the plane that is closest to testPoint, 
            or Point3d.Unset on failure.
            </returns>
            <since>5.0</since>
        </member>
        <member name="M:Rhino.Geometry.Plane.DistanceTo(Rhino.Geometry.Point3d)">
            <summary>
            Returns the signed distance from testPoint to its projection onto this plane. 
            If the point is below the plane, a negative distance is returned.
            </summary>
            <param name="testPoint">Point to test.</param>
            <returns>Signed distance from this plane to testPoint.</returns>
            <example>
            <code source='examples\vbnet\ex_issurfaceinplane.vb' lang='vbnet'/>
            <code source='examples\cs\ex_issurfaceinplane.cs' lang='cs'/>
            <code source='examples\py\ex_issurfaceinplane.py' lang='py'/>
            </example>
            <since>5.0</since>
        </member>
        <member name="M:Rhino.Geometry.Plane.DistanceTo(Rhino.Geometry.BoundingBox,System.Double@,System.Double@)">
            <summary>
            Returns the signed minimum and maximum distances from bounding box to this plane.
            </summary>
            <param name="bbox">bounding box to get distances from</param>
            <param name="min">minimum signed distance from plane to box</param>
            <param name="max">maximum signed distance from plane to box</param>
            <returns>false if plane has zero length normal</returns>
            <since>6.0</since>
        </member>
        <member name="M:Rhino.Geometry.Plane.RemapToPlaneSpace(Rhino.Geometry.Point3d,Rhino.Geometry.Point3d@)">
            <summary>
            Convert a point from World space coordinates into Plane space coordinates.
            </summary>
            <param name="ptSample">World point to remap.</param>
            <param name="ptPlane">Point in plane (s,t,d) coordinates.</param>
            <returns>true on success, false on failure.</returns>
            <remarks>D stands for distance, not disease.</remarks>
            <since>5.0</since>
        </member>
        <member name="M:Rhino.Geometry.Plane.Flip">
            <summary>
            Flip this plane by swapping out the X and Y axes and inverting the Z axis.
            </summary>
            <since>5.0</since>
        </member>
        <member name="M:Rhino.Geometry.Plane.Transform(Rhino.Geometry.Transform)">
            <summary>
            Transform the plane with a Transformation matrix.
            </summary>
            <param name="xform">Transformation to apply to plane.</param>
            <returns>true on success, false on failure.</returns>
            <since>5.0</since>
        </member>
        <member name="M:Rhino.Geometry.Plane.Translate(Rhino.Geometry.Vector3d)">
            <summary>
            Translate (move) the plane along a vector.
            </summary>
            <param name="delta">Translation (motion) vector.</param>
            <returns>true on success, false on failure.</returns>
            <since>5.0</since>
        </member>
        <member name="M:Rhino.Geometry.Plane.Rotate(System.Double,System.Double,Rhino.Geometry.Vector3d)">
            <summary>
            Rotate the plane about its origin point.
            </summary>
            <param name="sinAngle">Sin(angle).</param>
            <param name="cosAngle">Cos(angle).</param>
            <param name="axis">Axis of rotation.</param>
            <returns>true on success, false on failure.</returns>
            <since>5.0</since>
        </member>
        <member name="M:Rhino.Geometry.Plane.Rotate(System.Double,Rhino.Geometry.Vector3d)">
            <summary>
            Rotate the plane about its origin point.
            </summary>
            <param name="angle">Angle in radians.</param>
            <param name="axis">Axis of rotation.</param>
            <returns>true on success, false on failure.</returns>
            <since>5.0</since>
        </member>
        <member name="M:Rhino.Geometry.Plane.Rotate(System.Double,Rhino.Geometry.Vector3d,Rhino.Geometry.Point3d)">
            <summary>
            Rotate the plane about a custom anchor point.
            </summary>
            <param name="angle">Angle in radians.</param>
            <param name="axis">Axis of rotation.</param>
            <param name="centerOfRotation">Center of rotation.</param>
            <returns>true on success, false on failure.</returns>
            <since>5.0</since>
        </member>
        <member name="M:Rhino.Geometry.Plane.Rotate(System.Double,System.Double,Rhino.Geometry.Vector3d,Rhino.Geometry.Point3d)">
            <summary>Rotate the plane about a custom anchor point.</summary>
            <param name="sinAngle">Sin(angle)</param>
            <param name="cosAngle">Cos(angle)</param>
            <param name="axis">Axis of rotation.</param>
            <param name="centerOfRotation">Center of rotation.</param>
            <returns>true on success, false on failure.</returns>
            <since>5.0</since>
        </member>
        <member name="M:Rhino.Geometry.Plane.EpsilonEquals(Rhino.Geometry.Plane,System.Double)">
            <summary>
            Check that all values in other are within epsilon of the values in this
            </summary>
            <param name="other"></param>
            <param name="epsilon"></param>
            <returns></returns>
            <since>5.4</since>
        </member>
        <member name="M:Rhino.Geometry.Plane.System#ICloneable#Clone">
            <since>6.0</since>
        </member>
        <member name="M:Rhino.Geometry.Plane.Clone">
            <summary>
            Returns a deep copy of this instance.
            </summary>
            <returns>A plane with the same values as this item.</returns>
            <since>6.0</since>
        </member>
        <member name="T:Rhino.Geometry.PlaneSurface">
            <summary>
            Represents a plane surface.
            </summary>
        </member>
        <member name="M:Rhino.Geometry.PlaneSurface.#ctor">
            <summary>
            Constructs a new plane surface.
            </summary>
            <since>8.0</since>
        </member>
        <member name="M:Rhino.Geometry.PlaneSurface.#ctor(Rhino.Geometry.Plane)">
            <summary>
            Constructs a new plane surface.
            </summary>
            <param name="plane">The plane.</param>
        </member>
        <member name="M:Rhino.Geometry.PlaneSurface.#ctor(Rhino.Geometry.Plane,Rhino.Geometry.Interval,Rhino.Geometry.Interval)">
            <summary>
            Constructs a plane surface with x and y extents.
            </summary>
            <param name="plane">The plane.</param>
            <param name="xExtents">The increasing x interval of the plane that defines the rectangle.
            The corresponding evaluation interval domain is set so that it matches the
            extents interval.</param>
            <param name="yExtents">The increasing y interval of the plane that defines the rectangle.
            The corresponding evaluation interval domain is set so that it matches the
            extents interval.</param>
            <example>
            <code source='examples\vbnet\ex_planesurface.vb' lang='vbnet'/>
            <code source='examples\cs\ex_planesurface.cs' lang='cs'/>
            <code source='examples\py\ex_planesurface.py' lang='py'/>
            </example>
            <since>5.0</since>
        </member>
        <member name="M:Rhino.Geometry.PlaneSurface.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Protected constructor for internal use.
            </summary>
            <param name="info">Serialization data.</param>
            <param name="context">Serialization stream.</param>
        </member>
        <member name="P:Rhino.Geometry.PlaneSurface.Plane">
            <summary>
            Gets or sets the plane surface's plane.
            </summary>
            <since>8.0</since>
        </member>
        <member name="M:Rhino.Geometry.PlaneSurface.ToMesh">
            <summary>
            Computes a polygon mesh of the surface made of one quad.
            </summary>
            <returns>A polygon mesh of the surface.</returns>
            <since>8.0</since>
        </member>
        <member name="M:Rhino.Geometry.PlaneSurface.CreateThroughBox(Rhino.Geometry.Line,Rhino.Geometry.Vector3d,Rhino.Geometry.BoundingBox)">
            <summary>
            Create a plane that contains the intersection of a bounding box.
            </summary>
            <param name="lineInPlane">A line that will lie on the plane.</param>
            <param name="vectorInPlane">A vector the direction of which will be in plane.</param>
            <param name="box">A box to cut through.</param>
            <returns>A new plane surface on success, or null on error.</returns>
            <since>5.0</since>
        </member>
        <member name="M:Rhino.Geometry.PlaneSurface.CreateThroughBox(Rhino.Geometry.Plane,Rhino.Geometry.BoundingBox)">
            <summary>
            Create a plane that contains the intersection of a bounding box.
            </summary>
            <param name="plane">An original plane value.</param>
            <param name="box">A box to use for extension boundary.</param>
            <returns>A new plane surface on success, or null on error.</returns>
            <example>
            <code source='examples\vbnet\ex_splitbrepwithplane.vb' lang='vbnet'/>
            <code source='examples\cs\ex_splitbrepwithplane.cs' lang='cs'/>
            <code source='examples\py\ex_splitbrepwithplane.py' lang='py'/>
            </example>
            <since>5.0</since>
        </member>
        <member name="T:Rhino.Geometry.ClippingPlaneSurface">
            <summary>
            Represents a planar surface that is used as clipping plane in viewports.
            A clipping plane object maintains a list of viewports that it clips against.
            </summary>
        </member>
        <member name="M:Rhino.Geometry.ClippingPlaneSurface.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Protected constructor for internal use.
            </summary>
            <param name="info">Serialization data.</param>
            <param name="context">Serialization stream.</param>
        </member>
        <member name="P:Rhino.Geometry.ClippingPlaneSurface.PlaneDepth">
            <summary>
            Distance that the clipping has an effect
            </summary>
            <since>8.0</since>
        </member>
        <member name="P:Rhino.Geometry.ClippingPlaneSurface.PlaneDepthEnabled">
            <summary>
            Determines if the PlaneDepth value should be used
            </summary>
            <since>8.0</since>
        </member>
        <member name="M:Rhino.Geometry.ClippingPlaneSurface.ViewportIds">
            <summary>
            Returns the ids of RhinoViewport objects that are clipped by this clipping plane.
            </summary>
            <returns>The ids of RhinoViewport objects.</returns>
            <since>5.0</since>
        </member>
        <member name="M:Rhino.Geometry.ClippingPlaneSurface.AddClipViewportId(System.Guid)">
            <summary>
            Adds a viewport id to the list of viewports that this clipping plane clips.
            </summary>
            <param name="viewportId">The id of the RhinoViewport to add.</param>
            <returns>true if the viewport was added, false if the viewport is already in the list.</returns>
            <since>6.1</since>
        </member>
        <member name="M:Rhino.Geometry.ClippingPlaneSurface.RemoveClipViewportId(System.Guid)">
            <summary>
            Removes a viewport id that this being clipped by this clipping plane.
            </summary>
            <param name="viewportId">The id of the RhinoViewport to remove.</param>
            <returns>true if the viewport was removed, false if the viewport was not in the list.</returns>
            <since>6.1</since>
        </member>
        <member name="P:Rhino.Geometry.ClippingPlaneSurface.ParticipationListsEnabled">
            <summary>
            Should the object and layer participation lists be used when determining clipping
            </summary>
            <since>8.0</since>
        </member>
        <member name="M:Rhino.Geometry.ClippingPlaneSurface.SetClipParticipation(System.Collections.Generic.IEnumerable{System.Guid},System.Collections.Generic.IEnumerable{System.Int32},System.Boolean)">
            <summary>
            Set a list of specific object ids and layers that this clipping plane surface clips.
            </summary>
            <param name="objectIds"></param>
            <param name="layerIndices"></param>
            <param name="isExclusionList">Is the list a set of ids to not clip or a set to clip</param>
            <since>8.0</since>
        </member>
        <member name="M:Rhino.Geometry.ClippingPlaneSurface.GetClipParticipation(System.Collections.Generic.IEnumerable{System.Guid}@,System.Collections.Generic.IEnumerable{System.Int32}@,System.Boolean@)">
            <summary>
            </summary>
            <param name="objectIds"></param>
            <param name="layerIndices"></param>
            <param name="isExclusionList"></param>
        </member>
        <member name="M:Rhino.Geometry.ClippingPlaneSurface.ClearClipParticipationLists">
            <summary>
            Remove list of object ids that this clipping plane surface clips. This causes the clipping
            plane surface to clip all objects
            </summary>
            <since>8.0</since>
        </member>
        <member name="T:Rhino.Geometry.MeshPoint">
            <summary>
            Represents a point that is found on a mesh.
            </summary>
        </member>
        <member name="P:Rhino.Geometry.MeshPoint.Mesh">
            <summary>
            The mesh that is related to this point.
            </summary>
            <since>5.0</since>
        </member>
        <member name="P:Rhino.Geometry.MeshPoint.EdgeParameter">
            <summary>
            Edge parameter when found.
            </summary>
            <since>5.0</since>
        </member>
        <member name="P:Rhino.Geometry.MeshPoint.ComponentIndex">
            <summary>
            Gets the component index of the intersecting element in the mesh.
            </summary>
            <since>5.0</since>
        </member>
        <member name="P:Rhino.Geometry.MeshPoint.EdgeIndex">
            <summary>
            When set, EdgeIndex is an index of an edge in the mesh's edge list.
            </summary>
            <since>5.0</since>
        </member>
        <member name="P:Rhino.Geometry.MeshPoint.FaceIndex">
            <summary>
            FaceIndex is an index of a face in mesh.Faces.
            When ComponentIndex refers to a vertex, any face that uses the vertex
            may appear as FaceIndex.  When ComponenctIndex refers to an Edge or
            EdgeIndex is set, then any face that uses that edge may appear as FaceIndex.
            </summary>
            <since>5.0</since>
        </member>
        <member name="P:Rhino.Geometry.MeshPoint.Triangle">
            <summary>
            Face triangle where the intersection takes place:
            <para>0 is unset</para>
            <para>A is 0,1,2</para>
            <para>B is 0,2,3</para>
            <para>C is 0,1,3</para>
            <para>D is 1,2,3</para>
            </summary>
            <since>5.0</since>
        </member>
        <member name="P:Rhino.Geometry.MeshPoint.T">
            <summary>
            Barycentric quad coordinates for the point on the mesh
            face mesh.Faces[FaceIndex].  If the face is a triangle
            disregard T[3] (it should be set to 0.0). If the face is
            a quad and is split between vertices 0 and 2, then T[3]
            will be 0.0 when point is on the triangle defined by vi[0],
            vi[1], vi[2], and T[1] will be 0.0 when point is on the
            triangle defined by vi[0], vi[2], vi[3]. If the face is a
            quad and is split between vertices 1 and 3, then T[2] will
            be 0.0 when point is on the triangle defined by vi[0],
            vi[1], vi[3], and m_t[0] will be 0.0 when point is on the
            triangle defined by vi[1], vi[2], vi[3].
            </summary>
            <since>5.0</since>
        </member>
        <member name="P:Rhino.Geometry.MeshPoint.Point">
            <summary>
            Gets the location (position) of this point.
            </summary>
            <since>5.0</since>
        </member>
        <member name="T:Rhino.Geometry.Interval">
            <summary>
            Represents an interval in one-dimensional space,
            that is defined as two extrema or bounds.
            </summary>
        </member>
        <member name="M:Rhino.Geometry.Interval.#ctor(System.Double,System.Double)">
            <summary>
            Initializes a new instance of the Rhino.Geometry.Interval class.
            </summary>
            <param name="t0">The first value.</param>
            <param name="t1">The second value.</param>
            <since>5.0</since>
        </member>
        <member name="M:Rhino.Geometry.Interval.#ctor(Rhino.Geometry.Interval)">
            <summary>
            Initializes a new instance copying the other instance values.
            </summary>
            <param name="other">The Rhino.Geometry.Interval to use as a base.</param>
            <since>5.0</since>
        </member>
        <member name="M:Rhino.Geometry.Interval.op_Equality(Rhino.Geometry.Interval,Rhino.Geometry.Interval)">
            <summary>
            Determines whether the two Intervals have equal values.
            </summary>
            <param name="a">The first interval.</param>
            <param name="b">The second interval.</param>
            <returns>true if the components of the two intervals are exactly equal; otherwise false.</returns>
            <since>5.0</since>
        </member>
        <member name="M:Rhino.Geometry.Interval.op_Inequality(Rhino.Geometry.Interval,Rhino.Geometry.Interval)">
            <summary>
            Determines whether the two Intervals have different values.
            </summary>
            <param name="a">The first interval.</param>
            <param name="b">The second interval.</param>
            <returns>true if the two intervals are different in any value; false if they are equal.</returns>
            <since>5.0</since>
        </member>
        <member name="M:Rhino.Geometry.Interval.op_Addition(Rhino.Geometry.Interval,System.Double)">
            <summary>
            Shifts a <see cref="T:Rhino.Geometry.Interval" /> by a specific amount (addition).
            </summary>
            <param name="interval">The interval to be used as a base.</param>
            <param name="number">The shifting value.</param>
            <returns>A new interval where T0 and T1 are summed with number.</returns>
        </member>
        <member name="M:Rhino.Geometry.Interval.op_Addition(System.Double,Rhino.Geometry.Interval)">
            <summary>
            Shifts an interval by a specific amount (addition).
            </summary>
            <param name="number">The shifting value.</param>
            <param name="interval">The interval to be used as a base.</param>
            <returns>A new interval where T0 and T1 are summed with number.</returns>
        </member>
        <member name="M:Rhino.Geometry.Interval.op_Subtraction(Rhino.Geometry.Interval,System.Double)">
            <summary>
            Shifts an interval by a specific amount (subtraction).
            </summary>
            <param name="interval">The base interval (minuend).</param>
            <param name="number">The shifting value to be subtracted (subtrahend).</param>
            <returns>A new interval with [T0-number, T1-number].</returns>
            <since>5.0</since>
        </member>
        <member name="M:Rhino.Geometry.Interval.op_Subtraction(System.Double,Rhino.Geometry.Interval)">
            <summary>
            Shifts an interval by a specific amount (subtraction).
            </summary>
            <param name="number">The shifting value to subtract from (minuend).</param>
            <param name="interval">The interval to be subtracted from (subtrahend).</param>
            <returns>A new interval with [number-T0, number-T1].</returns>
            <since>5.0</since>
        </member>
        <member name="M:Rhino.Geometry.Interval.op_LessThan(Rhino.Geometry.Interval,Rhino.Geometry.Interval)">
            <summary>
            Determines whether the first specified <see cref="T:Rhino.Geometry.Interval"/> comes before
            (has inferior sorting value than) the second Interval.
            <para>The lower bound has first evaluation priority.</para>
            </summary>
            <param name="a">First interval.</param>
            <param name="b">Second interval.</param>
            <returns>true if a[0] is smaller than b[0], or a[0] == b[0] and a[1] is smaller than b[1]; otherwise, false.</returns>
            <since>5.0</since>
        </member>
        <member name="M:Rhino.Geometry.Interval.op_LessThanOrEqual(Rhino.Geometry.Interval,Rhino.Geometry.Interval)">
            <summary>
            Determines whether the first specified <see cref="T:Rhino.Geometry.Interval"/> comes before
            (has inferior sorting value than) the second Interval, or is equal to it.
            <para>The lower bound has first evaluation priority.</para>
            </summary>
            <param name="a">First interval.</param>
            <param name="b">Second interval.</param>
            <returns>true if a[0] is smaller than b[0], or a[0] == b[0] and a[1] is smaller than or equal to b[1]; otherwise, false.</returns>
            <since>5.0</since>
        </member>
        <member name="M:Rhino.Geometry.Interval.op_GreaterThan(Rhino.Geometry.Interval,Rhino.Geometry.Interval)">
            <summary>
            Determines whether the first specified <see cref="T:Rhino.Geometry.Interval"/> comes after
            (has superior sorting value than) the second Interval.
            <para>The lower bound has first evaluation priority.</para>
            </summary>
            <param name="a">First interval.</param>
            <param name="b">Second interval.</param>
            <returns>true if a[0] is larger than b[0], or a[0] == b[0] and a[1] is larger than b[1]; otherwise, false.</returns>
            <since>5.0</since>
        </member>
        <member name="M:Rhino.Geometry.Interval.op_GreaterThanOrEqual(Rhino.Geometry.Interval,Rhino.Geometry.Interval)">
            <summary>
            Determines whether the first specified <see cref="T:Rhino.Geometry.Interval"/> comes after
            (has superior sorting value than) the second Interval, or is equal to it.
            <para>The lower bound has first evaluation priority.</para>
            </summary>
            <param name="a">First interval.</param>
            <param name="b">Second interval.</param>
            <returns>true if a[0] is larger than b[0], or a[0] == b[0] and a[1] is larger than or equal to b[1]; otherwise, false.</returns>
            <since>5.0</since>
        </member>
        <member name="P:Rhino.Geometry.Interval.Unset">
            <summary>
            Gets an Interval whose limits are RhinoMath.UnsetValue.
            </summary>
            <since>5.0</since>
        </member>
        <member name="P:Rhino.Geometry.Interval.T0">
            <summary>
            Gets or sets the lower bound of the Interval.
            </summary>
            <since>5.0</since>
        </member>
        <member name="P:Rhino.Geometry.Interval.T1">
            <summary>
            Gets or sets the upper bound of the Interval.
            </summary>
            <since>5.0</since>
        </member>
        <member name="P:Rhino.Geometry.Interval.Item(System.Int32)">
            <summary>
            Gets or sets the indexed bound of this Interval.
            </summary>
            <param name="index">Bound index (0 = lower; 1 = upper).</param>
        </member>
        <member name="P:Rhino.Geometry.Interval.Min">
            <summary>
            Gets the smaller of T0 and T1.
            </summary>
            <since>5.0</since>
        </member>
        <member name="P:Rhino.Geometry.Interval.Max">
            <summary>
            Gets the larger of T0 and T1.
            </summary>
            <since>5.0</since>
        </member>
        <member name="P:Rhino.Geometry.Interval.Mid">
            <summary>
            Gets the average of T0 and T1.
            </summary>
            <example>
            <code source='examples\vbnet\ex_extendcurve.vb' lang='vbnet'/>
            <code source='examples\cs\ex_extendcurve.cs' lang='cs'/>
            <code source='examples\py\ex_extendcurve.py' lang='py'/>
            </example>
            <since>5.0</since>
        </member>
        <member name="P:Rhino.Geometry.Interval.Length">
            <summary>
            Gets the signed length of the numeric range. 
            If the interval is decreasing, a negative length will be returned.
            </summary>
            <since>5.0</since>
        </member>
        <member name="P:Rhino.Geometry.Interval.IsValid">
            <summary>
            Gets a value indicating whether or not this Interval is valid. 
            Valid intervals must contain valid numbers.
            </summary>
            <since>5.0</since>
        </member>
        <member name="P:Rhino.Geometry.Interval.IsSingleton">
            <summary>
            Returns true if T0 == T1 != ON.UnsetValue.
            </summary>
            <since>5.0</since>
        </member>
        <member name="P:Rhino.Geometry.Interval.IsIncreasing">
            <summary>
            Returns true if T0 &lt; T1.
            </summary>
            <since>5.0</since>
        </member>
        <member name="P:Rhino.Geometry.Interval.IsDecreasing">
            <summary> 
            Returns true if T[0] &gt; T[1].
            </summary>
            <since>5.0</since>
        </member>
        <member name="M:Rhino.Geometry.Interval.GetHashCode">
            <summary>
            Computes the hash code for this <see cref="T:Rhino.Geometry.Interval" /> object.
            </summary>
            <returns>A hash value that might be equal for two different <see cref="T:Rhino.Geometry.Interval" /> values.</returns>
        </member>
        <member name="M:Rhino.Geometry.Interval.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object" /> is equal to the current <see cref="T:Rhino.Geometry.Interval" />,
            comparing by value.
            </summary>
            <param name="obj">The other object to compare with.</param>
            <returns>true if obj is an <see cref="T:Rhino.Geometry.Interval" /> and has the same bounds; false otherwise.</returns>
        </member>
        <member name="M:Rhino.Geometry.Interval.Equals(Rhino.Geometry.Interval)">
            <summary>
            Determines whether the specified <see cref="T:Rhino.Geometry.Interval" /> is equal to the current <see cref="T:Rhino.Geometry.Interval" />,
            comparing by value.
            </summary>
            <param name="other">The other interval to compare with.</param>
            <returns>true if obj is an <see cref="T:Rhino.Geometry.Interval" /> and has the same bounds; false otherwise.</returns>
            <since>5.0</since>
        </member>
        <member name="M:Rhino.Geometry.Interval.CompareTo(Rhino.Geometry.Interval)">
             <summary>
             Compares this <see cref="T:Rhino.Geometry.Interval" /> with another interval.
             <para>The lower bound has first evaluation priority.</para>
             </summary>
             <param name="other">The other <see cref="T:Rhino.Geometry.Interval" /> to compare with.</param>
            <returns>
            <para> 0: if this is identical to other</para>
            <para>-1: if this[0] &lt; other[0]</para>
            <para>+1: if this[0] &gt; other[0]</para>
            <para>-1: if this[0] == other[0] and this[1] &lt; other[1]</para>
            <para>+1: if this[0] == other[0] and this[1] &gt; other[1]</para>.</returns>
             <since>5.0</since>
        </member>
        <member name="M:Rhino.Geometry.Interval.ToString">
            <summary>
            Returns a string representation of this <see cref="T:Rhino.Geometry.Interval" />.
            </summary>
            <returns>A string with T0,T1.</returns>
        </member>
        <member name="M:Rhino.Geometry.Interval.Grow(System.Double)">
            <summary>
            Grows the <see cref="T:Rhino.Geometry.Interval" /> to include the given number.
            </summary>
            <param name="value">Number to include in this interval.</param>
            <since>5.0</since>
        </member>
        <member name="M:Rhino.Geometry.Interval.MakeIncreasing">
            <summary>
            Ensures this <see cref="T:Rhino.Geometry.Interval" /> is either singleton or increasing.
            </summary>
            <since>5.0</since>
        </member>
        <member name="M:Rhino.Geometry.Interval.Reverse">
            <summary>
            Changes interval to [-T1, -T0].
            </summary>
            <since>5.0</since>
        </member>
        <member name="M:Rhino.Geometry.Interval.Swap">
            <summary>
            Exchanges T0 and T1.
            </summary>
            <since>5.0</since>
        </member>
        <member name="M:Rhino.Geometry.Interval.ParameterAt(System.Double)">
            <summary>Converts normalized parameter to interval value, or pair of values.</summary>
            <returns>Interval parameter min*(1.0-normalizedParameter) + max*normalizedParameter.</returns>
            <seealso>NormalizedParameterAt</seealso>
             <since>5.0</since>
        </member>
        <member name="M:Rhino.Geometry.Interval.ParameterIntervalAt(Rhino.Geometry.Interval)">
            <summary>Converts normalized parameter to interval value, or pair of values.</summary>
            <returns>Interval parameter min*(1.0-normalizedParameter) + max*normalized_paramete.</returns>
            <seealso>NormalizedParameterAt</seealso>
             <since>5.0</since>
        </member>
        <member name="M:Rhino.Geometry.Interval.NormalizedParameterAt(System.Double)">
            <summary>Converts interval value, or pair of values, to normalized parameter.</summary>
            <returns>Normalized parameter x so that min*(1.0-x) + max*x = intervalParameter.</returns>
            <seealso>ParameterAt</seealso>
             <since>5.0</since>
        </member>
        <member name="M:Rhino.Geometry.Interval.NormalizedIntervalAt(Rhino.Geometry.Interval)">
            <summary>Converts interval value, or pair of values, to normalized parameter.</summary>
            <returns>Normalized parameter x so that min*(1.0-x) + max*x = intervalParameter.</returns>
            <seealso>ParameterAt</seealso>
             <since>5.0</since>
        </member>
        <member name="M:Rhino.Geometry.Interval.IncludesParameter(System.Double)">
            <summary>
            Tests a parameter for Interval inclusion.
            </summary>
            <param name="t">Parameter to test.</param>
            <returns>true if t is contained within or is coincident with the limits of this Interval.</returns>
            <since>5.0</since>
        </member>
        <member name="M:Rhino.Geometry.Interval.IncludesParameter(System.Double,System.Boolean)">
            <summary>
            Tests a parameter for Interval inclusion.
            </summary>
            <param name="t">Parameter to test.</param>
            <param name="strict">If true, the parameter must be fully on the inside of the Interval.</param>
            <returns>true if t is contained within the limits of this Interval.</returns>
            <since>5.0</since>
        </member>
        <member name="M:Rhino.Geometry.Interval.IncludesInterval(Rhino.Geometry.Interval)">
            <summary>
            Tests another interval for Interval inclusion.
            </summary>
            <param name="interval">Interval to test.</param>
            <returns>true if the other interval is contained within or is coincident with the limits of this Interval; otherwise false.</returns>
            <since>5.0</since>
        </member>
        <member name="M:Rhino.Geometry.Interval.IncludesInterval(Rhino.Geometry.Interval,System.Boolean)">
            <summary>
            Tests another interval for Interval inclusion.
            </summary>
            <param name="interval">Interval to test.</param>
            <param name="strict">If true, the other interval must be fully on the inside of the Interval.</param>
            <returns>true if the other interval is contained within the limits of this Interval; otherwise false.</returns>
            <since>5.0</since>
        </member>
        <member name="M:Rhino.Geometry.Interval.FromIntersection(Rhino.Geometry.Interval,Rhino.Geometry.Interval)">
            <summary>
            Returns a new Interval that is the Intersection of the two input Intervals.
            </summary>
            <param name="a">The first input interval.</param>
            <param name="b">The second input interval.</param>
            <returns>If the intersection is not empty, then 
            intersection = [max(a.Min(),b.Min()), min(a.Max(),b.Max())]
            The interval [ON.UnsetValue,ON.UnsetValue] is considered to be
            the empty set interval.  The result of any intersection involving an
            empty set interval or disjoint intervals is the empty set interval.</returns>
            <since>5.0</since>
        </member>
        <member name="M:Rhino.Geometry.Interval.FromUnion(Rhino.Geometry.Interval,Rhino.Geometry.Interval)">
            <summary>
            Returns a new Interval which contains both inputs.
            </summary>
            <param name="a">The first input interval.</param>
            <param name="b">The second input interval.</param>
            <returns>The union of an empty set and an increasing interval is the increasing interval.
            <para>The union of two empty sets is empty.</para>
            <para>The union of an empty set an a non-empty interval is the non-empty interval.</para>
            <para>The union of two non-empty intervals is [min(a.Min(),b.Min()), max(a.Max(),b.Max())]</para>
            </returns>
            <since>5.0</since>
        </member>
        <member name="M:Rhino.Geometry.Interval.EpsilonEquals(Rhino.Geometry.Interval,System.Double)">
            <summary>
            Check that all values in other are within epsilon of the values in this
            </summary>
            <param name="other"></param>
            <param name="epsilon"></param>
            <returns></returns>
            <since>5.4</since>
        </member>
        <member name="T:Rhino.Geometry.Point2d">
            <summary>
            Represents the two coordinates of a point in two-dimensional space,
            using <see cref="T:System.Double"/>-precision floating point numbers.
            </summary>
        </member>
        <member name="P:Rhino.Geometry.Point2d.X">
            <summary>
            Gets or sets the X (first) coordinate of the point.
            </summary>
            <since>5.0</since>
        </member>
        <member name="P:Rhino.Geometry.Point2d.Y">
            <summary>
            Gets or sets the Y (second) coordinate of the point.
            </summary>
            <since>5.0</since>
        </member>
        <member name="M:Rhino.Geometry.Point2d.#ctor(System.Double,System.Double)">
            <summary>
            Initializes a new instance of <see cref="T:Rhino.Geometry.Point2d"/> from coordinates.
            </summary>
            <param name="x">The X (first) coordinate.</param>
            <param name="y">The Y (second) coordinate.</param>
            <since>5.0</since>
        </member>
        <member name="M:Rhino.Geometry.Point2d.#ctor(Rhino.Geometry.Vector2d)">
            <summary>
            Initializes a new instance of <see cref="T:Rhino.Geometry.Point2d"/> by converting a vector.
            </summary>
            <param name="vector">The vector that will be copied.</param>
            <since>5.0</since>
        </member>
        <member name="M:Rhino.Geometry.Point2d.#ctor(Rhino.Geometry.Point2d)">
            <summary>
            Initializes a new instance of <see cref="T:Rhino.Geometry.Point2d"/> by copying another <see cref="T:Rhino.Geometry.Point2d"/>.
            </summary>
            <param name="point">The point that will be copied.</param>
            <since>5.0</since>
        </member>
        <member name="M:Rhino.Geometry.Point2d.#ctor(Rhino.Geometry.Point3d)">
            <summary>
            Initializes a new instance of <see cref="T:Rhino.Geometry.Point3d"/> by copying the first two coordinates of a <see cref="T:Rhino.Geometry.Point3d"/>.
            </summary>
            <param name="point">The point that will be used: the Z (third) coordinate is discarded.</param>
            <since>5.0</since>
        </member>
        <member name="M:Rhino.Geometry.Point2d.op_Multiply(Rhino.Geometry.Point2d,System.Double)">
            <summary>
            Multiplies a <see cref="T:Rhino.Geometry.Point2d"/> by a number.
            </summary>
            <param name="point">A point.</param>
            <param name="t">A number.</param>
            <returns>A new point that is coordinate-wise multiplied by t.</returns>
            <since>5.0</since>
        </member>
        <member name="M:Rhino.Geometry.Point2d.Multiply(Rhino.Geometry.Point2d,System.Double)">
            <summary>
            Multiplies a <see cref="T:Rhino.Geometry.Point2d"/> by a number.
            <para>(Provided for languages that do not support operator overloading. You can use the * operator otherwise)</para>
            </summary>
            <param name="point">A point.</param>
            <param name="t">A number.</param>
            <returns>A new point that is coordinate-wise multiplied by t.</returns>
            <since>5.0</since>
        </member>
        <member name="M:Rhino.Geometry.Point2d.op_Multiply(System.Double,Rhino.Geometry.Point2d)">
            <summary>
            Multiplies a <see cref="T:Rhino.Geometry.Point2d"/> by a number.
            </summary>
            <param name="t">A number.</param>
            <param name="point">A point.</param>
            <returns>A new point that is coordinate-wise multiplied by t.</returns>
            <since>5.0</since>
        </member>
        <member name="M:Rhino.Geometry.Point2d.Multiply(System.Double,Rhino.Geometry.Point2d)">
            <summary>
            Multiplies a <see cref="T:Rhino.Geometry.Point2d"/> by a number.
            <para>(Provided for languages that do not support operator overloading. You can use the * operator otherwise)</para>
            </summary>
            <param name="t">A number.</param>
            <param name="point">A point.</param>
            <returns>A new point that is coordinate-wise multiplied by t.</returns>
            <since>5.0</since>
        </member>
        <member name="M:Rhino.Geometry.Point2d.op_Division(Rhino.Geometry.Point2d,System.Double)">
            <summary>
            Divides a <see cref="T:Rhino.Geometry.Point2d"/> by a number.
            </summary>
            <param name="t">A number.</param>
            <param name="point">A point.</param>
            <returns>A new point that is coordinate-wise divided by t.</returns>
            <since>5.0</since>
        </member>
        <member name="M:Rhino.Geometry.Point2d.Divide(Rhino.Geometry.Point2d,System.Double)">
            <summary>
            Divides a <see cref="T:Rhino.Geometry.Point2d"/> by a number.
            <para>(Provided for languages that do not support operator overloading. You can use the / operator otherwise)</para>
            </summary>
            <param name="point">A point.</param>
            <param name="t">A number.</param>
            <returns>A new point that is coordinate-wise divided by t.</returns>
            <since>5.0</since>
        </member>
        <member name="M:Rhino.Geometry.Point2d.op_Addition(Rhino.Geometry.Point2d,Rhino.Geometry.Vector2d)">
            <summary>
            Adds a point with a vector.
            </summary>
            <param name="point">A point.</param>
            <param name="vector">A vector.</param>
            <returns>A new point that is coordinate-wise summed with the vector.</returns>
        </member>
        <member name="M:Rhino.Geometry.Point2d.Add(Rhino.Geometry.Point2d,Rhino.Geometry.Vector2d)">
            <summary>
            Adds a point with a vector.
            <para>(Provided for languages that do not support operator overloading. You can use the + operator otherwise)</para>
            </summary>
            <param name="point">A point.</param>
            <param name="vector">A vector.</param>
            <returns>A new point that is coordinate-wise summed with the vector.</returns>
            <since>5.0</since>
        </member>
        <member name="M:Rhino.Geometry.Point2d.op_Addition(Rhino.Geometry.Vector2d,Rhino.Geometry.Point2d)">
            <summary>
            Adds a vector with a point.
            </summary>
            <param name="vector">A vector.</param>
            <param name="point">A point.</param>
            <returns>A new point that is coordinate-wise summed with the vector.</returns>
        </member>
        <member name="M:Rhino.Geometry.Point2d.Add(Rhino.Geometry.Vector2d,Rhino.Geometry.Point2d)">
            <summary>
            Adds a vector with a point.
            <para>(Provided for languages that do not support operator overloading. You can use the + operator otherwise)</para>
            </summary>
            <param name="vector">A vector.</param>
            <param name="point">A point.</param>
            <returns>A new point that is coordinate-wise summed with the vector.</returns>
            <since>5.0</since>
        </member>
        <member name="M:Rhino.Geometry.Point2d.op_Addition(Rhino.Geometry.Point2d,Rhino.Geometry.Point2d)">
            <summary>
            Adds a point with a point.
            </summary>
            <param name="point1">A point.</param>
            <param name="point2">A point.</param>
            <returns>A new point that is coordinate-wise summed with the other point.</returns>
        </member>
        <member name="M:Rhino.Geometry.Point2d.Add(Rhino.Geometry.Point2d,Rhino.Geometry.Point2d)">
            <summary>
            Adds a point with a point.
            <para>(Provided for languages that do not support operator overloading. You can use the + operator otherwise)</para>
            </summary>
            <param name="point1">A point.</param>
            <param name="point2">A point.</param>
            <returns>A new point that is coordinate-wise summed with the other point.</returns>
            <since>5.0</since>
        </member>
        <member name="M:Rhino.Geometry.Point2d.op_Subtraction(Rhino.Geometry.Point2d,Rhino.Geometry.Vector2d)">
            <summary>
            Subtracts a vector from a point.
            </summary>
            <param name="point">A point.</param>
            <param name="vector">A vector.</param>
            <returns>A new point that is coordinate-wise subtracted by vector.</returns>
            <since>5.0</since>
        </member>
        <member name="M:Rhino.Geometry.Point2d.Subtract(Rhino.Geometry.Point2d,Rhino.Geometry.Vector2d)">
            <summary>
            Subtracts a vector from a point.
            <para>(Provided for languages that do not support operator overloading. You can use the - operator otherwise)</para>
            </summary>
            <param name="point">A point.</param>
            <param name="vector">A vector.</param>
            <returns>A new point that is coordinate-wise subtracted by vector.</returns>
            <since>5.0</since>
        </member>
        <member name="M:Rhino.Geometry.Point2d.op_Subtraction(Rhino.Geometry.Point2d,Rhino.Geometry.Point2d)">
            <summary>
            Subtracts point2 from point1.
            </summary>
            <param name="point1">A point (minuend).</param>
            <param name="point2">A point (subtrahend).</param>
            <returns>A new vector that is point1 coordinate-wise subtracted by point2.</returns>
            <since>5.0</since>
        </member>
        <member name="M:Rhino.Geometry.Point2d.Subtract(Rhino.Geometry.Point2d,Rhino.Geometry.Point2d)">
            <summary>
            Subtracts the second point from the first point.
            <para>(Provided for languages that do not support operator overloading. You can use the - operator otherwise)</para>
            </summary>
            <param name="point1">A point (minuend).</param>
            <param name="point2">A point (subtrahend).</param>
            <returns>A new vector that is point1 coordinate-wise subtracted by point2.</returns>
            <since>5.0</since>
        </member>
        <member name="M:Rhino.Geometry.Point2d.op_Equality(Rhino.Geometry.Point2d,Rhino.Geometry.Point2d)">
            <summary>
            Determines whether two <see cref="T:Rhino.Geometry.Point2d"/> have equal values.
            </summary>
            <param name="a">The first point.</param>
            <param name="b">The second point.</param>
            <returns>true if the coordinates of the two points are exactly equal; otherwise false.</returns>
            <since>5.0</since>
        </member>
        <member name="M:Rhino.Geometry.Point2d.op_Inequality(Rhino.Geometry.Point2d,Rhino.Geometry.Point2d)">
            <summary>
            Determines whether two <see cref="T:Rhino.Geometry.Point2d"/> have different values.
            </summary>
            <param name="a">The first point.</param>
            <param name="b">The second point.</param>
            <returns>true if the two points differ in any coordinate; false otherwise.</returns>
            <since>5.0</since>
        </member>
        <member name="M:Rhino.Geometry.Point2d.op_LessThan(Rhino.Geometry.Point2d,Rhino.Geometry.Point2d)">
            <summary>
            Determines whether the first specified point comes before (has inferior sorting value than) the second point.
            <para>Coordinates evaluation priority is first X, then Y.</para>
            </summary>
            <param name="a">First point.</param>
            <param name="b">Second point.</param>
            <returns>true if a.X is smaller than b.X, or a.X == b.X and a.Y is smaller than b.Y; otherwise, false.</returns>
            <since>5.0</since>
        </member>
        <member name="M:Rhino.Geometry.Point2d.op_LessThanOrEqual(Rhino.Geometry.Point2d,Rhino.Geometry.Point2d)">
            <summary>
            Determines whether the first specified point comes before
            (has inferior sorting value than) the second point, or it is equal to it.
            <para>Coordinates evaluation priority is first X, then Y.</para>
            </summary>
            <param name="a">First point.</param>
            <param name="b">Second point.</param>
            <returns>true if a.X is smaller than b.X, or a.X == b.X and a.Y &lt;= b.Y; otherwise, false.</returns>
            <since>5.0</since>
        </member>
        <member name="M:Rhino.Geometry.Point2d.op_GreaterThan(Rhino.Geometry.Point2d,Rhino.Geometry.Point2d)">
            <summary>
            Determines whether the first specified <see cref="T:Rhino.Geometry.Point2d"/> comes after
            (has superior sorting value than) the second point.
            <para>Coordinates evaluation priority is first X, then Y.</para>
            </summary>
            <param name="a">First point.</param>
            <param name="b">Second point.</param>
            <returns>true if a.X is larger than b.X, or a.X == b.X and a.Y is larger than b.Y; otherwise, false.</returns>
            <since>5.0</since>
        </member>
        <member name="M:Rhino.Geometry.Point2d.op_GreaterThanOrEqual(Rhino.Geometry.Point2d,Rhino.Geometry.Point2d)">
            <summary>
            Determines whether the first specified <see cref="T:Rhino.Geometry.Point2d"/> comes after
            (has superior sorting value than) the second point, or it is equal to it.
            <para>Coordinates evaluation priority is first X, then Y.</para>
            </summary>
            <param name="a">First point.</param>
            <param name="b">Second point.</param>
            <returns>true if a.X is larger than b.X, or a.X == b.X and a.Y &gt;= b.Y; otherwise, false.</returns>
            <since>5.0</since>
        </member>
        <member name="M:Rhino.Geometry.Point2d.Equals(System.Object)">
            <summary>
            Determines whether the specified System.Object is a Point2d and has the same values as the present point.
            </summary>
            <param name="obj">The specified object.</param>
            <returns>true if obj is a Point2d and has the same coordinates as this; otherwise false.</returns>
        </member>
        <member name="M:Rhino.Geometry.Point2d.Equals(Rhino.Geometry.Point2d)">
            <summary>
            Determines whether the specified Point2d has the same values as the present point.
            </summary>
            <param name="point">The specified point.</param>
            <returns>true if point has the same coordinates as this; otherwise false.</returns>
            <since>5.0</since>
        </member>
        <member name="M:Rhino.Geometry.Point2d.GetHashCode">
            <summary>
            Computes a hash number that represents the current point.
            </summary>
            <returns>A hash code that is not unique for each point.</returns>
        </member>
        <member name="M:Rhino.Geometry.Point2d.CompareTo(Rhino.Geometry.Point2d)">
            <summary>
            Compares this <see cref="T:Rhino.Geometry.Point2d" /> with another <see cref="T:Rhino.Geometry.Point2d" />.
            <para>Coordinates evaluation priority is first X, then Y.</para>
            </summary>
            <param name="other">The other <see cref="T:Rhino.Geometry.Point2d" /> to use in comparison.</param>
            <returns>
            <para> 0: if this is identical to other</para>
            <para>-1: if this.X &lt; other.X</para>
            <para>-1: if this.X == other.X and this.Y &lt; other.Y</para>
            <para>+1: otherwise.</para>
            </returns>
            <since>5.0</since>
        </member>
        <member name="M:Rhino.Geometry.Point2d.EpsilonEquals(Rhino.Geometry.Point2d,System.Double)">
            <summary>
            Check that all values in other are within epsilon of the values in this
            </summary>
            <param name="other"></param>
            <param name="epsilon"></param>
            <returns></returns>
            <since>5.4</since>
        </member>
        <member name="M:Rhino.Geometry.Point2d.ToString">
            <summary>
            Constructs the string representation for the current point.
            </summary>
            <returns>The point representation in the form X,Y.</returns>
        </member>
        <member name="M:Rhino.Geometry.Point2d.ToString(System.String,System.IFormatProvider)">
            <inheritdoc />
            <since>7.0</since>
        </member>
        <member name="P:Rhino.Geometry.Point2d.Item(System.Int32)">
            <summary>
            Accesses the coordinates of this point.
            </summary>
            <param name="index">Either 0 or 1.</param>
            <returns>If index is 0, the X (first) coordinate. If index is 1, the Y (second) coordinate.</returns>
        </member>
        <member name="P:Rhino.Geometry.Point2d.IsValid">
            <summary>
            If any coordinate of a point is UnsetValue, then the point is not valid.
            </summary>
             <since>5.0</since>
        </member>
        <member name="P:Rhino.Geometry.Point2d.MinimumCoordinate">
            <summary>
            Gets the smallest (both positive and negative) valid coordinate, or RhinoMath.UnsetValue if no coordinate is valid.
            </summary>
            <since>5.0</since>
        </member>
        <member name="P:Rhino.Geometry.Point2d.MaximumCoordinate">
            <summary>
            Gets the largest valid coordinate, or RhinoMath.UnsetValue if no coordinate is valid.
            </summary>
            <since>5.0</since>
        </member>
        <member name="P:Rhino.Geometry.Point2d.Origin">
            <summary>
            Gets a point at 0,0.
            </summary>
            <since>5.0</since>
        </member>
        <member name="P:Rhino.Geometry.Point2d.Unset">
            <summary>
            Gets a point at RhinoMath.UnsetValue,RhinoMath.UnsetValue.
            </summary>
            <since>5.0</since>
        </member>
        <member name="M:Rhino.Geometry.Point2d.DistanceTo(Rhino.Geometry.Point2d)">
            <summary>
            Computes the distance between two points.
            </summary>
            <param name="other">Another point.</param>
            <returns>The length of the line between the two points, or 0 if either point is invalid.</returns>
            <example>
            <code source='examples\vbnet\ex_leader.vb' lang='vbnet'/>
            <code source='examples\cs\ex_leader.cs' lang='cs'/>
            <code source='examples\py\ex_leader.py' lang='py'/>
            </example>
            <since>5.0</since>
        </member>
        <member name="M:Rhino.Geometry.Point2d.Transform(Rhino.Geometry.Transform)">
            <summary>
            Transforms the present point in place. The transformation matrix acts on the left of the point. i.e.,
            <para>result = transformation*point</para>
            </summary>
            <param name="xform">Transformation to apply.</param>
            <since>5.1</since>
        </member>
        <member name="T:Rhino.Geometry.Point3d">
            <summary>
            Represents the three coordinates of a point in three-dimensional space,
            using <see cref="T:System.Double"/>-precision floating point values.
            </summary>
        </member>
        <member name="M:Rhino.Geometry.Point3d.#ctor(System.Double,System.Double,System.Double)">
            <summary>
            Initializes a new point by defining the X, Y and Z coordinates.
            </summary>
            <param name="x">The value of the X (first) coordinate.</param>
            <param name="y">The value of the Y (second) coordinate.</param>
            <param name="z">The value of the Z (third) coordinate.</param>
            <example>
            <code source='examples\vbnet\ex_addcircle.vb' lang='vbnet'/>
            <code source='examples\cs\ex_addcircle.cs' lang='cs'/>
            <code source='examples\py\ex_addcircle.py' lang='py'/>
            </example>
            <since>5.0</since>
        </member>
        <member name="M:Rhino.Geometry.Point3d.#ctor(Rhino.Geometry.Vector3d)">
            <summary>
            Initializes a new point by copying coordinates from the components of a vector.
            </summary>
            <param name="vector">A vector.</param>
            <since>5.0</since>
        </member>
        <member name="M:Rhino.Geometry.Point3d.#ctor(Rhino.Geometry.Point3f)">
            <summary>
            Initializes a new point by copying coordinates from a single-precision point.
            </summary>
            <param name="point">A point.</param>
            <since>5.0</since>
        </member>
        <member name="M:Rhino.Geometry.Point3d.#ctor(Rhino.Geometry.Point3d)">
            <summary>
            Initializes a new point by copying coordinates from another point.
            </summary>
            <param name="point">A point.</param>
            <since>5.0</since>
        </member>
        <member name="M:Rhino.Geometry.Point3d.#ctor(Rhino.Geometry.Point4d)">
            <summary>
            Initializes a new point by copying coordinates from a four-dimensional point.
            The first three coordinates are divided by the last one.
            If the W (fourth) dimension of the input point is zero, then it will be just discarded.
            </summary>
            <param name="point">A point.</param>
            <since>5.0</since>
        </member>
        <member name="P:Rhino.Geometry.Point3d.Origin">
            <summary>
            Gets the value of a point at location 0,0,0.
            </summary>
            <since>5.0</since>
        </member>
        <member name="P:Rhino.Geometry.Point3d.Unset">
            <summary>
            Gets the value of a point at location RhinoMath.UnsetValue,RhinoMath.UnsetValue,RhinoMath.UnsetValue.
            </summary>
            <since>5.0</since>
        </member>
        <member name="M:Rhino.Geometry.Point3d.op_Multiply(Rhino.Geometry.Point3d,System.Double)">
            <summary>
            Multiplies a <see cref="T:Rhino.Geometry.Point3d"/> by a number.
            </summary>
            <param name="point">A point.</param>
            <param name="t">A number.</param>
            <returns>A new point that is coordinate-wise multiplied by t.</returns>
            <since>5.0</since>
        </member>
        <member name="M:Rhino.Geometry.Point3d.Multiply(Rhino.Geometry.Point3d,System.Double)">
            <summary>
            Multiplies a <see cref="T:Rhino.Geometry.Point3d"/> by a number.
            <para>(Provided for languages that do not support operator overloading. You can use the * operator otherwise)</para>
            </summary>
            <param name="point">A point.</param>
            <param name="t">A number.</param>
            <returns>A new point that is coordinate-wise multiplied by t.</returns>
            <since>5.0</since>
        </member>
        <member name="M:Rhino.Geometry.Point3d.op_Multiply(System.Double,Rhino.Geometry.Point3d)">
            <summary>
            Multiplies a <see cref="T:Rhino.Geometry.Point3d"/> by a number.
            </summary>
            <param name="point">A point.</param>
            <param name="t">A number.</param>
            <returns>A new point that is coordinate-wise multiplied by t.</returns>
            <since>5.0</since>
        </member>
        <member name="M:Rhino.Geometry.Point3d.Multiply(System.Double,Rhino.Geometry.Point3d)">
            <summary>
            Multiplies a <see cref="T:Rhino.Geometry.Point3d"/> by a number.
            <para>(Provided for languages that do not support operator overloading. You can use the * operator otherwise)</para>
            </summary>
            <param name="point">A point.</param>
            <param name="t">A number.</param>
            <returns>A new point that is coordinate-wise multiplied by t.</returns>
            <since>5.0</since>
        </member>
        <member name="M:Rhino.Geometry.Point3d.op_Division(Rhino.Geometry.Point3d,System.Double)">
            <summary>
            Divides a <see cref="T:Rhino.Geometry.Point3d"/> by a number.
            </summary>
            <param name="point">A point.</param>
            <param name="t">A number.</param>
            <returns>A new point that is coordinate-wise divided by t.</returns>
            <since>5.0</since>
        </member>
        <member name="M:Rhino.Geometry.Point3d.Divide(Rhino.Geometry.Point3d,System.Double)">
            <summary>
            Divides a <see cref="T:Rhino.Geometry.Point3d"/> by a number.
            <para>(Provided for languages that do not support operator overloading. You can use the / operator otherwise)</para>
            </summary>
            <param name="point">A point.</param>
            <param name="t">A number.</param>
            <returns>A new point that is coordinate-wise divided by t.</returns>
            <since>5.0</since>
        </member>
        <member name="M:Rhino.Geometry.Point3d.op_Addition(Rhino.Geometry.Point3d,Rhino.Geometry.Point3d)">
            <summary>
            Sums two <see cref="T:Rhino.Geometry.Point3d"/> instances.
            </summary>
            <param name="point1">A point.</param>
            <param name="point2">A point.</param>
            <returns>A new point that results from the addition of point1 and point2.</returns>
        </member>
        <member name="M:Rhino.Geometry.Point3d.Add(Rhino.Geometry.Point3d,Rhino.Geometry.Point3d)">
            <summary>
            Sums two <see cref="T:Rhino.Geometry.Point3d"/> instances.
            <para>(Provided for languages that do not support operator overloading. You can use the + operator otherwise)</para>
            </summary>
            <param name="point1">A point.</param>
            <param name="point2">A point.</param>
            <returns>A new point that results from the addition of point1 and point2.</returns>
            <since>5.0</since>
        </member>
        <member name="M:Rhino.Geometry.Point3d.op_Addition(Rhino.Geometry.Point3d,Rhino.Geometry.Vector3d)">
            <summary>
            Sums up a point and a vector, and returns a new point.
            </summary>
            <param name="point">A point.</param>
            <param name="vector">A vector.</param>
            <returns>A new point that results from the addition of point and vector.</returns>
        </member>
        <member name="M:Rhino.Geometry.Point3d.Add(Rhino.Geometry.Point3d,Rhino.Geometry.Vector3d)">
            <summary>
            Sums up a point and a vector, and returns a new point.
            <para>(Provided for languages that do not support operator overloading. You can use the + operator otherwise)</para>
            </summary>
            <param name="point">A point.</param>
            <param name="vector">A vector.</param>
            <returns>A new point that results from the addition of point and vector.</returns>
            <since>5.0</since>
        </member>
        <member name="M:Rhino.Geometry.Point3d.op_Addition(Rhino.Geometry.Point3d,Rhino.Geometry.Vector3f)">
            <summary>
            Sums up a point and a vector, and returns a new point.
            </summary>
            <param name="point">A point.</param>
            <param name="vector">A vector.</param>
            <returns>A new point that results from the addition of point and vector.</returns>
        </member>
        <member name="M:Rhino.Geometry.Point3d.Add(Rhino.Geometry.Point3d,Rhino.Geometry.Vector3f)">
            <summary>
            Sums up a point and a vector, and returns a new point.
            <para>(Provided for languages that do not support operator overloading. You can use the + operator otherwise)</para>
            </summary>
            <param name="point">A point.</param>
            <param name="vector">A vector.</param>
            <returns>A new point that results from the addition of point and vector.</returns>
            <since>5.0</since>
        </member>
        <member name="M:Rhino.Geometry.Point3d.op_Addition(Rhino.Geometry.Vector3d,Rhino.Geometry.Point3d)">
            <summary>
            Sums up a point and a vector, and returns a new point.
            </summary>
            <param name="vector">A vector.</param>
            <param name="point">A point.</param>
            <returns>A new point that results from the addition of point and vector.</returns>
        </member>
        <member name="M:Rhino.Geometry.Point3d.Add(Rhino.Geometry.Vector3d,Rhino.Geometry.Point3d)">
            <summary>
            Sums up a point and a vector, and returns a new point.
            <para>(Provided for languages that do not support operator overloading. You can use the + operator otherwise)</para>
            </summary>
            <param name="vector">A vector.</param>
            <param name="point">A point.</param>
            <returns>A new point that results from the addition of point and vector.</returns>
            <since>5.0</since>
        </member>
        <member name="M:Rhino.Geometry.Point3d.op_Subtraction(Rhino.Geometry.Point3d,Rhino.Geometry.Vector3d)">
            <summary>
            Subtracts a vector from a point.
            </summary>
            <param name="point">A point.</param>
            <param name="vector">A vector.</param>
            <returns>A new point that is the difference of point minus vector.</returns>
            <since>5.0</since>
        </member>
        <member name="M:Rhino.Geometry.Point3d.Subtract(Rhino.Geometry.Point3d,Rhino.Geometry.Vector3d)">
            <summary>
            Subtracts a vector from a point.
            <para>(Provided for languages that do not support operator overloading. You can use the - operator otherwise)</para>
            </summary>
            <param name="vector">A vector.</param>
            <param name="point">A point.</param>
            <returns>A new point that is the difference of point minus vector.</returns>
            <since>5.0</since>
        </member>
        <member name="M:Rhino.Geometry.Point3d.op_Subtraction(Rhino.Geometry.Point3d,Rhino.Geometry.Point3d)">
            <summary>
            Subtracts a point from another point.
            </summary>
            <param name="point1">A point.</param>
            <param name="point2">Another point.</param>
            <returns>A new vector that is the difference of point minus vector.</returns>
            <since>5.0</since>
        </member>
        <member name="M:Rhino.Geometry.Point3d.Subtract(Rhino.Geometry.Point3d,Rhino.Geometry.Point3d)">
            <summary>
            Subtracts a point from another point.
            <para>(Provided for languages that do not support operator overloading. You can use the - operator otherwise)</para>
            </summary>
            <param name="point1">A point.</param>
            <param name="point2">Another point.</param>
            <returns>A new vector that is the difference of point minus vector.</returns>
            <since>5.0</since>
        </member>
        <member name="M:Rhino.Geometry.Point3d.op_UnaryNegation(Rhino.Geometry.Point3d)">
            <summary>
            Computes the additive inverse of all coordinates in the point, and returns the new point.
            </summary>
            <param name="point">A point.</param>
            <returns>A point value that, when summed with the point input, yields the <see cref="P:Rhino.Geometry.Point3d.Origin"/>.</returns>
            <since>5.0</since>
        </member>
        <member name="M:Rhino.Geometry.Point3d.op_Equality(Rhino.Geometry.Point3d,Rhino.Geometry.Point3d)">
            <summary>
            Determines whether two Point3d have equal values.
            </summary>
            <param name="a">The first point.</param>
            <param name="b">The second point.</param>
            <returns>true if the coordinates of the two points are exactly equal; otherwise false.</returns>
            <since>5.0</since>
        </member>
        <member name="M:Rhino.Geometry.Point3d.op_Inequality(Rhino.Geometry.Point3d,Rhino.Geometry.Point3d)">
            <summary>
            Determines whether two Point3d have different values.
            </summary>
            <param name="a">The first point.</param>
            <param name="b">The second point.</param>
            <returns>true if the two points differ in any coordinate; false otherwise.</returns>
            <since>5.0</since>
        </member>
        <member name="M:Rhino.Geometry.Point3d.op_Implicit(Rhino.Geometry.Point3d)~Rhino.Geometry.ControlPoint">
            <summary>
            Converts a point in a control point, without needing casting.
            </summary>
            <param name="pt">The point.</param>
            <returns>The control point.</returns>
        </member>
        <member name="M:Rhino.Geometry.Point3d.op_Explicit(Rhino.Geometry.Point3d)~Rhino.Geometry.Vector3d">
            <summary>
            Converts a point in a vector, needing casting.
            </summary>
            <param name="point">A point.</param>
            <returns>The resulting vector.</returns>
        </member>
        <member name="M:Rhino.Geometry.Point3d.op_Explicit(Rhino.Geometry.Vector3d)~Rhino.Geometry.Point3d">
            <summary>
            Converts a vector in a point, needing casting.
            </summary>
            <param name="vector">A vector.</param>
            <returns>The resulting point.</returns>
        </member>
        <member name="M:Rhino.Geometry.Point3d.op_Implicit(Rhino.Geometry.Point3f)~Rhino.Geometry.Point3d">
            <summary>
            Converts a single-precision point in a double-precision point, without needing casting.
            </summary>
            <param name="point">A point.</param>
            <returns>The resulting point.</returns>
        </member>
        <member name="M:Rhino.Geometry.Point3d.FromPoint3f(Rhino.Geometry.Point3f)">
            <summary>
            Converts a single-precision point in a double-precision point.
            </summary>
            <param name="point">A point.</param>
            <returns>The resulting point.</returns>
            <since>6.0</since>
        </member>
        <member name="M:Rhino.Geometry.Point3d.op_LessThan(Rhino.Geometry.Point3d,Rhino.Geometry.Point3d)">
            <summary>
            Determines whether the first specified point comes before (has inferior sorting value than) the second point.
            <para>Coordinates evaluation priority is first X, then Y, then Z.</para>
            </summary>
            <param name="a">The first point.</param>
            <param name="b">The second point.</param>
            <returns>true if a.X is smaller than b.X,
            or a.X == b.X and a.Y is smaller than b.Y,
            or a.X == b.X and a.Y == b.Y and a.Z is smaller than b.Z;
            otherwise, false.</returns>
            <since>5.0</since>
        </member>
        <member name="M:Rhino.Geometry.Point3d.op_LessThanOrEqual(Rhino.Geometry.Point3d,Rhino.Geometry.Point3d)">
            <summary>
            Determines whether the first specified point comes before
            (has inferior sorting value than) the second point, or it is equal to it.
            <para>Coordinates evaluation priority is first X, then Y, then Z.</para>
            </summary>
            <param name="a">The first point.</param>
            <param name="b">The second point.</param>
            <returns>true if a.X is smaller than b.X,
            or a.X == b.X and a.Y is smaller than b.Y,
            or a.X == b.X and a.Y == b.Y and a.Z &lt;= b.Z;
            otherwise, false.</returns>
            <since>5.0</since>
        </member>
        <member name="M:Rhino.Geometry.Point3d.op_GreaterThan(Rhino.Geometry.Point3d,Rhino.Geometry.Point3d)">
            <summary>
            Determines whether the first specified point comes after (has superior sorting value than) the second point.
            <para>Coordinates evaluation priority is first X, then Y, then Z.</para>
            </summary>
            <param name="a">The first point.</param>
            <param name="b">The second point.</param>
            <returns>true if a.X is larger than b.X,
            or a.X == b.X and a.Y is larger than b.Y,
            or a.X == b.X and a.Y == b.Y and a.Z is larger than b.Z;
            otherwise, false.</returns>
            <since>5.0</since>
        </member>
        <member name="M:Rhino.Geometry.Point3d.op_GreaterThanOrEqual(Rhino.Geometry.Point3d,Rhino.Geometry.Point3d)">
            <summary>
            Determines whether the first specified point comes after
            (has superior sorting value than) the second point, or it is equal to it.
            <para>Coordinates evaluation priority is first X, then Y, then Z.</para>
            </summary>
            <param name="a">The first point.</param>
            <param name="b">The second point.</param>
            <returns>true if a.X is larger than b.X,
            or a.X == b.X and a.Y is larger than b.Y,
            or a.X == b.X and a.Y == b.Y and a.Z &gt;= b.Z;
            otherwise, false.</returns>
            <since>5.0</since>
        </member>
        <member name="P:Rhino.Geometry.Point3d.X">
            <summary>
            Gets or sets the X (first) coordinate of this point.
            </summary>
            <since>5.0</since>
        </member>
        <member name="P:Rhino.Geometry.Point3d.Y">
            <summary>
            Gets or sets the Y (second) coordinate of this point.
            </summary>
            <since>5.0</since>
        </member>
        <member name="P:Rhino.Geometry.Point3d.Z">
            <summary>
            Gets or sets the Z (third) coordinate of this point.
            </summary>
            <since>5.0</since>
        </member>
        <member name="P:Rhino.Geometry.Point3d.Item(System.Int32)">
            <summary>
            Gets or sets an indexed coordinate of this point.
            </summary>
            <param name="index">
            The coordinate index. Valid values are:
            <para>0 = X coordinate</para>
            <para>1 = Y coordinate</para>
            <para>2 = Z coordinate</para>
            .</param>
        </member>
        <member name="P:Rhino.Geometry.Point3d.IsValid">
            <summary>
            Each coordinate of the point must pass the <see cref="M:Rhino.RhinoMath.IsValidDouble(System.Double)"/> test.
            </summary>
            <since>5.0</since>
        </member>
        <member name="P:Rhino.Geometry.Point3d.MinimumCoordinate">
            <summary>
            Gets the smallest (both positive and negative) coordinate value in this point.
            </summary>
            <since>5.0</since>
        </member>
        <member name="P:Rhino.Geometry.Point3d.MaximumCoordinate">
            <summary>
            Gets the largest (both positive and negative) valid coordinate in this point,
            or RhinoMath.UnsetValue if no coordinate is valid.
            </summary>
            <since>5.0</since>
        </member>
        <member name="M:Rhino.Geometry.Point3d.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object"/> is a <see cref="T:Rhino.Geometry.Point3d"/> and has the same values as the present point.
            </summary>
            <param name="obj">The specified object.</param>
            <returns>true if obj is a Point3d and has the same coordinates as this; otherwise false.</returns>
        </member>
        <member name="M:Rhino.Geometry.Point3d.EpsilonEquals(Rhino.Geometry.Point3d,System.Double)">
            <summary>
            Check that all values in other are within epsilon of the values in this
            </summary>
            <param name="other"></param>
            <param name="epsilon"></param>
            <returns></returns>
            <since>5.4</since>
        </member>
        <member name="M:Rhino.Geometry.Point3d.CompareTo(Rhino.Geometry.Point3d)">
            <summary>
            Compares this <see cref="T:Rhino.Geometry.Point3d" /> with another <see cref="T:Rhino.Geometry.Point3d" />.
            <para>Component evaluation priority is first X, then Y, then Z.</para>
            </summary>
            <param name="other">The other <see cref="T:Rhino.Geometry.Point3d" /> to use in comparison.</param>
            <returns>
            <para> 0: if this is identical to other</para>
            <para>-1: if this.X &lt; other.X</para>
            <para>-1: if this.X == other.X and this.Y &lt; other.Y</para>
            <para>-1: if this.X == other.X and this.Y == other.Y and this.Z &lt; other.Z</para>
            <para>+1: otherwise.</para>
            </returns>
            <since>5.0</since>
        </member>
        <member name="M:Rhino.Geometry.Point3d.Equals(Rhino.Geometry.Point3d)">
            <summary>
            Determines whether the specified <see cref="T:Rhino.Geometry.Point3d"/> has the same values as the present point.
            </summary>
            <param name="point">The specified point.</param>
            <returns>true if point has the same coordinates as this; otherwise false.</returns>
            <since>5.0</since>
        </member>
        <member name="M:Rhino.Geometry.Point3d.GetHashCode">
            <summary>
            Computes a hash code for the present point.
            </summary>
            <returns>A non-unique integer that represents this point.</returns>
        </member>
        <member name="M:Rhino.Geometry.Point3d.Interpolate(Rhino.Geometry.Point3d,Rhino.Geometry.Point3d,System.Double)">
            <summary>
            Interpolate between two points.
            </summary>
            <param name="pA">First point.</param>
            <param name="pB">Second point.</param>
            <param name="t">Interpolation parameter. 
            If t=0 then this point is set to pA. 
            If t=1 then this point is set to pB. 
            Values of t in between 0.0 and 1.0 result in points between pA and pB.</param>
            <since>5.0</since>
        </member>
        <member name="M:Rhino.Geometry.Point3d.ToString">
            <summary>
            Constructs the string representation for the current point.
            </summary>
            <returns>The point representation in the form X,Y,Z.</returns>
        </member>
        <member name="M:Rhino.Geometry.Point3d.ToString(System.String,System.IFormatProvider)">
            <inheritdoc />
            <since>7.0</since>
        </member>
        <member name="M:Rhino.Geometry.Point3d.FormatCoordinates(System.String,System.IFormatProvider,System.Double[])">
            <summary>
            Utility method for formatting coordinate groups.
            </summary>
        </member>
        <member name="M:Rhino.Geometry.Point3d.IsCommaLikeText(System.String)">
            <summary>
            Test whether a string contains any char which looks like a comma.
            </summary>
        </member>
        <member name="M:Rhino.Geometry.Point3d.IsCommaLikeChar(System.Char)">
            <summary>
            Test whether a char looks like a comma.
            </summary>
        </member>
        <member name="M:Rhino.Geometry.Point3d.DistanceTo(Rhino.Geometry.Point3d)">
            <summary>
            Computes the distance between two points.
            </summary>
            <param name="other">Other point for distance measurement.</param>
            <returns>The length of the line between this and the other point; or 0 if any of the points is not valid.</returns>
            <example>
            <code source='examples\vbnet\ex_intersectcurves.vb' lang='vbnet'/>
            <code source='examples\cs\ex_intersectcurves.cs' lang='cs'/>
            <code source='examples\py\ex_intersectcurves.py' lang='py'/>
            </example>
            <since>5.0</since>
        </member>
        <member name="M:Rhino.Geometry.Point3d.DistanceToSquared(Rhino.Geometry.Point3d)">
            <summary>
            Computes the square of the distance between two points.
            <para>This method is usually largely faster than DistanceTo().</para>
            </summary>
            <param name="other">Other point for squared distance measurement.</param>
            <returns>The squared length of the line between this and the other point; or 0 if any of the points is not valid.</returns>
            <since>6.0</since>
        </member>
        <member name="M:Rhino.Geometry.Point3d.Transform(Rhino.Geometry.Transform)">
            <summary>
            Transforms the present point in place. The transformation matrix acts on the left of the point. i.e.,
            <para>result = transformation*point</para>
            </summary>
            <param name="xform">Transformation to apply.</param>
            <example>
            <code source='examples\vbnet\ex_pointatcursor.vb' lang='vbnet'/>
            <code source='examples\cs\ex_pointatcursor.cs' lang='cs'/>
            </example>
            <since>5.0</since>
        </member>
        <member name="M:Rhino.Geometry.Point3d.CullDuplicates(System.Collections.Generic.IEnumerable{Rhino.Geometry.Point3d},System.Double)">
            <summary>
            Removes duplicates in the supplied set of points.
            </summary>
            <param name="points">A list, an array or any enumerable of <see cref="T:Rhino.Geometry.Point3d"/>.</param>
            <param name="tolerance">The minimum distance between points.
            <para>Points that fall within this tolerance will be discarded.</para>
            .</param>
            <returns>An array of points without duplicates; or null on error.</returns>
            <since>5.0</since>
        </member>
        <member name="T:Rhino.Geometry.Point4d">
            <summary>
            Represents the four coordinates of a point in four-dimensional space.
            <para>The W (fourth) dimension is often considered the weight of the point as seen in 3D space.</para>
            </summary>
        </member>
        <member name="M:Rhino.Geometry.Point4d.#ctor(System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Initializes a new instance of the <see cref="T:Rhino.Geometry.Point4d"/> class based on coordinates.
            </summary>
            <param name="x">The X (first) dimension.</param>
            <param name="y">The Y (second) dimension.</param>
            <param name="z">The Z (third) dimension.</param>
            <param name="w">The W (fourth) dimension, or weight.</param>
            <since>5.0</since>
        </member>
        <member name="M:Rhino.Geometry.Point4d.#ctor(Rhino.Geometry.Point3d)">
            <summary>
            Initializes a new instance of the <see cref="T:Rhino.Geometry.Point4d"/> class from the coordinates of a point.
            </summary>
            <param name="point">.</param>
            <since>5.0</since>
        </member>
        <member name="M:Rhino.Geometry.Point4d.#ctor(Rhino.Geometry.Point4d)">
            <summary>
            Initializes a new point by copying coordinates from another point.
            </summary>
            <param name="point">A point.</param>
            <since>6.0</since>
        </member>
        <member name="P:Rhino.Geometry.Point4d.X">
            <summary>
            Gets or sets the X (first) coordinate of this point.
            </summary>
            <since>5.0</since>
        </member>
        <member name="P:Rhino.Geometry.Point4d.Y">
            <summary>
            Gets or sets the Y (second) coordinate of this point.
            </summary>
            <since>5.0</since>
        </member>
        <member name="P:Rhino.Geometry.Point4d.Z">
            <summary>
            Gets or sets the Z (third) coordinate of this point.
            </summary>
            <since>5.0</since>
        </member>
        <member name="P:Rhino.Geometry.Point4d.W">
            <summary>
            Gets or sets the W (fourth) coordinate -or weight- of this point.
            </summary>
            <since>5.0</since>
        </member>
        <member name="M:Rhino.Geometry.Point4d.op_Addition(Rhino.Geometry.Point4d,Rhino.Geometry.Point4d)">
            <summary>
            Sums two <see cref="T:Rhino.Geometry.Point4d"/> together.
            </summary>
            <param name="point1">First point.</param>
            <param name="point2">Second point.</param>
            <returns>A new point that results from the weighted addition of point1 and point2.</returns>
        </member>
        <member name="M:Rhino.Geometry.Point4d.Add(Rhino.Geometry.Point4d,Rhino.Geometry.Point4d)">
            <summary>
            Sums two <see cref="T:Rhino.Geometry.Point4d"/> together.
            <para>(Provided for languages that do not support operator overloading. You can use the + operator otherwise)</para>
            </summary>
            <param name="point1">First point.</param>
            <param name="point2">Second point.</param>
            <returns>A new point that results from the weighted addition of point1 and point2.</returns>
            <since>5.0</since>
        </member>
        <member name="M:Rhino.Geometry.Point4d.op_Subtraction(Rhino.Geometry.Point4d,Rhino.Geometry.Point4d)">
            <summary>
            Subtracts the second point from the first point.
            </summary>
            <param name="point1">First point.</param>
            <param name="point2">Second point.</param>
            <returns>A new point that results from the weighted subtraction of point2 from point1.</returns>
            <since>5.0</since>
        </member>
        <member name="M:Rhino.Geometry.Point4d.Subtract(Rhino.Geometry.Point4d,Rhino.Geometry.Point4d)">
            <summary>
            Subtracts the second point from the first point.
            <para>(Provided for languages that do not support operator overloading. You can use the - operator otherwise)</para>
            </summary>
            <param name="point1">First point.</param>
            <param name="point2">Second point.</param>
            <returns>A new point that results from the weighted subtraction of point2 from point1.</returns>
            <since>5.0</since>
        </member>
        <member name="M:Rhino.Geometry.Point4d.op_Multiply(Rhino.Geometry.Point4d,System.Double)">
            <summary>
            Multiplies a point by a number.
            </summary>
            <param name="point">A point.</param>
            <param name="d">A number.</param>
            <returns>A new point that results from the coordinate-wise multiplication of point with d.</returns>
            <since>5.0</since>
        </member>
        <member name="M:Rhino.Geometry.Point4d.Multiply(Rhino.Geometry.Point4d,System.Double)">
            <summary>
            Multiplies a point by a number.
            <para>(Provided for languages that do not support operator overloading. You can use the * operator otherwise)</para>
            </summary>
            <param name="point">A point.</param>
            <param name="d">A number.</param>
            <returns>A new point that results from the coordinate-wise multiplication of point with d.</returns>
            <since>5.0</since>
        </member>
        <member name="M:Rhino.Geometry.Point4d.op_Multiply(Rhino.Geometry.Point4d,Rhino.Geometry.Point4d)">
            <summary>
            Multiplies two <see cref="T:Rhino.Geometry.Point4d"/> together, returning the dot (internal) product of the two.
            This is not the cross product.
            </summary>
            <param name="point1">The first point.</param>
            <param name="point2">The second point.</param>
            <returns>A value that results from the coordinate-wise multiplication of point1 and point2.</returns>
            <since>5.0</since>
        </member>
        <member name="M:Rhino.Geometry.Point4d.op_Equality(Rhino.Geometry.Point4d,Rhino.Geometry.Point4d)">
            <summary>
            Determines whether two Point4d have equal values.
            </summary>
            <param name="a">The first point.</param>
            <param name="b">The second point.</param>
            <returns>true if the coordinates of the two points are equal; otherwise false.</returns>
            <since>5.0</since>
        </member>
        <member name="M:Rhino.Geometry.Point4d.op_Inequality(Rhino.Geometry.Point4d,Rhino.Geometry.Point4d)">
            <summary>
            Determines whether two Point4d have different values.
            </summary>
            <param name="a">The first point.</param>
            <param name="b">The second point.</param>
            <returns>true if the two points differ in any coordinate; false otherwise.</returns>
            <since>5.0</since>
        </member>
        <member name="M:Rhino.Geometry.Point4d.Equals(System.Object)">
            <summary>
            Determines whether the specified System.Object is Point4d and has same coordinates as the present point.
            </summary>
            <param name="obj">The specified object.</param>
            <returns>true if obj is Point4d and has the same coordinates as this; otherwise false.</returns>
        </member>
        <member name="M:Rhino.Geometry.Point4d.Equals(Rhino.Geometry.Point4d)">
            <summary>
            Determines whether the specified point has same value as the present point.
            </summary>
            <param name="point">The specified point.</param>
            <returns>true if point has the same value as this; otherwise false.</returns>
            <since>5.0</since>
        </member>
        <member name="M:Rhino.Geometry.Point4d.EpsilonEquals(Rhino.Geometry.Point4d,System.Double)">
            <summary>
            Check that all values in other are within epsilon of the values in this
            </summary>
            <param name="other"></param>
            <param name="epsilon"></param>
            <returns></returns>
            <since>5.4</since>
        </member>
        <member name="M:Rhino.Geometry.Point4d.GetHashCode">
            <summary>
            Computes the hash code for the present point.
            </summary>
            <returns>A non-unique hash code, which uses all coordinates of this object.</returns>
        </member>
        <member name="P:Rhino.Geometry.Point4d.Unset">
            <summary>
            Gets the value of a point with all coordinates set as RhinoMath.UnsetValue.
            </summary>
            <since>5.0</since>
        </member>
        <member name="M:Rhino.Geometry.Point4d.Transform(Rhino.Geometry.Transform)">
            <summary>
            Transforms the present point in place. The transformation matrix acts on the left of the point. i.e.,
            <para>result = transformation*point</para>
            </summary>
            <param name="xform">Transformation to apply.</param>
            <since>6.0</since>
        </member>
        <member name="P:Rhino.Geometry.Point4d.IsValid">
            <summary>
            Returns an indication regarding the validity of this point.
            </summary>
            <since>6.0</since>
        </member>
        <member name="M:Rhino.Geometry.Point4d.ToString">
            <inheritdoc />
        </member>
        <member name="M:Rhino.Geometry.Point4d.ToString(System.String,System.IFormatProvider)">
            <inheritdoc />
            <since>7.0</since>
        </member>
        <member name="T:Rhino.Geometry.Vector2d">
            <summary>
            Represents the two components of a vector in two-dimensional space,
            using <see cref="T:System.Double"/>-precision floating point numbers.
            </summary>
        </member>
        <member name="M:Rhino.Geometry.Vector2d.#ctor(System.Double,System.Double)">
            <summary>
            Initializes a new instance of the vector based on two, X and Y, components.
            </summary>
            <param name="x">The X (first) component.</param>
            <param name="y">The Y (second) component.</param>
            <since>5.0</since>
        </member>
        <member name="P:Rhino.Geometry.Vector2d.X">
            <summary>
            Gets or sets the X (first) component of this vector.
            </summary>
            <since>5.0</since>
        </member>
        <member name="P:Rhino.Geometry.Vector2d.Y">
            <summary>
            Gets or sets the Y (second) component of this vector.
            </summary>
            <since>5.0</since>
        </member>
        <member name="P:Rhino.Geometry.Vector2d.Length">
            <summary>
            Computes the length (or magnitude, or size) of this vector.
            This is an application of Pythagoras' theorem.
            </summary>
            <since>5.0</since>
        </member>
        <member name="M:Rhino.Geometry.Vector2d.op_Multiply(Rhino.Geometry.Vector2d,System.Double)">
            <summary>
            Multiplies a vector by a number, having the effect of scaling it.
            </summary>
            <param name="vector">A vector.</param>
            <param name="t">A number.</param>
            <returns>A new vector that is the original vector coordinate-wise multiplied by t.</returns>
            <since>6.0</since>
        </member>
        <member name="M:Rhino.Geometry.Vector2d.op_Multiply(System.Double,Rhino.Geometry.Vector2d)">
            <summary>
            Multiplies a vector by a number, having the effect of scaling it.
            </summary>
            <param name="vector">A vector.</param>
            <param name="t">A number.</param>
            <returns>A new vector that is the original vector coordinate-wise multiplied by t.</returns>
            <since>6.0</since>
        </member>
        <member name="M:Rhino.Geometry.Vector2d.Multiply(Rhino.Geometry.Vector2d,System.Double)">
            <summary>
            Multiplies a vector by a number, having the effect of scaling it.
            <para>(Provided for languages that do not support operator overloading. You can use the * operator otherwise)</para>
            </summary>
            <param name="vector">A vector.</param>
            <param name="t">A number.</param>
            <returns>A new vector that is the original vector coordinate-wise multiplied by t.</returns>
            <since>6.0</since>
        </member>
        <member name="M:Rhino.Geometry.Vector2d.Multiply(System.Double,Rhino.Geometry.Vector2d)">
            <summary>
            Multiplies a vector by a number, having the effect of scaling it.
            <para>(Provided for languages that do not support operator overloading. You can use the * operator otherwise)</para>
            </summary>
            <param name="vector">A vector.</param>
            <param name="t">A number.</param>
            <returns>A new vector that is the original vector coordinate-wise multiplied by t.</returns>
            <since>6.0</since>
        </member>
        <member name="M:Rhino.Geometry.Vector2d.op_Division(Rhino.Geometry.Vector2d,System.Double)">
            <summary>
            Divides a <see cref="T:Rhino.Geometry.Vector2d"/> by a number, having the effect of shrinking it.
            </summary>
            <param name="vector">A vector.</param>
            <param name="t">A number.</param>
            <returns>A new vector that is component-wise divided by t.</returns>
            <since>6.0</since>
        </member>
        <member name="M:Rhino.Geometry.Vector2d.Divide(Rhino.Geometry.Vector2d,System.Double)">
            <summary>
            Divides a <see cref="T:Rhino.Geometry.Vector2d"/> by a number, having the effect of shrinking it.
            <para>(Provided for languages that do not support operator overloading. You can use the / operator otherwise)</para>
            </summary>
            <param name="vector">A vector.</param>
            <param name="t">A number.</param>
            <returns>A new vector that is component-wise divided by t.</returns>
            <since>6.0</since>
        </member>
        <member name="M:Rhino.Geometry.Vector2d.op_Addition(Rhino.Geometry.Vector2d,Rhino.Geometry.Vector2d)">
            <summary>
            Sums up two vectors.
            </summary>
            <param name="vector1">A vector.</param>
            <param name="vector2">A second vector.</param>
            <returns>A new vector that results from the component-wise addition of the two vectors.</returns>
        </member>
        <member name="M:Rhino.Geometry.Vector2d.Add(Rhino.Geometry.Vector2d,Rhino.Geometry.Vector2d)">
            <summary>
            Sums up two vectors.
            <para>(Provided for languages that do not support operator overloading. You can use the + operator otherwise)</para>
            </summary>
            <param name="vector1">A vector.</param>
            <param name="vector2">A second vector.</param>
            <returns>A new vector that results from the component-wise addition of the two vectors.</returns>
            <since>6.0</since>
        </member>
        <member name="M:Rhino.Geometry.Vector2d.op_Subtraction(Rhino.Geometry.Vector2d,Rhino.Geometry.Vector2d)">
            <summary>
            Subtracts the second vector from the first one.
            </summary>
            <param name="vector1">A vector.</param>
            <param name="vector2">A second vector.</param>
            <returns>A new vector that results from the component-wise difference of vector1 - vector2.</returns>
            <since>6.0</since>
        </member>
        <member name="M:Rhino.Geometry.Vector2d.Subtract(Rhino.Geometry.Vector2d,Rhino.Geometry.Vector2d)">
            <summary>
            Subtracts the second vector from the first one.
            <para>(Provided for languages that do not support operator overloading. You can use the - operator otherwise)</para>
            </summary>
            <param name="vector1">A vector.</param>
            <param name="vector2">A second vector.</param>
            <returns>A new vector that results from the component-wise difference of vector1 - vector2.</returns>
            <since>6.0</since>
        </member>
        <member name="M:Rhino.Geometry.Vector2d.op_Multiply(Rhino.Geometry.Vector2d,Rhino.Geometry.Vector2d)">
            <summary>
            Multiplies two vectors together, returning the dot product (or inner product).
            </summary>
            <param name="vector1">A vector.</param>
            <param name="vector2">A second vector.</param>
            <returns>
            A value that results from the evaluation of v1.X*v2.X + v1.Y*v2.Y.
            <para>This value equals v1.Length * v2.Length * cos(alpha), where alpha is the angle between vectors.</para>
            </returns>
            <since>6.0</since>
        </member>
        <member name="M:Rhino.Geometry.Vector2d.Multiply(Rhino.Geometry.Vector2d,Rhino.Geometry.Vector2d)">
            <summary>
            Multiplies two vectors together, returning the dot product (or inner product).
            <para>(Provided for languages that do not support operator overloading. You can use the * operator otherwise)</para>
            </summary>
            <param name="vector1">A vector.</param>
            <param name="vector2">A second vector.</param>
            <returns>
            A value that results from the evaluation of v1.X*v2.X + v1.Y*v2.Y.
            <para>This value equals v1.Length * v2.Length * cos(alpha), where alpha is the angle between vectors.</para>
            </returns>
            <since>6.0</since>
        </member>
        <member name="M:Rhino.Geometry.Vector2d.op_UnaryNegation(Rhino.Geometry.Vector2d)">
            <summary>
            Computes the opposite vector.
            </summary>
            <param name="vector">A vector to negate.</param>
            <returns>A new vector where all components were multiplied by -1.</returns>
            <since>6.0</since>
        </member>
        <member name="M:Rhino.Geometry.Vector2d.Negate(Rhino.Geometry.Vector2d)">
            <summary>
            Computes the reversed vector.
            <para>(Provided for languages that do not support operator overloading. You can use the - unary operator otherwise)</para>
            </summary>
            <param name="vector">A vector to negate.</param>
            <returns>A new vector where all components were multiplied by -1.</returns>
            <since>6.0</since>
        </member>
        <member name="M:Rhino.Geometry.Vector2d.op_Equality(Rhino.Geometry.Vector2d,Rhino.Geometry.Vector2d)">
            <summary>
            Determines whether two vectors have equal values.
            </summary>
            <param name="a">The first vector.</param>
            <param name="b">The second vector.</param>
            <returns>true if components of the two vectors are pairwise equal; otherwise false.</returns>
            <since>5.0</since>
        </member>
        <member name="M:Rhino.Geometry.Vector2d.op_Inequality(Rhino.Geometry.Vector2d,Rhino.Geometry.Vector2d)">
            <summary>
            Determines whether two vectors have different values.
            </summary>
            <param name="a">The first vector.</param>
            <param name="b">The second vector.</param>
            <returns>true if any component of the two vectors is pairwise different; otherwise false.</returns>
            <since>5.0</since>
        </member>
        <member name="M:Rhino.Geometry.Vector2d.op_LessThan(Rhino.Geometry.Vector2d,Rhino.Geometry.Vector2d)">
            <summary>
            Determines whether the first specified vector comes before
            (has inferior sorting value than) the second vector.
            <para>Components have decreasing evaluation priority: first X, then Y.</para>
            </summary>
            <param name="a">First vector.</param>
            <param name="b">Second vector.</param>
            <returns>true if a.X is smaller than b.X, or a.X == b.X and a.Y is smaller than b.Y; otherwise, false.</returns>
            <since>5.0</since>
        </member>
        <member name="M:Rhino.Geometry.Vector2d.op_LessThanOrEqual(Rhino.Geometry.Vector2d,Rhino.Geometry.Vector2d)">
            <summary>
            Determines whether the first specified vector comes before
            (has inferior sorting value than) the second vector, or it is equal to it.
            <para>Components have decreasing evaluation priority: first X, then Y.</para>
            </summary>
            <param name="a">First vector.</param>
            <param name="b">Second vector.</param>
            <returns>true if a.X is smaller than b.X, or a.X == b.X and a.Y &lt;= b.Y; otherwise, false.</returns>
            <since>5.0</since>
        </member>
        <member name="M:Rhino.Geometry.Vector2d.op_GreaterThan(Rhino.Geometry.Vector2d,Rhino.Geometry.Vector2d)">
            <summary>
            Determines whether the first specified vector comes after
            (has superior sorting value than) the second vector.
            <para>Components have decreasing evaluation priority: first X, then Y.</para>
            </summary>
            <param name="a">First vector.</param>
            <param name="b">Second vector.</param>
            <returns>true if a.X is larger than b.X, or a.X == b.X and a.Y is larger than b.Y; otherwise, false.</returns>
            <since>5.0</since>
        </member>
        <member name="M:Rhino.Geometry.Vector2d.op_GreaterThanOrEqual(Rhino.Geometry.Vector2d,Rhino.Geometry.Vector2d)">
            <summary>
            Determines whether the first specified vector comes after
            (has superior sorting value than) the second vector, or it is equal to it.
            <para>Components have decreasing evaluation priority: first X, then Y.</para>
            </summary>
            <param name="a">First vector.</param>
            <param name="b">Second vector.</param>
            <returns>true if a.X is larger than b.X, or a.X == b.X and a.Y &gt;= b.Y; otherwise, false.</returns>
            <since>5.0</since>
        </member>
        <member name="M:Rhino.Geometry.Vector2d.Equals(System.Object)">
            <summary>
            Determines whether the specified System.Object is a Vector2d and has the same value as the present vector.
            </summary>
            <param name="obj">The specified object.</param>
            <returns>true if obj is Vector2d and has the same components as this; otherwise false.</returns>
        </member>
        <member name="M:Rhino.Geometry.Vector2d.Equals(Rhino.Geometry.Vector2d)">
            <summary>
            Determines whether the specified vector has the same value as the present vector.
            </summary>
            <param name="vector">The specified vector.</param>
            <returns>true if vector has the same components as this; otherwise false.</returns>
            <since>5.0</since>
        </member>
        <member name="M:Rhino.Geometry.Vector2d.EpsilonEquals(Rhino.Geometry.Vector2d,System.Double)">
            <summary>
            Check that all values in other are within epsilon of the values in this
            </summary>
            <param name="other"></param>
            <param name="epsilon"></param>
            <returns></returns>
            <since>5.4</since>
        </member>
        <member name="M:Rhino.Geometry.Vector2d.CompareTo(Rhino.Geometry.Vector2d)">
            <summary>
            Compares this <see cref="T:Rhino.Geometry.Vector2d" /> with another <see cref="T:Rhino.Geometry.Vector2d" />.
            <para>Components evaluation priority is first X, then Y.</para>
            </summary>
            <param name="other">The other <see cref="T:Rhino.Geometry.Vector2d" /> to use in comparison.</param>
            <returns>
            <para> 0: if this is identical to other</para>
            <para>-1: if this.X &lt; other.X</para>
            <para>-1: if this.X == other.X and this.Y &lt; other.Y</para>
            <para>+1: otherwise.</para>
            </returns>
            <since>5.0</since>
        </member>
        <member name="M:Rhino.Geometry.Vector2d.GetHashCode">
            <summary>
            Provides a hashing value for the present vector.
            </summary>
            <returns>A non-unique number based on vector components.</returns>
        </member>
        <member name="M:Rhino.Geometry.Vector2d.ToString">
            <summary>
            Constructs a string representation of the current vector.
            </summary>
            <returns>A string in the form X,Y.</returns>
        </member>
        <member name="M:Rhino.Geometry.Vector2d.ToString(System.String,System.IFormatProvider)">
            <inheritdoc />
            <since>7.0</since>
        </member>
        <member name="P:Rhino.Geometry.Vector2d.Zero">
            <summary>
            Gets the value of the vector with components 0,0.
            </summary>
            <since>5.0</since>
        </member>
        <member name="P:Rhino.Geometry.Vector2d.Unset">
            <summary>
            Gets the value of the vector with components set as RhinoMath.UnsetValue,RhinoMath.UnsetValue.
            </summary>
            <since>5.0</since>
        </member>
        <member name="P:Rhino.Geometry.Vector2d.IsValid">
            <summary>
            Gets a value indicating whether this vector is valid. 
            A valid vector must be formed of valid component values for x, y and z.
            </summary>
            <since>5.7</since>
        </member>
        <member name="P:Rhino.Geometry.Vector2d.SquareLength">
            <summary>
            Returns the square of the length of the vector.
            </summary>
            <since>6.0</since>
        </member>
        <member name="M:Rhino.Geometry.Vector2d.IsTiny(System.Double)">
            <summary>
            Determines whether a vector is very short.
            </summary>
            <param name="tolerance">
            A nonzero value used as the coordinate zero tolerance.
            .</param>
            <returns>(Math.Abs(X) &lt;= tiny_tol) AND (Math.Abs(Y) &lt;= tiny_tol) AND (Math.Abs(Z) &lt;= tiny_tol).</returns>
            <example>
            <code source='examples\vbnet\ex_addline.vb' lang='vbnet'/>
            <code source='examples\cs\ex_addline.cs' lang='cs'/>
            <code source='examples\py\ex_addline.py' lang='py'/>
            </example>
            <since>6.0</since>
        </member>
        <member name="M:Rhino.Geometry.Vector2d.IsTiny">
            <summary>
            Uses RhinoMath.ZeroTolerance for IsTiny calculation.
            </summary>
            <returns>true if vector is very small, otherwise false.</returns>
            <since>6.0</since>
        </member>
        <member name="M:Rhino.Geometry.Vector2d.Unitize">
            <summary>
            Unitizes the vector in place. A unit vector has length 1 unit. 
            <para>An invalid or zero length vector cannot be unitized.</para>
            </summary>
            <returns>true on success or false on failure.</returns>
            <since>5.7</since>
        </member>
        <member name="M:Rhino.Geometry.Vector2d.Rotate(System.Double)">
            <summary>
            Rotates this vector.
            </summary>
            <param name="angleRadians">Angle of rotation (in radians).</param>
            <returns>true on success, false on failure.</returns>
            <since>6.0</since>
        </member>
        <member name="T:Rhino.Geometry.Vector3d">
            <summary>
            Represents the three components of a vector in three-dimensional space,
            using <see cref="T:System.Double"/>-precision floating point numbers.
            </summary>
        </member>
        <member name="M:Rhino.Geometry.Vector3d.#ctor(System.Double,System.Double,System.Double)">
            <summary>
            Initializes a new instance of a vector, using its three components.
            </summary>
            <param name="x">The X (first) component.</param>
            <param name="y">The Y (second) component.</param>
            <param name="z">The Z (third) component.</param>
            <since>5.0</since>
        </member>
        <member name="M:Rhino.Geometry.Vector3d.#ctor(Rhino.Geometry.Point3d)">
            <summary>
            Initializes a new instance of a vector, copying the three components from the three coordinates of a point.
            </summary>
            <param name="point">The point to copy from.</param>
            <since>5.0</since>
        </member>
        <member name="M:Rhino.Geometry.Vector3d.#ctor(Rhino.Geometry.Vector3f)">
            <summary>
            Initializes a new instance of a vector, copying the three components from a single-precision vector.
            </summary>
            <param name="vector">A single-precision vector.</param>
            <since>5.0</since>
        </member>
        <member name="M:Rhino.Geometry.Vector3d.#ctor(Rhino.Geometry.Vector3d)">
            <summary>
            Initializes a new instance of a vector, copying the three components from a vector.
            </summary>
            <param name="vector">A double-precision vector.</param>
            <since>5.0</since>
        </member>
        <member name="P:Rhino.Geometry.Vector3d.Zero">
            <summary>
            Gets the value of the vector with components 0,0,0.
            </summary>
            <since>5.0</since>
        </member>
        <member name="P:Rhino.Geometry.Vector3d.XAxis">
            <summary>
            Gets the value of the vector with components 1,0,0.
            </summary>
            <since>5.0</since>
        </member>
        <member name="P:Rhino.Geometry.Vector3d.YAxis">
            <summary>
            Gets the value of the vector with components 0,1,0.
            </summary>
            <since>5.0</since>
        </member>
        <member name="P:Rhino.Geometry.Vector3d.ZAxis">
            <summary>
            Gets the value of the vector with components 0,0,1.
            </summary>
            <since>5.0</since>
        </member>
        <member name="P:Rhino.Geometry.Vector3d.Unset">
            <summary>
            Gets the value of the vector with each component set to RhinoMath.UnsetValue.
            </summary>
            <since>5.0</since>
        </member>
        <member name="M:Rhino.Geometry.Vector3d.op_Multiply(Rhino.Geometry.Vector3d,System.Double)">
            <summary>
            Multiplies a vector by a number, having the effect of scaling it.
            </summary>
            <param name="vector">A vector.</param>
            <param name="t">A number.</param>
            <returns>A new vector that is the original vector coordinate-wise multiplied by t.</returns>
            <since>5.0</since>
        </member>
        <member name="M:Rhino.Geometry.Vector3d.Multiply(Rhino.Geometry.Vector3d,System.Double)">
            <summary>
            Multiplies a vector by a number, having the effect of scaling it.
            <para>(Provided for languages that do not support operator overloading. You can use the * operator otherwise)</para>
            </summary>
            <param name="vector">A vector.</param>
            <param name="t">A number.</param>
            <returns>A new vector that is the original vector coordinate-wise multiplied by t.</returns>
            <since>5.0</since>
        </member>
        <member name="M:Rhino.Geometry.Vector3d.op_Multiply(System.Double,Rhino.Geometry.Vector3d)">
            <summary>
            Multiplies a vector by a number, having the effect of scaling it.
            </summary>
            <param name="t">A number.</param>
            <param name="vector">A vector.</param>
            <returns>A new vector that is the original vector coordinate-wise multiplied by t.</returns>
            <since>5.0</since>
        </member>
        <member name="M:Rhino.Geometry.Vector3d.Multiply(System.Double,Rhino.Geometry.Vector3d)">
            <summary>
            Multiplies a vector by a number, having the effect of scaling it.
            <para>(Provided for languages that do not support operator overloading. You can use the * operator otherwise)</para>
            </summary>
            <param name="t">A number.</param>
            <param name="vector">A vector.</param>
            <returns>A new vector that is the original vector coordinate-wise multiplied by t.</returns>
            <since>5.0</since>
        </member>
        <member name="M:Rhino.Geometry.Vector3d.op_Division(Rhino.Geometry.Vector3d,System.Double)">
            <summary>
            Divides a <see cref="T:Rhino.Geometry.Vector3d"/> by a number, having the effect of shrinking it.
            </summary>
            <param name="vector">A vector.</param>
            <param name="t">A number.</param>
            <returns>A new vector that is component-wise divided by t.</returns>
            <since>5.0</since>
        </member>
        <member name="M:Rhino.Geometry.Vector3d.Divide(Rhino.Geometry.Vector3d,System.Double)">
            <summary>
            Divides a <see cref="T:Rhino.Geometry.Vector3d"/> by a number, having the effect of shrinking it.
            <para>(Provided for languages that do not support operator overloading. You can use the / operator otherwise)</para>
            </summary>
            <param name="vector">A vector.</param>
            <param name="t">A number.</param>
            <returns>A new vector that is component-wise divided by t.</returns>
            <since>5.0</since>
        </member>
        <member name="M:Rhino.Geometry.Vector3d.op_Addition(Rhino.Geometry.Vector3d,Rhino.Geometry.Vector3d)">
            <summary>
            Sums up two vectors.
            </summary>
            <param name="vector1">A vector.</param>
            <param name="vector2">A second vector.</param>
            <returns>A new vector that results from the component-wise addition of the two vectors.</returns>
        </member>
        <member name="M:Rhino.Geometry.Vector3d.Add(Rhino.Geometry.Vector3d,Rhino.Geometry.Vector3d)">
            <summary>
            Sums up two vectors.
            <para>(Provided for languages that do not support operator overloading. You can use the + operator otherwise)</para>
            </summary>
            <param name="vector1">A vector.</param>
            <param name="vector2">A second vector.</param>
            <returns>A new vector that results from the component-wise addition of the two vectors.</returns>
            <since>5.0</since>
        </member>
        <member name="M:Rhino.Geometry.Vector3d.op_Subtraction(Rhino.Geometry.Vector3d,Rhino.Geometry.Vector3d)">
            <summary>
            Subtracts the second vector from the first one.
            </summary>
            <param name="vector1">A vector.</param>
            <param name="vector2">A second vector.</param>
            <returns>A new vector that results from the component-wise difference of vector1 - vector2.</returns>
            <since>5.0</since>
        </member>
        <member name="M:Rhino.Geometry.Vector3d.Subtract(Rhino.Geometry.Vector3d,Rhino.Geometry.Vector3d)">
            <summary>
            Subtracts the second vector from the first one.
            <para>(Provided for languages that do not support operator overloading. You can use the - operator otherwise)</para>
            </summary>
            <param name="vector1">A vector.</param>
            <param name="vector2">A second vector.</param>
            <returns>A new vector that results from the component-wise difference of vector1 - vector2.</returns>
            <since>5.0</since>
        </member>
        <member name="M:Rhino.Geometry.Vector3d.op_Multiply(Rhino.Geometry.Vector3d,Rhino.Geometry.Vector3d)">
            <summary>
            Multiplies two vectors together, returning the dot product (or inner product).
            This differs from the cross product.
            </summary>
            <param name="vector1">A vector.</param>
            <param name="vector2">A second vector.</param>
            <returns>
            A value that results from the evaluation of v1.X*v2.X + v1.Y*v2.Y + v1.Z*v2.Z.
            <para>This value equals v1.Length * v2.Length * cos(alpha), where alpha is the angle between vectors.</para>
            </returns>
            <since>5.0</since>
        </member>
        <member name="M:Rhino.Geometry.Vector3d.Multiply(Rhino.Geometry.Vector3d,Rhino.Geometry.Vector3d)">
            <summary>
            Multiplies two vectors together, returning the dot product (or inner product).
            This differs from the cross product.
            <para>(Provided for languages that do not support operator overloading. You can use the * operator otherwise)</para>
            </summary>
            <param name="vector1">A vector.</param>
            <param name="vector2">A second vector.</param>
            <returns>
            A value that results from the evaluation of v1.X*v2.X + v1.Y*v2.Y + v1.Z*v2.Z.
            <para>This value equals v1.Length * v2.Length * cos(alpha), where alpha is the angle between vectors.</para>
            </returns>
            <since>5.0</since>
        </member>
        <member name="M:Rhino.Geometry.Vector3d.op_UnaryNegation(Rhino.Geometry.Vector3d)">
            <summary>
            Computes the opposite vector.
            </summary>
            <param name="vector">A vector to negate.</param>
            <returns>A new vector where all components were multiplied by -1.</returns>
            <since>5.0</since>
        </member>
        <member name="M:Rhino.Geometry.Vector3d.Negate(Rhino.Geometry.Vector3d)">
            <summary>
            Computes the reversed vector.
            <para>(Provided for languages that do not support operator overloading. You can use the - unary operator otherwise)</para>
            </summary>
            <remarks>Similar to <see cref="M:Rhino.Geometry.Vector3d.Reverse">Reverse()</see>, but static for CLR compliance.</remarks>
            <param name="vector">A vector to negate.</param>
            <returns>A new vector where all components were multiplied by -1.</returns>
            <since>5.0</since>
        </member>
        <member name="M:Rhino.Geometry.Vector3d.op_Equality(Rhino.Geometry.Vector3d,Rhino.Geometry.Vector3d)">
            <summary>
            Determines whether two vectors have the same value.
            </summary>
            <param name="a">A vector.</param>
            <param name="b">Another vector.</param>
            <returns>true if all coordinates are pairwise equal; false otherwise.</returns>
            <since>5.0</since>
        </member>
        <member name="M:Rhino.Geometry.Vector3d.op_Inequality(Rhino.Geometry.Vector3d,Rhino.Geometry.Vector3d)">
            <summary>
            Determines whether two vectors have different values.
            </summary>
            <param name="a">A vector.</param>
            <param name="b">Another vector.</param>
            <returns>true if any coordinate pair is different; false otherwise.</returns>
            <since>5.0</since>
        </member>
        <member name="M:Rhino.Geometry.Vector3d.CrossProduct(Rhino.Geometry.Vector3d,Rhino.Geometry.Vector3d)">
            <summary>
            Computes the cross product (or vector product, or exterior product) of two vectors.
            <para>This operation is not commutative.</para>
            </summary>
            <param name="a">First vector.</param>
            <param name="b">Second vector.</param>
            <returns>A new vector that is perpendicular to both a and b,
            <para>has Length == a.Length * b.Length * sin(theta) where theta is the angle between a and b.</para>
            <para>The resulting vector is oriented according to the right hand rule.</para>
            </returns>
            <since>5.0</since>
        </member>
        <member name="M:Rhino.Geometry.Vector3d.VectorAngle(Rhino.Geometry.Vector3d,Rhino.Geometry.Vector3d)">
            <summary>
            Compute the angle between two vectors.
            <para>This operation is commutative.</para>
            </summary>
            <param name="a">First vector for angle.</param>
            <param name="b">Second vector for angle.</param>
            <returns>If the input is valid, the angle (in radians) between a and b; RhinoMath.UnsetValue otherwise.</returns>
            <since>5.0</since>
        </member>
        <member name="M:Rhino.Geometry.Vector3d.VectorAngle(Rhino.Geometry.Vector3d,Rhino.Geometry.Vector3d,Rhino.Geometry.Plane)">
            <summary>
            Computes the angle on a plane between two vectors.
            </summary>
            <param name="a">First vector.</param>
            <param name="b">Second vector.</param>
            <param name="plane">Two-dimensional plane on which to perform the angle measurement.</param>
            <returns>On success, the angle (in radians) between a and b as projected onto the plane; RhinoMath.UnsetValue on failure.</returns>
            <since>5.0</since>
        </member>
        <member name="M:Rhino.Geometry.Vector3d.VectorAngle(Rhino.Geometry.Vector3d,Rhino.Geometry.Vector3d,Rhino.Geometry.Vector3d)">
            <summary>
            Computes the angle of v1, v2 with a normal vector.
            </summary>
            <param name="v1">First vector.</param>
            <param name="v2">Second vector.</param>
            <param name="vNormal">Normal vector.</param>
            <returns>On success, the angle (in radians) between a and b with respect of normal vector; RhinoMath.UnsetValue on failure.</returns>
            <since>6.0</since>
        </member>
        <member name="M:Rhino.Geometry.Vector3d.op_Implicit(Rhino.Geometry.Vector3f)~Rhino.Geometry.Vector3d">
            <summary>
            Converts a single-precision (float) vector in a double-precision vector, without needing casting.
            </summary>
            <param name="vector">A single-precision vector.</param>
            <returns>The same vector, expressed using double-precision values.</returns>
        </member>
        <member name="M:Rhino.Geometry.Vector3d.op_LessThan(Rhino.Geometry.Vector3d,Rhino.Geometry.Vector3d)">
            <summary>
            Determines whether the first specified vector comes before (has inferior sorting value than) the second vector.
            <para>Components evaluation priority is first X, then Y, then Z.</para>
            </summary>
            <param name="a">The first vector.</param>
            <param name="b">The second vector.</param>
            <returns>true if a.X is smaller than b.X,
            or a.X == b.X and a.Y is smaller than b.Y,
            or a.X == b.X and a.Y == b.Y and a.Z is smaller than b.Z;
            otherwise, false.</returns>
            <since>5.0</since>
        </member>
        <member name="M:Rhino.Geometry.Vector3d.op_LessThanOrEqual(Rhino.Geometry.Vector3d,Rhino.Geometry.Vector3d)">
            <summary>
            Determines whether the first specified vector comes before
            (has inferior sorting value than) the second vector, or it is equal to it.
            <para>Components evaluation priority is first X, then Y, then Z.</para>
            </summary>
            <param name="a">The first vector.</param>
            <param name="b">The second vector.</param>
            <returns>true if a.X is smaller than b.X,
            or a.X == b.X and a.Y is smaller than b.Y,
            or a.X == b.X and a.Y == b.Y and a.Z &lt;= b.Z;
            otherwise, false.</returns>
            <since>5.0</since>
        </member>
        <member name="M:Rhino.Geometry.Vector3d.op_GreaterThan(Rhino.Geometry.Vector3d,Rhino.Geometry.Vector3d)">
            <summary>
            Determines whether the first specified vector comes after (has superior sorting value than)
            the second vector.
            <para>Components evaluation priority is first X, then Y, then Z.</para>
            </summary>
            <param name="a">The first vector.</param>
            <param name="b">The second vector.</param>
            <returns>true if a.X is larger than b.X,
            or a.X == b.X and a.Y is larger than b.Y,
            or a.X == b.X and a.Y == b.Y and a.Z is larger than b.Z;
            otherwise, false.</returns>
            <since>5.0</since>
        </member>
        <member name="M:Rhino.Geometry.Vector3d.op_GreaterThanOrEqual(Rhino.Geometry.Vector3d,Rhino.Geometry.Vector3d)">
            <summary>
            Determines whether the first specified vector comes after (has superior sorting value than)
            the second vector, or it is equal to it.
            <para>Components evaluation priority is first X, then Y, then Z.</para>
            </summary>
            <param name="a">The first vector.</param>
            <param name="b">The second vector.</param>
            <returns>true if a.X is larger than b.X,
            or a.X == b.X and a.Y is larger than b.Y,
            or a.X == b.X and a.Y == b.Y and a.Z &gt;= b.Z;
            otherwise, false.</returns>
            <since>5.0</since>
        </member>
        <member name="M:Rhino.Geometry.Vector3d.AreOrthogonal(Rhino.Geometry.Vector3d,Rhino.Geometry.Vector3d,Rhino.Geometry.Vector3d)">
            <summary>
            Test whether three vectors describe an orthogonal axis system.
            All vectors must be mutually perpendicular this to be the case.
            </summary>
            <param name="x">X axis vector.</param>
            <param name="y">Y axis vector.</param>
            <param name="z">Z axis vector.</param>
            <returns>True if all vectors are non-zero and mutually perpendicular.</returns>
            <since>6.7</since>
        </member>
        <member name="M:Rhino.Geometry.Vector3d.AreOrthonormal(Rhino.Geometry.Vector3d,Rhino.Geometry.Vector3d,Rhino.Geometry.Vector3d)">
            <summary>
            Test whether three vectors describe an orthogonal, unit axis system.
            All vectors must be mutually perpendicular and have unit length for this to be the case.
            </summary>
            <param name="x">X axis vector.</param>
            <param name="y">Y axis vector.</param>
            <param name="z">Z axis vector.</param>
            <returns>True if all vectors are non-zero and mutually perpendicular.</returns>
            <since>6.7</since>
        </member>
        <member name="M:Rhino.Geometry.Vector3d.AreRighthanded(Rhino.Geometry.Vector3d,Rhino.Geometry.Vector3d,Rhino.Geometry.Vector3d)">
            <summary>
            Test whether three vectors describe a right-handed, orthogonal, unit axis system.
            The vectors must be orthonormal and follow the right-hand ordering; index-finger=x,
            middle-finger=y, thumb=z.
            </summary>
            <param name="x">X axis vector.</param>
            <param name="y">Y axis vector.</param>
            <param name="z">Z axis vector.</param>
            <returns>True if all vectors are non-zero and mutually perpendicular.</returns>
            <since>6.7</since>
        </member>
        <member name="P:Rhino.Geometry.Vector3d.X">
            <summary>
            Gets or sets the X (first) component of the vector.
            </summary>
            <since>5.0</since>
        </member>
        <member name="P:Rhino.Geometry.Vector3d.Y">
            <summary>
            Gets or sets the Y (second) component of the vector.
            </summary>
            <since>5.0</since>
        </member>
        <member name="P:Rhino.Geometry.Vector3d.Z">
            <summary>
            Gets or sets the Z (third) component of the vector.
            </summary>
            <since>5.0</since>
        </member>
        <member name="P:Rhino.Geometry.Vector3d.Item(System.Int32)">
            <summary>
            Gets or sets a vector component at the given index.
            </summary>
            <param name="index">Index of vector component. Valid values are: 
            <para>0 = X-component</para>
            <para>1 = Y-component</para>
            <para>2 = Z-component</para>
            .</param>
        </member>
        <member name="P:Rhino.Geometry.Vector3d.IsValid">
            <summary>
            Gets a value indicating whether this vector is valid. 
            A valid vector must be formed of valid component values for x, y and z.
            </summary>
            <since>5.0</since>
        </member>
        <member name="P:Rhino.Geometry.Vector3d.MinimumCoordinate">
            <summary>
            Gets the smallest (both positive and negative) component value in this vector.
            </summary>
            <since>5.0</since>
        </member>
        <member name="P:Rhino.Geometry.Vector3d.MaximumCoordinate">
            <summary>
            Gets the largest (both positive and negative) component value in this vector.
            </summary>
            <since>5.0</since>
        </member>
        <member name="P:Rhino.Geometry.Vector3d.Length">
            <summary>
            Computes the length (or magnitude, or size) of this vector.
            This is an application of Pythagoras' theorem.
            If this vector is invalid, its length is considered 0.
            </summary>
            <since>5.0</since>
        </member>
        <member name="P:Rhino.Geometry.Vector3d.SquareLength">
            <summary>
            Computes the squared length (or magnitude, or size) of this vector.
            This is an application of Pythagoras' theorem.
            While the Length property checks for input validity,
            this property does not. You should check validity in advance,
            if this vector can be invalid.
            </summary>
            <since>5.0</since>
        </member>
        <member name="P:Rhino.Geometry.Vector3d.IsUnitVector">
            <summary>
            Gets a value indicating whether or not this is a unit vector. 
            A unit vector has length 1.
            </summary>
            <since>5.0</since>
        </member>
        <member name="M:Rhino.Geometry.Vector3d.IsTiny(System.Double)">
            <summary>
            Determines whether a vector is very short.
            </summary>
            <param name="tolerance">
            A nonzero value used as the coordinate zero tolerance.
            .</param>
            <returns>(Math.Abs(X) &lt;= tiny_tol) AND (Math.Abs(Y) &lt;= tiny_tol) AND (Math.Abs(Z) &lt;= tiny_tol).</returns>
            <example>
            <code source='examples\vbnet\ex_addline.vb' lang='vbnet'/>
            <code source='examples\cs\ex_addline.cs' lang='cs'/>
            <code source='examples\py\ex_addline.py' lang='py'/>
            </example>
            <since>5.0</since>
        </member>
        <member name="M:Rhino.Geometry.Vector3d.IsTiny">
            <summary>
            Uses RhinoMath.ZeroTolerance for IsTiny calculation.
            </summary>
            <returns>true if vector is very small, otherwise false.</returns>
            <since>5.0</since>
        </member>
        <member name="P:Rhino.Geometry.Vector3d.IsZero">
            <summary>
            Gets a value indicating whether the X, Y, and Z values are all equal to 0.0.
            </summary>
            <since>5.0</since>
        </member>
        <member name="M:Rhino.Geometry.Vector3d.Equals(System.Object)">
            <summary>
            Determines whether the specified System.Object is a Vector3d and has the same values as the present vector.
            </summary>
            <param name="obj">The specified object.</param>
            <returns>true if obj is a Vector3d and has the same coordinates as this; otherwise false.</returns>
        </member>
        <member name="M:Rhino.Geometry.Vector3d.Equals(Rhino.Geometry.Vector3d)">
            <summary>
            Determines whether the specified vector has the same value as the present vector.
            </summary>
            <param name="vector">The specified vector.</param>
            <returns>true if vector has the same coordinates as this; otherwise false.</returns>
            <since>5.0</since>
        </member>
        <member name="M:Rhino.Geometry.Vector3d.EpsilonEquals(Rhino.Geometry.Vector3d,System.Double)">
            <summary>
            Check that all values in other are within epsilon of the values in this
            </summary>
            <param name="other"></param>
            <param name="epsilon"></param>
            <returns></returns>
            <since>5.4</since>
        </member>
        <member name="M:Rhino.Geometry.Vector3d.CompareTo(Rhino.Geometry.Vector3d)">
            <summary>
            Compares this <see cref="T:Rhino.Geometry.Vector3d" /> with another <see cref="T:Rhino.Geometry.Vector3d" />.
            <para>Component evaluation priority is first X, then Y, then Z.</para>
            </summary>
            <param name="other">The other <see cref="T:Rhino.Geometry.Vector3d" /> to use in comparison.</param>
            <returns>
            <para> 0: if this is identical to other</para>
            <para>-1: if this.X &lt; other.X</para>
            <para>-1: if this.X == other.X and this.Y &lt; other.Y</para>
            <para>-1: if this.X == other.X and this.Y == other.Y and this.Z &lt; other.Z</para>
            <para>+1: otherwise.</para>
            </returns>
            <since>5.0</since>
        </member>
        <member name="M:Rhino.Geometry.Vector3d.GetHashCode">
            <summary>
            Computes the hash code for the current vector.
            </summary>
            <returns>A non-unique number that represents the components of this vector.</returns>
        </member>
        <member name="M:Rhino.Geometry.Vector3d.ToString">
            <summary>
            Returns the string representation of the current vector, in the form X,Y,Z.
            </summary>
            <returns>A string with the current location of the point.</returns>
        </member>
        <member name="M:Rhino.Geometry.Vector3d.ToString(System.String,System.IFormatProvider)">
            <inheritdoc />
            <since>7.0</since>
        </member>
        <member name="M:Rhino.Geometry.Vector3d.Unitize">
            <summary>
            Unitizes the vector in place. A unit vector has length 1 unit. 
            <para>An invalid or zero length vector cannot be unitized.</para>
            </summary>
            <returns>true on success or false on failure.</returns>
            <since>5.0</since>
        </member>
        <member name="M:Rhino.Geometry.Vector3d.Transform(Rhino.Geometry.Transform)">
            <summary>
            Transforms the vector in place.
            <para>The transformation matrix acts on the left of the vector; i.e.,</para>
            <para>result = transformation*vector</para>
            </summary>
            <param name="transformation">Transformation matrix to apply.</param>
            <since>5.0</since>
        </member>
        <member name="M:Rhino.Geometry.Vector3d.Rotate(System.Double,Rhino.Geometry.Vector3d)">
            <summary>
            Rotates this vector around a given axis.
            </summary>
            <param name="angleRadians">Angle of rotation (in radians).</param>
            <param name="rotationAxis">Axis of rotation.</param>
            <returns>true on success, false on failure.</returns>
            <since>5.0</since>
        </member>
        <member name="M:Rhino.Geometry.Vector3d.Reverse">
            <summary>
             Reverses this vector in place (reverses the direction).
             <para>If this vector is Invalid, no changes will occur and false will be returned.</para>
            </summary>
            <remarks>Similar to <see cref="M:Rhino.Geometry.Vector3d.Negate(Rhino.Geometry.Vector3d)">Negate</see>, that is only provided for CLR language compliance.</remarks>
            <returns>true on success or false if the vector is invalid.</returns>
             <since>5.0</since>
        </member>
        <member name="M:Rhino.Geometry.Vector3d.IsParallelTo(Rhino.Geometry.Vector3d)">
            <summary>
            Determines whether this vector is parallel to another vector, within one degree (within Pi / 180). 
            </summary>
            <param name="other">Vector to use for comparison.</param>
            <returns>
            Parallel indicator:
            <para>+1 = both vectors are parallel</para>
            <para> 0 = vectors are not parallel, or at least one of the vectors is zero</para>
            <para>-1 = vectors are anti-parallel.</para>
            </returns>
            <example>
            <code source='examples\vbnet\ex_intersectlines.vb' lang='vbnet'/>
            <code source='examples\cs\ex_intersectlines.cs' lang='cs'/>
            <code source='examples\py\ex_intersectlines.py' lang='py'/>
            </example>
            <since>5.0</since>
        </member>
        <member name="M:Rhino.Geometry.Vector3d.IsParallelTo(Rhino.Geometry.Vector3d,System.Double)">
            <summary>
            Determines whether this vector is parallel to another vector, within a provided tolerance. 
            </summary>
            <param name="other">Vector to use for comparison.</param>
            <param name="angleTolerance">Angle tolerance (in radians).</param>
            <returns>
            Parallel indicator:
            <para>+1 = both vectors are parallel.</para>
            <para>0 = vectors are not parallel or at least one of the vectors is zero.</para>
            <para>-1 = vectors are anti-parallel.</para>
            </returns>
            <since>5.0</since>
        </member>
        <member name="M:Rhino.Geometry.Vector3d.IsPerpendicularTo(Rhino.Geometry.Vector3d)">
            <summary>
             Test to see whether this vector is perpendicular to within one degree of another one. 
            </summary>
             <param name="other">Vector to compare to.</param>
            <returns>true if both vectors are perpendicular, false if otherwise.</returns>
             <since>5.0</since>
        </member>
        <member name="M:Rhino.Geometry.Vector3d.IsPerpendicularTo(Rhino.Geometry.Vector3d,System.Double)">
            <summary>
             Determines whether this vector is perpendicular to another vector, within a provided angle tolerance. 
            </summary>
             <param name="other">Vector to use for comparison.</param>
             <param name="angleTolerance">Angle tolerance (in radians).</param>
            <returns>true if vectors form Pi-radians (90-degree) angles with each other; otherwise false.</returns>
             <since>5.0</since>
        </member>
        <member name="M:Rhino.Geometry.Vector3d.PerpendicularTo(Rhino.Geometry.Vector3d)">
            <summary>
             Sets this vector to be perpendicular to another vector. 
             Result is not unitized.
            </summary>
             <param name="other">Vector to use as guide.</param>
            <returns>true on success, false if input vector is zero or invalid.</returns>
             <since>5.0</since>
        </member>
        <member name="M:Rhino.Geometry.Vector3d.PerpendicularTo(Rhino.Geometry.Point3d,Rhino.Geometry.Point3d,Rhino.Geometry.Point3d)">
            <summary>
            Set this vector to be perpendicular to a plane defined by 3 points.
            </summary>
            <param name="point0">The first point.</param>
            <param name="point1">The second point.</param>
            <param name="point2">The third point.</param>
            <returns></returns>
            <since>8.0</since>
        </member>
        <member name="T:Rhino.Geometry.Ray3d">
            <summary>
            Represents an immutable ray in three dimensions, using position and direction.
            </summary>
        </member>
        <member name="M:Rhino.Geometry.Ray3d.#ctor(Rhino.Geometry.Point3d,Rhino.Geometry.Vector3d)">
            <summary>
            Initializes a new Ray3d instance.
            </summary>
            <param name="position">The position.</param>
            <param name="direction">The direction.</param>
            <since>5.0</since>
        </member>
        <member name="P:Rhino.Geometry.Ray3d.Position">
            <summary>
            Gets the starting position of this ray.
            </summary>
            <since>5.0</since>
        </member>
        <member name="P:Rhino.Geometry.Ray3d.Direction">
            <summary>
            Gets the direction vector of this ray.
            </summary>
            <since>5.0</since>
        </member>
        <member name="M:Rhino.Geometry.Ray3d.PointAt(System.Double)">
            <summary>
            Evaluates a point along the ray.
            </summary>
            <param name="t">The t parameter.</param>
            <returns>A point at (Direction*t + Position).</returns>
            <since>5.0</since>
        </member>
        <member name="M:Rhino.Geometry.Ray3d.op_Equality(Rhino.Geometry.Ray3d,Rhino.Geometry.Ray3d)">
            <summary>
            Determines whether two <see cref="T:Rhino.Geometry.Ray3d"/> have equal values.
            </summary>
            <param name="a">The first <see cref="T:Rhino.Geometry.Ray3d"/>.</param>
            <param name="b">The second <see cref="T:Rhino.Geometry.Ray3d"/>.</param>
            <returns>true if position and direction of the two rays are equal; otherwise false.</returns>
            <since>5.0</since>
        </member>
        <member name="M:Rhino.Geometry.Ray3d.op_Inequality(Rhino.Geometry.Ray3d,Rhino.Geometry.Ray3d)">
            <summary>
            Determines whether two <see cref="T:Rhino.Geometry.Ray3d"/> have different values.
            </summary>
            <param name="a">The first <see cref="T:Rhino.Geometry.Ray3d"/>.</param>
            <param name="b">The second <see cref="T:Rhino.Geometry.Ray3d"/>.</param>
            <returns>true if position or direction (or both) in the two rays are different; otherwise false.</returns>
            <since>5.0</since>
        </member>
        <member name="M:Rhino.Geometry.Ray3d.Equals(System.Object)">
            <summary>
            Determines whether the specified System.Object is a Ray3d and has the same values as the present ray.
            </summary>
            <param name="obj">The specified object.</param>
            <returns>true if obj is a Ray3d and has the same position and direction as this; otherwise false.</returns>
        </member>
        <member name="M:Rhino.Geometry.Ray3d.Equals(Rhino.Geometry.Ray3d)">
            <summary>
            Determines whether the specified Ray3d has the same value as the present ray.
            </summary>
            <param name="ray">The specified ray.</param>
            <returns>true if ray has the same position and direction as this; otherwise false.</returns>
            <since>5.0</since>
        </member>
        <member name="M:Rhino.Geometry.Ray3d.EpsilonEquals(Rhino.Geometry.Ray3d,System.Double)">
            <summary>
            Check that all values in other are within epsilon of the values in this
            </summary>
            <param name="other"></param>
            <param name="epsilon"></param>
            <returns></returns>
            <since>5.4</since>
        </member>
        <member name="M:Rhino.Geometry.Ray3d.GetHashCode">
            <summary>
            Computes a hashing number that represents the current ray.
            </summary>
            <returns>A signed integer that represents both position and direction, but is not unique.</returns>
        </member>
        <member name="T:Rhino.Geometry.PointCloudUnsafeLock">
            <summary>
            Permits access to the underlying PointCloud raw data structures in an unsafe way.
            </summary>
            <remarks>This lock object needs to be disposed before using the PointCloud in other calculations and this can 
            be achieved with the using keyword (Using in VB.Net).</remarks>
        </member>
        <member name="M:Rhino.Geometry.PointCloudUnsafeLock.PointArray(System.Int32@)">
            <summary>
            Retrieves a pointer to the raw point array, which uses coordinates
            defined with double precision floating point numbers, or null if none is available.
            </summary>
            <param name="length">The length of the array. This value is returned by reference (out in C#).
            0 is returned when there is no single precision array.</param>
            <returns>The beginning of the point array. Item 0 is the first vertex,
            and item length-1 is the last valid one. If no array is available, null is returned.</returns>
            <since>7.9</since>
        </member>
        <member name="M:Rhino.Geometry.PointCloudUnsafeLock.NormalArray(System.Int32@)">
            <summary>
            Retrieves a pointer to the raw array of point normals, or null if none is available.
            </summary>
            <param name="length">The length of the array. This value is returned by reference (out in C#).
            0 is returned when there is no single precision array.</param>
            <returns>The beginning of the vector array. Item 0 is the first vertex,
            and item length-1 is the last valid one. If no array is available, null is returned.</returns>
            <since>7.9</since>
        </member>
        <member name="M:Rhino.Geometry.PointCloudUnsafeLock.ColorArray(System.Int32@)">
            <summary>
            Retrieves a pointer to the raw array of colors, which are represented
            as 32-bit integers in ARGB format, or null if none is available.
            </summary>
            <param name="length">The length of the array. This value is returned by reference (out in C#).
            0 is returned when there is no single precision array.</param>
            <returns>The beginning of the color array. Item 0 is the first vertex,
            and item length-1 is the last valid one. If no array is available, null is returned.</returns>
            <since>7.9</since>
        </member>
        <member name="M:Rhino.Geometry.PointCloudUnsafeLock.ValueArray(System.Int32@)">
            <summary>
            Retrieves a pointer to the raw array of point values, or null if none is available.
            </summary>
            <param name="length">The length of the array. This value is returned by reference (out in C#).
            0 is returned when there is no single precision array.</param>
            <returns>The beginning of the value array. Item 0 is the first vertex,
            and item length-1 is the last valid one. If no array is available, null is returned.</returns>
            <since>7.9</since>
        </member>
        <member name="M:Rhino.Geometry.PointCloudUnsafeLock.Release">
            <summary>
            Releases the lock and updates the underlying unmanaged data structures.
            </summary>
            <since>6.0</since>
        </member>
        <member name="T:Rhino.Geometry.PointCloudItem">
            <summary>
            Represents a single item in a point cloud. A PointCloud item 
            always has a location, but it has an optional normal vector and color.
            </summary>
        </member>
        <member name="P:Rhino.Geometry.PointCloudItem.Location">
            <summary>
            Gets or sets the location of this point cloud item.
            </summary>
            <since>5.0</since>
        </member>
        <member name="P:Rhino.Geometry.PointCloudItem.X">
            <summary>
            Gets or sets the X component of this point cloud item location.
            </summary>
            <since>5.0</since>
        </member>
        <member name="P:Rhino.Geometry.PointCloudItem.Y">
            <summary>
            Gets or sets the Y component of this point cloud item location.
            </summary>
            <since>5.0</since>
        </member>
        <member name="P:Rhino.Geometry.PointCloudItem.Z">
            <summary>
            Gets or sets the Z component of this point cloud item location.
            </summary>
            <since>5.0</since>
        </member>
        <member name="P:Rhino.Geometry.PointCloudItem.Normal">
            <summary>
            Gets or sets the normal vector for this point cloud item.
            If this point cloud item does not have a normal vector, 
            Vector3d.Unset is returned.
            </summary>
            <since>5.0</since>
        </member>
        <member name="P:Rhino.Geometry.PointCloudItem.Color">
            <summary>
            Gets or sets the color of this point cloud item.
            If this point cloud item does not have a color, System.Drawing.Color.Black is returned.
            </summary>
            <since>5.0</since>
        </member>
        <member name="P:Rhino.Geometry.PointCloudItem.Hidden">
            <summary>
            Gets or sets the hidden flag of this point cloud item.
            If this point cloud item does not have a hidden flag, false is returned.
            </summary>
            <since>5.0</since>
        </member>
        <member name="P:Rhino.Geometry.PointCloudItem.PointValue">
            <summary>
            Gets or set the extra value of this point cloud item.
            The extra value can be used to store a user-defined value, such as intensity.
            If this point cloud item does not have an extra value, RhinoMath.UnsetValue is returned.
            </summary>
            <since>7.5</since>
        </member>
        <member name="P:Rhino.Geometry.PointCloudItem.Index">
            <summary>
            Gets the index of this point cloud item.
            </summary>
            <since>5.0</since>
        </member>
        <member name="T:Rhino.Geometry.PointCloud">
            <summary>
            Represents a collection of coordinates with optional normal vectors and colors.
            </summary>
        </member>
        <member name="M:Rhino.Geometry.PointCloud.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Rhino.Geometry.PointCloud"/> class
            that is empty.
            </summary>
            <since>5.0</since>
        </member>
        <member name="M:Rhino.Geometry.PointCloud.#ctor(Rhino.Geometry.PointCloud)">
            <summary>
            Initializes a new instance of the <see cref="T:Rhino.Geometry.PointCloud"/> class,
            copying (Merge) the content of another point cloud.
            </summary>
            <since>5.0</since>
        </member>
        <member name="M:Rhino.Geometry.PointCloud.#ctor(System.Collections.Generic.IEnumerable{Rhino.Geometry.Point3d})">
            <summary>
            Initializes a new instance of the <see cref="T:Rhino.Geometry.PointCloud"/> class,
            copying the content from a set of points.
            </summary>
            <param name="points">A list or an array of Point3d, or any object that implements <see cref="T:System.Collections.Generic.IEnumerable`1"/>.</param>
            <since>5.0</since>
        </member>
        <member name="M:Rhino.Geometry.PointCloud.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Binds with the Rhino default serializer to support object persistence.
            </summary>
            <param name="info">Some storage.</param>
            <param name="context">The source and destination of the stream.</param>
        </member>
        <member name="P:Rhino.Geometry.PointCloud.Count">
            <summary>
            Gets the number of points in this point cloud.
            </summary>
            <since>5.0</since>
        </member>
        <member name="P:Rhino.Geometry.PointCloud.Item(System.Int32)">
            <summary>
            Gets the item at the given index.
            </summary>
            <param name="index">Index of item to retrieve.</param>
            <returns>The item at the given index.</returns>
        </member>
        <member name="P:Rhino.Geometry.PointCloud.HiddenPointCount">
            <summary>
            Gets the number of points that have their Hidden flag set.
            </summary>
            <since>5.0</since>
        </member>
        <member name="P:Rhino.Geometry.PointCloud.ContainsColors">
            <summary>
            Gets a value indicating whether or not the points in this 
            point cloud have colors assigned to them.
            </summary>
            <since>5.0</since>
        </member>
        <member name="P:Rhino.Geometry.PointCloud.ContainsNormals">
            <summary>
            Gets a value indicating whether or not the points in this 
            point cloud have normals assigned to them.
            </summary>
            <since>5.0</since>
        </member>
        <member name="P:Rhino.Geometry.PointCloud.ContainsHiddenFlags">
            <summary>
            Gets a value indicating whether or not the points in this 
            point cloud have hidden flags assigned to them.
            </summary>
            <since>5.0</since>
        </member>
        <member name="P:Rhino.Geometry.PointCloud.ContainsPointValues">
            <summary>
            Gets a value indicating whether or not the points in this point cloud have extra values assigned to them.
            Extra values can be used to store a user-defined values, such as intensity.
            </summary>
            <since>7.5</since>
        </member>
        <member name="M:Rhino.Geometry.PointCloud.ClearColors">
            <summary>
            Destroys the color information in this point cloud.
            </summary>
            <since>5.0</since>
        </member>
        <member name="M:Rhino.Geometry.PointCloud.ClearNormals">
            <summary>
            Destroys the normal vector information in this point cloud.
            </summary>
            <since>5.0</since>
        </member>
        <member name="M:Rhino.Geometry.PointCloud.ClearHiddenFlags">
            <summary>
            Destroys the hidden flag information in this point cloud.
            </summary>
            <since>5.0</since>
        </member>
        <member name="M:Rhino.Geometry.PointCloud.ClearPointValues">
            <summary>
            Destroys the extra value information in this point cloud.
            Extra values can be used to store a user-defined values, such as intensity.
            </summary>
            <since>7.5</since>
        </member>
        <member name="M:Rhino.Geometry.PointCloud.AppendNew">
            <summary>
            Appends a new PointCloudItem to the end of this point cloud.
            </summary>
            <returns>The newly appended item.</returns>
            <since>5.0</since>
        </member>
        <member name="M:Rhino.Geometry.PointCloud.InsertNew(System.Int32)">
            <summary>
            Inserts a new <see cref="T:Rhino.Geometry.PointCloudItem"/> at a specific position of the point cloud.
            </summary>
            <param name="index">Index of new item.</param>
            <returns>The newly inserted item.</returns>
            <since>5.0</since>
        </member>
        <member name="M:Rhino.Geometry.PointCloud.Merge(Rhino.Geometry.PointCloud)">
            <summary>
            Merges, or appends, a specified point cloud into this one.
            </summary>
            <param name="other">PointCloud to merge with this one.</param>
            <since>5.0</since>
        </member>
        <member name="M:Rhino.Geometry.PointCloud.Add(Rhino.Geometry.Point3d)">
            <summary>
            Append a new point to the end of the list.
            </summary>
            <param name="point">Point to append.</param>
            <since>5.0</since>
        </member>
        <member name="M:Rhino.Geometry.PointCloud.Add(Rhino.Geometry.Point3d,Rhino.Geometry.Vector3d)">
            <summary>
            Append a new point to the end of the list.
            </summary>
            <param name="point">Point to append.</param>
            <param name="normal">Normal vector of new point.</param>
            <since>5.0</since>
        </member>
        <member name="M:Rhino.Geometry.PointCloud.Add(Rhino.Geometry.Point3d,System.Drawing.Color)">
            <summary>
            Append a new point to the end of the list.
            </summary>
            <param name="point">Point to append.</param>
            <param name="color">Color of new point.</param>
            <since>5.0</since>
        </member>
        <member name="M:Rhino.Geometry.PointCloud.Add(Rhino.Geometry.Point3d,Rhino.Geometry.Vector3d,System.Drawing.Color)">
            <summary>
            Append a new point to the end of the list.
            </summary>
            <param name="point">Point to append.</param>
            <param name="normal">Normal vector of new point.</param>
            <param name="color">Color of new point.</param>
            <since>5.0</since>
        </member>
        <member name="M:Rhino.Geometry.PointCloud.Add(Rhino.Geometry.Point3d,Rhino.Geometry.Vector3d,System.Drawing.Color,System.Double)">
            <summary>
            Append a new point to the end of the list.
            </summary>
            <param name="point">Point to append.</param>
            <param name="normal">Normal vector of new point.</param>
            <param name="color">Color of new point.</param>
            <param name="value">
            Extra value of new point.
            An extra value can be used to store a user-defined value, such as intensity.
            </param>
            <since>7.5</since>
        </member>
        <member name="M:Rhino.Geometry.PointCloud.AddRange(System.Collections.Generic.IEnumerable{Rhino.Geometry.Point3d})">
            <summary>
            Appends a collection of points to this point cloud.
            </summary>
            <param name="points">Points to append.</param>
            <since>5.0</since>
        </member>
        <member name="M:Rhino.Geometry.PointCloud.AddRange(System.Collections.Generic.IEnumerable{Rhino.Geometry.Point3d},System.Collections.Generic.IEnumerable{Rhino.Geometry.Vector3d})">
            <summary>
            Appends a collection of points and normal vectors to this point cloud.
            </summary>
            <exception cref="T:System.ArgumentException">thrown if points and normals have differing numbers of elements</exception>
            <param name="points">Points to append.</param>
            <param name="normals">Normal Vectors to append.</param>
            <since>6.0</since>
        </member>
        <member name="M:Rhino.Geometry.PointCloud.AddRange(System.Collections.Generic.IEnumerable{Rhino.Geometry.Point3d},System.Collections.Generic.IEnumerable{System.Drawing.Color})">
            <summary>
            Appends a collection of points and normal vectors to this point cloud.
            </summary>
            <param name="points">Points to append.</param>
            <param name="colors">Colors to append.</param>
            <since>6.0</since>
        </member>
        <member name="M:Rhino.Geometry.PointCloud.AddRange(System.Collections.Generic.IEnumerable{Rhino.Geometry.Point3d},System.Collections.Generic.IEnumerable{Rhino.Geometry.Vector3d},System.Collections.Generic.IEnumerable{System.Drawing.Color})">
            <summary>
            Appends a collection of points, normal vectors, and colors to this point cloud.
            </summary>
            <param name="points">Points to append.</param>
            <param name="normals">Normal Vectors to append.</param>
            <param name="colors">Colors to append.</param>
            <since>6.0</since>
        </member>
        <member name="M:Rhino.Geometry.PointCloud.AddRange(System.Collections.Generic.IEnumerable{Rhino.Geometry.Point3d},System.Collections.Generic.IEnumerable{Rhino.Geometry.Vector3d},System.Collections.Generic.IEnumerable{System.Drawing.Color},System.Collections.Generic.IEnumerable{System.Double})">
            <summary>
            Appends a collection of points, normal vectors, colors, and extra values to this point cloud.
            </summary>
            <param name="points">Points to append.</param>
            <param name="normals">Normal Vectors to append.</param>
            <param name="colors">Colors to append.</param>
            <param name="values">
            Exta point values to append.
            Extra values can be used to store a user-defined values, such as intensity.
            </param>
            <since>7.5</since>
        </member>
        <member name="M:Rhino.Geometry.PointCloud.Insert(System.Int32,Rhino.Geometry.Point3d)">
            <summary>Inserts a new point into the point list.</summary>
            <param name="index">Insertion index.</param>
            <param name="point">Point to append.</param>
            <since>5.0</since>
        </member>
        <member name="M:Rhino.Geometry.PointCloud.Insert(System.Int32,Rhino.Geometry.Point3d,Rhino.Geometry.Vector3d)">
            <summary>Inserts a new point into the point list.</summary>
            <param name="index">Insertion index.</param>
            <param name="point">Point to append.</param>
            <param name="normal">Normal vector of new point.</param>
            <since>5.0</since>
        </member>
        <member name="M:Rhino.Geometry.PointCloud.Insert(System.Int32,Rhino.Geometry.Point3d,System.Drawing.Color)">
            <summary>
            Inserts a new point into the point list.
            </summary>
            <param name="index">Insertion index.</param>
            <param name="point">Point to append.</param>
            <param name="color">Color of new point.</param>
            <since>5.0</since>
        </member>
        <member name="M:Rhino.Geometry.PointCloud.Insert(System.Int32,Rhino.Geometry.Point3d,Rhino.Geometry.Vector3d,System.Drawing.Color)">
            <summary>
            Inserts a new point into the point list.
            </summary>
            <param name="index">Insertion index.</param>
            <param name="point">Point to append.</param>
            <param name="normal">Normal vector of new point.</param>
            <param name="color">Color of new point.</param>
            <since>5.0</since>
        </member>
        <member name="M:Rhino.Geometry.PointCloud.Insert(System.Int32,Rhino.Geometry.Point3d,Rhino.Geometry.Vector3d,System.Drawing.Color,System.Double)">
            <summary>
            Inserts a new point into the point list.
            </summary>
            <param name="index">Insertion index.</param>
            <param name="point">Point to append.</param>
            <param name="normal">Normal vector of new point.</param>
            <param name="color">Color of new point.</param>
            <param name="value">
            An extra value of new point.
            An extra values can be used to store a user-defined value, such as intensity.
            </param>
            <since>7.5</since>
        </member>
        <member name="M:Rhino.Geometry.PointCloud.InsertRange(System.Int32,System.Collections.Generic.IEnumerable{Rhino.Geometry.Point3d})">
            <summary>
            Append a collection of points to this point cloud.
            </summary>
            <param name="index">Index at which to insert the new collection.</param>
            <param name="points">Points to append.</param>
            <since>5.0</since>
        </member>
        <member name="M:Rhino.Geometry.PointCloud.RemoveAt(System.Int32)">
            <summary>
            Remove the point at the given index.
            </summary>
            <param name="index">Index of point to remove.</param>
            <since>5.0</since>
        </member>
        <member name="M:Rhino.Geometry.PointCloud.RemoveRange(System.Collections.Generic.IEnumerable{System.Int32})">
            <summary>
            Removes points at given indices.
            </summary>
            <param name="indices">An array of indices of the points to remove.</param>
            <returns>The number of points removed from the point cloud.</returns>
            <since>7.5</since>
        </member>
        <member name="M:Rhino.Geometry.PointCloud.GetPoints">
            <summary>
            Copy all the point coordinates in this point cloud to an array.
            </summary>
            <returns>An array containing all the points in this point cloud.</returns>
            <since>5.0</since>
        </member>
        <member name="M:Rhino.Geometry.PointCloud.PointAt(System.Int32)">
            <summary>
            Returns the location of the point at a specific index.
            </summary>
            <param name="index">The index.</param>
            <returns></returns>
            <since>6.0</since>
        </member>
        <member name="M:Rhino.Geometry.PointCloud.GetNormals">
            <summary>
            Copy all the normal vectors in this point cloud to an array.
            </summary>
            <returns>An array containing all the normals in this point cloud.</returns>
            <since>5.0</since>
        </member>
        <member name="M:Rhino.Geometry.PointCloud.GetColors">
            <summary>
            Copy all the point colors in this point cloud to an array.
            </summary>
            <returns>An array containing all the colors in this point cloud.</returns>
            <since>5.0</since>
        </member>
        <member name="M:Rhino.Geometry.PointCloud.GetPointValues">
            <summary>
            Copy all the extra point values in this point cloud to an array.
            Extra values can be used to store a user-defined value, such as intensity.
            </summary>
            <returns>An array containing all the extra point values in this point cloud.</returns>
            <since>7.5</since>
        </member>
        <member name="M:Rhino.Geometry.PointCloud.ClosestPoint(Rhino.Geometry.Point3d)">
            <summary>
            Returns index of the closest point in the point cloud to a given test point.
            </summary>
            <param name="testPoint">.</param>
            <returns>Index of point in the point cloud on success. -1 on failure.</returns>
            <since>5.0</since>
        </member>
        <member name="M:Rhino.Geometry.PointCloud.GetRandomSubsample(System.UInt32)">
            <summary>
            Returns a random subsample of a point cloud.
            </summary>
            <param name="numberOfPoints">The number of points the new point cloud should contain.</param>
            <returns>A subsample of this point cloud if success, null otherwise.</returns>
            <since>7.5</since>
        </member>
        <member name="M:Rhino.Geometry.PointCloud.GetRandomSubsample(System.UInt32,System.Threading.CancellationToken,System.IProgress{System.Double})">
            <summary>
            Returns a random subsample of a point cloud.
            </summary>
            <param name="numberOfPoints">The number of points the new point cloud should contain.</param>
            <param name="cancelToken">The cancellation token.</param>
            <param name="progress">The provider for progress updates.</param>
            <returns>A subsample of this point cloud if success, null otherwise.</returns>
            <since>7.5</since>
        </member>
        <member name="M:Rhino.Geometry.PointCloud.GetUnsafeLock(System.Boolean)">
            <summary>
            Allows the developer to obtain unsafe pointers to the underlying unmanaged data structures of the PointCloud.
            </summary>
            <param name="writable">true if user will need to write onto the structure. false otherwise.</param>
            <returns>A lock that needs to be released.</returns>
            <remarks>The lock implements the IDisposable interface, and one call of its
            <see cref="M:System.IDisposable.Dispose"/> or <see cref="M:Rhino.Geometry.PointCloud.ReleaseUnsafeLock(Rhino.Geometry.PointCloudUnsafeLock)"/> will update the data structure as required.
            This can be achieved with a using statement (Using in Vb.Net).</remarks>
            <since>7.9</since>
        </member>
        <member name="M:Rhino.Geometry.PointCloud.ReleaseUnsafeLock(Rhino.Geometry.PointCloudUnsafeLock)">
            <summary>
            Updates the PointCloud data with the information that was stored via the <see cref="T:Rhino.Geometry.PointCloudUnsafeLock"/>.
            </summary>
            <param name="pointCloudData">The data that will be unlocked.</param>
            <since>7.9</since>
        </member>
        <member name="M:Rhino.Geometry.PointCloud.AsReadOnlyListOfPoints">
            <summary>
            Returns an enumerator and list indexer over point cloud locations. 
            </summary>
            <returns>The read-only list. This is a reference to the present point cloud.</returns>
            <since>6.0</since>
        </member>
        <member name="M:Rhino.Geometry.PointCloud.GetEnumerator">
            <summary>
            Gets an enumerator that allows to modify each point cloud point.
            </summary>
            <returns>A instance of <see cref="T:System.Collections.Generic.IEnumerator`1"/>.</returns>
            <since>5.0</since>
        </member>
        <member name="M:Rhino.Geometry.PointCloud.System#Collections#IEnumerable#GetEnumerator">
            <since>5.0</since>
        </member>
        <member name="T:Rhino.Geometry.Point">
            <summary>
            Represents a geometric point.
            <para>This is fundamentally a class that derives from
            <see cref="T:Rhino.Geometry.GeometryBase"/> and contains a single <see cref="T:Rhino.Geometry.Point3d"/> location.</para>
            </summary>
        </member>
        <member name="M:Rhino.Geometry.Point.#ctor(Rhino.Geometry.Point3d)">
            <summary>
            Initializes a new point instance with a location.
            </summary>
            <param name="location">A position in 3D space.</param>
            <since>5.0</since>
        </member>
        <member name="M:Rhino.Geometry.Point.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Protected constructor for internal use.
            </summary>
            <param name="info">Serialization data.</param>
            <param name="context">Serialization stream.</param>
        </member>
        <member name="P:Rhino.Geometry.Point.Location">
            <summary>
            Gets or sets the location (position) of this point.
            </summary>
            <since>5.0</since>
        </member>
        <member name="T:Rhino.Geometry.Point3dGrid">
            <summary>
            Represents a rectangular grid of 3D points.
            </summary>
        </member>
        <member name="M:Rhino.Geometry.Point3dGrid.#ctor">
            <summary>
            Initializes a rectangular grid of points, with no points in it.
            </summary>
            <since>5.0</since>
        </member>
        <member name="M:Rhino.Geometry.Point3dGrid.#ctor(System.Int32,System.Int32)">
            <summary>
            Initializes a rectangular grid of points with a given number of columns and rows.
            </summary>
            <param name="rows">An amount of rows.</param>
            <param name="columns">An amount of columns.</param>
            <since>5.0</since>
        </member>
        <member name="M:Rhino.Geometry.Point3dGrid.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Protected constructor for internal use.
            </summary>
            <param name="info">Serialization data.</param>
            <param name="context">Serialization stream.</param>
        </member>
        <member name="T:Rhino.Geometry.PolyCurve">
            <summary>
            Represents a curve that is the result of joining several (possibly different)
            types of curves.
            </summary>
        </member>
        <member name="M:Rhino.Geometry.PolyCurve.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Protected constructor for internal use.
            </summary>
            <param name="info">Serialization data.</param>
            <param name="context">Serialization stream.</param>
        </member>
        <member name="M:Rhino.Geometry.PolyCurve.#ctor">
            <summary>
            Initializes a new, empty polycurve.
            </summary>
            <since>5.0</since>
        </member>
        <member name="M:Rhino.Geometry.PolyCurve.Duplicate">
            <summary>
            Duplicates this polycurve.
            <para>When not overridden in a derived class, this calls <see cref="M:Rhino.Geometry.PolyCurve.DuplicatePolyCurve"/>.</para>
            </summary>
            <returns>An exact duplicate of this curve.</returns>
            <since>5.0</since>
        </member>
        <member name="M:Rhino.Geometry.PolyCurve.DuplicatePolyCurve">
            <summary>
            Duplicates this polycurve.
            <para>This is the same as <see cref="M:Rhino.Geometry.PolyCurve.Duplicate"/>.</para>
            </summary>
            <returns>An exact duplicate of this curve.</returns>
            <since>5.0</since>
        </member>
        <member name="P:Rhino.Geometry.PolyCurve.SegmentCount">
            <summary>
            Gets the number of segments that make up this Polycurve.
            </summary>
            <since>5.0</since>
        </member>
        <member name="M:Rhino.Geometry.PolyCurve.SegmentCurve(System.Int32)">
            <summary>
            Gets the segment curve at the given index.
            </summary>
            <param name="index">Index of segment to retrieve.</param>
            <returns>The segment at the given index or null on failure.</returns>
            <since>5.0</since>
        </member>
        <member name="P:Rhino.Geometry.PolyCurve.IsNested">
            <summary>
            Gets a value indicating whether or not a PolyCurve contains nested PolyCurves.
            </summary>
            <seealso cref="M:Rhino.Geometry.PolyCurve.RemoveNesting"/>
            <since>5.0</since>
        </member>
        <member name="P:Rhino.Geometry.PolyCurve.HasGap">
            <summary>
            This is a quick way to see if the curve has gaps between the sub curve segments. 
            </summary>
            <since>5.0</since>
        </member>
        <member name="M:Rhino.Geometry.PolyCurve.RemoveNesting">
            <summary>
            Explodes nested polycurve segments and reconstructs this curve from the shattered remains. 
            The result will have not have any PolyCurves as segments but it will have identical 
            locus and parameterization.
            </summary>
            <returns>
            true if any nested PolyCurve was found and absorbed, false if no PolyCurve segments could be found.
            </returns>
            <seealso cref="P:Rhino.Geometry.PolyCurve.IsNested"/>
            <since>5.0</since>
        </member>
        <member name="M:Rhino.Geometry.PolyCurve.Explode">
            <summary>
            Explodes this PolyCurve into a list of Curve segments. This will <b>not explode</b> nested polycurves. 
            Call <see cref="M:Rhino.Geometry.PolyCurve.RemoveNesting"/> first if you need all individual segments.
            </summary>
            <returns>An array of polycurve segments.</returns>
            <since>5.0</since>
        </member>
        <member name="M:Rhino.Geometry.PolyCurve.Append(Rhino.Geometry.Line)">
            <summary>
            Appends and matches the start of the line to the end of polycurve. 
            This function will fail if the polycurve is closed.
            </summary>
            <param name="line">Line segment to append.</param>
            <returns>true on success, false on failure.</returns>
            <since>5.0</since>
        </member>
        <member name="M:Rhino.Geometry.PolyCurve.Append(Rhino.Geometry.Arc)">
            <summary>
            Appends and matches the start of the arc to the end of polycurve. 
            This function will fail if the polycurve is closed or if SegmentCount > 0 and the arc is closed.
            </summary>
            <param name="arc">Arc segment to append.</param>
            <returns>true on success, false on failure.</returns>
            <since>5.0</since>
        </member>
        <member name="M:Rhino.Geometry.PolyCurve.Append(Rhino.Geometry.Curve)">
            <summary>
            Appends and matches the start of the curve to the end of polycurve. 
            This function will fail if the PolyCurve is closed or if SegmentCount > 0 and the new segment is closed.
            </summary>
            <param name="curve">Segment to append.</param>
            <returns>true on success, false on failure.</returns>
            <since>5.0</since>
        </member>
        <member name="M:Rhino.Geometry.PolyCurve.AppendSegment(Rhino.Geometry.Curve)">
            <summary>
            Appends the curve to the polycurve without changing the new segment's geometry. 
            This function will fail if the PolyCurve is closed or if SegmentCount > 0 and the new segment is closed.
            </summary>
            <param name="curve">Segment to append.</param>
            <returns>true on success, false on failure.</returns>
            <since>6.0</since>
        </member>
        <member name="M:Rhino.Geometry.PolyCurve.SegmentCurveParameter(System.Double)">
            <summary>
            Converts a polycurve parameter to a segment curve parameter.
            </summary>
            <param name="polycurveParameter">Parameter on PolyCurve to convert.</param>
            <returns>
            Segment curve evaluation parameter or UnsetValue if the 
            segment curve parameter could not be computed.
            </returns>
            <since>5.0</since>
        </member>
        <member name="M:Rhino.Geometry.PolyCurve.PolyCurveParameter(System.Int32,System.Double)">
            <summary>
            Converts a segment curve parameter to a polycurve parameter.
            </summary>
            <param name="segmentIndex">Index of segment.</param>
            <param name="segmentCurveParameter">Parameter on segment.</param>
            <returns>
            Polycurve evaluation parameter or UnsetValue if the polycurve curve parameter could not be computed.
            </returns>
            <since>5.0</since>
        </member>
        <member name="M:Rhino.Geometry.PolyCurve.SegmentDomain(System.Int32)">
            <summary>
            Returns the polycurve sub-domain assigned to a segment curve.
            </summary>
            <param name="segmentIndex">Index of segment.</param>
            <returns>
            The polycurve sub-domain assigned to a segment curve. 
            Returns Interval.Unset if segment_index &lt; 0 or segment_index >= Count().
            </returns>
            <since>5.0</since>
        </member>
        <member name="M:Rhino.Geometry.PolyCurve.SegmentIndex(System.Double)">
            <summary>
            Finds the segment used for evaluation at polycurve_parameter.
            </summary>
            <param name="polycurveParameter">Parameter on polycurve for segment lookup.</param>
            <returns>
            Index of the segment used for evaluation at polycurve_parameter. 
            If polycurve_parameter &lt; Domain.Min(), then 0 is returned. 
            If polycurve_parameter > Domain.Max(), then Count()-1 is returned.
            </returns>
            <since>5.0</since>
        </member>
        <member name="M:Rhino.Geometry.PolyCurve.SegmentIndexes(Rhino.Geometry.Interval,System.Int32@,System.Int32@)">
            <summary>Finds the segments that overlap the Polycurve sub domain.</summary>
            <param name="subdomain">Domain on this PolyCurve.</param>
            <param name="segmentIndex0">
            Index of first segment that overlaps the sub-domain.
            </param>
            <param name="segmentIndex1">
            Index of last segment that overlaps the sub-domain. Note that segmentIndex0 &lt;= i &lt; segmentIndex1.
            </param>
            <returns>Number of segments that overlap the sub-domain.</returns>
            <since>5.0</since>
        </member>
        <member name="T:Rhino.Geometry.Polyline">
            <summary>
            Represents an ordered set of points connected by linear segments.
            <para>Polylines are closed if start and end points coincide.</para>
            </summary>
        </member>
        <member name="M:Rhino.Geometry.Polyline.#ctor">
            <summary>
            Initializes a new empty polyline.
            </summary>
            <since>5.0</since>
        </member>
        <member name="M:Rhino.Geometry.Polyline.#ctor(System.Int32)">
            <summary>
            Initializes a new empty polyline with an initial capacity.
            </summary>
            <param name="initialCapacity">Number of vertices this polyline can contain without resizing.</param>
            <since>5.0</since>
        </member>
        <member name="M:Rhino.Geometry.Polyline.#ctor(System.Collections.Generic.IEnumerable{Rhino.Geometry.Point3d})">
            <summary>
            Initializes a new polyline from a collection of points.
            </summary>
            <param name="collection">Points to copy into the local vertex array.</param>
            <since>5.0</since>
        </member>
        <member name="P:Rhino.Geometry.Polyline.IsValid">
            <summary>
            Gets a value that indicates whether this polyline is valid. 
            <para>Valid polylines have at least one segment, no Invalid points and no zero length segments.</para>
            <para>Closed polylines with only two segments are also not considered valid.</para>
            </summary>
            <since>5.0</since>
        </member>
        <member name="P:Rhino.Geometry.Polyline.SegmentCount">
            <summary>
            Gets the number of segments for this polyline.
            </summary>
            <since>5.0</since>
        </member>
        <member name="P:Rhino.Geometry.Polyline.IsClosed">
            <summary>
            Test a polyline to see if it is closed.
            </summary>
            <since>5.0</since>
        </member>
        <member name="M:Rhino.Geometry.Polyline.IsClosedWithinTolerance(System.Double)">
            <summary>
            Test a polyline to see if it is closed.
            </summary>
            <param name="tolerance">The tolerance.</param>
            <returns>
            Returns true if polyline has 4 or more points, the distance between the
            start and end points is &lt;= tolerance, and there is a
            point in the polyline whose distance from the start and end
            points is &gt; tolerance.
            </returns>
            <since>5.0</since>
        </member>
        <member name="P:Rhino.Geometry.Polyline.Length">
            <summary>
            Gets the total length of the polyline.
            </summary>
            <since>5.0</since>
        </member>
        <member name="M:Rhino.Geometry.Polyline.SegmentAt(System.Int32)">
            <summary>
            Gets the line segment at the given index.
            </summary>
            <param name="index">Index of segment to retrieve.</param>
            <returns>Line segment at index or Line.Unset on failure.</returns>
            <since>5.0</since>
        </member>
        <member name="M:Rhino.Geometry.Polyline.PointAt(System.Double)">
            <summary>
            Gets the point on the polyline at the given parameter. 
            The integer part of the parameter indicates the index of the segment.
            </summary>
            <param name="t">Polyline parameter.</param>
            <returns>The point on the polyline at t.</returns>
            <since>5.0</since>
        </member>
        <member name="M:Rhino.Geometry.Polyline.TangentAt(System.Double)">
            <summary>
            Gets the unit tangent vector along the polyline at the given parameter. 
            The integer part of the parameter indicates the index of the segment.
            </summary>
            <param name="t">Polyline parameter.</param>
            <returns>The tangent along the polyline at t.</returns>
            <since>5.0</since>
        </member>
        <member name="M:Rhino.Geometry.Polyline.Trim(Rhino.Geometry.Interval)">
            <summary>
            Constructs a polyline out of a parameter sub-domain in this curve.
            </summary>
            <param name="domain">The sub-domain of the polyline. 
            The integer part of the domain parameters indicate the index of the segment.</param>
            <returns>The polyline as defined by the sub-domain, or null on failure.</returns>
            <since>5.0</since>
        </member>
        <member name="M:Rhino.Geometry.Polyline.ClosestPoint(Rhino.Geometry.Point3d)">
            <summary>
            Gets the point on the polyline which is closest to a test-point.
            </summary>
            <param name="testPoint">Point to approximate.</param>
            <returns>The point on the polyline closest to testPoint.</returns>
            <since>5.0</since>
        </member>
        <member name="M:Rhino.Geometry.Polyline.ClosestParameter(Rhino.Geometry.Point3d)">
            <summary>
            Gets the parameter along the polyline which is closest to a test-point.
            </summary>
            <param name="testPoint">Point to approximate.</param>
            <returns>The parameter along the polyline closest to testPoint.</returns>
            <since>5.0</since>
        </member>
        <member name="M:Rhino.Geometry.Polyline.GetSegments">
            <summary>
            Constructs an array of line segments that make up the entire polyline.
            </summary>
            <returns>An array of line segments or null if the polyline contains fewer than 2 points.</returns>
            <since>5.0</since>
        </member>
        <member name="M:Rhino.Geometry.Polyline.ToNurbsCurve">
            <summary>
            Constructs a nurbs curve representation of this polyline.
            </summary>
            <returns>A Nurbs curve shaped like this polyline or null on failure.</returns>
            <since>5.0</since>
        </member>
        <member name="M:Rhino.Geometry.Polyline.ToPolylineCurve">
            <summary>
            Constructs a polyline curve representation of this polyline.
            </summary>
            <returns>A curve shaped like this polyline or null on failure.</returns>
            <since>6.0</since>
        </member>
        <member name="M:Rhino.Geometry.Polyline.DeleteShortSegments(System.Double)">
            <summary>
            Removes all points that are closer than tolerance to the previous point. 
            <para>Start and end points are left intact.</para>
            </summary>
            <param name="tolerance">Vertices closer together than tolerance will be removed.</param>
            <returns>Number of points (and segments) removed.</returns>
            <since>5.0</since>
        </member>
        <member name="M:Rhino.Geometry.Polyline.CollapseShortSegments(System.Double)">
            <summary>
            Collapses all segments until none are shorter than tolerance. 
            This function is significantly slower than DeleteShortSegments, 
            since it recursively operates on the shortest segment. 
            When a segment is collapsed the end-points are placed in the center of the segment.
            </summary>
            <param name="tolerance">Tolerance to use during collapsing.</param>
            <returns>The number of segments that were collapsed.</returns>
            <seealso cref="M:Rhino.Geometry.Polyline.DeleteShortSegments(System.Double)"/>
            <since>5.0</since>
        </member>
        <member name="M:Rhino.Geometry.Polyline.ReduceSegments(System.Double)">
            <summary>
            Constructs a reduction of this polyline by recursively removing the least significant segments. 
            </summary>
            <param name="tolerance">Tolerance for reduction. Whenever a vertex of the polyline is more 
            significant than tolerance, it will be included in the reduction.</param>
            <returns>The number of vertices that disappeared due to reduction.</returns>
            <since>5.0</since>
        </member>
        <member name="M:Rhino.Geometry.Polyline.MergeColinearSegments(System.Double,System.Boolean)">
            <summary>
            Merge co-linear consecutive segments in a polyline.
            This method will automatically remove any zero-length segments as well.
            </summary>
            <param name="angleTolerance">The angle tolerance between adjacent segments for collinearity test.</param>
            <param name="includeSeam">If true, the seam point of a closed polyline will be moved forwards if it is collinear too.</param>
            <returns>Number of segments removed from the entire polyline.</returns>
            <since>6.3</since>
        </member>
        <member name="M:Rhino.Geometry.Polyline.Smooth(System.Double)">
            <summary>
            Smoothen the polyline segments by averaging adjacent vertices. 
            Smoothing requires a polyline with exclusively valid vertices.
            </summary>
            <param name="amount">Amount to smooth. Zero equals no smoothing, one equals complete smoothing.</param>
            <returns>true on success, false on failure.</returns>
            <since>5.0</since>
        </member>
        <member name="M:Rhino.Geometry.Polyline.BreakAtAngles(System.Double)">
            <summary>
            Breaks this polyline into sections at sharp kinks. 
            Closed polylines will also be broken at the first and last vertex.
            </summary>
            <param name="angle">Angle (in radians) between adjacent segments for a break to occur.</param>
            <returns>An array of polyline segments, or null on error.</returns>
            <since>5.0</since>
        </member>
        <member name="M:Rhino.Geometry.Polyline.CenterPoint">
            <summary>
            Compute the center point of the polyline as the weighted average of all segments.
            </summary>
            <returns>The weighted average of all segments.</returns>
            <since>5.0</since>
        </member>
        <member name="M:Rhino.Geometry.Polyline.CreateInscribedPolygon(Rhino.Geometry.Circle,System.Int32)">
            <summary>
            Create a regular polygon inscribed in a circle. The vertices of the polygon will be on the circle.
            </summary>
            <param name="circle">The circle.</param>
            <param name="sideCount">The number of sides</param>
            <returns>A closed polyline if successful, null otherwise.</returns>
            <since>6.10</since>
        </member>
        <member name="M:Rhino.Geometry.Polyline.CreateCircumscribedPolygon(Rhino.Geometry.Circle,System.Int32)">
            <summary>
            Create a regular polygon circumscribe about a circle. The midpoints of the polygon's edges will be tangent to the circle.
            </summary>
            <param name="circle">The circle.</param>
            <param name="sideCount">The number of sides</param>
            <returns>A closed polyline if successful, null otherwise.</returns>
            <since>6.10</since>
        </member>
        <member name="M:Rhino.Geometry.Polyline.CreateStarPolygon(Rhino.Geometry.Circle,System.Double,System.Int32)">
            <summary>
            Create a regular star polygon. The star begins at circle.PointAt(0) and the vertices
            alternate between being on circle and begin on a concentric circle of other_radius.
            </summary>
            <param name="circle">The circle.</param>
            <param name="radius">The radius of other circle.</param>
            <param name="cornerCount">The number of corners on the circle. There will be 2*cornerCount sides and 2*cornerCount vertices.</param>
            <returns>A closed polyline if successful, null otherwise.</returns>
            <since>6.10</since>
        </member>
        <member name="M:Rhino.Geometry.Polyline.Duplicate">
            <summary>
            Returns a deep copy of this polyline instance.
            </summary>
            <returns>The duplicated polyline.</returns>
            <since>6.0</since>
        </member>
        <member name="T:Rhino.Geometry.PolylineCurve">
            <summary>
            Represents the geometry of a set of linked line segments.
            <para>This is fundamentally a class that derives from <see cref="T:Rhino.Geometry.Curve"/>
            and internally contains a <see cref="T:Rhino.Geometry.Polyline"/>.</para>
            </summary>
        </member>
        <member name="M:Rhino.Geometry.PolylineCurve.#ctor">
            <summary>
            Initializes a new empty polyline curve.
            </summary>
            <since>5.0</since>
        </member>
        <member name="M:Rhino.Geometry.PolylineCurve.#ctor(Rhino.Geometry.PolylineCurve)">
            <summary>
            Initializes a new polyline curve by copying its content from another polyline curve.
            </summary>
            <param name="other">Another polyline curve.</param>
            <since>5.0</since>
        </member>
        <member name="M:Rhino.Geometry.PolylineCurve.#ctor(System.Collections.Generic.IEnumerable{Rhino.Geometry.Point3d})">
            <summary>
            Initializes a new polyline curve by copying its content from another set of points.
            </summary>
            <param name="points">A list, an array or any enumerable set of points to copy from.
            This includes a <see cref="T:Rhino.Geometry.Polyline"/> object.</param>
            <since>5.0</since>
        </member>
        <member name="M:Rhino.Geometry.PolylineCurve.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Protected constructor for internal use.
            </summary>
            <param name="info">Serialization data.</param>
            <param name="context">Serialization stream.</param>
        </member>
        <member name="M:Rhino.Geometry.PolylineCurve.Internal_FromArray(Rhino.Geometry.Point3d[],System.Int32)">
            <summary>
            [Giulio - 2018 03 29] This static factory method skips all checks and simply calls the C++ instantiator.
            You are responsible for providing a correct count, that is: larger than 2 and less or equal points.Length.
            Use the public PolylineCurve constructor with IEnumerable when in doubt. See RH-45133.
            </summary>
        </member>
        <member name="P:Rhino.Geometry.PolylineCurve.PointCount">
            <summary>
            Gets the number of points in this polyline.
            </summary>
            <since>5.0</since>
        </member>
        <member name="M:Rhino.Geometry.PolylineCurve.Point(System.Int32)">
            <summary>
            Gets a point at a specified index in the polyline curve.
            </summary>
            <param name="index">An index.</param>
            <returns>A point.</returns>
            <since>5.0</since>
        </member>
        <member name="M:Rhino.Geometry.PolylineCurve.SetPoint(System.Int32,Rhino.Geometry.Point3d)">
            <summary>
            Sets a point at a specified index in the polyline curve.
            </summary>
            <param name="index">An index.</param>
            <param name="point">A point location to set.</param>
            <since>5.0</since>
        </member>
        <member name="M:Rhino.Geometry.PolylineCurve.Parameter(System.Int32)">
            <summary>
            Gets a parameter at a specified index in the polyline curve.
            </summary>
            <param name="index">An index.</param>
            <returns>A parameter.</returns>
            <since>6.0</since>
        </member>
        <member name="M:Rhino.Geometry.PolylineCurve.SetParameter(System.Int32,System.Double)">
            <summary>
            Sets a parameter at a specified index in the polyline curve.
            </summary>
            <param name="index">An index.</param>
            <param name="parameter">A parameter to set.</param>
            <since>6.0</since>
        </member>
        <member name="M:Rhino.Geometry.PolylineCurve.SetArcLengthParameterization(System.Double)">
            <summary>
            Sets the polyline curve to use arc length parameterization for higher quality geometry.
            </summary>
            <param name="tolerance">Minimum distance tolerance.</param>
            <since>8.0</since>
        </member>
        <member name="M:Rhino.Geometry.PolylineCurve.ToPolyline">
            <summary>
            Returns the underlying Polyline, or points.
            </summary>
            <returns>The Polyline if successful, null of the curve has no points.</returns>
            <since>6.0</since>
        </member>
        <member name="T:Rhino.Geometry.Quaternion">
            <summary>
            Represents the four coefficient values in a quaternion.
            <para>The first value <i>a</i> is the real part,
            while the rest multiplies <i>i</i>, <i>j</i> and <i>k</i>, that are imaginary.</para>
            <para>quaternion = a + bi + cj + dk</para>
            </summary>
        </member>
        <member name="P:Rhino.Geometry.Quaternion.Zero">
            <summary>
            Returns the default quaternion, where all coefficients are 0.
            </summary>
            <since>5.0</since>
        </member>
        <member name="P:Rhino.Geometry.Quaternion.Identity">
            <summary>
            Returns the (1,0,0,0) quaternion.
            </summary>
            <since>5.0</since>
        </member>
        <member name="P:Rhino.Geometry.Quaternion.I">
            <summary>
            Returns the (0,1,0,0) quaternion.
            </summary>
            <since>5.0</since>
        </member>
        <member name="P:Rhino.Geometry.Quaternion.J">
            <summary>
            Returns the (0,0,1,0) quaternion.
            </summary>
            <since>5.0</since>
        </member>
        <member name="P:Rhino.Geometry.Quaternion.K">
            <summary>
            Returns the (0,0,0,1) quaternion.
            </summary>
            <since>5.0</since>
        </member>
        <member name="M:Rhino.Geometry.Quaternion.#ctor(System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Initializes a new quaternion with the provided coefficients.
            </summary>
            <param name="a">A number. This is the real part.</param>
            <param name="b">Another number. This is the first coefficient of the imaginary part.</param>
            <param name="c">Another number. This is the second coefficient of the imaginary part.</param>
            <param name="d">Another number. This is the third coefficient of the imaginary part.</param>
            <since>5.0</since>
        </member>
        <member name="M:Rhino.Geometry.Quaternion.op_Equality(Rhino.Geometry.Quaternion,Rhino.Geometry.Quaternion)">
            <summary>
            Determines whether two quaternions have the same value.
            </summary>
            <param name="a">A quaternion.</param>
            <param name="b">Another quaternion.</param>
            <returns>true if the quaternions have exactly equal coefficients; otherwise false.</returns>
            <since>5.0</since>
        </member>
        <member name="M:Rhino.Geometry.Quaternion.op_Inequality(Rhino.Geometry.Quaternion,Rhino.Geometry.Quaternion)">
            <summary>
            Determines whether two quaternions have different values.
            </summary>
            <param name="a">A quaternion.</param>
            <param name="b">Another quaternion.</param>
            <returns>true if the quaternions differ in any coefficient; otherwise false.</returns>
            <since>5.0</since>
        </member>
        <member name="M:Rhino.Geometry.Quaternion.Equals(Rhino.Geometry.Quaternion)">
            <summary>
            Determines whether this quaternion has the same value of another quaternion.
            </summary>
            <param name="other">Another quaternion to compare.</param>
            <returns>true if the quaternions have exactly equal coefficients; otherwise false.</returns>
            <since>5.0</since>
        </member>
        <member name="M:Rhino.Geometry.Quaternion.Equals(System.Object)">
            <summary>
            Determines whether an object is a quaternion and has the same value of this quaternion.
            </summary>
            <param name="obj">Another object to compare.</param>
            <returns>true if obj is a quaternion and has exactly equal coefficients; otherwise false.</returns>
        </member>
        <member name="M:Rhino.Geometry.Quaternion.EpsilonEquals(Rhino.Geometry.Quaternion,System.Double)">
            <summary>
            Check that all values in other are within epsilon of the values in this
            </summary>
            <param name="other"></param>
            <param name="epsilon"></param>
            <returns></returns>
            <since>5.4</since>
        </member>
        <member name="M:Rhino.Geometry.Quaternion.GetHashCode">
            <summary>
            Gets a non-unique but repeatable hashing code for this quaternion.
            </summary>
            <returns>A signed number.</returns>
        </member>
        <member name="P:Rhino.Geometry.Quaternion.A">
            <summary>
            Gets or sets the real part of the quaternion.
            </summary>
            <since>5.0</since>
        </member>
        <member name="P:Rhino.Geometry.Quaternion.B">
            <summary>
            Gets or sets the first imaginary coefficient of the quaternion.
            </summary>
            <since>5.0</since>
        </member>
        <member name="P:Rhino.Geometry.Quaternion.C">
            <summary>
            Gets or sets the second imaginary coefficient of the quaternion.
            </summary>
            <since>5.0</since>
        </member>
        <member name="P:Rhino.Geometry.Quaternion.D">
            <summary>
            Gets or sets the third imaginary coefficient of the quaternion.
            </summary>
            <since>5.0</since>
        </member>
        <member name="M:Rhino.Geometry.Quaternion.Set(System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Sets all coefficients of the quaternion.
            </summary>
            <since>5.0</since>
        </member>
        <member name="M:Rhino.Geometry.Quaternion.op_Multiply(Rhino.Geometry.Quaternion,System.Int32)">
            <summary>
            Multiplies (scales) all quaternion coefficients by a factor and returns a new quaternion with the result.
            </summary>
            <param name="q">A quaternion.</param>
            <param name="x">A number.</param>
            <returns>A new quaternion.</returns>
            <since>5.0</since>
        </member>
        <member name="M:Rhino.Geometry.Quaternion.op_Multiply(Rhino.Geometry.Quaternion,System.Single)">
            <summary>
            Multiplies (scales) all quaternion coefficients by a factor and returns a new quaternion with the result.
            </summary>
            <param name="q">A quaternion.</param>
            <param name="x">A number.</param>
            <returns>A new quaternion.</returns>
            <since>5.0</since>
        </member>
        <member name="M:Rhino.Geometry.Quaternion.op_Multiply(Rhino.Geometry.Quaternion,System.Double)">
            <summary>
            Multiplies (scales) all quaternion coefficients by a factor and returns a new quaternion with the result.
            </summary>
            <param name="q">A quaternion.</param>
            <param name="x">A number.</param>
            <returns>A new quaternion.</returns>
            <since>5.0</since>
        </member>
        <member name="M:Rhino.Geometry.Quaternion.op_Division(Rhino.Geometry.Quaternion,System.Double)">
            <summary>
            Divides all quaternion coefficients by a factor and returns a new quaternion with the result.
            </summary>
            <param name="q">A quaternion.</param>
            <param name="y">A number.</param>
            <returns>A new quaternion.</returns>
            <since>5.0</since>
        </member>
        <member name="M:Rhino.Geometry.Quaternion.op_Addition(Rhino.Geometry.Quaternion,Rhino.Geometry.Quaternion)">
            <summary>
            Adds two quaternions.
            <para>This sums each quaternion coefficient with its correspondent and returns
            a new result quaternion.</para>
            </summary>
            <param name="a">A quaternion.</param>
            <param name="b">Another quaternion.</param>
            <returns>A new quaternion.</returns>
        </member>
        <member name="M:Rhino.Geometry.Quaternion.op_Subtraction(Rhino.Geometry.Quaternion,Rhino.Geometry.Quaternion)">
            <summary>
            Subtracts a quaternion from another one.
            <para>This computes the difference of each quaternion coefficient with its
            correspondent and returns a new result quaternion.</para>
            </summary>
            <param name="a">A quaternion.</param>
            <param name="b">Another quaternion.</param>
            <returns>A new quaternion.</returns>
            <since>5.0</since>
        </member>
        <member name="M:Rhino.Geometry.Quaternion.op_Multiply(Rhino.Geometry.Quaternion,Rhino.Geometry.Quaternion)">
            <summary>
            Multiplies a quaternion with another one.
            <para>Quaternion multiplication (Hamilton product) is not commutative.</para>
            </summary>
            <param name="a">The first term.</param>
            <param name="b">The second term.</param>
            <returns>A new quaternion.</returns>
            <since>5.0</since>
        </member>
        <member name="P:Rhino.Geometry.Quaternion.IsValid">
            <summary>
            Determines if the four coefficients are valid numbers within RhinoCommon.
            <para>See <see cref="M:Rhino.RhinoMath.IsValidDouble(System.Double)"/>.</para>
            </summary>
            <since>5.0</since>
        </member>
        <member name="P:Rhino.Geometry.Quaternion.Conjugate">
            <summary>
            Gets a new quaternion that is the conjugate of this quaternion.
            <para>This is (a,-b,-c,-d)</para>
            </summary>
            <since>5.0</since>
        </member>
        <member name="M:Rhino.Geometry.Quaternion.Invert">
            <summary>
            Modifies this quaternion to become
            <para>(a/L2, -b/L2, -c/L2, -d/L2),</para>
            <para>where L2 = length squared = (a*a + b*b + c*c + d*d).</para>
            <para>This is the multiplicative inverse, i.e.,
            (a,b,c,d)*(a/L2, -b/L2, -c/L2, -d/L2) = (1,0,0,0).</para>
            </summary>
            <returns>
            true if successful. false if the quaternion is zero and cannot be inverted.
            </returns>
            <since>5.0</since>
        </member>
        <member name="P:Rhino.Geometry.Quaternion.Inverse">
            <summary>
            Computes a new inverted quaternion,
            <para>(a/L2, -b/L2, -c/L2, -d/L2),</para>
            <para>where L2 = length squared = (a*a + b*b + c*c + d*d).</para>
            This is the multiplicative inverse, i.e.,
            (a,b,c,d)*(a/L2, -b/L2, -c/L2, -d/L2) = (1,0,0,0).
            If this is the zero quaternion, then the zero quaternion is returned.
            </summary>
            <since>5.0</since>
        </member>
        <member name="P:Rhino.Geometry.Quaternion.Length">
            <summary>
            Returns the length or norm of the quaternion.
            </summary>
            <value>Math.Sqrt(a*a + b*b + c*c + d*d)</value>
            <since>5.0</since>
        </member>
        <member name="P:Rhino.Geometry.Quaternion.LengthSquared">
            <summary>
            Gets the result of (a^2 + b^2 + c^2 + d^2).
            </summary>
            <since>5.0</since>
        </member>
        <member name="M:Rhino.Geometry.Quaternion.DistanceTo(Rhino.Geometry.Quaternion)">
            <summary>
            Computes the distance or norm of the difference between this and another quaternion.
            </summary>
            <param name="q">Another quaternion.</param>
            <returns>(this - q).Length.</returns>
            <since>5.0</since>
        </member>
        <member name="M:Rhino.Geometry.Quaternion.Distance(Rhino.Geometry.Quaternion,Rhino.Geometry.Quaternion)">
            <summary>
            Returns the distance or norm of the difference between two quaternions.
            </summary>
            <param name="p">A quaternion.</param>
            <param name="q">Another quaternion.</param>
            <returns>(p - q).Length()</returns>
            <since>5.0</since>
        </member>
        <member name="M:Rhino.Geometry.Quaternion.MatrixForm">
            <summary>
            Returns 4x4 real valued matrix form of the quaternion
            a  b  c  d
            -b  a -d  c
            -c  d  a -b
            -d -c  b  a
            which has the same arithmetic properties as the quaternion. 
            </summary>
            <returns>A transform value.</returns>
            <remarks>
            Do not confuse this with the rotation defined by the quaternion. This
            function will only be interesting to math nerds and is not useful in
            rendering or animation applications.
            </remarks>
            <since>5.0</since>
        </member>
        <member name="M:Rhino.Geometry.Quaternion.Unitize">
            <summary>
            Scales the quaternion's coordinates so that a*a + b*b + c*c + d*d = 1.
            </summary>
            <returns>
            true if successful.  false if the quaternion is zero and cannot be unitized.
            </returns>
            <since>5.0</since>
        </member>
        <member name="M:Rhino.Geometry.Quaternion.SetRotation(System.Double,Rhino.Geometry.Vector3d)">
            <summary>
            Sets the quaternion to cos(angle/2), sin(angle/2)*x, sin(angle/2)*y, sin(angle/2)*z
            where (x,y,z) is the unit vector parallel to axis.  This is the unit quaternion
            that represents the rotation of angle about axis.
            </summary>
            <param name="angle">in radians.</param>
            <param name="axisOfRotation">The direction of the axis of rotation.</param>
            <since>5.0</since>
        </member>
        <member name="M:Rhino.Geometry.Quaternion.Rotation(System.Double,Rhino.Geometry.Vector3d)">
            <summary>
            Returns the unit quaternion
            cos(angle/2), sin(angle/2)*x, sin(angle/2)*y, sin(angle/2)*z
            where (x,y,z) is the unit vector parallel to axis.  This is the
            unit quaternion that represents the rotation of angle about axis.
            </summary>
            <param name="angle">An angle in radians.</param>
            <param name="axisOfRotation">The axis of rotation.</param>
            <returns>A new quaternion.</returns>
            <since>5.0</since>
        </member>
        <member name="M:Rhino.Geometry.Quaternion.SetRotation(Rhino.Geometry.Plane,Rhino.Geometry.Plane)">
            <summary>
            Sets the quaternion to the unit quaternion which rotates
            plane0.xaxis to plane1.xaxis, plane0.yaxis to plane1.yaxis,
            and plane0.zaxis to plane1.zaxis.
            </summary>
            <param name="plane0">The "from" rotation plane. Origin point is ignored.</param>
            <param name="plane1">The "to" rotation plane. Origin point is ignored.</param>
            <remarks>The plane origins are ignored</remarks>
            <since>5.0</since>
        </member>
        <member name="M:Rhino.Geometry.Quaternion.Rotation(Rhino.Geometry.Plane,Rhino.Geometry.Plane)">
            <summary>
            Returns the unit quaternion that represents the rotation that maps
            plane0.xaxis to plane1.xaxis, plane0.yaxis to plane1.yaxis, and 
            plane0.zaxis to plane1.zaxis.
            </summary>
            <param name="plane0">The first plane.</param>
            <param name="plane1">The second plane.</param>
            <returns>A quaternion value.</returns>
            <remarks>The plane origins are ignored</remarks>
            <since>5.0</since>
        </member>
        <member name="M:Rhino.Geometry.Quaternion.GetRotation(System.Double@,Rhino.Geometry.Vector3d@)">
            <summary>
            Returns the rotation defined by the quaternion.
            </summary>
            <param name="angle">An angle in radians.</param>
            <param name="axis">unit axis of rotation of 0 if (b,c,d) is the zero vector.</param>
            <returns>True if the operation succeeded; otherwise, false.</returns>
            <remarks>
            If the quaternion is not unitized, the rotation of its unitized form is returned.
            </remarks>
            <since>5.0</since>
        </member>
        <member name="M:Rhino.Geometry.Quaternion.GetRotation(Rhino.Geometry.Plane@)">
            <summary>
            Returns the frame created by applying the quaternion's rotation
            to the canonical world frame (1,0,0),(0,1,0),(0,0,1).
            </summary>
            <param name="plane">A plane. This out value will be assigned during this call.</param>
            <returns>true if the operation succeeded; otherwise, false.</returns>
            <since>5.0</since>
        </member>
        <member name="M:Rhino.Geometry.Quaternion.GetRotation(Rhino.Geometry.Transform@)">
            <summary>
            Returns a transformation matrix that performs the rotation defined by the quaternion.
            The transformation returned by this method has the property that xform * V = q.Rotate(V).
            If the quaternion is not unitized, the rotation of its unitized form is returned.
            </summary>
            <param name="xform"></param>
            <returns>true if successful, false otherwise.</returns>
            <remarks>
            Do not confuse the result of this method the transformation matrix returned by <see cref="M:Rhino.Geometry.Quaternion.MatrixForm"/>.
            </remarks>
            <since>7.12</since>
        </member>
        <member name="M:Rhino.Geometry.Quaternion.Rotate(Rhino.Geometry.Vector3d)">
            <summary>
            Rotates a 3d vector. This operation is also called conjugation,
            because the result is the same as
            (q.Conjugate()*(0,x,y,x)*q/q.LengthSquared).Vector.
            </summary>
            <param name="v">The vector to be rotated.</param>
            <returns>
            R*v, where R is the rotation defined by the unit quaternion.
            This is mathematically the same as the values
            (Inverse(q)*(0,x,y,z)*q).Vector
            and
            (q.Conjugate()*(0,x,y,x)*q/q.LengthSquared).Vector.
            </returns>
            <remarks>
            If you need to rotate more than a dozen or so vectors,
            it will be more efficient to calculate the rotation
            matrix once and use it repeatedly.
            </remarks>
            <since>5.0</since>
        </member>
        <member name="P:Rhino.Geometry.Quaternion.Vector">
            <summary>
            The imaginary part of the quaternion
            <para>(B,C,D)</para>
            </summary>
            <since>5.0</since>
        </member>
        <member name="P:Rhino.Geometry.Quaternion.Scalar">
            <summary>
            The real (scalar) part of the quaternion
            <para>This is <see cref="P:Rhino.Geometry.Quaternion.A"/>.</para>
            </summary>
            <since>5.0</since>
        </member>
        <member name="P:Rhino.Geometry.Quaternion.IsZero">
            <summary>
            true if a, b, c, and d are all zero.
            </summary>
            <since>5.0</since>
        </member>
        <member name="P:Rhino.Geometry.Quaternion.IsScalar">
            <summary>
            true if b, c, and d are all zero.
            </summary>
            <since>5.0</since>
        </member>
        <member name="P:Rhino.Geometry.Quaternion.IsVector">
            <summary>
            true if a = 0 and at least one of b, c, or d is not zero.
            </summary>
            <since>5.0</since>
        </member>
        <member name="M:Rhino.Geometry.Quaternion.ToString">
            <summary>
            Returns a string representation of this Quaternion.
            </summary>
            <returns>A textual representation.</returns>
            <since>7.12</since>
        </member>
        <member name="M:Rhino.Geometry.Quaternion.Product(Rhino.Geometry.Quaternion,Rhino.Geometry.Quaternion)">
            <summary>
            The quaternion product of p and q.  This is the same value as p*q.
            </summary>
            <param name="p">The first transform.</param>
            <param name="q">The second transform.</param>
            <returns>A transform value.</returns>
            <since>5.0</since>
        </member>
        <member name="M:Rhino.Geometry.Quaternion.CrossProduct(Rhino.Geometry.Quaternion,Rhino.Geometry.Quaternion)">
            <summary>
            Computes the vector cross product of p and q = (0,x,y,z),
            <para>where (x,y,z) = <see cref="M:Rhino.Geometry.Vector3d.CrossProduct(Rhino.Geometry.Vector3d,Rhino.Geometry.Vector3d)">CrossProduct</see>(p.<see cref="P:Rhino.Geometry.Quaternion.Vector">Vector</see>,q.<see cref="P:Rhino.Geometry.Quaternion.Vector">Vector</see>).</para>
            <para>This <b>is not the same</b> as the quaternion product p*q.</para>
            </summary>
            <param name="p">A quaternion.</param>
            <param name="q">Another quaternion.</param>
            <returns>A new quaternion.</returns>
            <since>5.0</since>
        </member>
        <member name="M:Rhino.Geometry.Quaternion.Slerp(Rhino.Geometry.Quaternion,Rhino.Geometry.Quaternion,System.Double)">
            <summary>
            Interpolates between two quaternions, using spherical linear interpolation.
            </summary>
            <param name="a">The first quaternion.</param>
            <param name="b">The second quaternion.</param>
            <param name="t">The parameter in the range [0, 1].</param>
            <returns>The interpolated quaternion.</returns>
            <since>8.0</since>
        </member>
        <member name="M:Rhino.Geometry.Quaternion.Lerp(Rhino.Geometry.Quaternion,Rhino.Geometry.Quaternion,System.Double)">
            <summary>
            Interpolates between two quaternions, using linear interpolation.
            </summary>
            <param name="a">The first quaternion.</param>
            <param name="b">The second quaternion.</param>
            <param name="t">The parameter in the range [0, 1].</param>
            <returns>The interpolated quaternion.</returns>
            <since>8.0</since>
        </member>
        <member name="M:Rhino.Geometry.Quaternion.RotateTowards(Rhino.Geometry.Quaternion,Rhino.Geometry.Quaternion,System.Double)">
            <summary>
            Returns the quaternion obtained by rotating a towards b, limiting the rotation by MaxRadians.
            </summary>
            <param name="a">The first quaternion.</param>
            <param name="b">The second quaternion.</param>
            <param name="maxRadians">The maximum rotation in radians.</param>
            <returns>The rotated quaternion.</returns>
            <since>8.0</since>
        </member>
        <member name="M:Rhino.Geometry.Quaternion.CreateFromRotationZYX(System.Double,System.Double,System.Double)">
            <summary>
            Constructs a quaternion defined by Tait-Byran angles, also loosely known as Euler angles.
            </summary>
            <param name="yaw">Angle, in radians, to rotate about the ZAxis.</param>
            <param name="pitch">Angle, in radians, to rotate about the YAxis.</param>
            <param name="roll">Angle, in radians, to rotate about the XAxis.</param>
            <returns>The quaternion.</returns>
            <remarks>
            CreateFromRotationZYX(yaw, pitch, roll) = R_z(yaw) * R_y(pitch) * R_x(roll),
            where R_*(angle) is rotation of angle radians about the corresponding world coordinate axis.
            </remarks>
            <since>8.0</since>
        </member>
        <member name="M:Rhino.Geometry.Quaternion.CreateFromRotationZYZ(System.Double,System.Double,System.Double)">
            <summary>
            Constructs a quaternion defined by Euler angles.
            </summary>
            <param name="alpha">Angle, in radians, to rotate about the ZAxis.</param>
            <param name="beta">Angle, in radians, to rotate about the YAxis.</param>
            <param name="gamma">Angle, in radians, to rotate about the ZAxis.</param>
            <returns>The quaternion.</returns>
            <remarks>
            CreateFromRotationZYZ(alpha, beta, gamma) = R_z(alpha) * R_y(beta) * R_z(gamma),
            where R_*(angle) is rotation of angle radians about the corresponding *-world coordinate axis.
            </remarks>
            <since>8.0</since>
        </member>
        <member name="M:Rhino.Geometry.Quaternion.GetYawPitchRoll(System.Double@,System.Double@,System.Double@)">
            <summary>
            Find sthe Tait-Byran angles, also loosely called Euler angles, for this quaternion.
            </summary>
            <param name="yaw">Angle, in radians, to rotate about the ZAxis.</param>
            <param name="pitch">Angle, in radians, to rotate about the YAxis.</param>
            <param name="roll">Angle, in radians, to rotate about the XAxis.</param>
            <returns>true if successful, or false if this is not a rotation.</returns>
            <remarks>
            When true, this = RotationZYX(yaw, pitch, roll) = R_z(yaw) * R_y(pitch) * R_x(roll),
            where R_*(angle) is rotation of angle radians about the corresponding world coordinate axis.
            roll and yaw are in the range (-pi, pi], and pitch is in [-pi/2, pi/2].
            </remarks>
            <since>8.0</since>
        </member>
        <member name="M:Rhino.Geometry.Quaternion.GetEulerZYZ(System.Double@,System.Double@,System.Double@)">
            <summary>
            Find the Euler angles for a rotation transformation.
            </summary>
            <param name="alpha">Angle, in radians, to rotate about the ZAxis.</param>
            <param name="beta">Angle, in radians, to rotate about the YAxis.</param>
            <param name="gamma">Angle, in radians, to rotate about the ZAxis.</param>
            <returns>true if successful, or false if this is not a rotation.</returns>
            <remarks>
            When true, this = RotationZYZ(alpha, beta, gamma) = R_z(alpha) * R_y(beta) * R_z(gamma),
            where R_*(angle) is rotation of angle radians about the corresponding *-world coordinate axis.
            alpha and gamma are in the range (-pi, pi], while beta in in the range [0, pi].
            </remarks>
            <since>8.0</since>
        </member>
        <member name="T:Rhino.Geometry.Rectangle3d">
            <summary>
            Represents the values of a plane and two intervals
            that form an oriented rectangle in three dimensions.
            </summary>
        </member>
        <member name="M:Rhino.Geometry.Rectangle3d.CreateFromPolyline(System.Collections.Generic.IEnumerable{Rhino.Geometry.Point3d})">
            <summary>
            Attempts to create a rectangle from a polyline. This method only works well for
            polylines that already closely resemble rectangles. If the polyline contains
            more than four vertices, the least significant ones will be ignored. If the
            polylines is non-orthogonal, the discrepancies will be averaged away.
            This method should not be used as a Rectangle fitter.
            </summary>
            <param name="polyline">Polyline to parse.</param>
            <returns>A rectangle that is shaped similarly to the polyline or Rectangle3d.Unset 
            if the polyline does not represent a rectangle.</returns>
            <since>5.0</since>
        </member>
        <member name="M:Rhino.Geometry.Rectangle3d.CreateFromPolyline(System.Collections.Generic.IEnumerable{Rhino.Geometry.Point3d},System.Double@,System.Double@)">
            <summary>
            Attempts to create a rectangle from a polyline. This method only works well for
            polylines that already closely resemble rectangles. If the polyline contains
            more than four vertices, the least significant ones will be ignored. If the
            polylines is non-orthogonal, the discrepancies will be averaged away.
            This method should not be used as a Rectangle fitter.
            </summary>
            <param name="polyline">Polyline to parse.</param>
            <param name="deviation">On success, the deviation will contain the largest deviation between the polyline and the rectangle.</param>
            <param name="angleDeviation">On success, the angleDeviation will contain the largest deviation (in radians) between the polyline edges and the rectangle edges.</param>
            <returns>A rectangle that is shaped similarly to the polyline or Rectangle3d.Unset 
            if the polyline does not represent a rectangle.</returns>
            <since>5.0</since>
        </member>
        <member name="M:Rhino.Geometry.Rectangle3d.CreateDegenerateRectangle(Rhino.Geometry.Point3d,Rhino.Geometry.Point3d)">
            <summary>
            Create a degenerate (i.e. line-like) rectangle between two points.
            </summary>
            <param name="a">First point.</param>
            <param name="b">Second point.</param>
            <returns>Rectangle.</returns>
        </member>
        <member name="M:Rhino.Geometry.Rectangle3d.CreateTwoSidedRectangle(Rhino.Geometry.Point3d,Rhino.Geometry.Point3d,Rhino.Geometry.Point3d)">
            <summary>
            Create a rectangle from two sides of a triangle.
            </summary>
            <param name="a">First point.</param>
            <param name="b">Second point.</param>
            <param name="c">third point.</param>
            <returns>Rectangle.</returns>
        </member>
        <member name="M:Rhino.Geometry.Rectangle3d.RecursiveReduceVertices(System.Collections.Generic.List{Rhino.Geometry.Point3d})">
            <summary>
            Recursively remove the least significant vertex until we're down to four.
            </summary>
            <param name="p">Vertices.</param>
            <returns>Reduced vertices.</returns>
        </member>
        <member name="M:Rhino.Geometry.Rectangle3d.ComputeDeviation(Rhino.Geometry.Rectangle3d,System.Collections.Generic.IList{Rhino.Geometry.Point3d},System.Double@,System.Double@)">
            <summary>
            Compute the absolute and angular deviation of a rectangle compared to a polyline.
            </summary>
        </member>
        <member name="M:Rhino.Geometry.Rectangle3d.#ctor(Rhino.Geometry.Plane,System.Double,System.Double)">
            <summary>
            Initializes a new rectangle from width and height.
            </summary>
            <param name="plane">Base plane for Rectangle.</param>
            <param name="width">Width (as measured along the base plane x-axis) of rectangle.</param>
            <param name="height">Height (as measured along the base plane y-axis) of rectangle.</param>
            <since>5.0</since>
        </member>
        <member name="M:Rhino.Geometry.Rectangle3d.#ctor(Rhino.Geometry.Plane,Rhino.Geometry.Interval,Rhino.Geometry.Interval)">
            <summary>
            Initializes a new rectangle from dimensions.
            </summary>
            <param name="plane">Base plane for Rectangle.</param>
            <param name="width">Dimension of rectangle along the base plane x-axis.</param>
            <param name="height">Dimension of rectangle along the base plane y-axis.</param>
            <since>5.0</since>
        </member>
        <member name="M:Rhino.Geometry.Rectangle3d.#ctor(Rhino.Geometry.Plane,Rhino.Geometry.Point3d,Rhino.Geometry.Point3d)">
            <summary>
            Initializes a new rectangle from a base plane and two corner points.
            </summary>
            <param name="plane">Base plane for Rectangle.</param>
            <param name="cornerA">First corner of Rectangle (will be projected onto plane).</param>
            <param name="cornerB">Second corner of Rectangle (will be projected onto plane).</param>
            <since>5.0</since>
        </member>
        <member name="P:Rhino.Geometry.Rectangle3d.Unset">
            <summary>
            Gets a rectangle with Unset components.
            </summary>
            <since>5.0</since>
        </member>
        <member name="P:Rhino.Geometry.Rectangle3d.IsValid">
            <summary>
            Gets a value indicating whether or not this is a valid rectangle. 
            A rectangle is considered to be valid when the base plane and both dimensions are valid.
            </summary>
            <since>5.0</since>
        </member>
        <member name="P:Rhino.Geometry.Rectangle3d.Plane">
            <summary>
            Gets or sets the base plane of the rectangle.
            </summary>
            <since>5.0</since>
        </member>
        <member name="P:Rhino.Geometry.Rectangle3d.X">
            <summary>
            Gets or sets the dimensions of the rectangle along the base plane X-Axis (i.e. the width).
            </summary>
            <since>5.0</since>
        </member>
        <member name="P:Rhino.Geometry.Rectangle3d.Y">
            <summary>
            Gets or sets the dimensions of the rectangle along the base plane Y-Axis (i.e. the height).
            </summary>
            <since>5.0</since>
        </member>
        <member name="P:Rhino.Geometry.Rectangle3d.Width">
            <summary>
            Gets the signed width of the rectangle. If the X dimension is decreasing, the width will be negative.
            </summary>
            <since>5.0</since>
        </member>
        <member name="P:Rhino.Geometry.Rectangle3d.Height">
            <summary>
            Gets the signed height of the rectangle. If the Y dimension is decreasing, the height will be negative.
            </summary>
            <since>5.0</since>
        </member>
        <member name="P:Rhino.Geometry.Rectangle3d.Area">
            <summary>
            Gets the unsigned Area of the rectangle.
            </summary>
            <since>5.0</since>
        </member>
        <member name="P:Rhino.Geometry.Rectangle3d.Circumference">
            <summary>
            Gets the circumference of the rectangle.
            </summary>
            <since>5.0</since>
        </member>
        <member name="P:Rhino.Geometry.Rectangle3d.BoundingBox">
            <summary>
            Gets the world aligned bounding box for this rectangle.
            </summary>
            <since>5.0</since>
        </member>
        <member name="P:Rhino.Geometry.Rectangle3d.Center">
            <summary>
            Gets the point in the center of the rectangle.
            </summary>
            <since>5.0</since>
        </member>
        <member name="M:Rhino.Geometry.Rectangle3d.MakeIncreasing">
            <summary>
            Ensures the X and Y dimensions are increasing or singleton intervals.
            </summary>
            <since>5.0</since>
        </member>
        <member name="M:Rhino.Geometry.Rectangle3d.Corner(System.Int32)">
            <summary>
            Gets the corner at the given index.
            </summary>
            <param name="index">
            Index of corner, valid values are:
            <para>0 = lower left (min-x, min-y)</para>
            <para>1 = lower right (max-x, min-y)</para>
            <para>2 = upper right (max-x, max-y)</para>
            <para>3 = upper left (min-x, max-y)</para>
            </param>
            <returns>The point at the given corner index.</returns>
            <since>5.0</since>
        </member>
        <member name="M:Rhino.Geometry.Rectangle3d.RecenterPlane(System.Int32)">
            <summary>
            Re-centers the base plane on one of the corners.
            </summary>
            <param name="index">
            Index of corner, valid values are:
            <para>0 = lower left (min-x, min-y)</para>
            <para>1 = lower right (max-x, min-y)</para>
            <para>2 = upper right (max-x, max-y)</para>
            <para>3 = upper left (min-x, max-y)</para>
            </param>
            <since>5.0</since>
        </member>
        <member name="M:Rhino.Geometry.Rectangle3d.RecenterPlane(Rhino.Geometry.Point3d)">
            <summary>
            Re-centers the base plane on a new origin.
            </summary>
            <param name="origin">New origin for plane.</param>
            <since>5.0</since>
        </member>
        <member name="M:Rhino.Geometry.Rectangle3d.PointAt(System.Double,System.Double)">
            <summary>
            Gets a point in Rectangle space.
            </summary>
            <param name="x">Normalized parameter along Rectangle width.</param>
            <param name="y">Normalized parameter along Rectangle height.</param>
            <returns>The point at the given x,y parameter.</returns>
            <since>5.0</since>
        </member>
        <member name="M:Rhino.Geometry.Rectangle3d.PointAt(System.Double)">
            <summary>
            Gets a point along the rectangle boundary.
            </summary>
            <param name="t">Parameter along rectangle boundary. Valid values range from 0.0 to 4.0, 
            where each integer domain represents a single boundary edge.</param>
            <returns>The point at the given boundary parameter.</returns>
            <since>5.0</since>
        </member>
        <member name="M:Rhino.Geometry.Rectangle3d.ClosestPoint(Rhino.Geometry.Point3d)">
            <summary>
            Gets the point on the rectangle that is closest to a test-point.
            </summary>
            <param name="point">Point to project.</param>
            <returns>The point on or in the rectangle closest to the test point or Point3d.Unset on failure.</returns>
            <since>5.0</since>
        </member>
        <member name="M:Rhino.Geometry.Rectangle3d.ClosestPoint(Rhino.Geometry.Point3d,System.Boolean)">
            <summary>
            Gets the point on the rectangle that is closest to a test-point.
            </summary>
            <param name="point">Point to project.</param>
            <param name="includeInterior">If false, the point is projected onto the boundary edge only, 
            otherwise the interior of the rectangle is also taken into consideration.</param>
            <returns>The point on the rectangle closest to the test point or Point3d.Unset on failure.</returns>
            <since>5.0</since>
        </member>
        <member name="M:Rhino.Geometry.Rectangle3d.Contains(Rhino.Geometry.Point3d)">
            <summary>
            Determines if a point is included in this rectangle.
            </summary>
            <param name="pt">Point to test. The point will be projected onto the Rectangle plane before inclusion is determined.</param>
            <returns>Point Rectangle relationship.</returns>
            <since>5.0</since>
        </member>
        <member name="M:Rhino.Geometry.Rectangle3d.Contains(System.Double,System.Double)">
            <summary>
            Determines if two plane parameters are included in this rectangle.
            </summary>
            <param name="x">Parameter along base plane X direction.</param>
            <param name="y">Parameter along base plane Y direction.</param>
            <returns>Parameter Rectangle relationship.</returns>
            <since>5.0</since>
        </member>
        <member name="M:Rhino.Geometry.Rectangle3d.Transform(Rhino.Geometry.Transform)">
            <summary>
            Transforms this rectangle. Note that rectangles cannot be skewed or tapered.
            </summary>
            <param name="xform">Transformation to apply.</param>
            <since>5.0</since>
        </member>
        <member name="M:Rhino.Geometry.Rectangle3d.ToPolyline">
            <summary>
            Constructs a polyline from this rectangle.
            </summary>
            <returns>A polyline with the same shape as this rectangle.</returns>
            <since>5.0</since>
        </member>
        <member name="M:Rhino.Geometry.Rectangle3d.ToNurbsCurve">
            <summary>
            Constructs a nurbs curve representation of this rectangle.
            </summary>
            <returns>A nurbs curve with the same shape as this rectangle.</returns>
            <since>5.0</since>
        </member>
        <member name="M:Rhino.Geometry.Rectangle3d.EpsilonEquals(Rhino.Geometry.Rectangle3d,System.Double)">
            <summary>
            Check that all values in other are within epsilon of the values in this
            </summary>
            <param name="other"></param>
            <param name="epsilon"></param>
            <returns></returns>
            <since>5.4</since>
        </member>
        <member name="T:Rhino.Geometry.RevSurface">
            <summary>
            Represents a surface of revolution.
            <para>Revolutions can be incomplete (they can form arcs).</para>
            </summary>
        </member>
        <member name="P:Rhino.Geometry.RevSurface.Curve">
            <summary>
            Gets the revolute curve.
            </summary>
            <since>6.0</since>
        </member>
        <member name="P:Rhino.Geometry.RevSurface.Axis">
            <summary>
            Gets the axis of revolution.
            </summary>
            <since>6.0</since>
        </member>
        <member name="P:Rhino.Geometry.RevSurface.Angle">
            <summary>
            Gets the start and end angles of revolution in radians. 
            The interval angle must be increasing and satisfy 
            RhinoMath.ZeroTolerance &lt; Angle.Length&lt;= 2.0 * System.Math.PI.
            </summary>
            <since>6.0</since>
        </member>
        <member name="M:Rhino.Geometry.RevSurface.Create(Rhino.Geometry.Curve,Rhino.Geometry.Line,System.Double,System.Double)">
            <summary>
            Constructs a new surface of revolution from a generatrix curve and an axis.
            <para>This overload accepts a slice start and end angles.</para>
            </summary>
            <param name="revoluteCurve">A generatrix.</param>
            <param name="axisOfRevolution">An axis.</param>
            <param name="startAngleRadians">An angle in radians for the start.</param>
            <param name="endAngleRadians">An angle in radians for the end.</param>
            <returns>A new surface of revolution, or null if any of the inputs is invalid or on error.</returns>
            <since>5.0</since>
        </member>
        <member name="M:Rhino.Geometry.RevSurface.Create(Rhino.Geometry.Curve,Rhino.Geometry.Line)">
            <summary>
            Constructs a new surface of revolution from a generatrix curve and an axis.
            </summary>
            <param name="revoluteCurve">A generatrix.</param>
            <param name="axisOfRevolution">An axis.</param>
            <returns>A new surface of revolution, or null if any of the inputs is invalid or on error.</returns>
            <example>
            <code source='examples\vbnet\ex_addtruncatedcone.vb' lang='vbnet'/>
            <code source='examples\cs\ex_addtruncatedcone.cs' lang='cs'/>
            <code source='examples\py\ex_addtruncatedcone.py' lang='py'/>
            </example>
            <since>5.0</since>
        </member>
        <member name="M:Rhino.Geometry.RevSurface.Create(Rhino.Geometry.Line,Rhino.Geometry.Line,System.Double,System.Double)">
            <summary>
            Constructs a new surface of revolution from a generatrix line and an axis.
            <para>This overload accepts a slice start and end angles.</para>
            <para>Results can be (truncated) cones, cylinders and circular hyperboloids, or can fail.</para>
            </summary>
            <param name="revoluteLine">A generatrix.</param>
            <param name="axisOfRevolution">An axis.</param>
            <param name="startAngleRadians">An angle in radians for the start.</param>
            <param name="endAngleRadians">An angle in radians for the end.</param>
            <returns>A new surface of revolution, or null if any of the inputs is invalid or on error.</returns>
            <since>5.0</since>
        </member>
        <member name="M:Rhino.Geometry.RevSurface.Create(Rhino.Geometry.Line,Rhino.Geometry.Line)">
            <summary>
            Constructs a new surface of revolution from a generatrix line and an axis.
            <para>If the operation succeeds, results can be (truncated) cones, cylinders and circular hyperboloids.</para>
            </summary>
            <param name="revoluteLine">A generatrix.</param>
            <param name="axisOfRevolution">An axis.</param>
            <returns>A new surface of revolution, or null if any of the inputs is invalid or on error.</returns>
            <since>5.0</since>
        </member>
        <member name="M:Rhino.Geometry.RevSurface.Create(Rhino.Geometry.Polyline,Rhino.Geometry.Line,System.Double,System.Double)">
            <summary>
            Constructs a new surface of revolution from a generatrix polyline and an axis.
            <para>This overload accepts a slice start and end angles.</para>
            </summary>
            <param name="revolutePolyline">A generatrix.</param>
            <param name="axisOfRevolution">An axis.</param>
            <param name="startAngleRadians">An angle in radians for the start.</param>
            <param name="endAngleRadians">An angle in radians for the end.</param>
            <returns>A new surface of revolution, or null if any of the inputs is invalid or on error.</returns>
            <since>5.0</since>
        </member>
        <member name="M:Rhino.Geometry.RevSurface.Create(Rhino.Geometry.Polyline,Rhino.Geometry.Line)">
            <summary>
            Constructs a new surface of revolution from a generatrix polyline and an axis.
            </summary>
            <param name="revolutePolyline">A generatrix.</param>
            <param name="axisOfRevolution">An axis.</param>
            <returns>A new surface of revolution, or null if any of the inputs is invalid or on error.</returns>
            <since>5.0</since>
        </member>
        <member name="M:Rhino.Geometry.RevSurface.CreateFromCone(Rhino.Geometry.Cone)">
            <summary>
            Constructs a new surface of revolution from the values of a cone.
            </summary>
            <param name="cone">A cone.</param>
            <returns>A new surface of revolution, or null if any of the inputs is invalid or on error.</returns>
            <since>5.0</since>
        </member>
        <member name="M:Rhino.Geometry.RevSurface.CreateFromCylinder(Rhino.Geometry.Cylinder)">
            <summary>
            Constructs a new surface of revolution from the values of a cylinder.
            </summary>
            <param name="cylinder">A cylinder.</param>
            <returns>A new surface of revolution, or null if any of the inputs is invalid or on error.</returns>
            <since>5.0</since>
        </member>
        <member name="M:Rhino.Geometry.RevSurface.CreateFromSphere(Rhino.Geometry.Sphere)">
            <summary>
            Constructs a new surface of revolution from the values of a sphere.
            </summary>
            <param name="sphere">A sphere.</param>
            <returns>A new surface of revolution, or null if any of the inputs is invalid or on error.</returns>
            <since>5.0</since>
        </member>
        <member name="M:Rhino.Geometry.RevSurface.CreateFromTorus(Rhino.Geometry.Torus)">
            <summary>
            Constructs a new surface of revolution from the values of a torus.
            </summary>
            <param name="torus">A torus.</param>
            <returns>A new surface of revolution, or null if any of the inputs is invalid or on error.</returns>
            <since>5.0</since>
        </member>
        <member name="M:Rhino.Geometry.RevSurface.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Protected constructor for internal use.
            </summary>
            <param name="info">Serialization data.</param>
            <param name="context">Serialization stream.</param>
        </member>
        <member name="T:Rhino.Geometry.RTreeEventArgs">
            <summary>
            Represents event data that is passed when an item that meets certain 
            criteria is found and the passed RTree event is raised.
            </summary>
        </member>
        <member name="P:Rhino.Geometry.RTreeEventArgs.Id">
            <summary>
            Gets the identifier of the found item.
            </summary>
            <exception cref="T:System.OverflowException">If, on 64-bit platforms, the value of this instance is too large or too small to be represented as a 32-bit signed integer.</exception>
            <since>5.0</since>
        </member>
        <member name="P:Rhino.Geometry.RTreeEventArgs.IdPtr">
            <summary>
            Gets the identifier pointer of the found item.
            </summary>
            <since>5.0</since>
        </member>
        <member name="P:Rhino.Geometry.RTreeEventArgs.Cancel">
            <summary>
            Gets or sets a value that determines if the search should be conducted farther.
            </summary>
            <since>5.0</since>
        </member>
        <member name="P:Rhino.Geometry.RTreeEventArgs.IdB">
            <summary>
            If search is using two r-trees, IdB is element b in the search.
            </summary>
            <since>5.0</since>
        </member>
        <member name="P:Rhino.Geometry.RTreeEventArgs.IdBPtr">
            <summary>
            If search is using two r-trees, IdB is the element b pointer in the search.
            </summary>
            <since>5.0</since>
        </member>
        <member name="P:Rhino.Geometry.RTreeEventArgs.Tag">
            <summary>
            Gets or sets an arbitrary object that can be attached to this event args.
            This object will "stick" through a single search and can represent user-defined state.
            </summary>
            <since>5.0</since>
        </member>
        <member name="P:Rhino.Geometry.RTreeEventArgs.SearchSphere">
            <summary>
            Sphere bounds used during a search. You can modify the sphere in a search callback to
            help reduce the bounds to search.
            </summary>
            <since>5.0</since>
        </member>
        <member name="P:Rhino.Geometry.RTreeEventArgs.SearchBoundingBox">
            <summary>
            Bounding box bounds used during a search. You may modify the box in a search callback
            to help reduce the bounds to search.
            </summary>
            <since>5.0</since>
        </member>
        <member name="T:Rhino.Geometry.RTree">
            <summary>
            Represents a spatial search structure based on implementations of the
            R-tree algorithm by Toni Gutman.
            </summary>
            <remarks>
            The opennurbs rtree code is a modified version of the free and unrestricted
            R-tree implementation obtained from http://www.superliminal.com/sources/sources.htm .
            </remarks>
        </member>
        <member name="M:Rhino.Geometry.RTree.#ctor">
            <summary>Initializes a new, empty instance of the tree.</summary>
            <example>
            <code source='examples\vbnet\ex_closestpoint.vb' lang='vbnet'/>
            <code source='examples\cs\ex_closestpoint.cs' lang='cs'/>
            <code source='examples\py\ex_closestpoint.py' lang='py'/>
            </example>
            <since>5.0</since>
        </member>
        <member name="M:Rhino.Geometry.RTree.CreateMeshFaceTree(Rhino.Geometry.Mesh)">
            <summary>
            Constructs a new tree with an element for each face in the mesh.
            The element id is set to the index of the face.
            </summary>
            <param name="mesh">A mesh.</param>
            <returns>A new tree, or null on error.</returns>
            <since>5.0</since>
        </member>
        <member name="M:Rhino.Geometry.RTree.CreatePointCloudTree(Rhino.Geometry.PointCloud)">
            <summary>
            Constructs a new tree with an element for each point cloud point.
            </summary>
            <param name="cloud">A point cloud.</param>
            <returns>A new tree, or null on error.</returns>
            <since>5.0</since>
        </member>
        <member name="M:Rhino.Geometry.RTree.CreateFromPointArray(System.Collections.Generic.IEnumerable{Rhino.Geometry.Point3d})">
            <summary>
            Constructs a new tree with an element for each point cloud point.
            </summary>
            <param name="points">Points.</param>
            <returns>A new tree, or null on error.</returns>
            <since>6.0</since>
        </member>
        <member name="M:Rhino.Geometry.RTree.Insert(Rhino.Geometry.Point3d,System.Int32)">
            <summary>Inserts an element into the tree.</summary>
            <param name="point">A point.</param>
            <param name="elementId">A number.</param>
            <returns>true if element was successfully inserted.</returns>
            <example>
            <code source='examples\vbnet\ex_closestpoint.vb' lang='vbnet'/>
            <code source='examples\cs\ex_closestpoint.cs' lang='cs'/>
            <code source='examples\py\ex_closestpoint.py' lang='py'/>
            </example>
            <since>5.0</since>
        </member>
        <member name="M:Rhino.Geometry.RTree.Insert(Rhino.Geometry.Point3d,System.IntPtr)">
            <summary>Inserts an element into the tree.</summary>
            <param name="point">A point.</param>
            <param name="elementId">A pointer.</param>
            <returns>true if element was successfully inserted.</returns>
            <since>5.0</since>
        </member>
        <member name="M:Rhino.Geometry.RTree.Insert(Rhino.Geometry.BoundingBox,System.Int32)">
            <summary>Inserts an element into the tree.</summary>
            <param name="box">A bounding box.</param>
            <param name="elementId">A number.</param>
            <returns>true if element was successfully inserted.</returns>
            <since>5.0</since>
        </member>
        <member name="M:Rhino.Geometry.RTree.Insert(Rhino.Geometry.BoundingBox,System.IntPtr)">
            <summary>Inserts an element into the tree.</summary>
            <param name="box">A bounding box.</param>
            <param name="elementId">A pointer.</param>
            <returns>true if element was successfully inserted.</returns>
            <since>5.0</since>
        </member>
        <member name="M:Rhino.Geometry.RTree.Insert(Rhino.Geometry.Point2d,System.Int32)">
            <summary>Inserts an element into the tree.</summary>
            <param name="point">A point.</param>
            <param name="elementId">A number.</param>
            <returns>true if element was successfully inserted.</returns>
            <since>5.0</since>
        </member>
        <member name="M:Rhino.Geometry.RTree.Insert(Rhino.Geometry.Point2d,System.IntPtr)">
            <summary>Inserts an element into the tree.</summary>
            <param name="point">A point.</param>
            <param name="elementId">A pointer.</param>
            <returns>true if element was successfully inserted.</returns>
            <since>5.0</since>
        </member>
        <member name="M:Rhino.Geometry.RTree.Remove(Rhino.Geometry.Point3d,System.Int32)">
            <summary>Removes an element from the tree.</summary>
            <param name="point">A point.</param>
            <param name="elementId">A number.</param>
            <returns>true if element was successfully removed.</returns>
            <since>5.0</since>
        </member>
        <member name="M:Rhino.Geometry.RTree.Remove(Rhino.Geometry.Point3d,System.IntPtr)">
            <summary>Removes an element from the tree.</summary>
            <param name="point">A point.</param>
            <param name="elementId">A pointer.</param>
            <returns>true if element was successfully removed.</returns>
            <since>5.0</since>
        </member>
        <member name="M:Rhino.Geometry.RTree.Remove(Rhino.Geometry.BoundingBox,System.Int32)">
            <summary>Removes an element from the tree.</summary>
            <param name="box">A bounding box.</param>
            <param name="elementId">A number.</param>
            <returns>true if element was successfully removed.</returns>
            <since>5.0</since>
        </member>
        <member name="M:Rhino.Geometry.RTree.Remove(Rhino.Geometry.BoundingBox,System.IntPtr)">
            <summary>Removes an element from the tree.</summary>
            <param name="box">A bounding box.</param>
            <param name="elementId">A pointer.</param>
            <returns>true if element was successfully removed.</returns>
            <since>5.0</since>
        </member>
        <member name="M:Rhino.Geometry.RTree.Remove(Rhino.Geometry.Point2d,System.Int32)">
            <summary>Removes an element from the tree.</summary>
            <param name="point">A point.</param>
            <param name="elementId">A number.</param>
            <returns>true if element was successfully removed.</returns>
            <since>5.0</since>
        </member>
        <member name="M:Rhino.Geometry.RTree.Clear">
            <summary>
            Removes all elements.
            </summary>
            <since>5.0</since>
        </member>
        <member name="P:Rhino.Geometry.RTree.Count">
            <summary>
            Gets the number of items in this tree.
            </summary>
            <since>5.0</since>
        </member>
        <member name="M:Rhino.Geometry.RTree.Search(Rhino.Geometry.BoundingBox,System.EventHandler{Rhino.Geometry.RTreeEventArgs})">
            <summary>
            Searches for items in a bounding box.
            <para>The bounding box can be singular and contain exactly one single point.</para>
            </summary>
            <param name="box">A bounding box.</param>
            <param name="callback">An event handler to be raised when items are found.</param>
            <returns>
            true if entire tree was searched. It is possible no results were found.
            </returns>
            <since>5.0</since>
        </member>
        <member name="M:Rhino.Geometry.RTree.Search(Rhino.Geometry.BoundingBox,System.EventHandler{Rhino.Geometry.RTreeEventArgs},System.Object)">
            <summary>
            Searches for items in a bounding box.
            <para>The bounding box can be singular and contain exactly one single point.</para>
            </summary>
            <param name="box">A bounding box.</param>
            <param name="callback">An event handler to be raised when items are found.</param>
            <param name="tag">State to be passed inside the <see cref="T:Rhino.Geometry.RTreeEventArgs"/> Tag property.</param>
            <returns>
            true if entire tree was searched. It is possible no results were found.
            </returns>
            <since>5.0</since>
        </member>
        <member name="M:Rhino.Geometry.RTree.Search(Rhino.Geometry.Sphere,System.EventHandler{Rhino.Geometry.RTreeEventArgs})">
            <summary>
            Searches for items in a sphere.
            </summary>
            <param name="sphere">bounds used for searching.</param>
            <param name="callback">An event handler to be raised when items are found.</param>
            <returns>
            true if entire tree was searched. It is possible no results were found.
            </returns>
            <since>5.0</since>
        </member>
        <member name="M:Rhino.Geometry.RTree.Search(Rhino.Geometry.Sphere,System.EventHandler{Rhino.Geometry.RTreeEventArgs},System.Object)">
            <summary>
            Searches for items in a sphere.
            </summary>
            <param name="sphere">bounds used for searching.</param>
            <param name="callback">An event handler to be raised when items are found.</param>
            <param name="tag">State to be passed inside the <see cref="T:Rhino.Geometry.RTreeEventArgs"/> Tag property.</param>
            <returns>
            true if entire tree was searched. It is possible no results were found.
            </returns>
            <example>
            <code source='examples\vbnet\ex_closestpoint.vb' lang='vbnet'/>
            <code source='examples\cs\ex_closestpoint.cs' lang='cs'/>
            <code source='examples\py\ex_closestpoint.py' lang='py'/>
            </example>
            <since>5.0</since>
        </member>
        <member name="M:Rhino.Geometry.RTree.SearchOverlaps(Rhino.Geometry.RTree,Rhino.Geometry.RTree,System.Double,System.EventHandler{Rhino.Geometry.RTreeEventArgs})">
            <summary>
            Searches two R-trees for all pairs elements whose bounding boxes overlap.
            </summary>
            <param name="treeA">A first tree.</param>
            <param name="treeB">A second tree.</param>
            <param name="tolerance">
            If the distance between a pair of bounding boxes is less than tolerance,
            then callback is called.
            </param>
            <param name="callback">A callback event handler.</param>
            <returns>
            true if entire tree was searched.  It is possible no results were found.
            </returns>
            <since>5.0</since>
        </member>
        <member name="M:Rhino.Geometry.RTree.Finalize">
            <summary>
            Passively reclaims unmanaged resources when the class user did not explicitly call Dispose().
            </summary>
        </member>
        <member name="M:Rhino.Geometry.RTree.Dispose">
            <summary>
            Actively reclaims unmanaged resources that this instance uses.
            </summary>
            <since>5.0</since>
        </member>
        <member name="M:Rhino.Geometry.RTree.Dispose(System.Boolean)">
            <summary>
            For derived class implementers.
            <para>This method is called with argument true when class user calls Dispose(), while with argument false when
            the Garbage Collector invokes the finalizer, or Finalize() method.</para>
            <para>You must reclaim all used unmanaged resources in both cases, and can use this chance to call Dispose on disposable fields if the argument is true.</para>
            <para>Also, you must call the base virtual method within your overriding method.</para>
            </summary>
            <param name="disposing">true if the call comes from the Dispose() method; false if it comes from the Garbage Collector finalizer.</param>
        </member>
        <member name="M:Rhino.Geometry.RTree.PointCloudClosestPoints(Rhino.Geometry.PointCloud,System.Collections.Generic.IEnumerable{Rhino.Geometry.Point3d},System.Double)">
            <summary>
            Finds the point in a list of 3D points that is closest to a test point.
            </summary>
            <param name="pointcloud">A point cloud to be searched.</param>
            <param name="needlePts">Points to search for.</param>
            <param name="limitDistance">The maximum allowed distance.</param>
            <returns>An enumerable of arrays of indices; each array contains the indices for each of the needlePts.</returns>
            <since>6.0</since>
        </member>
        <member name="M:Rhino.Geometry.RTree.Point3dClosestPoints(System.Collections.Generic.IEnumerable{Rhino.Geometry.Point3d},System.Collections.Generic.IEnumerable{Rhino.Geometry.Point3d},System.Double)">
            <summary>
            Finds the point in a list of 3D points that is closest to a test point.
            </summary>
            <param name="hayPoints">A series of points.</param>
            <param name="needlePts">Points to search for.</param>
            <param name="limitDistance">The maximum allowed distance.</param>
            <returns>An enumerable of arrays of indices; each array contains the indices for each of the needlePts.</returns>
            <since>6.0</since>
        </member>
        <member name="M:Rhino.Geometry.RTree.PointCloudKNeighbors(Rhino.Geometry.PointCloud,System.Collections.Generic.IEnumerable{Rhino.Geometry.Point3d},System.Int32)">
            <summary>
            Finds a certain amount of points in a list of 3D points that are the k-closest to a test point.
            </summary>
            <param name="pointcloud">A point cloud to be searched.</param>
            <param name="needlePts">Points to search for.</param>
            <param name="amount">The required amount of closest neighbors to find.</param>
            <returns>An enumerable of arrays of indices; each array contains the indices for each of the needlePts.</returns>
            <seealso cref="M:Rhino.Collections.RhinoList.PointCloudKNeighbors(Rhino.Geometry.PointCloud,System.Collections.Generic.IEnumerable{Rhino.Geometry.Point3d},System.Int32)"/>
            <since>6.0</since>
        </member>
        <member name="M:Rhino.Geometry.RTree.Point3dKNeighbors(System.Collections.Generic.IEnumerable{Rhino.Geometry.Point3d},System.Collections.Generic.IEnumerable{Rhino.Geometry.Point3d},System.Int32)">
            <summary>
            Finds a certain amount of points in a list of 3D points that are the k-closest to a test point.
            </summary>
            <param name="hayPoints">A series of points.</param>
            <param name="needlePts">Points to search for.</param>
            <param name="amount">The required amount of closest neighbors to find.</param>
            <returns>An enumerable of arrays of indices; each array contains the indices for each of the needlePts.</returns>
            <seealso cref="M:Rhino.Collections.RhinoList.Point3dKNeighbors(System.Collections.Generic.IEnumerable{Rhino.Geometry.Point3d},System.Collections.Generic.IEnumerable{Rhino.Geometry.Point3d},System.Int32)"/>
            <since>6.0</since>
        </member>
        <member name="T:Rhino.Geometry.Sphere">
            <summary>
            Represents the plane and radius values of a sphere.
            </summary>
        </member>
        <member name="M:Rhino.Geometry.Sphere.#ctor(Rhino.Geometry.Point3d,System.Double)">
            <example>
            <code source='examples\vbnet\ex_addsphere.vb' lang='vbnet'/>
            <code source='examples\cs\ex_addsphere.cs' lang='cs'/>
            <code source='examples\py\ex_addsphere.py' lang='py'/>
            </example>
            <summary>
            Initializes a new sphere given center point and radius.
            </summary>
            <param name="center">A center point.</param>
            <param name="radius">A radius value.</param>
            <since>5.0</since>
        </member>
        <member name="M:Rhino.Geometry.Sphere.#ctor(Rhino.Geometry.Plane,System.Double)">
            <summary>
            Initializes a new sphere given the plane of the equator circle and radius.
            </summary>
            <param name="equatorialPlane">A plane that will be intersecting
            the sphere at the same distance from both poles (parameterization
            singularities).</param>
            <param name="radius">A radius value.</param>
            <since>5.0</since>
        </member>
        <member name="P:Rhino.Geometry.Sphere.Unset">
            <summary>
            Gets a sphere with invalid members.
            </summary>
            <since>5.0</since>
        </member>
        <member name="P:Rhino.Geometry.Sphere.IsValid">
            <summary>
            Gets a value that indicates whether the sphere is valid.
            </summary>
            <since>5.0</since>
        </member>
        <member name="P:Rhino.Geometry.Sphere.BoundingBox">
            <summary>
            Gets the world aligned bounding box for this Sphere. 
            If the Sphere is Invalid, an empty box is returned.
            </summary>
            <since>5.0</since>
        </member>
        <member name="P:Rhino.Geometry.Sphere.Diameter">
            <summary>
            Gets or sets the diameter for this sphere.
            </summary>
            <since>5.0</since>
        </member>
        <member name="P:Rhino.Geometry.Sphere.Radius">
            <summary>
            Gets or sets the Radius for this sphere.
            </summary>
            <since>5.0</since>
        </member>
        <member name="P:Rhino.Geometry.Sphere.EquitorialPlane">
            <summary>
            Gets or sets the Equatorial plane for this sphere.
            </summary>
            <since>5.0</since>
        </member>
        <member name="P:Rhino.Geometry.Sphere.EquatorialPlane">
            <summary>
            Gets or sets the Equatorial plane for this sphere.
            </summary>
            <since>6.0</since>
        </member>
        <member name="P:Rhino.Geometry.Sphere.Center">
            <summary>
            Gets or sets the center point of the sphere.
            </summary>
            <since>5.0</since>
        </member>
        <member name="P:Rhino.Geometry.Sphere.NorthPole">
            <summary>
            Gets the point at the North Pole of the sphere.
            <para>This is the parameterization singularity that can be obtained,
            at V value +Math.Pi/2.</para>
            </summary>
            <since>5.0</since>
        </member>
        <member name="P:Rhino.Geometry.Sphere.SouthPole">
            <summary>
            Gets the point at the South Pole of the sphere.
            <para>This is the parameterization singularity that can be obtained,
            at V value -Math.Pi/2.</para>
            </summary>
            <since>5.0</since>
        </member>
        <member name="M:Rhino.Geometry.Sphere.LatitudeRadians(System.Double)">
            <summary>
            Computes the parallel at a specific latitude angle.
            <para>The angle is specified in radians.</para>
            </summary>
            <param name="radians">An angle in radians for the parallel.</param>
            <returns>A circle.</returns>
            <since>5.0</since>
        </member>
        <member name="M:Rhino.Geometry.Sphere.LatitudeDegrees(System.Double)">
            <summary>
            Computes the parallel at a specific latitude angle.
            <para>The angle is specified in degrees.</para>
            </summary>
            <param name="degrees">An angle in degrees for the meridian.</param>
            <returns>A circle.</returns>
            <since>5.0</since>
        </member>
        <member name="M:Rhino.Geometry.Sphere.LongitudeRadians(System.Double)">
            <summary>
            Computes the meridian at a specific longitude angle.
            <para>The angle is specified in radians.</para>
            </summary>
            <param name="radians">An angle in radians.</param>
            <returns>A circle.</returns>
            <since>5.0</since>
        </member>
        <member name="M:Rhino.Geometry.Sphere.LongitudeDegrees(System.Double)">
            <summary>
            Computes the meridian at a specific longitude angle.
            <para>The angle is specified in degrees.</para>
            </summary>
            <param name="degrees">An angle in degrees.</param>
            <returns>A circle.</returns>
            <since>5.0</since>
        </member>
        <member name="M:Rhino.Geometry.Sphere.PointAt(System.Double,System.Double)">
            <summary>Evaluates the sphere at specific longitude and latitude angles.</summary>
            <param name="longitudeRadians">A number within the interval [0, 2pi].</param>
            <param name="latitudeRadians">A number within the interval [-pi/2,pi/2].</param>
            <returns>A point value.</returns>
            <since>5.0</since>
        </member>
        <member name="M:Rhino.Geometry.Sphere.NormalAt(System.Double,System.Double)">
            <summary>
            Computes the normal at a specific angular location on the sphere.
            </summary>
            <param name="longitudeRadians">A number within the interval [0, 2pi].</param>
            <param name="latitudeRadians">A number within the interval [-pi/2, pi/2].</param>
            <returns>A vector.</returns>
            <since>5.0</since>
        </member>
        <member name="M:Rhino.Geometry.Sphere.ClosestPoint(Rhino.Geometry.Point3d)">
            <summary>
            Returns point on sphere that is closest to given point.
            </summary>
            <param name="testPoint">Point to project onto Sphere.</param>
            <returns>Point on sphere surface closest to testPoint.</returns>
            <since>5.0</since>
        </member>
        <member name="M:Rhino.Geometry.Sphere.ClosestParameter(Rhino.Geometry.Point3d,System.Double@,System.Double@)">
            <summary>
            Finds the angle parameters on this sphere that are closest to a test point.
            </summary>
            <param name="testPoint">Point to project onto the sphere.</param>
            <param name="longitudeRadians">The longitudinal angle (in radians; 0.0 to 2pi) where the sphere approaches testPoint best.</param>
            <param name="latitudeRadians">The latitudinal angle (in radians; -0.5pi to +0.5pi) where the sphere approaches testPoint best.</param>
            <returns>true on success, false on failure. This function will fail if the point it coincident with the sphere center.</returns>
            <since>5.0</since>
        </member>
        <member name="M:Rhino.Geometry.Sphere.Rotate(System.Double,System.Double,Rhino.Geometry.Vector3d)">
            <summary>
            Rotates this sphere about the center point.
            </summary>
            <param name="sinAngle">sin(angle)</param>
            <param name="cosAngle">cos(angle)</param>
            <param name="axisOfRotation">The direction of the axis of rotation.</param>
            <returns>true on success; false on failure.</returns>
            <since>5.0</since>
        </member>
        <member name="M:Rhino.Geometry.Sphere.Rotate(System.Double,Rhino.Geometry.Vector3d)">
            <summary>
            Rotates the sphere about the center point.
            </summary>
            <param name="angleRadians">Angle of rotation (in radians)</param>
            <param name="axisOfRotation">Rotation axis.</param>
            <returns>true on success; false on failure.</returns>
            <since>5.0</since>
        </member>
        <member name="M:Rhino.Geometry.Sphere.Rotate(System.Double,System.Double,Rhino.Geometry.Vector3d,Rhino.Geometry.Point3d)">
            <summary>
            Rotates this sphere about a point and an axis.
            </summary>
            <param name="sinAngle">sin(angle)</param>
            <param name="cosAngle">cod(angle)</param>
            <param name="axisOfRotation">Axis of rotation.</param>
            <param name="centerOfRotation">Center of rotation.</param>
            <returns>true on success; false on failure.</returns>
            <since>5.0</since>
        </member>
        <member name="M:Rhino.Geometry.Sphere.Rotate(System.Double,Rhino.Geometry.Vector3d,Rhino.Geometry.Point3d)">
            <summary>
            Rotates this sphere about a point and an axis.
            </summary>
            <param name="angleRadians">Rotation angle (in Radians)</param>
            <param name="axisOfRotation">Axis of rotation.</param>
            <param name="centerOfRotation">Center of rotation.</param>
            <returns>true on success; false on failure.</returns>
            <since>5.0</since>
        </member>
        <member name="M:Rhino.Geometry.Sphere.Translate(Rhino.Geometry.Vector3d)">
            <summary>
            Moves this sphere along a motion vector.
            </summary>
            <param name="delta">Motion vector.</param>
            <returns>true on success; false on failure.</returns>
            <since>5.0</since>
        </member>
        <member name="M:Rhino.Geometry.Sphere.Transform(Rhino.Geometry.Transform)">
            <summary>
            Transforms this sphere. Note that non-similarity preserving transformations 
            cannot be applied to a sphere as that would result in an ellipsoid.
            </summary>
            <param name="xform">Transformation matrix to apply.</param>
            <returns>true on success, false on failure.</returns>
            <since>5.0</since>
        </member>
        <member name="M:Rhino.Geometry.Sphere.ToBrep">
            <summary>
            Converts this sphere is it Brep representation
            </summary>
            <returns></returns>
            <since>5.0</since>
        </member>
        <member name="M:Rhino.Geometry.Sphere.ToNurbsSurface">
            <summary>
            Converts this sphere to its NurbsSurface representation. 
            This is synonymous with calling NurbsSurface.CreateFromSphere().
            </summary>
            <returns>A nurbs surface representation of this sphere or null.</returns>
            <since>5.0</since>
        </member>
        <member name="M:Rhino.Geometry.Sphere.ToRevSurface">
            <summary>
            Converts this Sphere to a RevSurface representation. 
            This is synonymous with calling RevSurface.CreateFromSphere().
            </summary>
            <returns>A surface of revolution representation of this sphere or null.</returns>
            <since>5.0</since>
        </member>
        <member name="M:Rhino.Geometry.Sphere.EpsilonEquals(Rhino.Geometry.Sphere,System.Double)">
            <summary>
            Check that all values in other are within epsilon of the values in this
            </summary>
            <param name="other"></param>
            <param name="epsilon"></param>
            <returns></returns>
            <since>5.4</since>
        </member>
        <member name="T:Rhino.Geometry.SubDComponent">
            <summary>
            A part of SubD geometry. Common base class for vertices, faces, and edges
            </summary>
        </member>
        <member name="P:Rhino.Geometry.SubDComponent.Id">
            <summary>
            Unique id within the parent SubD for this item
            </summary>
            <since>7.0</since>
        </member>
        <member name="P:Rhino.Geometry.SubDComponent.ParentSubD">
            <summary>
            SubD that this component belongs to
            </summary>
            <since>7.0</since>
        </member>
        <member name="P:Rhino.Geometry.SubDComponent.IsSelected">
            <summary>
            Returns true if the SubD component is selected.
            </summary>
            <since>7.6</since>
        </member>
        <member name="P:Rhino.Geometry.SubDComponent.IsHighlighted">
            <summary>
            Returns true if the SubD component is highlighted.
            </summary>
            <since>7.6</since>
        </member>
        <member name="P:Rhino.Geometry.SubDComponent.IsHidden">
            <summary>
            Returns true if the SubD component is hidden.
            </summary>
            <since>7.6</since>
        </member>
        <member name="P:Rhino.Geometry.SubDComponent.IsLocked">
            <summary>
            Returns true if the SubD component is locked.
            </summary>
            <since>7.6</since>
        </member>
        <member name="P:Rhino.Geometry.SubDComponent.IsDeleted">
            <summary>
            Returns true if the SubD component is deleted.
            </summary>
            <since>7.6</since>
        </member>
        <member name="P:Rhino.Geometry.SubDComponent.IsDamaged">
            <summary>
            Returns true if the SubD component is damaged.
            </summary>
            <since>7.6</since>
        </member>
        <member name="T:Rhino.Geometry.SubDFace">
            <summary> Single face of a SubD </summary>
        </member>
        <member name="P:Rhino.Geometry.SubDFace.EdgeCount">
            <summary>
            Number of edges for this face. Note that EdgeCount is always the same
            as VertexCount. Two properties are provided simply for clarity.
            </summary>
            <since>7.0</since>
        </member>
        <member name="P:Rhino.Geometry.SubDFace.VertexCount">
            <summary>
            Number of vertices for this face. Note that EdgeCount is always the same
            as VertexCount. Two properties are provided simply for clarity.
            </summary>
            <since>7.0</since>
        </member>
        <member name="P:Rhino.Geometry.SubDFace.PerFaceColor">
            <summary>
            If per-face color is "Empty", then this face does not have a custom color
            </summary>
            <since>7.0</since>
        </member>
        <member name="M:Rhino.Geometry.SubDFace.ComponentIndex">
            <summary>
            Gets the component index of this face.
            </summary>
            <returns>The component index.</returns>
            <since>7.9</since>
        </member>
        <member name="M:Rhino.Geometry.SubDFace.EdgeAt(System.Int32)">
            <summary>
            Get an edge at a given index
            </summary>
            <param name="index"></param>
            <returns></returns>
            <since>7.0</since>
        </member>
        <member name="M:Rhino.Geometry.SubDFace.EdgeDirectionMatchesFaceOrientation(System.Int32)">
            <summary>
            Check if a given edge in this face has the same direction as the face orientation
            </summary>
            <param name="index"></param>
            <returns></returns>
            <since>7.0</since>
        </member>
        <member name="M:Rhino.Geometry.SubDFace.VertexAt(System.Int32)">
            <summary>
            Get a vertex that this face uses by index
            </summary>
            <param name="index"></param>
            <returns></returns>
            <since>7.0</since>
        </member>
        <member name="T:Rhino.Geometry.SubDVertex">
            <summary> Single vertex of a SubD </summary>
        </member>
        <member name="P:Rhino.Geometry.SubDVertex.ControlNetPoint">
            <summary>
            Location of the "control net" point that this SubDVertex represents
            </summary>
            <remarks>
            The setter of this property will refresh the neighborhood cache around the vertex 
            everytime it is called. This is not efficient if you have multiple vertices to
            modify. In that case, call vertex.SetControlNetPoint(position, false) for all the
            vertices you want to modify, then call subd.ClearEvaluationCache()
            </remarks>
            <since>7.0</since>
        </member>
        <member name="P:Rhino.Geometry.SubDVertex.EdgeCount">
            <summary> Number of edges for this vertex </summary>
            <since>7.0</since>
        </member>
        <member name="P:Rhino.Geometry.SubDVertex.FaceCount">
            <summary> Number of faces for this vertex </summary>
            <since>7.0</since>
        </member>
        <member name="P:Rhino.Geometry.SubDVertex.Next">
            <summary>
            Next vertex in linked list of vertices on this level
            </summary>
            <since>7.0</since>
        </member>
        <member name="P:Rhino.Geometry.SubDVertex.Previous">
            <summary>
            Previous vertex in linked list of vertices on this level
            </summary>
            <since>7.0</since>
        </member>
        <member name="P:Rhino.Geometry.SubDVertex.Tag">
            <summary>
            identifies the type of subdivision vertex
            </summary>
            <since>7.5</since>
        </member>
        <member name="M:Rhino.Geometry.SubDVertex.EdgeAt(System.Int32)">
            <summary>
            Retrieve a SubDEdge from this vertex
            </summary>
            <param name="index"></param>
            <returns></returns>
            <since>7.0</since>
        </member>
        <member name="M:Rhino.Geometry.SubDVertex.FaceAt(System.Int32)">
            <summary>
            Retrieve a SubDFace from this vertex
            </summary>
            <param name="index"></param>
            <returns></returns>
            <since>7.7</since>
        </member>
        <member name="P:Rhino.Geometry.SubDVertex.Edges">
            <summary>
            All edges that this vertex is part of
            </summary>
            <since>7.0</since>
        </member>
        <member name="M:Rhino.Geometry.SubDVertex.SurfacePoint">
            <summary>
            The SubD surface point
            </summary>
            <returns></returns>
            <seealso cref="!:SubD.SetVertexSurfacePoint(uint, Point3d)"/>
            <seealso cref="!:SubD.InterpolateSurfacePoints(Point3d[])"/>
            <seealso cref="!:SubD.InterpolateSurfacePoints(uint[], Point3d[])"/>
            <seealso cref="!:SubDSurfaceInterpolator"/>
            <since>7.1</since>
        </member>
        <member name="M:Rhino.Geometry.SubDVertex.SetControlNetPoint(Rhino.Geometry.Point3d,System.Boolean)">
            <summary>
            Change the location of the "control net" point that this SubDVertex represents
            </summary>
            <param name="position">
            New position for the vertex' control net point.
            </param>
            <param name="bClearNeighborhoodCache">
            If true, clear the evaluation cache in the faces around the modified vertex.
            </param>
            <returns>
            true if the vertex' control net point was modified.
            </returns>
            <remarks>
            This method is provided to be able to set multiple control vertices, without clearing
            the neighborhood cache everytime as the ControlNetPoint property setter does. When you
            are done modifying your SubD, call subd.ClearEvaluationCache() to refresh
            all caches.
            </remarks>
            <since>8.0</since>
        </member>
        <member name="T:Rhino.Geometry.SubDEdge">
            <summary> Single edge of a SubD </summary>
        </member>
        <member name="P:Rhino.Geometry.SubDEdge.FaceCount">
            <summary> Number of faces for this edge </summary>
            <since>7.0</since>
        </member>
        <member name="P:Rhino.Geometry.SubDEdge.ControlNetLine">
            <summary>
            Line representing the control net end points
            </summary>
            <since>7.0</since>
        </member>
        <member name="P:Rhino.Geometry.SubDEdge.VertexFrom">
            <summary>
            Start vertex for this edge
            </summary>
            <since>7.0</since>
        </member>
        <member name="P:Rhino.Geometry.SubDEdge.VertexTo">
            <summary>
            End vertex for this edge
            </summary>
            <since>7.0</since>
        </member>
        <member name="P:Rhino.Geometry.SubDEdge.Tag">
            <summary>
            identifies the type of subdivision edge
            </summary>
            <since>7.0</since>
        </member>
        <member name="M:Rhino.Geometry.SubDEdge.FaceAt(System.Int32)">
            <summary>
            Retrieve a SubDFace from this edge
            </summary>
            <param name="index"></param>
            <returns></returns>
            <since>7.0</since>
        </member>
        <member name="T:Rhino.Geometry.SumSurface">
            <summary>
            Represents a sum surface, or an extrusion of a curve along a curved path.
            </summary>
        </member>
        <member name="M:Rhino.Geometry.SumSurface.Create(Rhino.Geometry.Curve,Rhino.Geometry.Curve)">
            <summary>
            Constructs a new sum surface by extruding a curve A along a path B.
            </summary>
            <param name="curveA">The curve used as extrusion profile.</param>
            <param name="curveB">The curve used as path.</param>
            <returns>A new sum surface on success; null on failure.</returns>
            <since>5.0</since>
        </member>
        <member name="M:Rhino.Geometry.SumSurface.Create(Rhino.Geometry.Curve,Rhino.Geometry.Vector3d)">
            <summary>
            Constructs a new sum surface by extruding a curve in a specified direction.
            </summary>
            <param name="curve">The curve used as extrusion profile.</param>
            <param name="extrusionDirection">The extrusion vector (must be non-zero).</param>
            <returns>A new sum surface on success; null on failure.</returns>
            <since>7.18</since>
        </member>
        <member name="M:Rhino.Geometry.SumSurface.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Protected constructor for internal use.
            </summary>
            <param name="info">Serialization data.</param>
            <param name="context">Serialization stream.</param>
        </member>
        <member name="T:Rhino.Geometry.IsoStatus">
            <summary>
            Defines enumerated values for isoparametric curve direction on a surface, such as X or Y,
            and curve sides, such as North or West boundary.
            <para>Note: odd values are all x-constant; even values > 0 are all y-constant.</para>
            </summary>
            <since>5.0</since>
        </member>
        <member name="F:Rhino.Geometry.IsoStatus.None">
            <summary>
            curve is not an isoparametric curve.
            </summary>
        </member>
        <member name="F:Rhino.Geometry.IsoStatus.X">
            <summary>
            curve is a "x" = constant (vertical) isoparametric curve in the interior of the surface's domain.
            </summary>
        </member>
        <member name="F:Rhino.Geometry.IsoStatus.Y">
            <summary>
            curve is a "y" = constant (horizontal) isoparametric curve in the interior of the surface's domain.
            </summary>
        </member>
        <member name="F:Rhino.Geometry.IsoStatus.West">
            <summary>
            curve is a "x" = constant isoparametric curve along the west side of the surface's domain.
            </summary>
        </member>
        <member name="F:Rhino.Geometry.IsoStatus.South">
            <summary>
            curve is a "y" = constant isoparametric curve along the south side of the surface's domain.
            </summary>
        </member>
        <member name="F:Rhino.Geometry.IsoStatus.East">
            <summary>
            curve is a "x" = constant isoparametric curve along the east side of the surface's domain.
            </summary>
        </member>
        <member name="F:Rhino.Geometry.IsoStatus.North">
            <summary>
            curve is a "y" = constant isoparametric curve along the north side of the surface's domain.
            </summary>
        </member>
        <member name="T:Rhino.Geometry.SurfaceCurvature">
            <summary>
            Maintains computed information for surface curvature evaluation.
            </summary>
        </member>
        <member name="P:Rhino.Geometry.SurfaceCurvature.UVPoint">
            <summary>
            Gets the UV location where the curvature was computed.
            </summary>
            <since>5.0</since>
        </member>
        <member name="P:Rhino.Geometry.SurfaceCurvature.Point">
            <summary>
            Gets the surface point at UV.
            </summary>
            <example>
            <code source='examples\vbnet\ex_principalcurvature.vb' lang='vbnet'/>
            <code source='examples\cs\ex_principalcurvature.cs' lang='cs'/>
            <code source='examples\py\ex_principalcurvature.py' lang='py'/>
            </example>
            <since>5.0</since>
        </member>
        <member name="P:Rhino.Geometry.SurfaceCurvature.Normal">
            <summary>
            Gets the surface normal at UV.
            </summary>
            <example>
            <code source='examples\vbnet\ex_principalcurvature.vb' lang='vbnet'/>
            <code source='examples\cs\ex_principalcurvature.cs' lang='cs'/>
            <code source='examples\py\ex_principalcurvature.py' lang='py'/>
            </example>
            <since>5.0</since>
        </member>
        <member name="M:Rhino.Geometry.SurfaceCurvature.Direction(System.Int32)">
            <summary>
            Gets the principal curvature direction vector.
            </summary>
            <param name="direction">Direction index, valid values are 0 and 1.</param>
            <returns>The specified direction vector.</returns>
            <example>
            <code source='examples\vbnet\ex_principalcurvature.vb' lang='vbnet'/>
            <code source='examples\cs\ex_principalcurvature.cs' lang='cs'/>
            <code source='examples\py\ex_principalcurvature.py' lang='py'/>
            </example>
            <since>5.0</since>
        </member>
        <member name="M:Rhino.Geometry.SurfaceCurvature.Kappa(System.Int32)">
            <summary>
            Gets the principal curvature values.
              Kappa(0) - Principal curvature with maximum absolute value
              Kappa(1) - Principal curvature with minimum absolute value
            </summary>
            <param name="direction">Kappa index, valid values are 0 and 1.</param>
            <returns>The specified kappa value.</returns>
            <example>
            <code source='examples\vbnet\ex_principalcurvature.vb' lang='vbnet'/>
            <code source='examples\cs\ex_principalcurvature.cs' lang='cs'/>
            <code source='examples\py\ex_principalcurvature.py' lang='py'/>
            </example>
            <since>5.0</since>
        </member>
        <member name="P:Rhino.Geometry.SurfaceCurvature.Gaussian">
            <summary>
            Gets the Gaussian curvature value at UV.
            </summary>
            <example>
            <code source='examples\vbnet\ex_principalcurvature.vb' lang='vbnet'/>
            <code source='examples\cs\ex_principalcurvature.cs' lang='cs'/>
            <code source='examples\py\ex_principalcurvature.py' lang='py'/>
            </example>
            <since>5.0</since>
        </member>
        <member name="P:Rhino.Geometry.SurfaceCurvature.Mean">
            <summary>
            Gets the Mean curvature value at UV.
            </summary>
            <example>
            <code source='examples\vbnet\ex_principalcurvature.vb' lang='vbnet'/>
            <code source='examples\cs\ex_principalcurvature.cs' lang='cs'/>
            <code source='examples\py\ex_principalcurvature.py' lang='py'/>
            </example>
            <since>5.0</since>
        </member>
        <member name="M:Rhino.Geometry.SurfaceCurvature.OsculatingCircle(System.Int32)">
            <summary>
            Computes the osculating circle along the given direction.
            </summary>
            <param name="direction">Direction index, valid values are 0 and 1.</param>
            <returns>The osculating circle in the given direction or Circle.Unset on failure.</returns>
            <since>5.0</since>
        </member>
        <member name="T:Rhino.Geometry.Surface">
            <summary>
            Represents a base class that is common to most RhinoCommon surface types.
            <para>A surface represents an entity that can be all visited by providing
            two independent parameters, usually called (u, v), or sometimes (s, t).</para>
            </summary>
        </member>
        <member name="M:Rhino.Geometry.Surface.#ctor">
            <summary>
            Protected constructor for internal use.
            </summary>
        </member>
        <member name="M:Rhino.Geometry.Surface.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Protected constructor for internal use.
            </summary>
            <param name="info">Serialization data.</param>
            <param name="context">Serialization stream.</param>
        </member>
        <member name="P:Rhino.Geometry.Surface.IsSolid">
            <summary>
            Gets a values indicating whether a surface is solid.
            </summary>
            <since>5.0</since>
        </member>
        <member name="M:Rhino.Geometry.Surface.Domain(System.Int32)">
            <summary>Gets the domain in a direction.</summary>
            <param name="direction">0 gets first parameter, 1 gets second parameter.</param>
            <returns>An interval value.</returns>
            <since>5.0</since>
        </member>
        <member name="M:Rhino.Geometry.Surface.SetDomain(System.Int32,Rhino.Geometry.Interval)">
            <summary>
            Sets the domain in a direction.
            </summary>
            <param name="direction">
            0 sets first parameter's domain, 1 sets second parameter's domain.
            </param>
            <param name="domain">A new domain to be assigned.</param>
            <returns>true if setting succeeded, otherwise false.</returns>
            <since>5.0</since>
        </member>
        <member name="M:Rhino.Geometry.Surface.Degree(System.Int32)">
            <summary>
            Returns the maximum algebraic degree of any span
            (or a good estimate if curve spans are not algebraic).
            </summary>
            <param name="direction">
            0 gets first parameter's domain, 1 gets second parameter's domain.
            </param>
            <returns>The maximum degree.</returns>
            <since>5.0</since>
        </member>
        <member name="M:Rhino.Geometry.Surface.SpanCount(System.Int32)">
            <summary>
            Gets number of smooth nonempty spans in the parameter direction.
            </summary>
            <param name="direction">
            0 gets first parameter's domain, 1 gets second parameter's domain.
            </param>
            <returns>The span count.</returns>
            <since>5.0</since>
        </member>
        <member name="M:Rhino.Geometry.Surface.GetSpanVector(System.Int32)">
            <summary>
            Gets array of span "knots".
            </summary>
            <param name="direction">
            0 gets first parameter's domain, 1 gets second parameter's domain.
            </param>
            <returns>An array with span vectors; or null on error.</returns>
            <since>5.0</since>
        </member>
        <member name="M:Rhino.Geometry.Surface.Reverse(System.Int32)">
            <summary>
            Reverses parameterization Domain changes from [a,b] to [-b,-a]
            </summary>
            <param name="direction">
            0 for first parameter's domain, 1 for second parameter's domain.
            </param>
            <returns>a new reversed surface on success.</returns>
            <since>5.0</since>
        </member>
        <member name="M:Rhino.Geometry.Surface.Reverse(System.Int32,System.Boolean)">
            <summary>
            Same as Reverse, but if inPlace is set to true this Surface is modified
            instead of a new copy being created.
            </summary>
            <param name="direction">
            0 for first parameter's domain, 1 for second parameter's domain.
            </param>
            <param name="inPlace"></param>
            <returns>
            If inPlace is False, a new reversed surface on success. If inPlace is
            true, this surface instance is returned on success.
            </returns>
            <since>5.8</since>
        </member>
        <member name="M:Rhino.Geometry.Surface.Transpose">
            <summary>
            Transposes surface parameterization (swap U and V)
            </summary>
            <returns>New transposed surface on success, null on failure.</returns>
            <since>5.0</since>
        </member>
        <member name="M:Rhino.Geometry.Surface.Transpose(System.Boolean)">
            <summary>
            Transposes surface parameterization (swap U and V)
            </summary>
            <param name="inPlace"></param>
            <returns>New transposed surface on success, null on failure.</returns>
            <since>5.8</since>
        </member>
        <member name="M:Rhino.Geometry.Surface.PointAt(System.Double,System.Double)">
            <summary>
            Evaluates a point at a given parameter.
            </summary>
            <param name="u">evaluation parameters.</param>
            <param name="v">evaluation parameters.</param>
            <returns>Point3d.Unset on failure.</returns>
            <since>5.0</since>
        </member>
        <member name="M:Rhino.Geometry.Surface.NormalAt(System.Double,System.Double)">
            <summary>
            Computes the surface normal at a point.
            <para>This is the simple evaluation call - it does not support error handling.</para>
            </summary>
            <param name="u">A U parameter.</param>
            <param name="v">A V parameter.</param>
            <returns>The normal.</returns>
            <example>
            <code source='examples\vbnet\ex_evnormal.vb' lang='vbnet'/>
            <code source='examples\cs\ex_evnormal.cs' lang='cs'/>
            <code source='examples\py\ex_evnormal.py' lang='py'/>
            </example>
            <since>5.0</since>
        </member>
        <member name="M:Rhino.Geometry.Surface.FrameAt(System.Double,System.Double,Rhino.Geometry.Plane@)">
            <summary>
            Computes the orient plane on a surface given a U and V parameter.
            <para>This is the simple evaluation call with no error handling.</para>
            </summary>
            <param name="u">A first parameter.</param>
            <param name="v">A second parameter.</param>
            <param name="frame">A frame plane that will be computed during this call.</param>
            <returns>true if this operation succeeded; otherwise false.</returns>
            <example>
            <code source='examples\vbnet\ex_orientonsrf.vb' lang='vbnet'/>
            <code source='examples\cs\ex_orientonsrf.cs' lang='cs'/>
            <code source='examples\py\ex_orientonsrf.py' lang='py'/>
            </example>
            <since>5.0</since>
        </member>
        <member name="M:Rhino.Geometry.Surface.CurvatureAt(System.Double,System.Double)">
            <summary>
            Computes the curvature at the given UV coordinate.
            </summary>
            <param name="u">U parameter for evaluation.</param>
            <param name="v">V parameter for evaluation.</param>
            <returns>Surface Curvature data for the point at UV or null on failure.</returns>
            <example>
            <code source='examples\vbnet\ex_principalcurvature.vb' lang='vbnet'/>
            <code source='examples\cs\ex_principalcurvature.cs' lang='cs'/>
            <code source='examples\py\ex_principalcurvature.py' lang='py'/>
            </example>
            <since>5.0</since>
        </member>
        <member name="M:Rhino.Geometry.Surface.IsIsoparametric(Rhino.Geometry.Curve,Rhino.Geometry.Interval)">
            <summary>
            Determines if a 2D curve is isoparametric in the parameter space of this surface.
            </summary>
            <param name="curve">Curve to test.</param>
            <param name="curveDomain">Sub domain of the curve.</param>
            <returns>IsoStatus flag describing the iso-parametric relationship between the surface and the curve.</returns>
            <since>5.0</since>
        </member>
        <member name="M:Rhino.Geometry.Surface.IsIsoparametric(Rhino.Geometry.Curve)">
            <summary>
            Determines if a 2d curve is isoparametric in the parameter space of this surface.
            </summary>
            <param name="curve">Curve to test.</param>
            <returns>IsoStatus flag describing the iso-parametric relationship between the surface and the curve.</returns>
            <since>5.0</since>
        </member>
        <member name="M:Rhino.Geometry.Surface.IsIsoparametric(Rhino.Geometry.BoundingBox)">
            <summary>
            Determines if a 2d bounding box is isoparametric in the parameter space of this surface.
            </summary>
            <param name="bbox">Bounding box to test.</param>
            <returns>IsoStatus flag describing the iso-parametric relationship between the surface and the bounding box.</returns>
            <since>5.0</since>
        </member>
        <member name="M:Rhino.Geometry.Surface.IsClosed(System.Int32)">
            <summary>
            Gets a value indicating if the surface is closed in a direction.
            </summary>
            <param name="direction">0 = U, 1 = V.</param>
            <returns>The indicating boolean value.</returns>
            <since>5.0</since>
        </member>
        <member name="M:Rhino.Geometry.Surface.IsPeriodic(System.Int32)">
            <summary>
            Gets a value indicating if the surface is periodic in a direction (default is false).
            </summary>
            <param name="direction">0 = U, 1 = V.</param>
            <returns>The indicating boolean value.</returns>
            <since>5.0</since>
        </member>
        <member name="M:Rhino.Geometry.Surface.IsSingular(System.Int32)">
            <summary>
            true if surface side is collapsed to a point.
            </summary>
            <param name="side">
            side of parameter space to test
            0 = south, 1 = east, 2 = north, 3 = west.
            </param>
            <returns>True if this specific side of the surface is singular; otherwise, false.</returns>
            <since>5.0</since>
        </member>
        <member name="M:Rhino.Geometry.Surface.IsAtSingularity(System.Double,System.Double,System.Boolean)">
            <summary>
            Tests if a surface parameter value is at a singularity.
            </summary>
            <param name="u">Surface u parameter to test.</param>
            <param name="v">Surface v parameter to test.</param>
            <param name="exact">
            If true, test if (u,v) is exactly at a singularity.
            If false, test if close enough to cause numerical problems.
            </param>
            <returns>true if surface is singular at (s,t)</returns>
            <since>5.0</since>
        </member>
        <member name="M:Rhino.Geometry.Surface.IsAtSeam(System.Double,System.Double)">
            <summary>
            Tests if a surface parameter value is at a seam.
            </summary>
            <param name="u">Surface u parameter to test.</param>
            <param name="v">Surface v parameter to test.</param>
            <returns>
            0 if not a seam,
            1 if u == Domain(0)[i] and srf(u, v) == srf(Domain(0)[1-i], v)
            2 if v == Domain(1)[i] and srf(u, v) == srf(u, Domain(1)[1-i])
            3 if 1 and 2 are true.
            </returns>
            <since>5.0</since>
        </member>
        <member name="M:Rhino.Geometry.Surface.IsContinuous(Rhino.Geometry.Continuity,System.Double,System.Double)">
            <summary>
            Tests continuity at a surface parameter value.
            </summary>
            <param name="continuityType">The continuity type to sample.</param>
            <param name="u">Surface u parameter to test.</param>
            <param name="v">Surface v parameter to test.</param>
            <returns>true if the surface has at least the specified continuity at the (u,v) parameter.</returns>
            <since>5.0</since>
        </member>
        <member name="M:Rhino.Geometry.Surface.GetNextDiscontinuity(System.Int32,Rhino.Geometry.Continuity,System.Double,System.Double,System.Double@)">
            <summary>
            Searches for a derivative, tangent, or curvature discontinuity.
            </summary>
            <param name="direction">
            If 0, then "u" parameter is checked. If 1, then the "v" parameter is checked.
            </param>
            <param name="continuityType">The desired continuity.</param>
            <param name="t0">
            Search begins at t0. If there is a discontinuity at t0, it will be ignored. 
            This makes it possible to repeatedly call GetNextDiscontinuity and step through the discontinuities.
            </param>
            <param name="t1">
            (t0 != t1) If there is a discontinuity at t1 is will be ignored unless c is a locus discontinuity
            type and t1 is at the start or end of the curve.
            </param>
            <param name="t">
            if a discontinuity is found, then t reports the parameter at the discontinuity.
            </param>
            <returns>
            Parametric continuity tests c = (C0_continuous, ..., G2_continuous):
            TRUE if a parametric discontinuity was found strictly between t0 and t1.
            Note well that all curves are parametrically continuous at the ends of their domains.
            
            Locus continuity tests c = (C0_locus_continuous, ...,G2_locus_continuous):
            TRUE if a locus discontinuity was found strictly between t0 and t1 or at t1 is the
            at the end of a curve. Note well that all open curves (IsClosed()=false) are locus
            discontinuous at the ends of their domains.  All closed curves (IsClosed()=true) are
            at least C0_locus_continuous at the ends of their domains.
            </returns>
            <since>5.0</since>
        </member>
        <member name="M:Rhino.Geometry.Surface.GetNextDiscontinuity(System.Int32,Rhino.Geometry.Continuity,System.Double,System.Double,System.Double,System.Double,System.Double@)">
            <summary>
            Searches for a derivative, tangent, or curvature discontinuity.
            </summary>
            <param name="direction">
            If 0, then "u" parameter is checked. If 1, then the "v" parameter is checked.
            </param>
            <param name="continuityType">The desired continuity.</param>
            <param name="t0">
            Search begins at t0. If there is a discontinuity at t0, it will be ignored. 
            This makes it possible to repeatedly call GetNextDiscontinuity and step through the discontinuities.
            </param>
            <param name="t1">
            (t0 != t1) If there is a discontinuity at t1 is will be ignored unless c is a locus discontinuity
            type and t1 is at the start or end of the curve.
            </param>
            <param name="cosAngleTolerance">
            default = cos(1 degree) Used only  when continuityType is G1_continuous or G2_continuous.
            If the cosine of the angle between two tangent vectors is &lt;= cos_angle_tolerance, then
            a G1 discontinuity is reported.
            </param>
            <param name="curvatureTolerance">
            (default = ON_SQRT_EPSILON) Used only when continuityType is G2_continuous. If K0 and K1
            are curvatures evaluated from above and below and |K0 - K1| &gt; curvature_tolerance, then
            a curvature discontinuity is reported.
            </param>
            <param name="t">
            if a discontinuity is found, then t reports the parameter at the discontinuity.
            </param>
            <returns>
            Parametric continuity tests c = (C0_continuous, ..., G2_continuous):
            TRUE if a parametric discontinuity was found strictly between t0 and t1.
            Note well that all curves are parametrically continuous at the ends of their domains.
            
            Locus continuity tests c = (C0_locus_continuous, ...,G2_locus_continuous):
            TRUE if a locus discontinuity was found strictly between t0 and t1 or at t1 is the
            at the end of a curve. Note well that all open curves (IsClosed()=false) are locus
            discontinuous at the ends of their domains.  All closed curves (IsClosed()=true) are
            at least C0_locus_continuous at the ends of their domains.
            </returns>
            <since>7.4</since>
        </member>
        <member name="M:Rhino.Geometry.Surface.Trim(Rhino.Geometry.Interval,Rhino.Geometry.Interval)">
            <summary>
            Constructs a sub-surface that covers the specified UV trimming domain.
            </summary>
            <param name="u">Domain of surface along U direction to include in the subsurface.</param>
            <param name="v">Domain of surface along V direction to include in the subsurface.</param>
            <returns>SubSurface on success, null on failure.</returns>
            <since>5.0</since>
        </member>
        <member name="M:Rhino.Geometry.Surface.Evaluate(System.Double,System.Double,System.Int32,Rhino.Geometry.Point3d@,Rhino.Geometry.Vector3d[]@)">
            <summary>
            Evaluates a surface mathematically.
            </summary>
            <param name="u">A U parameter.</param>
            <param name="v">A V parameter.</param>
            <param name="numberDerivatives">The number of derivatives.</param>
            <param name="point">A point. This out parameter will be assigned during this call.</param>
            <param name="derivatives">A vector array. This out parameter will be assigned during this call. This can be null.</param>
            <returns>true if the operation succeeded; false otherwise.</returns>
            <remarks>
            The partial derivatives will be in the order {Su, Sv} for numberDerivatives = 1, 
            {Su, Sv, Suu, Suv, Svv} for 2, {Su, Sv, Suu, Suv, Svv, Suuu, Suuv, Suvv, Svvv} for 3, 
            and similar for higher counts.
            </remarks>
            <since>5.0</since>
        </member>
        <member name="M:Rhino.Geometry.Surface.IsoCurve(System.Int32,System.Double)">
            <summary>Gets isoparametric curve.</summary>
            <param name="direction">
            0 first parameter varies and second parameter is constant
            e.g., point on IsoCurve(0,c) at t is srf(t,c)
            This is a horizontal line from left to right
            
            1 first parameter is constant and second parameter varies
            e.g., point on IsoCurve(1,c) at t is srf(c,t
            This is a vertical line from bottom to top.
            </param>
            <param name="constantParameter">The parameter that was constant on the original surface.</param>
            <returns>An isoparametric curve or null on error.</returns>
            <remarks>
            In this function "direction" indicates which direction the resulting curve runs.
            0: horizontal, 1: vertical
            In the other Surface functions that take a "direction" argument,
            "direction" indicates if "constantParameter" is a "u" or "v" parameter.
            </remarks>
            <example>
            <code source='examples\vbnet\ex_extractisocurve.vb' lang='vbnet'/>
            <code source='examples\cs\ex_extractisocurve.cs' lang='cs'/>
            <code source='examples\py\ex_extractisocurve.py' lang='py'/>
            </example>
            <since>5.0</since>
        </member>
        <member name="M:Rhino.Geometry.Surface.Split(System.Int32,System.Double)">
            <summary>
            Splits (divides) the surface into two parts at the specified parameter
            </summary>
            <param name="direction">
            0 = The surface is split vertically. The "west" side is returned as the first
            surface in the array and the "east" side is returned as the second surface in
            the array.
            1 = The surface is split horizontally. The "south" side is returned as the first surface in the array and the "north"
            side is returned as the second surface in the array
            </param>
            <param name="parameter">
            value of constant parameter in interval returned by Domain(direction)
            </param>
            <returns>Array of two surfaces on success</returns>
            <since>5.0</since>
        </member>
        <member name="M:Rhino.Geometry.Surface.Extend(System.Int32,Rhino.Geometry.Interval)">
            <summary>
            Analytically extends the surface to include the interval.
            </summary>
            <param name="direction">
            If 0, Surface.Domain(0) will include the interval. (the first surface parameter).
            If 1, Surface.Domain(1) will include the interval. (the second surface parameter).
            </param>
            <param name="interval">
            If the interval is not included in surface domain, the surface will be extended so that its domain includes the interval.
            Note, this method will fail if the surface is closed in the specified direction. 
            </param>
            <returns>True if successful, false otherwise.</returns>
            <since>7.4</since>
        </member>
        <member name="M:Rhino.Geometry.Surface.ToBrep">
            <summary>
            Converts the surface into a Brep.
            </summary>
            <returns>A Brep with a similar shape like this surface or null.</returns>
            <since>5.0</since>
        </member>
        <member name="M:Rhino.Geometry.Surface.HasNurbsForm">
            <summary>
            Is there a NURBS surface representation of this surface.
            </summary>
            <returns>
            0 unable to create NURBS representation with desired accuracy.
            1 success - NURBS parameterization matches the surface's
            2 success - NURBS point locus matches the surface's and the
            domain of the NURBS surface is correct. However, This surface's
            parameterization and the NURBS surface parameterization may not
            match.  This situation happens when getting NURBS representations
            of surfaces that have a transcendental parameterization like spheres,
            cylinders, and cones.
            </returns>
            <since>5.0</since>
        </member>
        <member name="M:Rhino.Geometry.Surface.ToNurbsSurface">
            <summary>
            Gets a NURBS surface representation of this surface. Default 
            tolerance of 0.0 is used. 
            </summary>
            <returns>NurbsSurface on success, null on failure.</returns>
            <since>5.0</since>
        </member>
        <member name="M:Rhino.Geometry.Surface.ToNurbsSurface(System.Double,System.Int32@)">
            <summary>
            Gets a NURBS surface representation of this surface.
            </summary>
            <param name="tolerance">tolerance to use when creating NURBS representation.</param>
            <param name="accuracy">
            <para>
            0 = unable to create NURBS representation with desired accuracy.
            </para>
            <para>
            1 = success - returned NURBS parameterization matches the surface's
            to the desired accuracy.
            </para>
            <para>
            2 = success - returned NURBS point locus matches the surface's to the
            desired accuracy and the domain of the NURBS surface is correct. 
            However, this surface's parameterization and the NURBS surface
            parameterization may not match to the desired accuracy. This 
            situation happens when getting NURBS representations of surfaces
            that have a transcendental parameterization like spheres, cylinders,
            and cones.
            </para>
            </param>
            <returns>NurbsSurface on success, null on failure.</returns>
            <since>5.0</since>
        </member>
        <member name="M:Rhino.Geometry.Surface.IsPlanar">
            <summary>
            Tests a surface to see if it is planar to zero tolerance.
            </summary>
            <returns>
            true if the surface is planar (flat) to within RhinoMath.ZeroTolerance units (1e-12).
            </returns>
            <example>
            <code source='examples\vbnet\ex_issurfaceinplane.vb' lang='vbnet'/>
            <code source='examples\cs\ex_issurfaceinplane.cs' lang='cs'/>
            <code source='examples\py\ex_issurfaceinplane.py' lang='py'/>
            </example>
            <since>5.0</since>
        </member>
        <member name="M:Rhino.Geometry.Surface.IsPlanar(System.Double)">
            <summary>
            Tests a surface to see if it is planar to a given tolerance.
            </summary>
            <param name="tolerance">tolerance to use when checking.</param>
            <returns>
            true if there is a plane such that the maximum distance from
            the surface to the plane is &lt;= tolerance.
            </returns>
            <since>5.0</since>
        </member>
        <member name="M:Rhino.Geometry.Surface.TryGetPlane(Rhino.Geometry.Plane@)">
            <summary>Tests a surface for planarity and return the plane.</summary>
            <param name="plane">On success, the plane parameters are filled in.</param>
            <returns>
            true if there is a plane such that the maximum distance from the surface to the plane is &lt;= RhinoMath.ZeroTolerance.
            </returns>
            <since>5.0</since>
        </member>
        <member name="M:Rhino.Geometry.Surface.TryGetPlane(Rhino.Geometry.Plane@,System.Double)">
            <summary>Tests a surface for planarity and return the plane.</summary>
            <param name="plane">On success, the plane parameters are filled in.</param>
            <param name="tolerance">tolerance to use when checking.</param>
            <returns>
            true if there is a plane such that the maximum distance from the surface to the plane is &lt;= tolerance.
            </returns>
            <example>
            <code source='examples\vbnet\ex_isbrepbox.vb' lang='vbnet'/>
            <code source='examples\cs\ex_isbrepbox.cs' lang='cs'/>
            <code source='examples\py\ex_isbrepbox.py' lang='py'/>
            </example>
            <since>5.0</since>
        </member>
        <member name="M:Rhino.Geometry.Surface.IsSphere">
            <summary>
            Determines if the surface is a portion of a sphere within RhinoMath.ZeroTolerance.
            </summary>
            <returns>true if the surface is a portion of a sphere.</returns>
            <since>5.0</since>
        </member>
        <member name="M:Rhino.Geometry.Surface.IsSphere(System.Double)">
            <summary>
            Determines if the surface is a portion of a sphere within a given tolerance.
            </summary>
            <param name="tolerance">tolerance to use when checking.</param>
            <returns>true if the surface is a portion of a sphere.</returns>
            <since>5.0</since>
        </member>
        <member name="M:Rhino.Geometry.Surface.TryGetSphere(Rhino.Geometry.Sphere@)">
            <summary>Test a surface to see if it is a portion of a sphere and return the sphere.</summary>
            <param name="sphere">On success, the sphere parameters are filled in.</param>
            <returns>true if the surface is a portion of a sphere.</returns>
            <since>5.0</since>
        </member>
        <member name="M:Rhino.Geometry.Surface.TryGetSphere(Rhino.Geometry.Sphere@,System.Double)">
            <summary>Test a surface to see if it is a portion of a sphere and return the sphere.</summary>
            <param name="sphere">On success, the sphere parameters are filled in.</param>
            <param name="tolerance">tolerance to use when checking.</param>
            <returns>true if the surface is a portion of a sphere.</returns>
            <since>5.0</since>
        </member>
        <member name="M:Rhino.Geometry.Surface.IsCylinder">
            <summary>
            Determines if the surface is a portion of a cylinder within RhinoMath.ZeroTolerance.
            </summary>
            <returns>true if the surface is a portion of a cylinder.</returns>
            <since>5.0</since>
        </member>
        <member name="M:Rhino.Geometry.Surface.IsCylinder(System.Double)">
            <summary>Determines if the surface is a portion of a cylinder within a given tolerance.</summary>
            <param name="tolerance">tolerance to use when checking.</param>
            <returns>true if the surface is a portion of a cylinder.</returns>
            <since>5.0</since>
        </member>
        <member name="M:Rhino.Geometry.Surface.TryGetCylinder(Rhino.Geometry.Cylinder@)">
            <summary>Tests a surface to see if it is a portion of a cylinder within RhinoMath.ZeroTolerance and return the cylinder.</summary>
            <param name="cylinder">On success, the cylinder parameters are filled in.</param>
            <returns>true if the surface is a portion of a cylinder.</returns>
            <remarks>
            If successful, an infinite cylinder is returned. When a surface has a cylindrical shape, 
            even if its ends are not circles on the cylinder, it returns the axis and radius.
            You can detect infinite cylinders using Cylinder.IsFinite.
            </remarks>
            <since>5.0</since>
        </member>
        <member name="M:Rhino.Geometry.Surface.TryGetCylinder(Rhino.Geometry.Cylinder@,System.Double)">
            <summary>Tests a surface to see if it is a portion of a cylinder and return the infinite cylinder.</summary>
            <param name="cylinder">On success, the cylinder parameters are filled in.</param>
            <param name="tolerance">tolerance to use when checking.</param>
            <returns>true if the surface is a portion of a cylinder.</returns>
            <remarks>
            If successful, an infinite cylinder is returned. When a surface has a cylindrical shape, 
            even if its ends are not circles on the cylinder, it returns the axis and radius.
            You can detect infinite cylinders using Cylinder.IsFinite.
            </remarks>
            <since>5.0</since>
        </member>
        <member name="M:Rhino.Geometry.Surface.TryGetFiniteCylinder(Rhino.Geometry.Cylinder@,System.Double)">
            <summary>Tests a surface with the assumption that it might be a right circular cylinder and returns this geometry.</summary>
            <param name="cylinder">On success, the cylinder parameters are filled in.</param>
            <param name="tolerance">tolerance to use when checking.</param>
            <returns>true if the surface is a portion of a cylinder.</returns>
            <remarks>
            If successful, a finite cylinder is returned.
            </remarks>
            <since>6.0</since>
        </member>
        <member name="M:Rhino.Geometry.Surface.IsCone">
            <summary>
            Determines if the surface is a portion of a cone within RhinoMath.ZeroTolerance.
            </summary>
            <returns>true if the surface is a portion of a cone.</returns>
            <since>5.0</since>
        </member>
        <member name="M:Rhino.Geometry.Surface.IsCone(System.Double)">
            <summary>Determines if the surface is a portion of a cone within a given tolerance.</summary>
            <param name="tolerance">tolerance to use when checking.</param>
            <returns>true if the surface is a portion of a cone.</returns>
            <since>5.0</since>
        </member>
        <member name="M:Rhino.Geometry.Surface.TryGetCone(Rhino.Geometry.Cone@)">
            <summary>Tests a surface to see if it is a portion of a cone within RhinoMath.ZeroTolerance and return the cone.</summary>
            <param name="cone">On success, the cone parameters are filled in.</param>
            <returns>true if the surface is a portion of a cone.</returns>
            <since>5.0</since>
        </member>
        <member name="M:Rhino.Geometry.Surface.TryGetCone(Rhino.Geometry.Cone@,System.Double)">
            <summary>Tests a surface to see if it is a portion of a cone and returns the cone.</summary>
            <param name="cone">On success, the cone parameters are filled in.</param>
            <param name="tolerance">tolerance to use when checking.</param>
            <returns>true if the surface is a portion of a cone.</returns>
            <since>5.0</since>
        </member>
        <member name="M:Rhino.Geometry.Surface.IsTorus">
            <summary>Determines if the surface is a portion of a torus within RhinoMath.ZeroTolerance.</summary>
            <returns>true if the surface is a portion of a torus.</returns>
            <since>5.0</since>
        </member>
        <member name="M:Rhino.Geometry.Surface.IsTorus(System.Double)">
            <summary>Determines if the surface is a portion of a torus within a given tolerance.</summary>
            <param name="tolerance">tolerance to use when checking.</param>
            <returns>true if the surface is a portion of a torus.</returns>
            <since>5.0</since>
        </member>
        <member name="M:Rhino.Geometry.Surface.TryGetTorus(Rhino.Geometry.Torus@)">
            <summary>Tests a surface to see if it is a portion of a torus within RhinoMath.ZeroTolerance and returns the torus.</summary>
            <param name="torus">On success, the torus parameters are filled in.</param>
            <returns>true if the surface is a portion of a torus.</returns>
            <since>5.0</since>
        </member>
        <member name="M:Rhino.Geometry.Surface.TryGetTorus(Rhino.Geometry.Torus@,System.Double)">
            <summary>Tests a surface to see if it is a portion of a torus and returns the torus.</summary>
            <param name="torus">On success, the torus parameters are filled in.</param>
            <param name="tolerance">tolerance to use when checking.</param>
            <returns>true if the surface is a portion of a torus.</returns>
            <since>5.0</since>
        </member>
        <member name="M:Rhino.Geometry.Surface.GetSurfaceParameterFromNurbsFormParameter(System.Double,System.Double,System.Double@,System.Double@)">
            <summary>
            Translates a parameter from a value on the surface returned by <see cref="M:Rhino.Geometry.Surface.ToNurbsSurface"/> to the current surface.
            </summary>
            <param name="nurbsS">The parameter in the S, or sometimes U, direction of the NURBS form surface.</param>
            <param name="nurbsT">The parameter in the T, or sometimes V, direction of the NURBS form surface.</param>
            <param name="surfaceS">S on this surface.</param>
            <param name="surfaceT">T o n this surface.</param>
            <returns>True if the operation succeeded; otherwise, false.</returns>
            <since>6.0</since>
        </member>
        <member name="M:Rhino.Geometry.Surface.GetNurbsFormParameterFromSurfaceParameter(System.Double,System.Double,System.Double@,System.Double@)">
            <summary>
            Translates a parameter from the current surface to the parameter space of the surface returned by <see cref="M:Rhino.Geometry.Surface.ToNurbsSurface"/>.
            </summary>
            <param name="surfaceS">The parameter in the S, or sometimes U, direction, of this surface.</param>
            <param name="surfaceT">The parameter in the T, or sometimes V, direction of this surface.</param>
            <param name="nurbsS">S on the NURBS form.</param>
            <param name="nurbsT">T on the NURBS form.</param>
            <returns>True if the operation succeeded; otherwise, false.</returns>
            <since>6.0</since>
        </member>
        <member name="T:Rhino.Geometry.SurfaceProxy">
            <summary>
            Provides a base class to brep faces and other surface proxies.
            </summary>
        </member>
        <member name="M:Rhino.Geometry.SurfaceProxy.#ctor">
            <summary>
            Protected constructor for internal use.
            </summary>
        </member>
        <member name="T:Rhino.Geometry.TextRunType">
            <since>6.0</since>
        </member>
        <member name="M:Rhino.Geometry.TextEntity.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Rhino.Geometry.TextEntity"/> class.
            </summary>
            <example>
            <code source='examples\vbnet\ex_textjustify.vb' lang='vbnet'/>
            <code source='examples\cs\ex_textjustify.cs' lang='cs'/>
            <code source='examples\py\ex_textjustify.py' lang='py'/>
            </example>
            <since>5.0</since>
        </member>
        <member name="M:Rhino.Geometry.TextEntity.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Protected constructor used in serialization
            </summary>
            <param name="info">Serialization data</param>
            <param name="context">Serialization stream</param>
        </member>
        <member name="M:Rhino.Geometry.TextEntity.Create(System.String,Rhino.Geometry.Plane,Rhino.DocObjects.DimensionStyle,System.Boolean,System.Double,System.Double)">
            <summary> Create Text geometry or null if input is invalid </summary>
            <param name="text"></param>
            <param name="plane"></param>
            <param name="style"></param>
            <param name="wrapped"></param>
            <param name="rectWidth"></param>
            <param name="rotationRadians"></param>
            <returns></returns>
            <since>6.0</since>
        </member>
        <member name="M:Rhino.Geometry.TextEntity.CreateWithRichText(System.String,Rhino.Geometry.Plane,Rhino.DocObjects.DimensionStyle,System.Boolean,System.Double,System.Double)">
            <summary> Create RichText geometry or null if input is invalid </summary>
            <param name="richTextString"></param>
            <param name="plane"></param>
            <param name="style"></param>
            <param name="wrapped"></param>
            <param name="rectWidth"></param>
            <param name="rotationRadians"></param>
            <returns></returns>
            <since>6.0</since>
        </member>
        <member name="P:Rhino.Geometry.TextEntity.Justification">
            <summary>
            Gets or sets the justification of text in relation to its base point.
            </summary>
            <example>
            <code source='examples\vbnet\ex_textjustify.vb' lang='vbnet'/>
            <code source='examples\cs\ex_textjustify.cs' lang='cs'/>
            <code source='examples\py\ex_textjustify.py' lang='py'/>
            </example>
            <since>5.0</since>
        </member>
        <member name="P:Rhino.Geometry.TextEntity.TextHorizontalAlignment">
            <since>6.0</since>
        </member>
        <member name="P:Rhino.Geometry.TextEntity.TextVerticalAlignment">
            <since>6.0</since>
        </member>
        <member name="P:Rhino.Geometry.TextEntity.TextOrientation">
            <since>6.0</since>
        </member>
        <member name="M:Rhino.Geometry.TextEntity.Transform(Rhino.Geometry.Transform,Rhino.DocObjects.DimensionStyle)">
            <summary>
            Transform the object by a 4x4 transform matrix and change text height
            override to accommodate scaling in the transform if necessary
            </summary>
            <param name="transform">
            An Transform with the transformation information
            </param>
            <param name="style">
            </param>
            <returns>
            Returns true on success otherwise returns false.
            </returns>
            <since>6.0</since>
        </member>
        <member name="M:Rhino.Geometry.TextEntity.GetTextTransform(System.Double,Rhino.DocObjects.DimensionStyle)">
            <summary> Get the transform for this text object's text geometry </summary>
            <param name="textscale"></param>
            <param name="dimstyle"></param>
            <since>6.0</since>
        </member>
        <member name="T:Rhino.Geometry.Torus">
            <summary>
            Represents the value of a plane and two radii in a torus that is oriented in three-dimensional space.
            </summary>
        </member>
        <member name="P:Rhino.Geometry.Torus.Unset">
            <summary>
            Gets an invalid Torus.
            </summary>
            <since>5.0</since>
        </member>
        <member name="M:Rhino.Geometry.Torus.#ctor(Rhino.Geometry.Plane,System.Double,System.Double)">
            <summary>
            Initializes a new Torus from base pane and two radii.
            </summary>
            <param name="basePlane">Base plane for major radius circle.</param>
            <param name="majorRadius">Radius of circle that lies at the heart of the torus.</param>
            <param name="minorRadius">Radius of torus section.</param>
            <example>
            <code source='examples\vbnet\ex_addtorus.vb' lang='vbnet'/>
            <code source='examples\cs\ex_addtorus.cs' lang='cs'/>
            <code source='examples\py\ex_addtorus.py' lang='py'/>
            </example>
            <since>5.0</since>
        </member>
        <member name="P:Rhino.Geometry.Torus.IsValid">
            <summary>
            Gets a value indicating whether this torus is valid.
            </summary>
            <since>5.0</since>
        </member>
        <member name="P:Rhino.Geometry.Torus.Plane">
            <summary>
            Gets or sets the plane for the torus large circle.
            </summary>
            <since>5.0</since>
        </member>
        <member name="P:Rhino.Geometry.Torus.MajorRadius">
            <summary>
            Gets or sets the radius of the circle that lies at the heart of the torus.
            </summary>
            <since>5.0</since>
        </member>
        <member name="P:Rhino.Geometry.Torus.MinorRadius">
            <summary>
            Gets or sets the radius of the torus section.
            </summary>
            <since>5.0</since>
        </member>
        <member name="M:Rhino.Geometry.Torus.ToNurbsSurface">
            <summary>
            Converts this torus to its NURBS surface representation. 
            This is synonymous with calling <see cref="M:Rhino.Geometry.NurbsSurface.CreateFromTorus(Rhino.Geometry.Torus)"/>.
            </summary>
            <returns>A NURBS surface representation of this torus, or null on error.</returns>
            <since>5.0</since>
        </member>
        <member name="M:Rhino.Geometry.Torus.ToRevSurface">
            <summary>
            Converts this torus to a surface of revolution representation. 
            This is synonymous with calling <see cref="M:Rhino.Geometry.RevSurface.CreateFromTorus(Rhino.Geometry.Torus)"/>.
            </summary>
            <returns>A surface of revolution representation of this torus, or null on error.</returns>
            <example>
            <code source='examples\vbnet\ex_addtorus.vb' lang='vbnet'/>
            <code source='examples\cs\ex_addtorus.cs' lang='cs'/>
            <code source='examples\py\ex_addtorus.py' lang='py'/>
            </example>
            <since>5.0</since>
        </member>
        <member name="M:Rhino.Geometry.Torus.ToBrep">
            <summary>
            Converts this torus to a Brep. 
            This is synonymous with calling <see cref="M:Rhino.Geometry.Brep.CreateFromTorus(Rhino.Geometry.Torus)"/>.
            </summary>
            <returns>A Brep representation of this torus, or null on error.</returns>
            <since>8.1</since>
        </member>
        <member name="M:Rhino.Geometry.Torus.EpsilonEquals(Rhino.Geometry.Torus,System.Double)">
            <summary>
            Check that all values in other are within epsilon of the values in this
            </summary>
            <param name="other"></param>
            <param name="epsilon"></param>
            <returns></returns>
            <since>5.4</since>
        </member>
        <member name="T:Rhino.Geometry.Transform">
            <summary>
            Represents the values in a 4x4 transform matrix.
            <para>This is parallel to C++ ON_Xform.</para>
            </summary>
        </member>
        <member name="M:Rhino.Geometry.Transform.#ctor(System.Double)">
            <summary>
            Initializes a new transform matrix with a specified value along the diagonal.
            </summary>
            <param name="diagonalValue">Value to assign to all diagonal cells except M33 which is set to 1.0.</param>
            <since>5.0</since>
        </member>
        <member name="M:Rhino.Geometry.Transform.#ctor(Rhino.Geometry.Transform)">
            <summary>
            Initializes a new transform matrix with a specified value.
            </summary>
            <param name="value">Value to assign to all cells.</param>
            <since>6.0</since>
        </member>
        <member name="P:Rhino.Geometry.Transform.Identity">
            <summary>
            Gets a new identity transform matrix. An identity matrix defines no transformation.
            </summary>
            <since>5.0</since>
        </member>
        <member name="P:Rhino.Geometry.Transform.ZeroTransformation">
            <summary>
            ZeroTransformation diagonal = (0,0,0,1)
            </summary>
            <since>6.1</since>
        </member>
        <member name="P:Rhino.Geometry.Transform.Unset">
            <summary>
            Gets an XForm filled with RhinoMath.UnsetValue.
            </summary>
            <since>5.0</since>
        </member>
        <member name="M:Rhino.Geometry.Transform.RotationZYX(System.Double,System.Double,System.Double)">
            <summary>
            Create rotation transformation From Tait-Byran angles (also loosely known as Euler angles).
            </summary>
            <param name="yaw">Angle, in radians, to rotate about the Z axis.</param>
            <param name="pitch">Angle, in radians, to rotate about the Y axis.</param>
            <param name="roll">Angle, in radians, to rotate about the X axis.</param>
            <returns>A transform matrix from Tait-Byran angles.</returns>
            <remarks>
            RotationZYX(yaw, pitch, roll) = R_z(yaw) * R_y(pitch) * R_x(roll)
            where R_*(angle) is rotation of angle radians about the corresponding world coordinate axis.
            </remarks>
            <since>6.11</since>
        </member>
        <member name="M:Rhino.Geometry.Transform.RotationZYZ(System.Double,System.Double,System.Double)">
            <summary>
            Create rotation transformation From Euler angles.
            </summary>
            <param name="alpha">Angle, in radians, to rotate about the Z axis.</param>
            <param name="beta">Angle, in radians, to rotate about the Y axis.</param>
            <param name="gamma">Angle, in radians, to rotate about the X axis.</param>
            <returns>A transform matrix from Euler angles.</returns>
            <remarks>
            RotationZYZ(alpha, beta, gamma) = R_z(alpha) * R_y(beta) * R_z(gamma)
            where R_*(angle) is rotation of angle radians about the corresponding *-world coordinate axis.
            Note, alpha and gamma are in the range (-pi, pi] while beta in the range [0, pi]
            </remarks>
            <since>6.11</since>
        </member>
        <member name="M:Rhino.Geometry.Transform.Translation(Rhino.Geometry.Vector3d)">
            <summary>
            Constructs a new translation (move) transformation. 
            </summary>
            <param name="motion">Translation (motion) vector.</param>
            <returns>A transform matrix which moves geometry along the motion vector.</returns>
            <example>
            <code source='examples\vbnet\ex_constrainedcopy.vb' lang='vbnet'/>
            <code source='examples\cs\ex_constrainedcopy.cs' lang='cs'/>
            <code source='examples\py\ex_constrainedcopy.py' lang='py'/>
            </example>
            <since>5.0</since>
        </member>
        <member name="M:Rhino.Geometry.Transform.Translation(System.Double,System.Double,System.Double)">
            <summary>
            Constructs a new translation (move) transformation. 
            Right column is (dx, dy, dz, 1.0).
            </summary>
            <param name="dx">Distance to translate (move) geometry along the world X axis.</param>
            <param name="dy">Distance to translate (move) geometry along the world Y axis.</param>
            <param name="dz">Distance to translate (move) geometry along the world Z axis.</param>
            <returns>A transform matrix which moves geometry with the specified distances.</returns>
            <example>
            <code source='examples\vbnet\ex_transformbrep.vb' lang='vbnet'/>
            <code source='examples\cs\ex_transformbrep.cs' lang='cs'/>
            <code source='examples\py\ex_transformbrep.py' lang='py'/>
            </example>
            <since>5.0</since>
        </member>
        <member name="M:Rhino.Geometry.Transform.Diagonal(Rhino.Geometry.Vector3d)">
            <summary>
            Constructs a new transformation with diagonal (d0,d1,d2,1.0).
            </summary>
            <param name="diagonal">The diagonal values.</param>
            <returns>A transformation with diagonal (d0,d1,d2,1.0).</returns>
            <since>6.12</since>
        </member>
        <member name="M:Rhino.Geometry.Transform.Diagonal(System.Double,System.Double,System.Double)">
            <summary>
            Constructs a new transformation with diagonal (d0,d1,d2,1.0).
            </summary>
            <param name="d0">Transform.M00 value.</param>
            <param name="d1">Transform.M11 value.</param>
            <param name="d2">Transform.M22 value.</param>
            <returns>A transformation with diagonal (d0,d1,d2,1.0).</returns>
            <since>6.12</since>
        </member>
        <member name="M:Rhino.Geometry.Transform.Scale(Rhino.Geometry.Point3d,System.Double)">
            <summary>
            Constructs a new uniform scaling transformation with a specified scaling anchor point.
            </summary>
            <param name="anchor">Defines the anchor point of the scaling operation.</param>
            <param name="scaleFactor">Scaling factor in all directions.</param>
            <returns>A transform matrix which scales geometry uniformly around the anchor point.</returns>
            <since>5.0</since>
        </member>
        <member name="M:Rhino.Geometry.Transform.Scale(Rhino.Geometry.Plane,System.Double,System.Double,System.Double)">
            <summary>
            Constructs a new non-uniform scaling transformation with a specified scaling anchor point.
            </summary>
            <param name="plane">Defines the center and orientation of the scaling operation.</param>
            <param name="xScaleFactor">Scaling factor along the anchor plane X-Axis direction.</param>
            <param name="yScaleFactor">Scaling factor along the anchor plane Y-Axis direction.</param>
            <param name="zScaleFactor">Scaling factor along the anchor plane Z-Axis direction.</param>
            <returns>A transformation matrix which scales geometry non-uniformly.</returns>
            <since>5.0</since>
        </member>
        <member name="M:Rhino.Geometry.Transform.Rotation(System.Double,System.Double,Rhino.Geometry.Vector3d,Rhino.Geometry.Point3d)">
            <summary>
            Constructs a new rotation transformation with specified angle, rotation center and rotation axis.
            </summary>
            <param name="sinAngle">Sine of the rotation angle.</param>
            <param name="cosAngle">Cosine of the rotation angle.</param>
            <param name="rotationAxis">3D unit axis of rotation.</param>
            <param name="rotationCenter">3D center of rotation.</param>
            <returns>A rotation transformation matrix.</returns>
            <since>5.0</since>
        </member>
        <member name="M:Rhino.Geometry.Transform.Rotation(System.Double,Rhino.Geometry.Point3d)">
            <summary>
            Constructs a new rotation transformation with specified angle and rotation center. The axis of rotation is <see cref="P:Rhino.Geometry.Vector3d.ZAxis"/>.
            </summary>
            <param name="angleRadians">Rotation angle in radians.</param>
            <param name="rotationCenter">3D center of rotation.</param>
            <returns>A rotation transformation matrix.</returns>
            <since>5.0</since>
        </member>
        <member name="M:Rhino.Geometry.Transform.Rotation(System.Double,Rhino.Geometry.Vector3d,Rhino.Geometry.Point3d)">
            <summary>
            Constructs a new rotation transformation with specified angle, rotation center and rotation axis.
            </summary>
            <param name="angleRadians">Rotation angle in radians.</param>
            <param name="rotationAxis">3D unit axis of rotation.</param>
            <param name="rotationCenter">3D center of rotation.</param>
            <returns>A rotation transformation matrix.</returns>
            <since>5.0</since>
        </member>
        <member name="M:Rhino.Geometry.Transform.Rotation(Rhino.Geometry.Vector3d,Rhino.Geometry.Vector3d,Rhino.Geometry.Point3d)">
            <summary>
            Constructs a new rotation transformation with start and end directions and rotation center.
            </summary>
            <param name="startDirection">A start direction.</param>
            <param name="endDirection">An end direction.</param>
            <param name="rotationCenter">3D center of rotation.</param>
            <returns>A rotation transformation matrix.</returns>
            <since>5.0</since>
        </member>
        <member name="M:Rhino.Geometry.Transform.Rotation(Rhino.Geometry.Vector3d,Rhino.Geometry.Vector3d,Rhino.Geometry.Vector3d,Rhino.Geometry.Vector3d,Rhino.Geometry.Vector3d,Rhino.Geometry.Vector3d)">
            <summary>
            Constructs a transformation that maps X0 to X1, Y0 to Y1, Z0 to Z1.
            The frames should be right hand orthonormal frames (unit vectors with Z = X x Y).
            The resulting rotation fixes the origin (0,0,0), maps initial X to final X, 
            initial Y to final Y, and initial Z to final Z.
            </summary>
            <param name="x0">Initial frame X.</param>
            <param name="y0">Initial frame Y.</param>
            <param name="z0">Initial frame Z.</param>
            <param name="x1">Final frame X.</param>
            <param name="y1">Final frame Y.</param>
            <param name="z1">Final frame Z.</param>
            <returns>A rotation transformation matrix.</returns>
            <since>5.0</since>
        </member>
        <member name="M:Rhino.Geometry.Transform.Mirror(Rhino.Geometry.Point3d,Rhino.Geometry.Vector3d)">
            <summary>
            Create mirror transformation matrix
            The mirror transform maps a point Q to 
            Q - (2*(Q-P)oN)*N, where
            P = pointOnMirrorPlane and N = normalToMirrorPlane.
            </summary>
            <param name="pointOnMirrorPlane">Point on the mirror plane.</param>
            <param name="normalToMirrorPlane">Normal vector to the mirror plane.</param>
            <returns>A transformation matrix which mirrors geometry in a specified plane.</returns>
            <since>5.0</since>
        </member>
        <member name="M:Rhino.Geometry.Transform.Mirror(Rhino.Geometry.Plane)">
            <summary>
            Constructs a new Mirror transformation.
            </summary>
            <param name="mirrorPlane">Plane that defines the mirror orientation and position.</param>
            <returns>A transformation matrix which mirrors geometry in a specified plane.</returns>
            <since>5.0</since>
        </member>
        <member name="M:Rhino.Geometry.Transform.TextureMapping(Rhino.Geometry.Vector3d,Rhino.Geometry.Vector3d,Rhino.Geometry.Vector3d)">
            <summary>
            Construct a UVW Transform from components.
            </summary>
            <param name="offset"></param>
            <param name="repeat"></param>
            <param name="rotation"></param>
            <returns></returns>
            <since>8.0</since>
        </member>
        <member name="M:Rhino.Geometry.Transform.ChangeBasis(Rhino.Geometry.Plane,Rhino.Geometry.Plane)">
            <summary>
            Computes a change of basis transformation. A basis change is essentially a remapping 
            of geometry from one coordinate system to another.
            </summary>
            <param name="plane0">Coordinate system in which the geometry is currently described.</param>
            <param name="plane1">Target coordinate system in which we want the geometry to be described.</param>
            <returns>
            A transformation matrix which orients geometry from one coordinate system to another on success.
            Transform.Unset on failure.
            </returns>
            <since>5.0</since>
        </member>
        <member name="M:Rhino.Geometry.Transform.PlaneToPlane(Rhino.Geometry.Plane,Rhino.Geometry.Plane)">
            <summary>
            Create a rotation transformation that orients plane0 to plane1. If you want to orient objects from
            one plane to another, use this form of transformation.
            </summary>
            <param name="plane0">The plane to orient from.</param>
            <param name="plane1">the plane to orient to.</param>
            <returns>The translation transformation if successful, Transform.Unset on failure.</returns>
            <since>5.0</since>
        </member>
        <member name="M:Rhino.Geometry.Transform.ChangeBasis(Rhino.Geometry.Vector3d,Rhino.Geometry.Vector3d,Rhino.Geometry.Vector3d,Rhino.Geometry.Vector3d,Rhino.Geometry.Vector3d,Rhino.Geometry.Vector3d)">
            <summary>
            Computes a change of basis transformation. A basis change is essentially a remapping 
            of geometry from one coordinate system to another.
            </summary>
            <param name="initialBasisX">can be any 3d basis.</param>
            <param name="initialBasisY">can be any 3d basis.</param>
            <param name="initialBasisZ">can be any 3d basis.</param>
            <param name="finalBasisX">can be any 3d basis.</param>
            <param name="finalBasisY">can be any 3d basis.</param>
            <param name="finalBasisZ">can be any 3d basis.</param>
            <returns>
            A transformation matrix which orients geometry from one coordinate system to another on success.
            Transform.Unset on failure.
            </returns>
            <since>5.0</since>
        </member>
        <member name="M:Rhino.Geometry.Transform.PlanarProjection(Rhino.Geometry.Plane)">
            <summary>
            Constructs a projection transformation.
            </summary>
            <param name="plane">Plane onto which everything will be perpendicularly projected.</param>
            <returns>A transformation matrix which projects geometry onto a specified plane.</returns>
            <since>5.0</since>
        </member>
        <member name="M:Rhino.Geometry.Transform.ProjectAlong(Rhino.Geometry.Plane,Rhino.Geometry.Vector3d)">
            <summary>
            Construct a projection onto a plane along a specific direction.
            </summary>
            <param name="plane">Plane to project onto.</param>
            <param name="direction">Projection direction, must not be parallel to the plane.</param>
            <returns>Projection transformation or identity transformation if projection could not be calculated.</returns>
            <since>6.0</since>
        </member>
        <member name="M:Rhino.Geometry.Transform.Shear(Rhino.Geometry.Plane,Rhino.Geometry.Vector3d,Rhino.Geometry.Vector3d,Rhino.Geometry.Vector3d)">
            <summary>
            Constructs a Shear transformation.
            </summary>
            <param name="plane">Base plane for shear.</param>
            <param name="x">Shearing vector along plane x-axis.</param>
            <param name="y">Shearing vector along plane y-axis.</param>
            <param name="z">Shearing vector along plane z-axis.</param>
            <returns>A transformation matrix which shear geometry.</returns>
            <since>5.0</since>
        </member>
        <member name="M:Rhino.Geometry.Transform.op_Equality(Rhino.Geometry.Transform,Rhino.Geometry.Transform)">
            <summary>
            Determines if two transformations are equal in value.
            </summary>
            <param name="a">A transform.</param>
            <param name="b">Another transform.</param>
            <returns>true if transforms are equal; otherwise false.</returns>
            <since>5.0</since>
        </member>
        <member name="M:Rhino.Geometry.Transform.op_Inequality(Rhino.Geometry.Transform,Rhino.Geometry.Transform)">
            <summary>
            Determines if two transformations are different in value.
            </summary>
            <param name="a">A transform.</param>
            <param name="b">Another transform.</param>
            <returns>true if transforms are different; otherwise false.</returns>
            <since>5.0</since>
        </member>
        <member name="M:Rhino.Geometry.Transform.op_Multiply(Rhino.Geometry.Transform,Rhino.Geometry.Transform)">
            <summary>
            Multiplies (combines) two transformations.
            </summary>
            <param name="a">First transformation.</param>
            <param name="b">Second transformation.</param>
            <returns>A transformation matrix that combines the effect of both input transformations. 
            The resulting Transform gives the same result as though you'd first apply B then A.</returns>
            <since>5.0</since>
        </member>
        <member name="M:Rhino.Geometry.Transform.op_Multiply(Rhino.Geometry.Transform,Rhino.Geometry.Point3d)">
            <summary>
            Multiplies a transformation by a point and gets a new point.
            </summary>
            <param name="m">A transformation.</param>
            <param name="p">A point.</param>
            <returns>The transformed point.</returns>
            <remarks>
            Note well: The right hand column and bottom row have an important effect 
            when transforming a Euclidean point and have no effect when transforming a vector. 
            Be sure you understand the differences between vectors and points when applying a 4x4 transformation.
            </remarks>
            <since>5.0</since>
        </member>
        <member name="M:Rhino.Geometry.Transform.op_Multiply(Rhino.Geometry.Transform,Rhino.Geometry.Vector3d)">
            <summary>
            Multiplies a transformation by a vector and gets a new vector.
            </summary>
            <param name="m">A transformation.</param>
            <param name="v">A vector.</param>
            <returns>The transformed vector.</returns>
            <remarks>
            Note well: The right hand column and bottom row have an important effect 
            when transforming a Euclidean point and have no effect when transforming a vector. 
            Be sure you understand the differences between vectors and points when applying a 4x4 transformation.
            </remarks>
            <since>5.0</since>
        </member>
        <member name="M:Rhino.Geometry.Transform.Multiply(Rhino.Geometry.Transform,Rhino.Geometry.Transform)">
            <summary>
            Multiplies (combines) two transformations.
            <para>This is the same as the * operator between two transformations.</para>
            </summary>
            <param name="a">First transformation.</param>
            <param name="b">Second transformation.</param>
            <returns>A transformation matrix that combines the effect of both input transformations. 
            The resulting Transform gives the same result as though you'd first apply B then A.</returns>
            <since>5.0</since>
        </member>
        <member name="P:Rhino.Geometry.Transform.M00">
            <summary>Gets or sets this[0,0].</summary>
            <since>5.0</since>
        </member>
        <member name="P:Rhino.Geometry.Transform.M01">
            <summary>Gets or sets this[0,1].</summary>
            <since>5.0</since>
        </member>
        <member name="P:Rhino.Geometry.Transform.M02">
            <summary>Gets or sets this[0,2].</summary>
            <since>5.0</since>
        </member>
        <member name="P:Rhino.Geometry.Transform.M03">
            <summary>Gets or sets this[0,3].</summary>
            <since>5.0</since>
        </member>
        <member name="P:Rhino.Geometry.Transform.M10">
            <summary>Gets or sets this[1,0].</summary>
            <since>5.0</since>
        </member>
        <member name="P:Rhino.Geometry.Transform.M11">
            <summary>Gets or sets this[1,1].</summary>
            <since>5.0</since>
        </member>
        <member name="P:Rhino.Geometry.Transform.M12">
            <summary>Gets or sets this[1,2].</summary>
            <since>5.0</since>
        </member>
        <member name="P:Rhino.Geometry.Transform.M13">
            <summary>Gets or sets this[1,3].</summary>
            <since>5.0</since>
        </member>
        <member name="P:Rhino.Geometry.Transform.M20">
            <summary>Gets or sets this[2,0].</summary>
            <since>5.0</since>
        </member>
        <member name="P:Rhino.Geometry.Transform.M21">
            <summary>Gets or sets this[2,1].</summary>
            <since>5.0</since>
        </member>
        <member name="P:Rhino.Geometry.Transform.M22">
            <summary>Gets or sets this[2,2].</summary>
            <since>5.0</since>
        </member>
        <member name="P:Rhino.Geometry.Transform.M23">
            <summary>Gets or sets this[2,3].</summary>
            <since>5.0</since>
        </member>
        <member name="P:Rhino.Geometry.Transform.M30">
            <summary>Gets or sets this[3,0].</summary>
            <since>5.0</since>
        </member>
        <member name="P:Rhino.Geometry.Transform.M31">
            <summary>Gets or sets this[3,1].</summary>
            <since>5.0</since>
        </member>
        <member name="P:Rhino.Geometry.Transform.M32">
            <summary>Gets or sets this[3,2].</summary>
            <since>5.0</since>
        </member>
        <member name="P:Rhino.Geometry.Transform.M33">
            <summary>Gets or sets this[3,3].</summary>
            <since>5.0</since>
        </member>
        <member name="P:Rhino.Geometry.Transform.Item(System.Int32,System.Int32)">
            <summary>
            Gets or sets the matrix value at the given row and column indices.
            </summary>
            <param name="row">Index of row to access, must be 0, 1, 2 or 3.</param>
            <param name="column">Index of column to access, must be 0, 1, 2 or 3.</param>
            <returns>The value at [row, column]</returns>
            <value>The new value at [row, column]</value>
        </member>
        <member name="P:Rhino.Geometry.Transform.IsIdentity">
            <summary>Return true if this Transform is the identity transform</summary>
            <since>6.0</since>
        </member>
        <member name="P:Rhino.Geometry.Transform.IsValid">
            <summary>
            Gets a value indicating whether or not this Transform is a valid matrix. 
            A valid transform matrix is not allowed to have any invalid numbers.
            </summary>
            <since>5.0</since>
        </member>
        <member name="P:Rhino.Geometry.Transform.IsZero">
            <summary>
            True if matrix is Zero4x4, ZeroTransformation, or some other type of
            zero. The value xform[3][3] can be anything.
            </summary>
            <since>6.1</since>
        </member>
        <member name="P:Rhino.Geometry.Transform.IsZero4x4">
            <summary>
            True if all values are 0
            </summary>
            <since>6.1</since>
        </member>
        <member name="P:Rhino.Geometry.Transform.IsZeroTransformation">
            <summary>
            True if all values are 0, except for M33 which is 1.
            </summary>
            <seealso cref="M:Rhino.Geometry.Transform.IsZeroTransformationWithTolerance(System.Double)"/>
            <since>6.1</since>
        </member>
        <member name="M:Rhino.Geometry.Transform.IsZeroTransformaton(System.Double)">
            <summary>
            True if all values are 0 within tolerance, except for M33 which is exactly 1.
            </summary>
            <param name="zeroTolerance">The zero tolerance.</param>
            <returns>Returns true if all values are 0 within tolerance, except for M33 which is exactly 1.</returns>
            <seealso cref="M:Rhino.Geometry.Transform.IsZeroTransformationWithTolerance(System.Double)"/>
            <since>6.12</since>
            <deprecated>7.1</deprecated>
        </member>
        <member name="M:Rhino.Geometry.Transform.IsZeroTransformationWithTolerance(System.Double)">
            <summary>
            True if all values are 0 within tolerance, except for M33 which is exactly 1.
            </summary>
            <param name="zeroTolerance">The tolerance for 0 elements.</param>
            <returns>
            True if the transformation matrix is ON_Xform::ZeroTransformation, with xform[3][3] equal to 1:
                0 0 0 0
                0 0 0 0
                0 0 0 0
                0 0 0 1
            
            An element x of the matrix is "zero" if fabs(x) ≤ zeroTolerance.
            IsZeroTransformation is the same as IsZeroTransformationWithTolerance(0.0)
            </returns>
            <since>7.1</since>
        </member>
        <member name="P:Rhino.Geometry.Transform.SimilarityType">
            <summary>
            Gets a value indicating whether or not the Transform maintains similarity. 
            The easiest way to think of Similarity is that any circle, when transformed, 
            remains a circle. Whereas a non-similarity Transform deforms circles into ellipses.
            </summary>
            <since>5.0</since>
        </member>
        <member name="M:Rhino.Geometry.Transform.IsSimilarity(System.Double)">
            <summary>
            Gets a value indicating whether or not the Transform maintains similarity. 
            A similarity transformation can be broken into a sequence of a dilation, translation, rotation, and a reflection.
            </summary>
            <param name="tolerance">The evaluation tolerance.</param>
            <returns>The similarity type.</returns>
            <since>6.12</since>
        </member>
        <member name="M:Rhino.Geometry.Transform.DecomposeSimilarity(Rhino.Geometry.Vector3d@,System.Double@,Rhino.Geometry.Transform@,System.Double)">
            <summary>
            Decomposes a similarity transformation. The transformation must be affine.
            A similarity transformation can be broken into a sequence of a dilation, translation, rotation, and a reflection.
            </summary>
            <param name="translation">Translation vector.</param>
            <param name="dilation">Dilation, where dilation lt; 0 if this is an orientation reversing similarity.</param>
            <param name="rotation">A proper rotation transformation, where R*Transpose(R)=I and Determinant(R)=1.</param>
            <param name="tolerance">The evaluation tolerance.</param>
            <returns>The similarity type.</returns>
            <remarks>
            If X.DecomposeSimilarity(T, d, R, tol) !=0 then X ~ Translation(T)*Diagonal(d)*R
            note when d gt;0 the transformation is orientation preserving.
            If dilation lt; 0 then Diagonal(dilation) is actually a reflection combined with a true dilation, or
            Diagonal(dilation) = Diagonal(-1) * Diagonal(|diagonal|).
            </remarks>
            <since>6.12</since>
        </member>
        <member name="M:Rhino.Geometry.Transform.DecomposeTextureMapping(Rhino.Geometry.Vector3d@,Rhino.Geometry.Vector3d@,Rhino.Geometry.Vector3d@)">
            <summary>
            Decomposition of a uvw transform into components
            </summary>
            <param name="offset">Offset</param>
            <param name="repeat">Repear</param>
            <param name="rotation">Rotation</param>
            <since>8.0</since>
        </member>
        <member name="P:Rhino.Geometry.Transform.RigidType">
            <summary>
            Gets a value indicating whether or not the Transform is rigid. 
            A rigid transformation can be broken into  a proper rotation and a translation,
            while an isometry transformation could also include a reflection.
            </summary>
            <since>6.12</since>
        </member>
        <member name="M:Rhino.Geometry.Transform.IsRigid(System.Double)">
            <summary>
            Gets a value indicating whether or not the Transform is rigid. 
            A rigid transformation can be broken into  a proper rotation and a translation,
            while an isometry transformation could also include a reflection.
            </summary>
            <param name="tolerance">The evaluation tolerance.</param>
            <returns>The rigid type.</returns>
            <since>6.12</since>
        </member>
        <member name="M:Rhino.Geometry.Transform.DecomposeRigid(Rhino.Geometry.Vector3d@,Rhino.Geometry.Transform@,System.Double)">
            <summary>
            Decomposes a rigid transformation. The transformation must be affine.
            </summary>
            A rigid transformation can be broken into  a proper rotation and a translation,
            while an isometry transformation could also include a reflection.
            <param name="translation">Translation vector.</param>
            <param name="rotation">Proper rotation transformation, where R*Transpose(R)=I and det(R)=1.</param>
            <param name="tolerance">The evaluation tolerance.</param>
            <returns>The rigid type.</returns>
            <remarks>
            If X.DecomposeRigid(T, R) is 1, then X ~ Translation(T)*R.
            If X.DecomposeRigid(T, R) is -1, then X ~ Transform(-1) * Translation(T)*R.
            DecomposeRigid will find the closest rotation to the linear part of this transformation.
            </remarks>
            <since>6.12</since>
        </member>
        <member name="P:Rhino.Geometry.Transform.IsAffine">
            <summary>
            Tests for an affine transformation.
            A transformation is affine if it is valid and its last row is [0, 0, 0, 1].
            An affine transformation can be broken into a linear transformation and a translation.
            </summary>
            <since>6.12</since>
        </member>
        <member name="P:Rhino.Geometry.Transform.IsLinear">
            <summary>
            Tests for a linear transformation.
            A transformation is affine if it is valid and its last row is [0, 0, 0, 1].
            If in addition its last column is ( 0, 0, 0, 1)^T then it is linear.
            An affine transformation can be broken into a linear transformation and a translation.
            </summary>
            <since>6.12</since>
        </member>
        <member name="M:Rhino.Geometry.Transform.DecomposeAffine(Rhino.Geometry.Vector3d@,Rhino.Geometry.Transform@)">
            <summary>
            Decomposes an affine transformation.
            A transformation is affine if it is valid and its last row is [0, 0, 0, 1].
            An affine transformation can be broken into a linear transformation and a translation.
            Note, a perspective transformation is not affine.
            </summary>
            <param name="translation">Translation vector.</param>
            <param name="linear">Linear transformation.</param>
            <returns>True if successful decomposition.</returns>
            <remarks>
            If X.DecomposeAffine(T, L) is true then X == Translation(T)*L.
            DecomposeAffine(T,L) succeeds for all affine transformations and is a simple copying of values.
            </remarks>
            <since>6.12</since>
        </member>
        <member name="M:Rhino.Geometry.Transform.DecomposeAffine(Rhino.Geometry.Transform@,Rhino.Geometry.Vector3d@)">
            <summary>
            Decomposes an affine transformation.
            A transformation is affine if it is valid and its last row is [0, 0, 0, 1].
            An affine transformation can be broken into a linear transformation and a translation.
            Note, a perspective transformation is not affine.
            </summary>
            <param name="linear">Linear transformation.</param>
            <param name="translation">Translation vector.</param>
            <returns>True if successful decomposition.</returns>
            <remarks>
            If X.DecomposeAffine(L, T) is true then X == L* Translation(T).
            DecomposeAffine(L, T) may fail for affine transformations if L is not invertible,
            and is more computationally expensive then X.DecomposeAffine(T, L).
            </remarks>
            <since>6.12</since>
        </member>
        <member name="M:Rhino.Geometry.Transform.DecomposeAffine(Rhino.Geometry.Vector3d@,Rhino.Geometry.Transform@,Rhino.Geometry.Transform@,Rhino.Geometry.Vector3d@)">
            <summary>
            An affine transformation can be decomposed into a Symmetric, Rotation and Translation.
            Then the Symmetric component may be further decomposed as non-uniform scale in an orthonormal
            coordinate system.
            </summary>
            <param name="translation">Translation vector.</param>
            <param name="rotation">Proper rotation transformation.</param>
            <param name="orthogonal">Orthogonal basis.</param>
            <param name="diagonal">Diagonal elements of a Diagonal transformation.</param>
            <returns>True if successful decomposition.</returns>
            <since>6.12</since>
        </member>
        <member name="P:Rhino.Geometry.Transform.IsRotation">
            <summary>
            Returns true if this is a proper rotation. 
            </summary>
            <since>6.12</since>
        </member>
        <member name="M:Rhino.Geometry.Transform.GetQuaternion(Rhino.Geometry.Quaternion@)">
            <summary>
            If this transform is a proper rotation, then find the equivalent quaternion.
            </summary>
            <param name="quaternion">Quaternion that represents this rotation transformation.</param>
            <returns>true if this transform is a proper rotation, false otherwise.</returns>
            <since>7.12</since>
        </member>
        <member name="M:Rhino.Geometry.Transform.Affineize">
            <summary>
            Replaces the last row with (0 0 0 1), discarding any perspective part of this transform
            </summary>
            <since>6.12</since>
        </member>
        <member name="M:Rhino.Geometry.Transform.Linearize">
            <summary>
            Affinitize() and replaces the last column with (0 0 0 1)^T, discarding any translation part of this transform.
            </summary>
            <since>6.12</since>
        </member>
        <member name="M:Rhino.Geometry.Transform.Orthogonalize(System.Double)">
            <summary>
            Force the linear part of this transformation to be a rotation (or a rotation with reflection).
            Use DecomposeRigid(T,R) to find the nearest rotation.
            </summary>
            <param name="tolerance">The evaluation tolerance</param>
            <returns>true if successful, false otherwise.</returns>
            <since>6.12</since>
        </member>
        <member name="M:Rhino.Geometry.Transform.DecomposeSymmetric(Rhino.Geometry.Transform@,Rhino.Geometry.Vector3d@)">
            <summary>
            A Symmetric linear transformation can be decomposed A = Q * Diag * Q ^ T, where Diag is a diagonal
            transformation. Diag[i][i] is an eigenvalue of A and the i-th column of Q is a corresponding
            unit length eigenvector. Note, this transformation must be Linear and Symmetric.
            </summary>
            <param name="matrix">An orthonormal matrix of eigenvectors (Q).</param>
            <param name="diagonal">A vector of eigenvalues.</param>
            <returns>true if successful, false otherwise.</returns>
            <remarks>
            If success, this== Q*Diagonal(diagonal) * QT, where QT == Q.Transpose().
            If L.IsLinear and LT==L.Transpose then LT*L is symmetric and is a common source of symmetric transformations.
            </remarks>
            <since>6.12</since>
        </member>
        <member name="P:Rhino.Geometry.Transform.Determinant">
            <summary>
            The determinant of this 4x4 matrix.
            </summary>
            <since>5.0</since>
        </member>
        <member name="M:Rhino.Geometry.Transform.GetYawPitchRoll(System.Double@,System.Double@,System.Double@)">
            <summary>
            Find the Tait-Byran angles (also loosely called Euler angles) for a rotation transformation.
            </summary>
            <param name="yaw">Angle of rotation, in radians, about the Z axis.</param>
            <param name="pitch">Angle of rotation, in radians, about the Y axis.</param>
            <param name="roll">Angle of rotation, in radians, about the X axis.</param>
            <returns>If true, then this = RotationZYX(yaw, pitch, roll) = R_z(yaw) * R_y(pitch) * R_x(roll) 
            where R_*(angle) is rotation of angle radians about the corresponding world coordinate axis.
            If false, then this is not a rotation.
            </returns>
            <since>6.11</since>
        </member>
        <member name="M:Rhino.Geometry.Transform.GetEulerZYZ(System.Double@,System.Double@,System.Double@)">
            <summary>
            Find the Euler angles for a rotation transformation.
            </summary>
            <param name="alpha">Angle of rotation, in radians, about the Z axis.</param>
            <param name="beta">Angle of rotation, in radians, about the Y axis.</param>
            <param name="gamma">Angle of rotation, in radians, about the Z axis.</param>
            <returns>
            If true, then this = RotationZYZ(alpha, beta, gamma) = R_z(alpha) * R_y(beta) * R_z(gamma)
            where R_*(angle) is rotation of angle radians about the corresponding *-world coordinate axis.
            If false, then this is not a rotation.
            </returns>
            <remarks>
            Note, alpha and gamma are in the range (-pi, pi] while beta in the range [0, pi]
            </remarks>
            <since>6.11</since>
        </member>
        <member name="M:Rhino.Geometry.Transform.TransformBoundingBox(Rhino.Geometry.BoundingBox)">
            <summary>
            Computes a new bounding box that is the smallest axis aligned
            bounding box that contains the transformed result of its 8 original corner
            points.
            </summary>
            <returns>A new bounding box.</returns>
            <since>5.0</since>
        </member>
        <member name="M:Rhino.Geometry.Transform.TransformList(System.Collections.Generic.IEnumerable{Rhino.Geometry.Point3d})">
            <summary>
            Given a list, an array or any enumerable set of points, computes a new array of transformed points.
            </summary>
            <param name="points">A list, an array or any enumerable set of points to be left untouched and copied.</param>
            <returns>A new array.</returns>
            <since>5.0</since>
        </member>
        <member name="M:Rhino.Geometry.Transform.Equals(System.Object)">
            <summary>
            Determines if another object is a transform and its value equals this transform value.
            </summary>
            <param name="obj">Another object.</param>
            <returns>true if obj is a transform and has the same value as this transform; otherwise, false.</returns>
        </member>
        <member name="M:Rhino.Geometry.Transform.Equals(Rhino.Geometry.Transform)">
            <summary>
            Determines if another transform equals this transform value.
            </summary>
            <param name="other">Another transform.</param>
            <returns>true if other has the same value as this transform; otherwise, false.</returns>
            <since>5.0</since>
        </member>
        <member name="M:Rhino.Geometry.Transform.GetHashCode">
            <summary>
            Gets a non-unique hashing code for this transform.
            </summary>
            <returns>A number that can be used to hash this transform in a dictionary.</returns>
        </member>
        <member name="M:Rhino.Geometry.Transform.ToString">
            <summary>
            Returns a string representation of this transform.
            </summary>
            <returns>A textual representation.</returns>
        </member>
        <member name="M:Rhino.Geometry.Transform.TryGetInverse(Rhino.Geometry.Transform@)">
            <summary>
            Attempts to get the inverse transform of this transform.
            </summary>
            <param name="inverseTransform">The inverse transform. This out reference will be assigned during this call.</param>
            <returns>
            true on success. 
            If false is returned and this Transform is Invalid, inserveTransform will be set to this Transform. 
            If false is returned and this Transform is Valid, inverseTransform will be set to a pseudo inverse.
            </returns>
            <since>5.0</since>
        </member>
        <member name="M:Rhino.Geometry.Transform.Transpose">
            <summary>
            Flip row/column values
            </summary>
            <returns></returns>
            <since>5.9</since>
        </member>
        <member name="M:Rhino.Geometry.Transform.ToFloatArray(System.Boolean)">
            <summary>
            Return the matrix as a linear array of 16 float values.
            </summary>
            <param name="rowDominant">
            If true, returns { M00, M01, M02...}.
            If false, returns { M00, M10, M20...}.
            </param>
            <returns>An array of 16 floats.</returns>
            <since>5.9</since>
        </member>
        <member name="M:Rhino.Geometry.Transform.ToDoubleArray(System.Boolean)">
            <summary>
            Return the matrix as a linear array of 16 double values.
            </summary>
            <param name="rowDominant">
            If true, returns { M00, M01, M02...}.
            If false, returns { M00, M10, M20...}.
            </param>
            <returns>An array of 16 doubles.</returns>
            <since>8.0</since>
        </member>
        <member name="M:Rhino.Geometry.Transform.System#ICloneable#Clone">
            <since>6.0</since>
        </member>
        <member name="M:Rhino.Geometry.Transform.Clone">
            <summary>
            Returns a deep copy of the transform. For languages that treat structures as value types, this can 
            be accomplished by a simple assignment.
            </summary>
            <returns>A deep copy of this data structure.</returns>
            <since>6.0</since>
        </member>
        <member name="M:Rhino.Geometry.Transform.CompareTo(Rhino.Geometry.Transform)">
            <summary>
            Compares this transform with another transform.
            <para>M33 has highest value, then M32, etc..</para>
            </summary>
            <param name="other">Another transform.</param>
            <returns>-1 if this &lt; other; 0 if both are equal; 1 otherwise.</returns>
            <since>5.0</since>
        </member>
        <member name="T:Rhino.Geometry.TransformSimilarityType">
            <summary>
            Lists all possible outcomes for transform similarity.
            </summary>
            <since>5.0</since>
        </member>
        <member name="F:Rhino.Geometry.TransformSimilarityType.OrientationReversing">
            <summary>
            Similarity is preserved, but orientation is flipped.
            </summary>
        </member>
        <member name="F:Rhino.Geometry.TransformSimilarityType.NotSimilarity">
            <summary>
            Similarity is not preserved. Geometry needs to be deformable for this Transform to operate correctly.
            </summary>
        </member>
        <member name="F:Rhino.Geometry.TransformSimilarityType.OrientationPreserving">
            <summary>
            Similarity and orientation are preserved.
            </summary>
        </member>
        <member name="T:Rhino.Geometry.TransformRigidType">
            <summary>
            Lists all possible outcomes for rigid transformation.
            </summary>
            <since>6.12</since>
        </member>
        <member name="F:Rhino.Geometry.TransformRigidType.RigidReversing">
            <summary>
            Transformation is an orientation reversing isometry.
            </summary>
        </member>
        <member name="F:Rhino.Geometry.TransformRigidType.NotRigid">
            <summary>
            Transformation is not an orthogonal transformation.
            </summary>
        </member>
        <member name="F:Rhino.Geometry.TransformRigidType.Rigid">
            <summary>
            Transformation is an rigid transformation.
            </summary>
        </member>
        <member name="T:Rhino.Geometry.SpaceMorph">
            <summary>
            Represents a spacial, Euclidean morph.
            </summary>
        </member>
        <member name="M:Rhino.Geometry.SpaceMorph.IsMorphable(Rhino.Geometry.GeometryBase)">
            <summary>
            true if the geometry can be morphed by calling SpaceMorph.Morph(geometry)
            </summary>
            <since>5.0</since>
        </member>
        <member name="M:Rhino.Geometry.SpaceMorph.MorphPoint(Rhino.Geometry.Point3d)">
            <summary>Morphs an Euclidean point. <para>This method is abstract.</para></summary>
            <param name="point">A point that will be morphed by this function.</param>
            <returns>Resulting morphed point.</returns>
            <since>5.0</since>
        </member>
        <member name="P:Rhino.Geometry.SpaceMorph.Tolerance">
            <summary>
            The desired accuracy of the morph. This value is primarily used for deforming
            surfaces and breps. The default is 0.0 and any value &lt;= 0.0 is ignored by
            morphing functions. The Tolerance value does not affect the way meshes and points
            are morphed.
            </summary>
            <since>5.0</since>
        </member>
        <member name="P:Rhino.Geometry.SpaceMorph.QuickPreview">
            <summary>
            true if the morph should be done as quickly as possible because the result
            is being used for some type of dynamic preview. If QuickPreview is true,
            the tolerance may be ignored.
            The QuickPreview value does not affect the way meshes and points are morphed.
            The default is false.
            </summary>
            <since>5.0</since>
        </member>
        <member name="P:Rhino.Geometry.SpaceMorph.PreserveStructure">
            <summary>
            true if the morph should be done in a way that preserves the structure of the geometry.
            In particular, for NURBS objects, true means that only the control points are moved.
            The PreserveStructure value does not affect the way meshes and points are morphed.
            The default is false.
            </summary>
            <since>5.0</since>
        </member>
        <member name="T:Rhino.Geometry.Interpolator">
            <summary>
            Exposes a set of standard numeric interpolation algorithms.
            </summary>
        </member>
        <member name="M:Rhino.Geometry.Interpolator.#ctor">
            <summary>
            Constructs a new, empty Interpolator.
            </summary>
            <since>5.0</since>
        </member>
        <member name="M:Rhino.Geometry.Interpolator.#ctor(System.Int32)">
            <summary>
            Constructs an empty Interpolator with a certain capacity.
            </summary>
            <param name="initialCapacity">Number of items this interpolator can store without resizing.</param>
            <since>5.0</since>
        </member>
        <member name="M:Rhino.Geometry.Interpolator.#ctor(Rhino.Collections.RhinoList{System.Double})">
            <summary>
            Copy all the numbers from an existing RhinoList.
            </summary>
            <param name="list">List to mimic.</param>
            <since>5.0</since>
        </member>
        <member name="M:Rhino.Geometry.Interpolator.#ctor(System.Collections.Generic.IEnumerable{System.Double})">
            <summary>
            Constructs an Interpolator from a collection of numbers.
            </summary>
            <param name="collection">Collection of numbers to duplicate.</param>
            <since>5.0</since>
        </member>
        <member name="M:Rhino.Geometry.Interpolator.#ctor(System.Int32,System.Double)">
            <summary>
            Constructs a new Interpolator with a specified amount of numbers.
            </summary>
            <param name="amount">Number of values to add to this Interpolator. Must be equal to or larger than zero.</param>
            <param name="defaultValue">Number to add.</param>
            <since>5.0</since>
        </member>
        <member name="P:Rhino.Geometry.Interpolator.Cyclical">
            <summary>
            Gets or sets a value indicating whether or not the values inside this Interpolator 
            are to be treated as cyclical (i.e. circular).
            </summary>
            <since>5.0</since>
        </member>
        <member name="M:Rhino.Geometry.Interpolator.InterpolateNearestNeighbour(System.Double)">
            <summary>
            Sample the list of numbers with Nearest Neighbor interpolation. 
            </summary>
            <param name="t">Parameter to sample at. The integer portion of the parameter 
            indicates the index of the left-hand value. If this Interpolator is cyclical, 
            parameters will be wrapped.</param>
            <returns>The sampled value at t.</returns>
            <since>5.0</since>
        </member>
        <member name="M:Rhino.Geometry.Interpolator.InterpolateLinear(System.Double)">
            <summary>
            Sample the list of numbers with linear interpolation.
            </summary>
            <param name="t">Parameter to sample at. The integer portion of the parameter 
            indicates the index of the left-hand value. If this Interpolator is cyclical, 
            parameters will be wrapped.</param>
            <returns>The sampled value at t.</returns>
            <since>5.0</since>
        </member>
        <member name="M:Rhino.Geometry.Interpolator.InterpolateCosine(System.Double)">
            <summary>
            Sample the list of numbers with cosine interpolation.
            </summary>
            <param name="t">Parameter to sample at. The integer portion of the parameter 
            indicates the index of the left-hand value. If this Interpolator is cyclical, 
            parameters will be wrapped.</param>
            <returns>The sampled value at t.</returns>
            <since>5.0</since>
        </member>
        <member name="M:Rhino.Geometry.Interpolator.InterpolateCubic(System.Double)">
            <summary>
            Sample the list of numbers with cubic interpolation.
            </summary>
            <param name="t">Parameter to sample at. The integer portion of the parameter 
            indicates the index of the left-hand value. If this Interpolator is cyclical, 
            parameters will be wrapped.</param>
            <returns>The sampled value at t.</returns>
            <since>5.0</since>
        </member>
        <member name="M:Rhino.Geometry.Interpolator.InterpolateCatmullRom(System.Double)">
            <summary>
            Sample the list of numbers with Catmull-Rom interpolation.
            </summary>
            <param name="t">Parameter to sample at. The integer portion of the parameter 
            indicates the index of the left-hand value. If this Interpolator is cyclical, 
            parameters will be wrapped.</param>
            <returns>The sampled value at t.</returns>
            <since>5.0</since>
        </member>
        <member name="M:Rhino.Geometry.Interpolator.MapIndex(System.Int32)">
            <summary>
            Map a sample index onto the actual sample list.
            </summary>
            <param name="index">Index to map.</param>
            <returns>The mapped index.</returns>
        </member>
        <member name="M:Rhino.Geometry.Interpolator.SolveParameter(System.Double,System.Int32@,System.Double@)">
            <summary>
            Decompose a sampling parameter into an index and a unitized parameter.
            </summary>
            <param name="param">Parameter to decompose.</param>
            <param name="index">Integer portion of parameter.</param>
            <param name="t">Floating point portion of parameter.</param>
        </member>
        <member name="T:Rhino.LengthValue">
            <summary>
            Represents a length with an associated unit system and a string
            representation of that length. This allows for going back and
            forth from numerical representation of a length and a string
            representation without "guessing" at the initial string
            </summary>
        </member>
        <member name="T:Rhino.LengthValue.StringFormat">
            <summary>
            Formatting to apply when creating a length value from a double.
            </summary>
        </member>
        <member name="F:Rhino.LengthValue.StringFormat.ExactDecimal">
            <summary>Use exact decimal string.</summary>
        </member>
        <member name="F:Rhino.LengthValue.StringFormat.ExactProperFraction">
            <summary>If possible, use exact integer-fraction format (1.125 becomes 1-1/8).</summary>
        </member>
        <member name="F:Rhino.LengthValue.StringFormat.ExactImproperFraction">
            <summary>If possible, use exact fraction format (1.125 becomes 9/8).</summary>
        </member>
        <member name="F:Rhino.LengthValue.StringFormat.CleanDecimal">
            <summary>The value may be adjusted slightly to improve clarity (1.124999... becomes 1.125).</summary>
        </member>
        <member name="F:Rhino.LengthValue.StringFormat.CleanProperFraction">
            <summary>The value may be adjusted slightly to improve clarity (1.124999... becomes 1-1/8).</summary>
        </member>
        <member name="F:Rhino.LengthValue.StringFormat.CleanImproperFraction">
            <summary>The value may be adjusted slightly to improve clarity (1.124999... becomes 9/8).</summary>
        </member>
        <member name="M:Rhino.LengthValue.Finalize">
            <summary>passively reclaim native allocated ON_LenghtValue*</summary>
        </member>
        <member name="M:Rhino.LengthValue.Dispose">
            <summary>actively reclaim native allocated ON_LenghtValue*</summary>
            <since>6.0</since>
        </member>
        <member name="M:Rhino.LengthValue.Create(System.String,Rhino.Input.StringParserSettings,System.Boolean@)">
            <summary> Create from string </summary>
            <param name="s">string to parse</param>
            <param name="ps"></param>
            <param name="parsedAll">true if the whole string was parsed</param>
            <since>6.0</since>
        </member>
        <member name="M:Rhino.LengthValue.Create(System.Double,Rhino.UnitSystem,Rhino.LengthValue.StringFormat)">
            <summary>Create from Length and UnitSystem</summary>
            <param name="length">Numeric length value</param>
            <param name="us">Unit system</param>
            <param name="format"></param>
            <since>6.0</since>
        </member>
        <member name="M:Rhino.LengthValue.Create(System.Double,Rhino.UnitSystem,Rhino.LengthValue.StringFormat,System.UInt32)">
            <summary>Create from Length and UnitSystem</summary>
            <param name="length">Numeric length value</param>
            <param name="us">Unit system</param>
            <param name="format"></param>
            <param name="localeId"></param>
            <since>6.0</since>
        </member>
        <member name="M:Rhino.LengthValue.Length">
            <summary>
            Length value in this instance's current unit system
            </summary>
            <returns></returns>
            <since>6.0</since>
        </member>
        <member name="M:Rhino.LengthValue.Length(Rhino.UnitSystem)">
            <summary> Length value in a given unit system </summary>
            <param name="units"></param>
            <returns></returns>
            <since>6.0</since>
        </member>
        <member name="P:Rhino.LengthValue.LengthString">
            <summary>
            Return length as a string
            </summary>
            <returns></returns>
            <since>6.0</since>
        </member>
        <member name="M:Rhino.LengthValue.ChangeLength(System.Double)">
            <summary>
            Changes the numeric value in a LengthValue and leaves all of the other info unchanged
            UnitSystem, ParseSettings and StringFormat stay as they were
            </summary>
            <param name="newLength"></param>
            <returns>A new LengthValue</returns>
            <since>6.0</since>
        </member>
        <member name="M:Rhino.LengthValue.ChangeUnitSystem(Rhino.UnitSystem)">
            <summary>
            Change the UnitSystem of a LengthValue
            The numeric value of Length is scaled by new_us / current unit system
            so that the absolute length stays the same
            </summary>
            <param name="newUnits"></param>
            <returns></returns>
            <since>6.0</since>
        </member>
        <member name="P:Rhino.LengthValue.ParseSettings">
            <summary> Parse settings </summary>
            <since>6.0</since>
        </member>
        <member name="P:Rhino.LengthValue.UnitSystem">
            <summary>
            UnitSystem used by this LengthValue
            </summary>
            <since>6.0</since>
        </member>
        <member name="P:Rhino.LengthValue.LengthStringFormat">
            <summary>
            Returns the StringFormat from this LengthValue
            </summary>
            <since>6.0</since>
        </member>
        <member name="P:Rhino.LengthValue.ContextLocaleId">
            <summary>
            returns the context LocaleId from this LengthValue
            </summary>
            <since>6.0</since>
        </member>
        <member name="P:Rhino.LengthValue.ContextAngleUnitSystem">
            <summary>
            Returns the context AngleUnitSystem from this LengthValue's ParseSettings
            </summary>
            <since>6.0</since>
        </member>
        <member name="M:Rhino.LengthValue.IsUnset">
            <summary>
            Test IsUnset
            </summary>
            <returns></returns>
            <since>6.0</since>
        </member>
        <member name="T:Rhino.ScaleValue">
            <summary>
            Represents a scale with associated LengthValues and string representations
            of the scale. This allows for going back and forth from numerical
            representations of a scale and a string representation without "guessing"
            at the initial scale.
            </summary>
        </member>
        <member name="T:Rhino.ScaleValue.ScaleStringFormat">
            <summary>
            Specifies preferred formats for automatically
            created string descriptions of a scale value.
            </summary>
        </member>
        <member name="F:Rhino.ScaleValue.ScaleStringFormat.None">
            <summary>
            No preference for automatically created string descriptions of a scale value.
            </summary>
        </member>
        <member name="F:Rhino.ScaleValue.ScaleStringFormat.RatioFormat">
            <summary>
            Prefer the ratio format using a colon, like "1:4" or "4:1".
            </summary>
        </member>
        <member name="F:Rhino.ScaleValue.ScaleStringFormat.EquationFormat">
            <summary>
            Prefer the equation format using an equal sign, like "1 = 4" or "4 = 1".
            </summary>
        </member>
        <member name="F:Rhino.ScaleValue.ScaleStringFormat.FractionFormat">
            <summary>
            Prefer the fraction format using a slash, like "1/4" or "4/1".
            </summary>
        </member>
        <member name="F:Rhino.ScaleValue.ScaleStringFormat.Unset">
            <summary>
            ON_ScaleValue::ScaleStringFormat::Unset is used to indicate no preference is set.
            This condition is different from ON_ScaleValue::ScaleStringFormat::None.
            </summary>
        </member>
        <member name="M:Rhino.ScaleValue.#ctor">
            <summary>
            Default constructor
            </summary>
            <since>6.0</since>
        </member>
        <member name="M:Rhino.ScaleValue.OneToOne">
            <summary>
            Make a new ScaleValue set to OneToOne
            </summary>
            <returns></returns>
            <since>6.0</since>
        </member>
        <member name="M:Rhino.ScaleValue.Create(System.String,Rhino.Input.StringParserSettings)">
            <summary>
            Create from string
            </summary>
            <param name="ps"></param>
            <param name="s"></param>
            <since>6.0</since>
        </member>
        <member name="M:Rhino.ScaleValue.Create(Rhino.LengthValue,Rhino.LengthValue,Rhino.ScaleValue.ScaleStringFormat)">
            <summary>
            Create from 2 length values
            </summary>
            <param name="left"></param>
            <param name="right"></param>
            <param name="format"></param>
            <since>6.0</since>
        </member>
        <member name="M:Rhino.ScaleValue.Finalize">
            <summary>passively reclaim native allocated ON_ScaleValue*</summary>
        </member>
        <member name="M:Rhino.ScaleValue.Dispose">
            <summary>actively reclaim native allocated ON_SacleValue*</summary>
            <since>6.0</since>
        </member>
        <member name="M:Rhino.ScaleValue.IsUnset">
            <summary>
            Test IsUnset
            </summary>
            <returns></returns>
            <since>6.0</since>
        </member>
        <member name="M:Rhino.ScaleValue.LeftLengthValue">
            <summary>
            Get the Left LengthValue from Scale
            </summary>
            <returns></returns>
            <since>6.0</since>
        </member>
        <member name="M:Rhino.ScaleValue.RightLengthValue">
            <summary>
            Get the Right LengthValue from Scale
            </summary>
            <returns></returns>
            <since>6.0</since>
        </member>
        <member name="P:Rhino.ScaleValue.LeftToRightScale">
            <summary>
            LeftLengthValue / RightLengthValue
            </summary>
            <since>6.0</since>
        </member>
        <member name="P:Rhino.ScaleValue.RightToLeftScale">
            <summary>
            RightLengthValue / LeftLengthValue
            </summary>
            <since>6.0</since>
        </member>
        <member name="T:Rhino.FileIO.FileReferenceStatus">
            <summary>Enumerates a list of file statuses.</summary>
        </member>
        <member name="F:Rhino.FileIO.FileReferenceStatus.Unknown">
            <summary>
            Status of a the full path is not known.
            </summary>
        </member>
        <member name="F:Rhino.FileIO.FileReferenceStatus.FullPathValid">
            <summary>
            Full path is valid.
            </summary>
        </member>
        <member name="F:Rhino.FileIO.FileReferenceStatus.FileNotFound">
            <summary>
            Unable to locate file.
            </summary>
        </member>
        <member name="T:Rhino.FileIO.FileFindPreference">
            <summary>Defines options for file search.</summary>
        </member>
        <member name="F:Rhino.FileIO.FileFindPreference.None">
            <summary>The choice is not defined.</summary>
        </member>
        <member name="F:Rhino.FileIO.FileFindPreference.FullPath">
            <summary>File name exists in FullPath().</summary>
        </member>
        <member name="F:Rhino.FileIO.FileFindPreference.RelativePath">
            <summary>File name exists in base path + RelativePath().</summary>
        </member>
        <member name="F:Rhino.FileIO.FileFindPreference.BasePath">
            <summary>File name exists in base path directory.</summary>
        </member>
        <member name="F:Rhino.FileIO.FileFindPreference.ContentMatch">
            <summary>File with matching content exists.</summary>
        </member>
        <member name="F:Rhino.FileIO.FileFindPreference.MostRecent">
            <summary>Most recently modified file.</summary>
        </member>
        <member name="T:Rhino.FileIO.File3dmTypeCodes">
            <summary>
            Typecode format 4 bytes long
            <code>
            x xxxxxxxxxxxxxxx,x xxx xxxx xxxx x x xx
            | |               | |               | |  |
            |        |        |                 |
            |        |        |         |       +---  &quot;stuff&quot; bit
            |        |        |         |
            |        |        |         +-- specific codes
            |        |        |
            |        |        +-- RESERVED - DO NOT USE (should be 0) (will be used to control CRC on/off)
            |        |
            |        +-- category:_000 0000 0000 0001  Legacy geometry    TCODE_LEGACY_GEOMETRY
            |                     _000 0000 0000 0010  openNURBS object   TCODE_OPENNURBS_OBJECT
            |                     _000 0000 0000 0100  -- RESERVED - DO NOT USE (should be 0 in any typecode) -- 
            |                     _000 0000 0000 1000  -- RESERVED - DO NOT USE (should be 0 in any typecode) --                     
            |                     _000 0000 0001 0000  Geometry           TCODE_GEOMETRY
            |                     _000 0000 0010 0000  Annotation
            |                     _000 0000 0100 0000  Display Attributes TCODE_DISPLAY
            |                     _000 0000 1000 0000  Rendering          TCODE_RENDER     
            |                     _000 0001 0000 0000                         
            |                     _000 0010 0000 0000  Interface          TCODE_INTERFACE 
            |                     _000 0100 0000 0000  -- RESERVED - DO NOT USE (should be 0 in any typecode) --
            |                     _000 1000 0000 0000  Tolerances         TCODE_TOLERANCE
            |                     _001 0000 0000 0000  Tables             TCODE_TABLE    
            |                     _010 0000 0000 0000  Table record       TCODE_TABLEREC
            |                     _100 0000 0000 0000  User information   TCODE_USER
            | 
            +-- format: 0 - data size in header  - data block follows    TCODE_SHORT
                        1 - data in header - no data block follows
            </code>
            </summary>
        </member>
        <member name="F:Rhino.FileIO.File3dmTypeCodes.TCODE_COMMENTBLOCK">
            <summary>
             (0x00000001)
             The TCODE_COMMENTBLOCK is the first chunk in the file, starts 32 bytes into
             the file, and contains text information terminated with a ^m_z.  This ^m_z and
             contents of this chunk were expanded in February 2000.  Files written with
             code released earlier than this will not have the ^m_z.
            </summary>
        </member>
        <member name="F:Rhino.FileIO.File3dmTypeCodes.TCODE_ENDOFFILE">
            <summary>
             (0x00007FFF)
             The TCODE_ENDOFFILE is the last chunk in the file and the first 4 bytes
             of information in this chunk is an integer that contains the file length.
             This chunk was added in February 2000 and files written with code released
             earlier than this will not have this termination block.
            </summary>
        </member>
        <member name="F:Rhino.FileIO.File3dmTypeCodes.TCODE_ENDOFFILE_GOO">
            <summary>
            (0x00007FFE)
            this typecode is returned when a rogue eof marker is found
            Some v1 3dm file writers put these markers in a "goo".
            Simply skip these chunks and continue.
            </summary>
        </member>
        <member name="F:Rhino.FileIO.File3dmTypeCodes.TCODE_OPENNURBS_OBJECT">
            <summary>0x00020000.</summary>
        </member>
        <member name="F:Rhino.FileIO.File3dmTypeCodes.TCODE_GEOMETRY">
            <summary>0x0010000.</summary>
        </member>
        <member name="F:Rhino.FileIO.File3dmTypeCodes.TCODE_ANNOTATION">
            <summary>0x0020000.</summary>
        </member>
        <member name="F:Rhino.FileIO.File3dmTypeCodes.TCODE_DISPLAY">
            <summary>0x0040000.</summary>
        </member>
        <member name="F:Rhino.FileIO.File3dmTypeCodes.TCODE_RENDER">
            <summary>0x0080000.</summary>
        </member>
        <member name="F:Rhino.FileIO.File3dmTypeCodes.TCODE_INTERFACE">
            <summary>0x02000000.</summary>
        </member>
        <member name="F:Rhino.FileIO.File3dmTypeCodes.TCODE_TOLERANCE">
            <summary>0x08000000.</summary>
        </member>
        <member name="F:Rhino.FileIO.File3dmTypeCodes.TCODE_TABLE">
            <summary>0x10000000.</summary>
        </member>
        <member name="F:Rhino.FileIO.File3dmTypeCodes.TCODE_TABLEREC">
            <summary>0x20000000.</summary>
        </member>
        <member name="F:Rhino.FileIO.File3dmTypeCodes.TCODE_USER">
            <summary>0x40000000.</summary>
        </member>
        <member name="F:Rhino.FileIO.File3dmTypeCodes.TCODE_SHORT">
            <summary>0x80000000.</summary>
        </member>
        <member name="F:Rhino.FileIO.File3dmTypeCodes.TCODE_CRC">
            <summary>0x8000.</summary>
        </member>
        <member name="F:Rhino.FileIO.File3dmTypeCodes.TCODE_ANONYMOUS_CHUNK">
            <summary>(TCODE_USER | TCODE_CRC | 0x0000)</summary>
        </member>
        <member name="F:Rhino.FileIO.File3dmTypeCodes.TCODE_MATERIAL_TABLE">
            <summary>rendering materials.</summary>
        </member>
        <member name="F:Rhino.FileIO.File3dmTypeCodes.TCODE_LAYER_TABLE">
            <summary>layers.</summary>
        </member>
        <member name="F:Rhino.FileIO.File3dmTypeCodes.TCODE_LIGHT_TABLE">
            <summary>rendering lights.</summary>
        </member>
        <member name="F:Rhino.FileIO.File3dmTypeCodes.TCODE_OBJECT_TABLE">
            <summary>geometry and annotation.</summary>
        </member>
        <member name="F:Rhino.FileIO.File3dmTypeCodes.TCODE_PROPERTIES_TABLE">
            <summary>
            Model Properties: revision history, notes, preview image.
            </summary>
        </member>
        <member name="T:Rhino.FileIO.File3dmNotes">
            <summary>
            Represents the notes information stored in a 3dm file.
            </summary>
        </member>
        <member name="M:Rhino.FileIO.File3dmNotes.#ctor">
            <summary>
            Creates empty default notes
            </summary>
            <since>5.0</since>
        </member>
        <member name="P:Rhino.FileIO.File3dmNotes.Notes">
            <summary>
            Gets or sets the text content of the notes.
            </summary>
            <since>5.0</since>
        </member>
        <member name="P:Rhino.FileIO.File3dmNotes.IsVisible">
            <summary>
            Gets or sets the notes visibility. If the notes are visible, true; false otherwise.
            </summary>
            <since>5.0</since>
        </member>
        <member name="P:Rhino.FileIO.File3dmNotes.IsHtml">
            <summary>
            Gets or sets the text format. If the format is HTML, true; false otherwise.
            </summary>
            <since>5.0</since>
        </member>
        <member name="P:Rhino.FileIO.File3dmNotes.WindowRectangle">
            <summary>
            Gets or sets the position of the Notes when they were saved.
            </summary>
            <since>5.0</since>
        </member>
        <member name="T:Rhino.FileIO.File3dmSettings">
            <summary> General settings in a 3dm file. </summary>
        </member>
        <member name="P:Rhino.FileIO.File3dmSettings.ModelUrl">
            <summary>
            Gets or sets a Uniform Resource Locator (URL) direction for the model.
            </summary>
            <since>5.0</since>
        </member>
        <member name="P:Rhino.FileIO.File3dmSettings.ModelBasepoint">
            <summary>
            Gets or sets the model base point that is used when the file is read as an instance definition.
            <para>This point is mapped to the origin in the instance definition.</para>
            </summary>
            <since>5.0</since>
        </member>
        <member name="P:Rhino.FileIO.File3dmSettings.ModelAbsoluteTolerance">
            <summary>Gets or sets the model space absolute tolerance.</summary>
            <since>5.0</since>
        </member>
        <member name="P:Rhino.FileIO.File3dmSettings.ModelAngleToleranceRadians">
            <summary>Gets or sets the model space angle tolerance.</summary>
            <since>5.0</since>
        </member>
        <member name="P:Rhino.FileIO.File3dmSettings.ModelAngleToleranceDegrees">
            <summary>Gets or sets the model space angle tolerance.</summary>
            <since>5.0</since>
        </member>
        <member name="P:Rhino.FileIO.File3dmSettings.ModelRelativeTolerance">
            <summary>Gets or sets the model space relative tolerance.</summary>
            <since>5.0</since>
        </member>
        <member name="P:Rhino.FileIO.File3dmSettings.PageAbsoluteTolerance">
            <summary>Gets or sets the page space absolute tolerance.</summary>
            <since>5.0</since>
        </member>
        <member name="P:Rhino.FileIO.File3dmSettings.PageAngleToleranceRadians">
            <summary>Gets or sets the page space angle tolerance.</summary>
            <since>5.0</since>
        </member>
        <member name="P:Rhino.FileIO.File3dmSettings.PageAngleToleranceDegrees">
            <summary>Gets or sets the page space angle tolerance.</summary>
            <since>5.0</since>
        </member>
        <member name="P:Rhino.FileIO.File3dmSettings.PageRelativeTolerance">
            <summary>Gets or sets the page space relative tolerance.</summary>
            <since>5.0</since>
        </member>
        <member name="P:Rhino.FileIO.File3dmSettings.ModelUnitSystem">
            <summary>
            Gets or sets the model unit system, using <see cref="T:Rhino.UnitSystem"/> enumeration.
            </summary>
            <since>5.0</since>
        </member>
        <member name="P:Rhino.FileIO.File3dmSettings.PageUnitSystem">
            <summary>
            Gets or sets the page unit system, using <see cref="T:Rhino.UnitSystem"/> enumeration.
            </summary>
            <since>5.0</since>
        </member>
        <member name="P:Rhino.FileIO.File3dmSettings.RenderSettings">
            <summary>
            Gets or sets the render settings.
            </summary>
            <since>8.0</since>
        </member>
        <member name="T:Rhino.FileIO.BinaryArchiveException">
            <summary>
            Thrown by BinaryArchiveReader and BinaryArchiveWriter classes when
            an IO error has occurred.
            </summary>
        </member>
        <member name="M:Rhino.FileIO.BinaryArchiveException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Rhino.FileIO.BinaryArchiveException"/> class.
            </summary>
            <param name="message">The inner message to show to users.</param>
            <since>5.0</since>
        </member>
        <member name="T:Rhino.FileIO.BinaryArchiveWriter">
            <summary>
            Represents an entity that is able to write data to an archive.
            </summary>
        </member>
        <member name="P:Rhino.FileIO.BinaryArchiveWriter.WriteErrorOccured">
            <summary>
            Gets or sets whether an error occurred.
            </summary>
            <since>5.0</since>
        </member>
        <member name="P:Rhino.FileIO.BinaryArchiveWriter.Archive3dmVersion">
            <summary>
            If a 3dm archive is being read or written, then this is the
            version of the 3dm archive format (1, 2, 3, 4 or 5).
            0     a 3dm archive is not being read/written
            1     a version 1 3dm archive is being read/written
            2     a version 2 3dm archive is being read/written
            3     a version 3 3dm archive is being read/written
            4     a version 4 3dm archive is being read/written
            5     an old version 5 3dm archive is being read
            50    a version 5 3dm archive is being read/written.
            </summary>
            <since>5.0</since>
        </member>
        <member name="M:Rhino.FileIO.BinaryArchiveWriter.BeginWrite3dmChunk(System.UInt32,System.Int32,System.Int32)">
            <summary>
            Begins writing a chunk
            </summary>
            <param name="typecode">chunk's typecode</param>
            <param name="majorVersion"></param>
            <param name="minorVersion"></param>
            <returns>
            True if input was valid and chunk was started.  In this case you must call
            EndWrite3dmChunk(), even if something goes wrong while you attempt to write
            the contents of the chunk.
            False if input was not valid or the write failed.
            </returns>
            <since>6.0</since>
        </member>
        <member name="M:Rhino.FileIO.BinaryArchiveWriter.BeginWrite3dmChunk(System.UInt32,System.Int64)">
            <summary> Begins writing a chunk </summary>
            <param name="typecode"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Rhino.FileIO.BinaryArchiveWriter.EndWrite3dmChunk">
            <summary>
            updates length in chunk header
            </summary>
            <returns></returns>
            <since>6.0</since>
        </member>
        <member name="M:Rhino.FileIO.BinaryArchiveWriter.EnableCRCCalculation(System.Boolean)">
            <summary>
            Expert user function to control CRC calculation while reading and writing.
            Typically this is used when seeking around and reading/writing information
            in non-serial order.
            </summary>
            <param name="enable"></param>
            <returns>
            Current state of CRC calculation.  Use the returned value to restore the
            CRC calculation setting after you are finished doing your fancy pants
            expert IO.
            </returns>
            <since>6.0</since>
        </member>
        <member name="M:Rhino.FileIO.BinaryArchiveWriter.Write3dmChunkVersion(System.Int32,System.Int32)">
            <summary>
            A chunk version is a single byte that encodes a major.minor
            version number.  Useful when creating I/O code for 3dm chunks
            that may change in the future.  Increment the minor version 
            number if new information is added to the end of the chunk. 
            Increment the major version if the format of the chunk changes
            in some other way.
            </summary>
            <param name="major">0 to 15.</param>
            <param name="minor">0 to 16.</param>
            <returns>true on successful read.</returns>
            <since>5.0</since>
        </member>
        <member name="M:Rhino.FileIO.BinaryArchiveWriter.WriteDictionary(Rhino.Collections.ArchivableDictionary)">
            <summary>
            Delivers the complete content of a dictionary to the archive.
            </summary>
            <param name="dictionary">A dictionary to archive.</param>
            <since>5.0</since>
        </member>
        <member name="M:Rhino.FileIO.BinaryArchiveWriter.WriteBool(System.Boolean)">
            <summary>
            Writes a <see cref="T:System.Boolean"/> value to the archive.
            </summary>
            <param name="value">A value to write.</param>
            <since>5.0</since>
        </member>
        <member name="M:Rhino.FileIO.BinaryArchiveWriter.WriteByte(System.Byte)">
            <summary>
            Writes a <see cref="T:System.Byte"/> value to the archive.
            </summary>
            <param name="value">A value to write.</param>
            <since>5.0</since>
        </member>
        <member name="M:Rhino.FileIO.BinaryArchiveWriter.WriteSByte(System.SByte)">
            <summary>
            Writes a <see cref="T:System.SByte"/> value to the archive.
            </summary>
            <param name="value">A value to write.</param>
            <since>5.0</since>
        </member>
        <member name="M:Rhino.FileIO.BinaryArchiveWriter.WriteShort(System.Int16)">
            <summary>
            Writes a <see cref="T:System.Int16"/> value to the archive.
            </summary>
            <param name="value">A value to write.</param>
            <since>5.0</since>
        </member>
        <member name="M:Rhino.FileIO.BinaryArchiveWriter.WriteUShort(System.UInt16)">
            <summary>
            Writes a <see cref="T:System.UInt16"/> value to the archive.
            </summary>
            <param name="value">A value to write.</param>
            <since>5.0</since>
        </member>
        <member name="M:Rhino.FileIO.BinaryArchiveWriter.WriteInt(System.Int32)">
            <summary>
            Writes a <see cref="T:System.Int32"/> value to the archive.
            </summary>
            <param name="value">A value to write.</param>
            <since>5.0</since>
        </member>
        <member name="M:Rhino.FileIO.BinaryArchiveWriter.WriteUInt(System.UInt32)">
            <summary>
            Writes a <see cref="T:System.UInt32"/> value to the archive.
            </summary>
            <param name="value">A value to write.</param>
            <since>5.0</since>
        </member>
        <member name="M:Rhino.FileIO.BinaryArchiveWriter.WriteInt64(System.Int64)">
            <summary>
            Writes a <see cref="T:System.Int64"/> value to the archive.
            </summary>
            <param name="value">A value to write.</param>
            <since>5.0</since>
        </member>
        <member name="M:Rhino.FileIO.BinaryArchiveWriter.WriteSingle(System.Single)">
            <summary>
            Writes a <see cref="T:System.Single"/> value to the archive.
            </summary>
            <param name="value">A value to write.</param>
            <since>5.0</since>
        </member>
        <member name="M:Rhino.FileIO.BinaryArchiveWriter.WriteDouble(System.Double)">
            <summary>
            Writes a <see cref="T:System.Double"/> value to the archive.
            </summary>
            <param name="value">A value to write.</param>
            <since>5.0</since>
        </member>
        <member name="M:Rhino.FileIO.BinaryArchiveWriter.WriteGuid(System.Guid)">
            <summary>
            Writes a <see cref="T:System.Guid"/> value to the archive.
            </summary>
            <param name="value">A value to write.</param>
            <since>5.0</since>
        </member>
        <member name="M:Rhino.FileIO.BinaryArchiveWriter.WriteString(System.String)">
            <summary>
            Writes a <see cref="T:System.String"/> value to the archive.
            </summary>
            <param name="value">A value to write.</param>
            <since>5.0</since>
        </member>
        <member name="M:Rhino.FileIO.BinaryArchiveWriter.WriteUtf8String(System.String)">
            <summary>
            Writes a <see cref="T:System.String"/> value to the archive.
            </summary>
            <param name="value">A value to write.</param>
            <since>6.0</since>
        </member>
        <member name="M:Rhino.FileIO.BinaryArchiveWriter.WriteBoolArray(System.Collections.Generic.IEnumerable{System.Boolean})">
            <summary>
            Writes a list, an array, or any enumerable of <see cref="T:System.Boolean"/> to the archive.
            <para>The return will always be an array.</para>
            </summary>
            <param name="value">A value to write.</param>
            <since>5.0</since>
        </member>
        <member name="M:Rhino.FileIO.BinaryArchiveWriter.WriteByteArray(System.Collections.Generic.IEnumerable{System.Byte})">
            <summary>
            Writes a list, an array, or any enumerable of <see cref="T:System.Byte"/> to the archive.
            <para>The return will always be an array.</para>
            </summary>
            <param name="value">A value to write.</param>
            <since>5.0</since>
        </member>
        <member name="M:Rhino.FileIO.BinaryArchiveWriter.WriteCompressedBuffer(System.Collections.Generic.IEnumerable{System.Byte})">
            <summary>
            Writes a list, an array, or any enumerable of <see cref="T:System.Byte"/> to the archive as a compressed buffer.
            <para>The return will always be an array.</para>
            </summary>
            <param name="value">A value to write.</param>
            <since>5.9</since>
        </member>
        <member name="M:Rhino.FileIO.BinaryArchiveWriter.WriteSByteArray(System.Collections.Generic.IEnumerable{System.SByte})">
            <summary>
            Writes a list, an array, or any enumerable of <see cref="T:System.SByte"/> to the archive.
            <para>The return will always be an array.</para>
            </summary>
            <param name="value">A value to write.</param>
            <since>5.0</since>
        </member>
        <member name="M:Rhino.FileIO.BinaryArchiveWriter.WriteShortArray(System.Collections.Generic.IEnumerable{System.Int16})">
            <summary>
            Writes a list, an array, or any enumerable of <see cref="T:System.Int16"/> to the archive.
            <para>The return will always be an array.</para>
            </summary>
            <param name="value">A value to write.</param>
            <since>5.0</since>
        </member>
        <member name="M:Rhino.FileIO.BinaryArchiveWriter.WriteIntArray(System.Collections.Generic.IEnumerable{System.Int32})">
            <summary>
            Writes a list, an array, or any enumerable of <see cref="T:System.Int32"/> to the archive.
            <para>The return will always be an array.</para>
            </summary>
            <param name="value">A value to write.</param>
            <since>5.0</since>
        </member>
        <member name="M:Rhino.FileIO.BinaryArchiveWriter.WriteSingleArray(System.Collections.Generic.IEnumerable{System.Single})">
            <summary>
            Writes a list, an array, or any enumerable of <see cref="T:System.Single"/> to the archive.
            <para>The return will always be an array.</para>
            </summary>
            <param name="value">A value to write.</param>
            <since>5.0</since>
        </member>
        <member name="M:Rhino.FileIO.BinaryArchiveWriter.WriteDoubleArray(System.Collections.Generic.IEnumerable{System.Double})">
            <summary>
            Writes a list, an array, or any enumerable of <see cref="T:System.Double"/> to the archive.
            <para>The return will always be an array.</para>
            </summary>
            <param name="value">A value to write.</param>
            <since>5.0</since>
        </member>
        <member name="M:Rhino.FileIO.BinaryArchiveWriter.WriteGuidArray(System.Collections.Generic.IEnumerable{System.Guid})">
            <summary>
            Writes a list, an array, or any enumerable of <see cref="T:System.Guid"/> to the archive.
            <para>The return will always be an array.</para>
            </summary>
            <param name="value">A value to write.</param>
            <since>5.0</since>
        </member>
        <member name="M:Rhino.FileIO.BinaryArchiveWriter.WriteStringArray(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Writes a list, an array, or any enumerable of <see cref="T:System.String"/> to the archive.
            <para>The return will always be an array.</para>
            </summary>
            <param name="value">A value to write.</param>
            <since>5.0</since>
        </member>
        <member name="M:Rhino.FileIO.BinaryArchiveWriter.WriteColor(System.Drawing.Color)">
            <summary>
            Writes a <see cref="T:System.Drawing.Color"/> value to the archive.
            </summary>
            <param name="value">A value to write.</param>
            <since>5.0</since>
        </member>
        <member name="M:Rhino.FileIO.BinaryArchiveWriter.WritePoint(System.Drawing.Point)">
            <summary>
            Writes a <see cref="T:System.Drawing.Point"/> value to the archive.
            </summary>
            <param name="value">A value to write.</param>
            <since>5.0</since>
        </member>
        <member name="M:Rhino.FileIO.BinaryArchiveWriter.WritePointF(System.Drawing.PointF)">
            <summary>
            Writes a <see cref="T:System.Drawing.PointF"/> value to the archive.
            </summary>
            <param name="value">A value to write.</param>
            <since>5.0</since>
        </member>
        <member name="M:Rhino.FileIO.BinaryArchiveWriter.WriteRectangle(System.Drawing.Rectangle)">
            <summary>
            Writes a <see cref="T:System.Drawing.Rectangle"/> value to the archive.
            </summary>
            <param name="value">A value to write.</param>
            <since>5.0</since>
        </member>
        <member name="M:Rhino.FileIO.BinaryArchiveWriter.WriteRectangleF(System.Drawing.RectangleF)">
            <summary>
            Writes a <see cref="T:System.Drawing.RectangleF"/> value to the archive.
            </summary>
            <param name="value">A value to write.</param>
            <since>5.0</since>
        </member>
        <member name="M:Rhino.FileIO.BinaryArchiveWriter.WriteSize(System.Drawing.Size)">
            <summary>
            Writes a <see cref="T:System.Drawing.Size"/> value to the archive.
            </summary>
            <param name="value">A value to write.</param>
            <since>5.0</since>
        </member>
        <member name="M:Rhino.FileIO.BinaryArchiveWriter.WriteSizeF(System.Drawing.SizeF)">
            <summary>
            Writes a <see cref="T:System.Drawing.SizeF"/> value to the archive.
            </summary>
            <param name="value">A value to write.</param>
            <since>5.0</since>
        </member>
        <member name="M:Rhino.FileIO.BinaryArchiveWriter.WriteGeometryArray(System.Collections.Generic.IEnumerable{Rhino.Geometry.GeometryBase})">
            <since>7.0</since>
        </member>
        <member name="M:Rhino.FileIO.BinaryArchiveWriter.WriteInterval(Rhino.Geometry.Interval)">
            <summary>
            Writes a <see cref="T:Rhino.Geometry.Interval"/> value to the archive.
            </summary>
            <param name="value">A value to write.</param>
            <since>5.0</since>
        </member>
        <member name="M:Rhino.FileIO.BinaryArchiveWriter.WritePoint2d(Rhino.Geometry.Point2d)">
            <summary>
            Writes a <see cref="T:Rhino.Geometry.Point2d"/> value to the archive.
            </summary>
            <param name="value">A value to write.</param>
            <since>5.0</since>
        </member>
        <member name="M:Rhino.FileIO.BinaryArchiveWriter.WritePoint3d(Rhino.Geometry.Point3d)">
            <summary>
            Writes a <see cref="T:Rhino.Geometry.Point3d"/> value to the archive.
            </summary>
            <param name="value">A value to write.</param>
            <since>5.0</since>
        </member>
        <member name="M:Rhino.FileIO.BinaryArchiveWriter.WritePoint4d(Rhino.Geometry.Point4d)">
            <summary>
            Writes a <see cref="T:Rhino.Geometry.Point4d"/> value to the archive.
            </summary>
            <param name="value">A value to write.</param>
            <since>5.0</since>
        </member>
        <member name="M:Rhino.FileIO.BinaryArchiveWriter.WriteVector2d(Rhino.Geometry.Vector2d)">
            <summary>
            Writes a <see cref="T:Rhino.Geometry.Vector2d"/> value to the archive.
            </summary>
            <param name="value">A value to write.</param>
            <since>5.0</since>
        </member>
        <member name="M:Rhino.FileIO.BinaryArchiveWriter.WriteVector3d(Rhino.Geometry.Vector3d)">
            <summary>
            Writes a <see cref="T:Rhino.Geometry.Vector3d"/> value to the archive.
            </summary>
            <param name="value">A value to write.</param>
            <since>5.0</since>
        </member>
        <member name="M:Rhino.FileIO.BinaryArchiveWriter.WriteBoundingBox(Rhino.Geometry.BoundingBox)">
            <summary>
            Writes a <see cref="T:Rhino.Geometry.BoundingBox"/> value to the archive.
            </summary>
            <param name="value">A value to write.</param>
            <since>5.0</since>
        </member>
        <member name="M:Rhino.FileIO.BinaryArchiveWriter.WriteRay3d(Rhino.Geometry.Ray3d)">
            <summary>
            Writes a <see cref="T:Rhino.Geometry.Ray3d"/> value to the archive.
            </summary>
            <param name="value">A value to write.</param>
            <since>5.0</since>
        </member>
        <member name="M:Rhino.FileIO.BinaryArchiveWriter.WriteTransform(Rhino.Geometry.Transform)">
            <summary>
            Writes a <see cref="T:Rhino.Geometry.Transform"/> value to the archive.
            </summary>
            <param name="value">A value to write.</param>
            <since>5.0</since>
        </member>
        <member name="M:Rhino.FileIO.BinaryArchiveWriter.WritePlane(Rhino.Geometry.Plane)">
            <summary>
            Writes a <see cref="T:Rhino.Geometry.Plane"/> value to the archive.
            </summary>
            <param name="value">A value to write.</param>
            <since>5.0</since>
        </member>
        <member name="M:Rhino.FileIO.BinaryArchiveWriter.WriteLine(Rhino.Geometry.Line)">
            <summary>
            Writes a <see cref="T:Rhino.Geometry.Line"/> value to the archive.
            </summary>
            <param name="value">A value to write.</param>
            <since>5.0</since>
        </member>
        <member name="M:Rhino.FileIO.BinaryArchiveWriter.WritePoint3f(Rhino.Geometry.Point3f)">
            <summary>
            Writes a <see cref="T:Rhino.Geometry.Point3f"/> value to the archive.
            </summary>
            <param name="value">A value to write.</param>
            <since>5.0</since>
        </member>
        <member name="M:Rhino.FileIO.BinaryArchiveWriter.WriteVector3f(Rhino.Geometry.Vector3f)">
            <summary>
            Writes a <see cref="T:Rhino.Geometry.Vector3f"/> value to the archive.
            </summary>
            <param name="value">A value to write.</param>
            <since>5.0</since>
        </member>
        <member name="M:Rhino.FileIO.BinaryArchiveWriter.WriteMeshingParameters(Rhino.Geometry.MeshingParameters)">
            <summary>
            Writes a <see cref="T:Rhino.Geometry.MeshingParameters"/> value to the archive.
            </summary>
            <param name="value">A value to write.</param>
            <since>5.0</since>
        </member>
        <member name="M:Rhino.FileIO.BinaryArchiveWriter.WriteGeometry(Rhino.Geometry.GeometryBase)">
            <summary>
            Writes a <see cref="T:Rhino.Geometry.GeometryBase"/> value to the archive.
            </summary>
            <param name="value">A value to write.</param>
            <since>5.0</since>
        </member>
        <member name="M:Rhino.FileIO.BinaryArchiveWriter.WriteRenderSettings(Rhino.Render.RenderSettings)">
            <summary>
            Writes a <see cref="T:Rhino.Render.RenderSettings"/> value to the archive.
            </summary>
            <param name="value">A value to write.</param>
            <since>6.0</since>
        </member>
        <member name="M:Rhino.FileIO.BinaryArchiveWriter.WriteEmptyCheckSum">
            <summary>
            Reads a legacy ON_CheckSum, only provided to read data chunks from old
            V5 files, the CheckSum read is discarded
            </summary>
            <since>6.0</since>
            <deprecated>6.0</deprecated>
        </member>
        <member name="T:Rhino.FileIO.BinaryArchiveReader">
            <summary>
            Represents an entity that is capable of reading a binary archive and
            instantiating strongly-typed objects.
            </summary>
        </member>
        <member name="P:Rhino.FileIO.BinaryArchiveReader.ReadErrorOccured">
            <summary>
            Gets or sets whether en error occurred during reading.
            </summary>
            <since>5.0</since>
        </member>
        <member name="P:Rhino.FileIO.BinaryArchiveReader.Archive3dmVersion">
            <summary>
            If a 3dm archive is being read or written, then this is the
            version of the 3dm archive format (1, 2, 3, 4 or 5).
            0     a 3dm archive is not being read/written
            1     a version 1 3dm archive is being read/written
            2     a version 2 3dm archive is being read/written
            3     a version 3 3dm archive is being read/written
            4     a version 4 3dm archive is being read/written
            5     an old version 5 3dm archive is being read
            50    a version 5 3dm archive is being read/written.
            </summary>
            <since>5.0</since>
        </member>
        <member name="M:Rhino.FileIO.BinaryArchiveReader.EnableCRCCalculation(System.Boolean)">
            <summary>
            Expert user function to control CRC calculation while reading and writing.
            Typically this is used when seeking around and reading/writing information
            in non-serial order.
            </summary>
            <param name="enable"></param>
            <returns>
            Current state of CRC calculation.  Use the returned value to restore the
            CRC calculation setting after you are finished doing your fancy pants
            expert IO.
            </returns>
            <since>6.0</since>
        </member>
        <member name="P:Rhino.FileIO.BinaryArchiveReader.CurrentPosition">
            <summary>current offset (in bytes) into archive ( like ftell() )</summary>
            <since>6.0</since>
        </member>
        <member name="M:Rhino.FileIO.BinaryArchiveReader.SeekFromCurrentPosition(System.Int64)">
            <summary>
            seek from current position ( like fseek( ,SEEK_CUR) )
            </summary>
            <param name="byteOffset"></param>
            <returns></returns>
        </member>
        <member name="M:Rhino.FileIO.BinaryArchiveReader.SeekFromCurrentPosition(System.UInt64,System.Boolean)">
            <summary>
            seek from current position ( like fseek( ,SEEK_CUR) )
            </summary>
            <param name="byteOffset"></param>
            <param name="forward">seek forward of backward in the archive</param>
            <returns></returns>
        </member>
        <member name="M:Rhino.FileIO.BinaryArchiveReader.SeekFromStart(System.UInt64)">
            <summary>
            seek from start position ( like fseek( ,SEEK_SET) )
            </summary>
            <param name="byteOffset"></param>
            <returns></returns>
        </member>
        <member name="M:Rhino.FileIO.BinaryArchiveReader.BeginRead3dmChunk(System.UInt32,System.Int32@,System.Int32@)">
            <summary>
            Begins reading a chunk that must be in the archive at this location.
            </summary>
            <param name="expectedTypeCode"></param>
            <param name="majorVersion"></param>
            <param name="minorVersion"></param>
            <returns>
            True if beginning of the chunk was read.  In this case you must call EndRead3dmChunk(),
            even if something goes wrong while you attempt to read the interior of the chunk.
            False if the chunk did not exist at the current location in the file.
            </returns>
            <since>6.0</since>
        </member>
        <member name="M:Rhino.FileIO.BinaryArchiveReader.BeginRead3dmChunk(System.UInt32@,System.Int64@)">
            <summary>
            Begins reading a chunk that must be in the archive at this location.
            </summary>
            <param name="typeCode"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Rhino.FileIO.BinaryArchiveReader.EndRead3dmChunk(System.Boolean)">
            <summary>
            Calling this will skip rest of stuff in chunk if it was only partially read.
            </summary>
            <param name="suppressPartiallyReadChunkWarning">
            Generally, a call to ON_WARNING is made when a chunk is partially read.
            If suppressPartiallyReadChunkWarning is true, then no warning is issued
            for partially read chunks.
            </param>
            <returns></returns>
            <since>6.0</since>
        </member>
        <member name="M:Rhino.FileIO.BinaryArchiveReader.Read3dmChunkVersion(System.Int32@,System.Int32@)">
            <summary>
            A chunk version is a single byte that encodes a major.minor
            version number.  Useful when creating I/O code for 3dm chunks
            that may change in the future.  Increment the minor version 
            number if new information is added to the end of the chunk. 
            Increment the major version if the format of the chunk changes
            in some other way.
            </summary>
            <param name="major">0 to 15.</param>
            <param name="minor">0 to 16.</param>
            <returns>true on successful read.</returns>
            <since>5.0</since>
        </member>
        <member name="M:Rhino.FileIO.BinaryArchiveReader.ReadDictionary">
            <summary>
            Reads a complete <see cref="T:Rhino.Collections.ArchivableDictionary"/> from the archive.
            </summary>
            <returns>The newly instantiated object.</returns>
            <since>5.0</since>
        </member>
        <member name="M:Rhino.FileIO.BinaryArchiveReader.ReadBool">
            <summary>
            Reads a <see cref="T:System.Boolean"/> from the archive.
            </summary>
            <returns>The value that was read.</returns>
            <since>5.0</since>
        </member>
        <member name="M:Rhino.FileIO.BinaryArchiveReader.ReadByte">
            <summary>
            Reads a <see cref="T:System.Byte"/> from the archive.
            </summary>
            <returns>The value that was read.</returns>
            <since>5.0</since>
        </member>
        <member name="M:Rhino.FileIO.BinaryArchiveReader.ReadSByte">
            <summary>
            Reads a <see cref="T:System.SByte"/> from the archive.
            </summary>
            <returns>The value that was read.</returns>
            <since>5.0</since>
        </member>
        <member name="M:Rhino.FileIO.BinaryArchiveReader.ReadShort">
            <summary>
            Reads a <see cref="T:System.Int16"/> from the archive.
            </summary>
            <returns>The value that was read.</returns>
            <since>5.0</since>
        </member>
        <member name="M:Rhino.FileIO.BinaryArchiveReader.ReadUShort">
            <summary>
            Reads a <see cref="T:System.UInt16"/> from the archive.
            </summary>
            <returns>The value that was read.</returns>
            <since>5.0</since>
        </member>
        <member name="M:Rhino.FileIO.BinaryArchiveReader.ReadInt">
            <summary>
            Reads a <see cref="T:System.Int32"/> from the archive.
            </summary>
            <returns>The value that was read.</returns>
            <since>5.0</since>
        </member>
        <member name="M:Rhino.FileIO.BinaryArchiveReader.ReadUInt">
            <summary>
            Reads a <see cref="T:System.UInt32"/> from the archive.
            </summary>
            <returns>The value that was read.</returns>
            <since>5.0</since>
        </member>
        <member name="M:Rhino.FileIO.BinaryArchiveReader.ReadInt64">
            <summary>
            Reads a <see cref="T:System.Int64"/> from the archive.
            </summary>
            <returns>The value that was read.</returns>
            <since>5.0</since>
        </member>
        <member name="M:Rhino.FileIO.BinaryArchiveReader.ReadSingle">
            <summary>
            Reads a <see cref="T:System.Single"/> from the archive.
            </summary>
            <returns>The value that was read.</returns>
            <since>5.0</since>
        </member>
        <member name="M:Rhino.FileIO.BinaryArchiveReader.ReadDouble">
            <summary>
            Reads a <see cref="T:System.Double"/> from the archive.
            </summary>
            <returns>The value that was read.</returns>
            <since>5.0</since>
        </member>
        <member name="M:Rhino.FileIO.BinaryArchiveReader.ReadGuid">
            <summary>
            Reads a <see cref="T:System.Guid"/> from the archive.
            </summary>
            <returns>The value that was read.</returns>
            <since>5.0</since>
        </member>
        <member name="M:Rhino.FileIO.BinaryArchiveReader.ReadString">
            <summary>
            Reads a <see cref="T:System.String"/> from the archive.
            </summary>
            <returns>The value that was read.</returns>
            <since>5.0</since>
        </member>
        <member name="M:Rhino.FileIO.BinaryArchiveReader.ReadUtf8String">
            <summary>
            Reads a <see cref="T:System.String"/> from the archive.
            </summary>
            <returns>The value that was read.</returns>
            <since>6.0</since>
        </member>
        <member name="M:Rhino.FileIO.BinaryArchiveReader.ReadBoolArray">
            <summary>
            Reads an array of <see cref="T:System.Boolean"/> from the archive.
            <para>An array is returned even if the input was another enumerable type.</para>
            </summary>
            <returns>The array that was read.</returns>
            <since>5.0</since>
        </member>
        <member name="M:Rhino.FileIO.BinaryArchiveReader.ReadByteArray">
            <summary>
            Reads an array of <see cref="T:System.Byte"/> from the archive.
            <para>An array is returned even if the input was another enumerable type.</para>
            </summary>
            <returns>The array that was read.</returns>
            <since>5.0</since>
        </member>
        <member name="M:Rhino.FileIO.BinaryArchiveReader.ReadCompressedBuffer">
            <summary>
            Reads an array of compressed <see cref="T:System.Byte"/> information from the archive and uncompresses it.
            <para>An array is returned even if the input was another enumerable type.</para>
            </summary>
            <returns>The array that was read.</returns>
            <since>5.9</since>
        </member>
        <member name="M:Rhino.FileIO.BinaryArchiveReader.ReadSByteArray">
            <summary>
            Reads an array of <see cref="T:System.SByte"/> from the archive.
            <para>An array is returned even if the input was another enumerable type.</para>
            </summary>
            <returns>The array that was read.</returns>
            <since>5.0</since>
        </member>
        <member name="M:Rhino.FileIO.BinaryArchiveReader.ReadShortArray">
            <summary>
            Reads an array of <see cref="T:System.Int16"/> from the archive.
            <para>An array is returned even if the input was another enumerable type.</para>
            </summary>
            <returns>The array that was read.</returns>
            <since>5.0</since>
        </member>
        <member name="M:Rhino.FileIO.BinaryArchiveReader.ReadIntArray">
            <summary>
            Reads an array of <see cref="T:System.Int32"/> from the archive.
            <para>An array is returned even if the input was another enumerable type.</para>
            </summary>
            <returns>The array that was read.</returns>
            <since>5.0</since>
        </member>
        <member name="M:Rhino.FileIO.BinaryArchiveReader.ReadSingleArray">
            <summary>
            Reads an array of <see cref="T:System.Single"/> from the archive.
            <para>An array is returned even if the input was another enumerable type.</para>
            </summary>
            <returns>The array that was read.</returns>
            <since>5.0</since>
        </member>
        <member name="M:Rhino.FileIO.BinaryArchiveReader.ReadDoubleArray">
            <summary>
            Reads an array of <see cref="T:System.Double"/> from the archive.
            <para>An array is returned even if the input was another enumerable type.</para>
            </summary>
            <returns>The array that was read.</returns>
            <since>5.0</since>
        </member>
        <member name="M:Rhino.FileIO.BinaryArchiveReader.ReadGuidArray">
            <summary>
            Reads an array of <see cref="T:System.Guid"/> from the archive.
            <para>An array is returned even if the input was another enumerable type.</para>
            </summary>
            <returns>The array that was read.</returns>
            <since>5.0</since>
        </member>
        <member name="M:Rhino.FileIO.BinaryArchiveReader.ReadStringArray">
            <summary>
            Reads an array of <see cref="T:System.String"/> from the archive.
            <para>An array is returned even if the input was another enumerable type.</para>
            </summary>
            <returns>The array that was read.</returns>
            <since>5.0</since>
        </member>
        <member name="M:Rhino.FileIO.BinaryArchiveReader.ReadColor">
            <summary>
            Reads a <see cref="T:System.Drawing.Color"/> from the archive.
            </summary>
            <returns>The element that was read.</returns>
            <since>5.0</since>
        </member>
        <member name="M:Rhino.FileIO.BinaryArchiveReader.ReadPoint">
            <summary>
            Reads a <see cref="T:System.Drawing.Point"/> from the archive.
            </summary>
            <returns>The element that was read.</returns>
            <since>5.0</since>
        </member>
        <member name="M:Rhino.FileIO.BinaryArchiveReader.ReadPointF">
            <summary>
            Reads a <see cref="T:System.Drawing.PointF"/> from the archive.
            </summary>
            <returns>The element that was read.</returns>
            <since>5.0</since>
        </member>
        <member name="M:Rhino.FileIO.BinaryArchiveReader.ReadRectangle">
            <summary>
            Reads a <see cref="T:System.Drawing.Rectangle"/> from the archive.
            </summary>
            <returns>The element that was read.</returns>
            <since>5.0</since>
        </member>
        <member name="M:Rhino.FileIO.BinaryArchiveReader.ReadRectangleF">
            <summary>
            Reads a <see cref="T:System.Drawing.RectangleF"/> from the archive.
            </summary>
            <returns>The element that was read.</returns>
            <since>5.0</since>
        </member>
        <member name="M:Rhino.FileIO.BinaryArchiveReader.ReadSize">
            <summary>
            Reads a <see cref="T:System.Drawing.Size"/> from the archive.
            </summary>
            <returns>The element that was read.</returns>
            <since>5.0</since>
        </member>
        <member name="M:Rhino.FileIO.BinaryArchiveReader.ReadSizeF">
            <summary>
            Reads a <see cref="T:System.Drawing.SizeF"/> from the archive.
            </summary>
            <returns>The element that was read.</returns>
            <since>5.0</since>
        </member>
        <member name="M:Rhino.FileIO.BinaryArchiveReader.ReadInterval">
            <summary>
            Reads a <see cref="T:Rhino.Geometry.Interval"/> from the archive.
            </summary>
            <returns>The element that was read.</returns>
            <since>5.0</since>
        </member>
        <member name="M:Rhino.FileIO.BinaryArchiveReader.ReadPoint2d">
            <summary>
            Reads a <see cref="T:Rhino.Geometry.Point2d"/> from the archive.
            </summary>
            <returns>The element that was read.</returns>
            <since>5.0</since>
        </member>
        <member name="M:Rhino.FileIO.BinaryArchiveReader.ReadPoint3d">
            <summary>
            Reads a <see cref="T:Rhino.Geometry.Point3d"/> from the archive.
            </summary>
            <returns>The element that was read.</returns>
            <since>5.0</since>
        </member>
        <member name="M:Rhino.FileIO.BinaryArchiveReader.ReadPoint4d">
            <summary>
            Reads a <see cref="T:Rhino.Geometry.Point4d"/> from the archive.
            </summary>
            <returns>The element that was read.</returns>
            <since>5.0</since>
        </member>
        <member name="M:Rhino.FileIO.BinaryArchiveReader.ReadVector2d">
            <summary>
            Reads a <see cref="T:Rhino.Geometry.Vector2d"/> from the archive.
            </summary>
            <returns>The element that was read.</returns>
            <since>5.0</since>
        </member>
        <member name="M:Rhino.FileIO.BinaryArchiveReader.ReadVector3d">
            <summary>
            Reads a <see cref="T:Rhino.Geometry.Vector3d"/> from the archive.
            </summary>
            <returns>The element that was read.</returns>
            <since>5.0</since>
        </member>
        <member name="M:Rhino.FileIO.BinaryArchiveReader.ReadBoundingBox">
            <summary>
            Reads a <see cref="T:Rhino.Geometry.BoundingBox"/> from the archive.
            </summary>
            <returns>The element that was read.</returns>
            <since>5.0</since>
        </member>
        <member name="M:Rhino.FileIO.BinaryArchiveReader.ReadRay3d">
            <summary>
            Reads a <see cref="T:Rhino.Geometry.Ray3d"/> from the archive.
            </summary>
            <returns>The element that was read.</returns>
            <since>5.0</since>
        </member>
        <member name="M:Rhino.FileIO.BinaryArchiveReader.ReadTransform">
            <summary>
            Reads a <see cref="T:Rhino.Geometry.Transform"/> from the archive.
            </summary>
            <returns>The element that was read.</returns>
            <since>5.0</since>
        </member>
        <member name="M:Rhino.FileIO.BinaryArchiveReader.ReadPlane">
            <summary>
            Reads a <see cref="T:Rhino.Geometry.Plane"/> from the archive.
            </summary>
            <returns>The element that was read.</returns>
            <since>5.0</since>
        </member>
        <member name="M:Rhino.FileIO.BinaryArchiveReader.ReadLine">
            <summary>
            Reads a <see cref="T:Rhino.Geometry.Line"/> from the archive.
            </summary>
            <returns>The element that was read.</returns>
            <since>5.0</since>
        </member>
        <member name="M:Rhino.FileIO.BinaryArchiveReader.ReadPoint3f">
            <summary>
            Reads a <see cref="T:Rhino.Geometry.Point3f"/> from the archive.
            </summary>
            <returns>The element that was read.</returns>
            <since>5.0</since>
        </member>
        <member name="M:Rhino.FileIO.BinaryArchiveReader.ReadVector3f">
            <summary>
            Reads a <see cref="T:Rhino.Geometry.Vector3f"/> from the archive.
            </summary>
            <returns>The element that was read.</returns>
            <since>5.0</since>
        </member>
        <member name="M:Rhino.FileIO.BinaryArchiveReader.ReadMeshingParameters">
            <summary>
            Reads a <see cref="T:Rhino.Geometry.MeshingParameters"/> from the archive.
            </summary>
            <returns>The element that was read.</returns>
            <since>5.0</since>
        </member>
        <member name="M:Rhino.FileIO.BinaryArchiveReader.ReadGeometry">
            <summary>
            Reads a <see cref="T:Rhino.Geometry.GeometryBase"/>-derived object from the archive.
            <para>The <see cref="T:Rhino.Geometry.GeometryBase"/> class is abstract.</para>
            </summary>
            <returns>The element that was read.</returns>
            <since>5.0</since>
        </member>
        <member name="M:Rhino.FileIO.BinaryArchiveReader.ReadGeometryArray">
            <since>7.0</since>
        </member>
        <member name="M:Rhino.FileIO.BinaryArchiveReader.ReadRenderSettings">
            <summary>
            Reads a <see cref="T:Rhino.Render.RenderSettings"/>-derived object from the archive.
            </summary>
            <returns>The element that was read.</returns>
            <since>6.0</since>
        </member>
        <member name="M:Rhino.FileIO.BinaryArchiveReader.ReadCheckSum">
            <summary>
            Reads a legacy ON_CheckSum, only provided to read data chunks from old
            V5 files, the CheckSum read is discarded
            </summary>
            <since>6.0</since>
            <deprecated>6.0</deprecated>
        </member>
        <member name="M:Rhino.FileIO.BinaryArchiveReader.Read3dmStartSection(System.Int32@,System.String@)">
            <summary>
            
            </summary>
            <param name="version">.3dm file version (2, 3, 4, 5 or 50)</param>
            <param name="comment">
            String with application name, et cetera.  This information is primarily
            used when debugging files that contain problems.  McNeel and Associates
            stores application name, application version, compile date, and the OS
            in use when file was written.
            </param>
            <returns>true on success</returns>
            <since>5.1</since>
        </member>
        <member name="M:Rhino.FileIO.BinaryArchiveReader.Dump3dmChunk(Rhino.FileIO.TextLog)">
            <summary>
            Function for studying contents of a file.  The primary use is as an aid
            to help dig through files that have been damaged (bad disks, transmission
            errors, etc.) If an error is found, a line that begins with the word
            "ERROR" is printed.
            </summary>
            <param name="log">log where information is printed to</param>
            <returns>
            0 if something went wrong, otherwise the typecode of the chunk that
            was just studied.
            </returns>
            <since>5.1</since>
        </member>
        <member name="M:Rhino.FileIO.BinaryArchiveReader.AtEnd">
            <summary>
            true if at end of a file
            </summary>
            <returns></returns>
            <since>5.1</since>
        </member>
        <member name="M:Rhino.FileIO.BinaryArchiveReader.BeginReadDictionaryEntry(System.Int32@,System.String@)">
            <summary>See return.</summary>
            <returns>
            0: serious IO error
            1: success
            read information and then call EndReadDictionaryEntry()
            2: at end of dictionary.
            </returns>
        </member>
        <member name="T:Rhino.FileIO.BinaryArchiveMode">
            <since>5.1</since>
        </member>
        <member name="M:Rhino.FileIO.BinaryArchiveFile.#ctor(System.String,Rhino.FileIO.BinaryArchiveMode)">
            <since>5.1</since>
        </member>
        <member name="M:Rhino.FileIO.BinaryArchiveFile.Open">
            <since>5.1</since>
        </member>
        <member name="M:Rhino.FileIO.BinaryArchiveFile.Close">
            <since>5.1</since>
        </member>
        <member name="P:Rhino.FileIO.BinaryArchiveFile.Reader">
            <since>5.1</since>
        </member>
        <member name="P:Rhino.FileIO.BinaryArchiveFile.Writer">
            <since>5.1</since>
        </member>
        <member name="M:Rhino.FileIO.BinaryArchiveFile.Finalize">
            <summary>
            Passively reclaims unmanaged resources when the class user did not explicitly call Dispose().
            </summary>
        </member>
        <member name="M:Rhino.FileIO.BinaryArchiveFile.Dispose">
            <summary>
            Actively reclaims unmanaged resources that this instance uses.
            </summary>
            <since>5.1</since>
        </member>
        <member name="T:Rhino.FileIO.SerializationOptions">
            <summary>
            Contains options for serializing -or storing- data,
            such as Rhino version and user data.
            </summary>
        </member>
        <member name="M:Rhino.FileIO.SerializationOptions.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Rhino.FileIO.SerializationOptions"/> class.
            </summary>
            <since>5.0</since>
        </member>
        <member name="P:Rhino.FileIO.SerializationOptions.RhinoVersion">
            <summary>
            Gets or sets a value indicating the Rhino version.
            </summary>
            <since>5.0</since>
        </member>
        <member name="P:Rhino.FileIO.SerializationOptions.WriteUserData">
            <summary>
            Gets or sets a value indicating whether to write user data.
            </summary>
            <since>5.0</since>
        </member>
        <member name="T:Rhino.FileIO.File3dmEmbeddedFiles">
            <summary></summary>
        </member>
        <member name="M:Rhino.FileIO.File3dmEmbeddedFiles.Add(System.String)">
            <summary>
            Add a new embedded file and load it from a local file.
            </summary>
            <since>8.0</since>
        </member>
        <member name="M:Rhino.FileIO.File3dmEmbeddedFiles.#ctor(Rhino.FileIO.File3dm)">
            <summary></summary>
            <since>8.0</since>
        </member>
        <member name="M:Rhino.FileIO.File3dmEmbeddedFiles.GetEnumerator">
            <summary></summary>
            <since>8.0</since>
        </member>
        <member name="M:Rhino.FileIO.File3dmEmbeddedFiles.System#Collections#IEnumerable#GetEnumerator">
            <summary></summary>
            <since>8.0</since>
        </member>
        <member name="T:Rhino.FileIO.File3dmEmbeddedFile">
            <since>8.0</since>
        </member>
        <member name="M:Rhino.FileIO.File3dmEmbeddedFile.#ctor">
            <summary/>
            <since>8.0</since>
        </member>
        <member name="P:Rhino.FileIO.File3dmEmbeddedFile.Filename">
            <summary>
            <return>the fully-qualified filename of the embedded file. This filename may or may not refer to a
            local file depending on the way the embedded file was loaded. For example, if it was loaded from an
            archive, the filename could be that of a file on a different computer.</return>
            </summary>
            <since>8.0</since>
        </member>
        <member name="M:Rhino.FileIO.File3dmEmbeddedFile.SaveToFile(System.String)">
            <summary>
            Saves the contents of the embedded file to a local file.
            Returns true if successful, else false.
            </summary>
            <since>8.0</since>
        </member>
        <member name="P:Rhino.FileIO.File3dmEmbeddedFile.ComponentType">
            <summary>
            Returns <see cref="F:Rhino.DocObjects.ModelComponentType.EmbeddedFile"/>.
            </summary>
            <since>8.0</since>
        </member>
        <member name="T:Rhino.FileIO.File3dm">
            <summary>
            Represents a 3dm file, which is stored using the OpenNURBS file standard.
            <para>The 3dm format is the main Rhinoceros storage format.</para>
            <para>Visit http://www.opennurbs.com/ for more details.</para>
            </summary>
        </member>
        <member name="T:Rhino.FileIO.File3dm.TableTypeFilter">
            <summary></summary>
            <since>5.9</since>
        </member>
        <member name="F:Rhino.FileIO.File3dm.TableTypeFilter.None">
            <summary></summary>
        </member>
        <member name="F:Rhino.FileIO.File3dm.TableTypeFilter.Properties">
            <summary></summary>
        </member>
        <member name="F:Rhino.FileIO.File3dm.TableTypeFilter.Settings">
            <summary></summary>
        </member>
        <member name="F:Rhino.FileIO.File3dm.TableTypeFilter.Bitmap">
            <summary></summary>
        </member>
        <member name="F:Rhino.FileIO.File3dm.TableTypeFilter.TextureMapping">
            <summary></summary>
        </member>
        <member name="F:Rhino.FileIO.File3dm.TableTypeFilter.Material">
            <summary></summary>
        </member>
        <member name="F:Rhino.FileIO.File3dm.TableTypeFilter.Linetype">
            <summary></summary>
        </member>
        <member name="F:Rhino.FileIO.File3dm.TableTypeFilter.Layer">
            <summary></summary>
        </member>
        <member name="F:Rhino.FileIO.File3dm.TableTypeFilter.Group">
            <summary></summary>
        </member>
        <member name="F:Rhino.FileIO.File3dm.TableTypeFilter.Font">
            <summary></summary>
        </member>
        <member name="F:Rhino.FileIO.File3dm.TableTypeFilter.FutureFont">
            <summary></summary>
        </member>
        <member name="F:Rhino.FileIO.File3dm.TableTypeFilter.Dimstyle">
            <summary></summary>
        </member>
        <member name="F:Rhino.FileIO.File3dm.TableTypeFilter.Light">
            <summary></summary>
        </member>
        <member name="F:Rhino.FileIO.File3dm.TableTypeFilter.Hatchpattern">
            <summary></summary>
        </member>
        <member name="F:Rhino.FileIO.File3dm.TableTypeFilter.InstanceDefinition">
            <summary></summary>
        </member>
        <member name="F:Rhino.FileIO.File3dm.TableTypeFilter.ObjectTable">
            <summary></summary>
        </member>
        <member name="F:Rhino.FileIO.File3dm.TableTypeFilter.Historyrecord">
            <summary></summary>
        </member>
        <member name="F:Rhino.FileIO.File3dm.TableTypeFilter.UserTable">
            <summary></summary>
        </member>
        <member name="T:Rhino.FileIO.File3dm.ObjectTypeFilter">
            <summary></summary>
            <since>5.9</since>
        </member>
        <member name="F:Rhino.FileIO.File3dm.ObjectTypeFilter.None">
            <summary></summary>
        </member>
        <member name="F:Rhino.FileIO.File3dm.ObjectTypeFilter.Point">
            <summary>some type of Point</summary>
        </member>
        <member name="F:Rhino.FileIO.File3dm.ObjectTypeFilter.Pointset">
            <summary>some type of PointCloud, PointGrid, ...</summary>
        </member>
        <member name="F:Rhino.FileIO.File3dm.ObjectTypeFilter.Curve">
            <summary>some type of Curve like LineCurve, NurbsCurve, etc.</summary>
        </member>
        <member name="F:Rhino.FileIO.File3dm.ObjectTypeFilter.Surface">
            <summary>some type of Surface like PlaneSurface, NurbsSurface, etc.</summary>
        </member>
        <member name="F:Rhino.FileIO.File3dm.ObjectTypeFilter.Brep">
            <summary>some type of Brep</summary>
        </member>
        <member name="F:Rhino.FileIO.File3dm.ObjectTypeFilter.Mesh">
            <summary>some type of Mesh</summary>
        </member>
        <member name="F:Rhino.FileIO.File3dm.ObjectTypeFilter.Annotation">
            <summary>some type of Annotation</summary>
        </member>
        <member name="F:Rhino.FileIO.File3dm.ObjectTypeFilter.InstanceDefinition">
            <summary>some type of InstanceDefinition</summary>
        </member>
        <member name="F:Rhino.FileIO.File3dm.ObjectTypeFilter.InstanceReference">
            <summary>some type of InstanceReference</summary>
        </member>
        <member name="F:Rhino.FileIO.File3dm.ObjectTypeFilter.TextDot">
            <summary>some type of TextDot</summary>
        </member>
        <member name="F:Rhino.FileIO.File3dm.ObjectTypeFilter.DetailView">
            <summary>some type of DetailView</summary>
        </member>
        <member name="F:Rhino.FileIO.File3dm.ObjectTypeFilter.Hatch">
            <summary>some type of Hatch</summary>
        </member>
        <member name="F:Rhino.FileIO.File3dm.ObjectTypeFilter.Extrusion">
            <summary>some type of Extrusion</summary>
        </member>
        <member name="F:Rhino.FileIO.File3dm.ObjectTypeFilter.Any">
            <summary></summary>
        </member>
        <member name="M:Rhino.FileIO.File3dm.Read(System.String)">
            <summary>
            Reads a 3dm file from a specified location.
            </summary>
            <param name="path">The file to read.</param>
            <returns>new File3dm on success, null on error.</returns>
            <exception cref="T:System.IO.FileNotFoundException">If path does not exist.</exception>
            <since>5.0</since>
        </member>
        <member name="M:Rhino.FileIO.File3dm.Read(System.String,Rhino.FileIO.File3dm.TableTypeFilter,Rhino.FileIO.File3dm.ObjectTypeFilter)">
            <summary>
            Reads a 3dm file from a specified location.
            </summary>
            <param name="path">The file to read.</param>
            <param name="tableTypeFilterFilter">
            If tableTypeFilterFilter is None, then everything in the archive is read.
            Otherwise tableTypeFilterFilter identifies what tables should be read.
            </param>
            <param name="objectTypeFilter">
            If objectTypeFilter is not None, then is a filter made by bitwise or-ing
            values to select which types of objects will be read from the model object
            table.
            </param>
            <returns>new File3dm on success, null on error.</returns>
            <exception cref="T:System.IO.FileNotFoundException">If path does not exist.</exception>
            <since>5.9</since>
        </member>
        <member name="M:Rhino.FileIO.File3dm.ReadWithLog(System.String,Rhino.FileIO.File3dm.TableTypeFilter,Rhino.FileIO.File3dm.ObjectTypeFilter,System.String@)">
            <summary>
            Reads a 3dm file from a specified location.
            </summary>
            <param name="path">The file to read.</param>
            <param name="tableTypeFilterFilter">
            If tableTypeFilterFilter is None, then everything in the archive is read.
            Otherwise tableTypeFilterFilter identifies what tables should be read.
            </param>
            <param name="objectTypeFilter">
            If objectTypeFilter is not None, then is a filter made by bitwise or-ing
            values to select which types of objects will be read from the model object
            table.
            </param>
            <param name="errorLog">Any archive reading errors are logged here.</param>
            <returns>new File3dm on success, null on error.</returns>
            <exception cref="T:System.IO.FileNotFoundException">If path does not exist.</exception>
            <since>5.9</since>
        </member>
        <member name="M:Rhino.FileIO.File3dm.ReadWithLog(System.String,System.String@)">
            <summary>
            Read a 3dm file from a specified location and log any archive
            reading errors.
            </summary>
            <param name="path">The file to read.</param>
            <param name="errorLog">Any archive reading errors are logged here.</param>
            <returns>New File3dm on success, null on error.</returns>
            <exception cref="T:System.IO.FileNotFoundException">If path does not exist.</exception>
            <since>5.0</since>
        </member>
        <member name="M:Rhino.FileIO.File3dm.FromByteArray(System.Byte[])">
            <summary>
            Read a 3dm file from a byte array
            </summary>
            <param name="bytes"></param>
            <returns>New File3dm on success, null on error.</returns>
            <since>7.0</since>
        </member>
        <member name="M:Rhino.FileIO.File3dm.ReadNotes(System.String)">
            <summary>Reads only the notes from an existing 3dm file.</summary>
            <param name="path">The file from which to read the notes.</param>
            <returns>The 3dm file notes.</returns>
            <exception cref="T:System.IO.FileNotFoundException">If path does not exist, is null or cannot be accessed because of permissions.</exception>
            <since>5.0</since>
        </member>
        <member name="M:Rhino.FileIO.File3dm.ReadArchiveVersion(System.String)">
            <summary> Reads only the archive 3dm version from an existing 3dm file. </summary>
            <param name="path">The file from which to read the archive version.</param>
            <returns>The 3dm file archive version.</returns>
            <exception cref="T:System.IO.FileNotFoundException">If path does not exist, is null or cannot be accessed because of permissions.</exception>
            <since>5.10</since>
        </member>
        <member name="M:Rhino.FileIO.File3dm.ReadRevisionHistory(System.String,System.String@,System.String@,System.Int32@,System.DateTime@,System.DateTime@)">
            <summary>
            Quickly check a file for it's revision information.  This function does
            not read the entire file, just what it needs to get revision information out
            </summary>
            <param name="path">path to the 3dm file</param>
            <param name="createdBy">original author of the file</param>
            <param name="lastEditedBy">last person to edit the file</param>
            <param name="revision">which revision this file is at</param>
            <param name="createdOn">date file was created (DateTime.MinValue if not set in file)</param>
            <param name="lastEditedOn">date file was last edited (DateTime.MinValue if not set in file)</param>
            <returns>true on success</returns>
            <since>5.6</since>
        </member>
        <member name="M:Rhino.FileIO.File3dm.ReadEarthAnchorPoint(System.String)">
            <summary>
            Reads only the earth anchor point from an existing 3dm file
            </summary>
            <param name="path">A location on disk or network.</param>
            <returns>The earth anchor point.</returns>
        </member>
        <member name="M:Rhino.FileIO.File3dm.ReadApplicationData(System.String,System.String@,System.String@,System.String@)">
            <summary>
            Reads only the application information from an existing 3dm file.
            </summary>
            <param name="path">A location on disk or network.</param>
            <param name="applicationName">The application name. This out parameter is assigned during this call.</param>
            <param name="applicationUrl">The application URL. This out parameter is assigned during this call.</param>
            <param name="applicationDetails">The application details. This out parameter is assigned during this call.</param>
            <since>5.0</since>
        </member>
        <member name="M:Rhino.FileIO.File3dm.WriteOneObject(System.String,Rhino.Geometry.GeometryBase)">
            <summary>
            Creates a simple 3dm file that contains a single geometric object.
            </summary>
            <param name="path">Path to the 3dm file to create.</param>
            <param name="geometry">
            The geometry to be saved in the archive's object table.
            This is typically a Curve, Surface, Brep, Mesh, or SubD.
            </param>
            <returns>True if successful, false otherwise.</returns>
            <since>7.0</since>
        </member>
        <member name="M:Rhino.FileIO.File3dm.WriteMultipleObjects(System.String,System.Collections.Generic.IEnumerable{Rhino.Geometry.GeometryBase})">
            <summary>
            Creates a simple 3dm file that contains a multiple geometric objects.
            </summary>
            <param name="path">Path to the 3dm file to create.</param>
            <param name="geometry">
            The geometry to be saved in the archive's object table.
            This is typically some Curves, Surfaces, Breps, Meshs, or SubDs.
            </param>
            <returns>True if successful, false otherwise.</returns>
            <since>7.0</since>
        </member>
        <member name="M:Rhino.FileIO.File3dm.Write(System.String,System.Int32)">
            <summary>
            Writes contents of this model to an openNURBS archive.
            If the model is not valid, then Write will refuse to write it.
            </summary>
            <param name="path">The file name to use for writing.</param>
            <param name="version">
            Version of the openNURBS archive to write.  Must be [2; current version].
            Rhino can read its current version, plus earlier file versions except 1.
            Use latest version when possible.
            <para>Alternatively, 0 is a placeholder for the last valid version.</para>
            </param>
            <returns>
            true if archive is written with no error.
            false if errors occur.
            </returns>
            <since>5.0</since>
        </member>
        <member name="M:Rhino.FileIO.File3dm.Write(System.String,Rhino.FileIO.File3dmWriteOptions)">
            <summary>
            Writes contents of this model to an openNURBS archive.
            If the model is not valid, then Write will refuse to write it.
            </summary>
            <param name="path">The file name to use for writing.</param>
            <param name="options">An options instance, or null for default.</param>
            <returns>
            true if archive is written with no error.
            false if errors occur.
            </returns>
            <since>5.9</since>
        </member>
        <member name="M:Rhino.FileIO.File3dm.WriteWithLog(System.String,System.Int32,System.String@)">
            <summary>
            Writes contents of this model to an openNURBS archive.
            If the model is not valid, then Write will refuse to write it.
            </summary>
            <param name="path">The file name to use for writing.</param>
            <param name="version">
            Version of the openNURBS archive to write.  Must be [2; current version].
            Rhino can read its current version, plus earlier file versions except 1.
            Use latest version when possible.
            <para>Alternatively, 0 is a placeholder for the last valid version.</para>
            </param>
            <param name="errorLog">This argument will be filled by out reference.</param>
            <returns>
            true if archive is written with no error.
            false if errors occur.
            </returns>
            <since>5.0</since>
        </member>
        <member name="M:Rhino.FileIO.File3dm.WriteWithLog(System.String,Rhino.FileIO.File3dmWriteOptions,System.String@)">
            <summary>
            Writes contents of this model to an openNURBS archive.
            If the model is not valid, then Write will refuse to write it.
            </summary>
            <param name="path">The file name to use for writing.</param>
            <param name="options">An options instance, or null for default.</param>
            <param name="errorLog">This argument will be filled by out reference.</param>
            <returns>
            true if archive is written with no error.
            false if errors occur.
            </returns>
            <since>6.0</since>
        </member>
        <member name="M:Rhino.FileIO.File3dm.ToByteArray">
            <summary>
            Write to an in-memory byte[]
            </summary>
            <returns></returns>
            <since>7.1</since>
        </member>
        <member name="M:Rhino.FileIO.File3dm.ToByteArray(Rhino.FileIO.File3dmWriteOptions)">
            <summary>
            Write to an in-memory byte[]
            </summary>
            <param name="options"></param>
            <returns></returns>
            <since>7.1</since>
        </member>
        <member name="M:Rhino.FileIO.File3dm.IsValid(System.String@)">
            <summary>
            The File3dm object is kept consistent during its creation.
            Therefore, this function now returns only true.
            </summary>
            <param name="errors">
            No errors are found.
            </param>
            <returns>true in any case.</returns>
            <since>5.0</since>
            <deprecated>6.0</deprecated>
        </member>
        <member name="M:Rhino.FileIO.File3dm.IsValid(Rhino.FileIO.TextLog)">
            <summary>
            The File3dm object is kept consistent during its creation.
            Therefore, this function now returns only true.
            </summary>
            <param name="errors">
            No errors are found.
            </param>
            <returns>>true in any case.</returns>
            <since>5.1</since>
            <deprecated>6.0</deprecated>
        </member>
        <member name="M:Rhino.FileIO.File3dm.Polish">
            <summary>
            This function is only kept for forward assembly compatibility.
            </summary>
            <since>5.0</since>
            <deprecated>6.0</deprecated>
        </member>
        <member name="M:Rhino.FileIO.File3dm.Audit(System.Boolean,System.Int32@,System.String@,System.Int32[]@)">
            <summary>
            This function is only kept for forward assembly compatibility.
            </summary>
            <param name="attemptRepair">
            Ignored.
            </param>
            <param name="repairCount">Is set to 0.</param>
            <param name="errors">
            Contains no meaningful error.
            </param>
            <param name="warnings">Is set to null.
            </param>
            <returns>
            Returns 0.
            </returns>
            <since>5.0</since>
            <deprecated>6.0</deprecated>
        </member>
        <member name="P:Rhino.FileIO.File3dm.StartSectionComments">
            <summary>
            Gets or sets the start section comments, which are the comments with which the 3dm file begins.
            </summary>
            <since>5.0</since>
        </member>
        <member name="P:Rhino.FileIO.File3dm.ArchiveVersion">
            <summary>
            Gets the 3dm file archive version.
            </summary>
            <since>7.9</since>
        </member>
        <member name="P:Rhino.FileIO.File3dm.Notes">
            <summary>
            Gets or sets the model notes.
            </summary>
            <since>5.0</since>
        </member>
        <member name="P:Rhino.FileIO.File3dm.ApplicationName">
            <summary>
            Gets or sets the name of the application that wrote this file.
            </summary>
            <since>5.0</since>
        </member>
        <member name="P:Rhino.FileIO.File3dm.ApplicationUrl">
            <summary>
            Gets or sets a URL for the application that wrote this file.
            </summary>
            <since>5.0</since>
        </member>
        <member name="P:Rhino.FileIO.File3dm.ApplicationDetails">
            <summary>
            Gets or sets details for the application that wrote this file.
            </summary>
            <since>5.0</since>
        </member>
        <member name="P:Rhino.FileIO.File3dm.CreatedBy">
            <summary>
            Gets a string that names the user who created the file.
            </summary>
            <since>5.0</since>
        </member>
        <member name="P:Rhino.FileIO.File3dm.LastEditedBy">
            <summary>
            Gets a string that names the user who last edited the file.
            </summary>
            <since>5.0</since>
        </member>
        <member name="P:Rhino.FileIO.File3dm.Created">
            <summary>
            Get the DateTime that this file was originally created. If the
            value is not set in the 3dm file, then DateTime.MinValue is returned
            </summary>
            <since>5.6</since>
        </member>
        <member name="P:Rhino.FileIO.File3dm.LastEdited">
            <summary>
            Get the DateTime that this file was last edited. If the
            value is not set in the 3dm file, then DateTime.MinValue is returned
            </summary>
            <since>5.6</since>
        </member>
        <member name="P:Rhino.FileIO.File3dm.Revision">
            <summary>
            Gets or sets the revision number.
            </summary>
            <since>5.0</since>
        </member>
        <member name="P:Rhino.FileIO.File3dm.EarthAnchorPoint">
            <summary>
            If set, this is the model's location on the earth.  This information is
            used when the model is used with GIS information.
            </summary>
        </member>
        <member name="P:Rhino.FileIO.File3dm.Settings">
            <summary>
            Settings include tolerance, and unit system, and defaults used
            for creating views and objects.
            </summary>
            <since>5.0</since>
        </member>
        <member name="P:Rhino.FileIO.File3dm.Manifest">
            <summary>
            Retrieves the manifest with all object descriptions in this file.
            </summary>
            <since>6.0</since>
        </member>
        <member name="P:Rhino.FileIO.File3dm.Objects">
            <summary>
            Gets access to the <see cref="T:Rhino.FileIO.File3dmObjectTable"/> class associated with this file,
            which contains all objects.
            </summary>
            <since>5.0</since>
        </member>
        <member name="P:Rhino.FileIO.File3dm.Materials">
            <summary>
            Materials in this file.
            </summary>
            <since>5.0</since>
        </member>
        <member name="P:Rhino.FileIO.File3dm.AllMaterials">
            <summary>
            Materials in this file.
            </summary>
            <since>6.0</since>
        </member>
        <member name="P:Rhino.FileIO.File3dm.Linetypes">
            <summary>
            Linetypes in this file.
            </summary>
            <since>5.0</since>
        </member>
        <member name="P:Rhino.FileIO.File3dm.AllLinetypes">
            <summary>
            Linetypes in this file.
            </summary>
            <since>6.0</since>
        </member>
        <member name="P:Rhino.FileIO.File3dm.Layers">
            <summary>
            Layers in this file.
            </summary>
            <since>5.0</since>
        </member>
        <member name="P:Rhino.FileIO.File3dm.AllLayers">
            <summary>
            Layers in this file.
            </summary>
            <since>6.0</since>
        </member>
        <member name="P:Rhino.FileIO.File3dm.AllGroups">
            <summary>
            Groups in this file.
            </summary>
            <since>6.5</since>
        </member>
        <member name="P:Rhino.FileIO.File3dm.DimStyles">
            <summary>
            Dimension Styles in this file.
            </summary>
            <since>5.0</since>
        </member>
        <member name="P:Rhino.FileIO.File3dm.AllDimStyles">
            <summary>
            Dimension Styles in this file.
            </summary>
            <since>6.0</since>
        </member>
        <member name="P:Rhino.FileIO.File3dm.HatchPatterns">
            <summary>
            Hatch patterns in this file
            </summary>
            <since>5.0</since>
        </member>
        <member name="P:Rhino.FileIO.File3dm.AllHatchPatterns">
            <summary>
            Hatch patterns in this file.
            </summary>
            <since>6.0</since>
        </member>
        <member name="P:Rhino.FileIO.File3dm.InstanceDefinitions">
            <summary>
            Instance definitions in this file.
            </summary>
            <since>5.6</since>
        </member>
        <member name="P:Rhino.FileIO.File3dm.AllInstanceDefinitions">
            <summary>
            Instance definitions in this file
            </summary>
            <since>6.0</since>
        </member>
        <member name="P:Rhino.FileIO.File3dm.Views">
            <summary>
            Views that represent the RhinoViews which are displayed when Rhino loads this file.
            </summary>
            <since>5.0</since>
        </member>
        <member name="P:Rhino.FileIO.File3dm.AllViews">
            <summary>
            Views that represent the RhinoViews which are displayed when Rhino loads this file.
            </summary>
            <since>6.0</since>
        </member>
        <member name="P:Rhino.FileIO.File3dm.NamedViews">
            <summary>
            Named views in this file.
            </summary>
            <since>5.0</since>
        </member>
        <member name="P:Rhino.FileIO.File3dm.AllNamedViews">
            <summary>
            Named views in this file.
            </summary>
            <since>6.0</since>
        </member>
        <member name="P:Rhino.FileIO.File3dm.NamedConstructionPlanes">
            <summary>
            Named construction planes in this file.
            </summary>
            <since>6.0</since>
        </member>
        <member name="P:Rhino.FileIO.File3dm.AllNamedConstructionPlanes">
            <summary>
            Named construction planes in this file.
            </summary>
            <since>6.0</since>
        </member>
        <member name="P:Rhino.FileIO.File3dm.PlugInData">
            <summary>
            Custom plug-in data in this file.  This data is not attached to any geometry or attributes
            </summary>
            <since>5.0</since>
        </member>
        <member name="P:Rhino.FileIO.File3dm.Strings">
            <summary>
            Document user strings in this file
            </summary>
            <since>6.0</since>
        </member>
        <member name="P:Rhino.FileIO.File3dm.EmbeddedFiles">
            <summary>
            The embedded files in this file.
            </summary>
            <since>8.0</since>
        </member>
        <member name="P:Rhino.FileIO.File3dm.RenderMaterials">
            <summary>
            The render materials in this file.
            </summary>
            <since>8.0</since>
        </member>
        <member name="P:Rhino.FileIO.File3dm.RenderEnvironments">
            <summary>
            The render environments in this file.
            </summary>
            <since>8.0</since>
        </member>
        <member name="P:Rhino.FileIO.File3dm.RenderTextures">
            <summary>
            The render textures in this file.
            </summary>
            <since>8.0</since>
        </member>
        <member name="M:Rhino.FileIO.File3dm.Dump">
            <summary>Prepares a text dump of the entire model.</summary>
            <returns>The text dump.</returns>
            <since>5.0</since>
        </member>
        <member name="M:Rhino.FileIO.File3dm.DumpSummary">
            <summary>Prepares a text dump of model properties and settings.</summary>
            <returns>The text dump.</returns>
            <since>5.0</since>
        </member>
        <member name="M:Rhino.FileIO.File3dm.DumpToTextLog(Rhino.FileIO.TextLog)">
            <summary>Prepares a text dump of the entire model.</summary>
            <param name="log"></param>
            <since>5.1</since>
        </member>
        <member name="M:Rhino.FileIO.File3dm.#ctor">
            <summary>
            Initializes a new instance of a 3dm file.
            </summary>
            <since>5.0</since>
        </member>
        <member name="M:Rhino.FileIO.File3dm.Finalize">
            <summary>
            Passively reclaims unmanaged resources when the class user did not explicitly call Dispose().
            </summary>
        </member>
        <member name="M:Rhino.FileIO.File3dm.Dispose">
            <summary>
            Actively reclaims unmanaged resources that this instance uses.
            </summary>
            <since>5.0</since>
        </member>
        <member name="M:Rhino.FileIO.File3dm.Dispose(System.Boolean)">
            <summary>
            For derived class implementers.
            <para>This method is called with argument true when class user calls Dispose(), while with argument false when
            the Garbage Collector invokes the finalizer, or Finalize() method.</para>
            <para>You must reclaim all used unmanaged resources in both cases, and can use this chance to call Dispose on disposable fields if the argument is true.</para>
            <para>Also, you must call the base virtual method within your overriding method.</para>
            </summary>
            <param name="disposing">true if the call comes from the Dispose() method; false if it comes from the Garbage Collector finalizer.</param>
        </member>
        <member name="T:Rhino.FileIO.File3dmWriteOptions">
            <summary>Options used by File3dm.Write</summary>
        </member>
        <member name="M:Rhino.FileIO.File3dmWriteOptions.#ctor">
            <summary>
            Initializes properties to defaults.
            </summary>
            <since>5.9</since>
        </member>
        <member name="F:Rhino.FileIO.File3dmWriteOptions.RenderMeshFlags">
            <summary>
            [Giulio, 2016 04 01]
            Please keep these in sync with ON_BinaryArchive::m_save_3dm_render_mesh_flags
            in opennurbs_archive.h
            </summary>
        </member>
        <member name="P:Rhino.FileIO.File3dmWriteOptions.Version">
            <summary>
            <para>File version. Default is major version number of this assembly version.</para>
            <para>Must be in range [2; current version].</para>
            <para>Alternatively, 0 is a placeholder for the last valid version.</para>
            <para>Rhino can read its current version, plus earlier file versions except 1.</para>
            <para>Use latest version when possible.</para>
            </summary>
            <since>5.9</since>
        </member>
        <member name="P:Rhino.FileIO.File3dmWriteOptions.SaveRenderMeshes">
            <summary>
            Include Render meshes in the file. Default is true
            </summary>
            <since>5.9</since>
        </member>
        <member name="M:Rhino.FileIO.File3dmWriteOptions.EnableRenderMeshes(Rhino.DocObjects.ObjectType,System.Boolean)">
            <summary>
            Activates saving of render meshes for specific types of objects.
            If you do not specify the state for an object type, its default is used.
            Specifically, currently SubD mesh saving is disabled by default, while Brep and Extrusion is on.
            </summary>
            <param name="objectType">The object type. Mostly brep, extrusion and SubD (or their flag combinations) make sense here.
            <para>DO NOT specify a 'filter' or sub-object type.</para></param>
            <param name="enable">If false, disables saving for this object type.</param>
            <since>6.0</since>
        </member>
        <member name="P:Rhino.FileIO.File3dmWriteOptions.SaveAnalysisMeshes">
            <summary>
            Include analysis meshes in the file. Default is true
            </summary>
            <since>5.9</since>
        </member>
        <member name="M:Rhino.FileIO.File3dmWriteOptions.EnableAnalysisMeshes(Rhino.DocObjects.ObjectType,System.Boolean)">
            <summary>
            Activates saving of analysis meshes for specific types of objects.
            If you do not specify the state for an object type, its default is used.
            Currently SubD mesh saving is disabled by default, while Brep and Extrusion is enabled.
            </summary>
            <param name="objectType">The object type. Mostly mesh, brep, extrusion and SubD (or their flag combinations) make sense here.
            <para>DO NOT specify a 'filter' or sub-object type.</para></param>
            <param name="enable">If false, disables saving for this object type.</param>
            <since>6.0</since>
        </member>
        <member name="P:Rhino.FileIO.File3dmWriteOptions.SaveUserData">
            <summary>
            Include custom user data in the file. Default is true
            </summary>
            <since>5.9</since>
        </member>
        <member name="T:Rhino.FileIO.File3dmObject">
            <summary>
            Used to store geometry table object definition and attributes in a File3dm.
            </summary>
        </member>
        <member name="P:Rhino.FileIO.File3dmObject.Geometry">
            <summary>
            Gets the geometry that is linked with this document object.
            </summary>
            <since>5.0</since>
        </member>
        <member name="P:Rhino.FileIO.File3dmObject.Attributes">
            <summary>
            Gets the attributes that are linked with this document object.
            </summary>
            <since>5.0</since>
        </member>
        <member name="P:Rhino.FileIO.File3dmObject.Name">
            <summary>
            Gets or sets the Name of the object. Equivalent to this.Attributes.Name.
            </summary>
            <since>5.0</since>
        </member>
        <member name="P:Rhino.FileIO.File3dmObject.ComponentType">
            <summary>
            Returns <see cref="F:Rhino.DocObjects.ModelComponentType.ModelGeometry"/>.
            </summary>
            <since>6.0</since>
        </member>
        <member name="M:Rhino.FileIO.File3dmObject.Equals(System.Object)">
            <summary>
            Verified that two objects refer to the same object in a document.
            </summary>
            <param name="obj">The other item to test.</param>
            <returns>true is the two objects coincide.</returns>
        </member>
        <member name="M:Rhino.FileIO.File3dmObject.Equals(Rhino.FileIO.File3dmObject)">
            <summary>
            Verified that two File3dmObject items refer to the same object in a document.
            </summary>
            <param name="other">The other item to test.</param>
            <returns>true is the two objects coincide.</returns>
            <since>6.0</since>
        </member>
        <member name="M:Rhino.FileIO.File3dmObject.GetHashCode">
            <summary>
            Provides an hash code for this item.
            </summary>
            <returns>The hash code.</returns>
        </member>
        <member name="M:Rhino.FileIO.File3dmObject.TryReadUserData(System.Guid,System.Boolean,System.Func{Rhino.FileIO.File3dm,Rhino.FileIO.BinaryArchiveReader,System.Boolean})">
            <summary>
            Attempts to read a Rhino plug-in's custom userdata from the <see cref="T:Rhino.FileIO.File3dmObject"/> object.
            </summary>
            <param name="userDataId">The id of the custom userdata object whose data you want to try to read</param>
            <param name="readFromAttributes">
            Set true to attempt to read custom userdata object from the object's <see cref="P:Rhino.FileIO.File3dmObject.Attributes"/>.
            Set false to attempt to read custom userdata object from the object's <see cref="P:Rhino.FileIO.File3dmObject.Geometry"/>.
            </param>
            <param name="dataReader">
            The function that will read the data.
            This function must be implemented identical to the the originating <see cref="T:Rhino.DocObjects.Custom.UserData"/>-inherited class's Read method.
            </param>
            <returns>The value returned by the data reading function if successful, false otherwise.</returns>
        </member>
        <member name="T:Rhino.FileIO.ICommonComponentTable`1">
            <summary>
            Provides methods to use all File3dm and RhinoDoc tables under the same contract.
            Do not derive from this interface. This is to ensure all tables can be used with the same method list.
            </summary>
        </member>
        <member name="M:Rhino.FileIO.ICommonComponentTable`1.FindId(System.Guid)">
            <summary>
            Retrieves an object based on ID. You should prefer ID search over Index search.
            </summary>
            <param name="id">The id to search for.</param>
            <returns>A model component, or null if none was found.</returns>
        </member>
        <member name="M:Rhino.FileIO.ICommonComponentTable`1.FindNameHash(Rhino.FileIO.NameHash)">
            <summary>
            Retrieves an object based on Name.
            </summary>
            <param name="nameHash">The name hash for which to search.</param>
        </member>
        <member name="P:Rhino.FileIO.ICommonComponentTable`1.ComponentType">
            <summary>
            Returns the model component type the table handles.
            </summary>
        </member>
        <member name="T:Rhino.FileIO.CommonComponentTable`1">
            <summary>
            Provides a base table type that encompasses all document tables, both in RhinoDoc and File3dm.
            </summary>
            <typeparam name="T">A model component.</typeparam>
        </member>
        <member name="P:Rhino.FileIO.CommonComponentTable`1.Count">
            <summary>
            Returns the count of all items, including deleted ones.
            </summary>
        </member>
        <member name="M:Rhino.FileIO.CommonComponentTable`1.GetEnumerator">
            <summary>
            Returns the enumerator that yields all items.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Rhino.FileIO.CommonComponentTable`1.Delete(`0)">
            <summary>
            Deletes an item. Items that are deleted are still keeping their space, but the 'IsDeleted' flag is checked.
            </summary>
            <param name="item">An item to delete.</param>
            <returns>True if an items could be deleted (e.g., it was not locked).</returns>
        </member>
        <member name="P:Rhino.FileIO.CommonComponentTable`1.ComponentType">
            <summary>
            Returns the actual component type of a table.
            </summary>
        </member>
        <member name="M:Rhino.FileIO.CommonComponentTable`1.FindId(System.Guid)">
            <summary>
            Uses the guid to find a model component. Deleted objects cannot be found by id.
            The guid is the value that is stored in the .Id property.
            In a single document, no two active objects have the same guid. If an object is
            replaced with a new object, then the guid  persists. For example, if the _Move command
            moves an object, then the moved object inherits its guid from the starting object.
            If the Copy command copies an object, then the copy gets a new guid. This guid persists
            through file saving/opening operations. This function will not find grip objects.
            </summary>
            <param name="id">ID of model component to search for.</param>
            <returns>Reference to the rhino object with the objectId or null if no such object could be found.</returns>
        </member>
        <member name="M:Rhino.FileIO.CommonComponentTable`1.__FindIndexInternal(System.Int32)">
            <summary>
            This is internal so that we can choose when to deliver the functionality for each table.
            Object, history and instance tables have no indices.
            </summary>
        </member>
        <member name="M:Rhino.FileIO.CommonComponentTable`1.Rhino#FileIO#ICommonComponentTable{T}#FindNameHash(Rhino.FileIO.NameHash)">
            <summary>
            Uses the hash of the name to find a model component.
            Deleted objects have no name.
            </summary>
            <param name="nameHash">NameHash of model component to search for.</param>
            <returns>Reference to the rhino object or null if no such object could be found.</returns>
        </member>
        <member name="M:Rhino.FileIO.CommonComponentTable`1.Clear">
            <summary>
            Marks all items as deleted.
            </summary>
        </member>
        <member name="T:Rhino.FileIO.File3dmCommonComponentTable`1">
            <summary>
            Provides a base table type that is shared among all File3dm tables.
            </summary>
            <typeparam name="T">A model component.</typeparam>
        </member>
        <member name="M:Rhino.FileIO.File3dmCommonComponentTable`1.Delete(`0)">
            <summary>
            Flags a component as deleted.
            </summary>
            <param name="item">The item to flag.</param>
            <returns>True on success.</returns>
        </member>
        <member name="M:Rhino.FileIO.File3dmCommonComponentTable`1.Delete(System.Int32)">
            <summary>
            Flags a component as deleted.
            </summary>
            <param name="index">The index of the item to flag.</param>
            <returns>True on success.</returns>
        </member>
        <member name="M:Rhino.FileIO.File3dmCommonComponentTable`1.Add(`0)">
            <summary>
            Adds an item.
            </summary>
            <param name="item">The item to add.</param>
        </member>
        <member name="M:Rhino.FileIO.File3dmCommonComponentTable`1.Dump">
            <summary>Prepares a text dump of object table.</summary>
            <returns>A string containing the dump.</returns>
        </member>
        <member name="T:Rhino.FileIO.ManifestTable">
            <summary>
            Maintains an index to every model component that is in the 3dm file.
            This is the "more comprehensive" table that contains all objects in all other tables.
            </summary>
        </member>
        <member name="P:Rhino.FileIO.ManifestTable.Parent">
            <summary>
            Returns the parent object. This is the RhinoDoc, or the File3md file. 
            </summary>
            <since>6.0</since>
        </member>
        <member name="M:Rhino.FileIO.ManifestTable.FindId(System.Guid)">
            <summary>
            Uses the guid to find a model component. Deleted objects cannot be found by id.
            The guid is the value that is stored in the .Id property.
            In a single document, no two active objects have the same guid. If an object is
            replaced with a new object, then the guid  persists. For example, if the _Move command
            moves an object, then the moved object inherits its guid from the starting object.
            If the Copy command copies an object, then the copy gets a new guid. This guid persists
            through file saving/opening operations. This function will not find grip objects.
            </summary>
            <param name="id">ID of model component to search for.</param>
            <returns>Reference to the rhino object with the objectId or null if no such object could be found.</returns>
            <since>6.0</since>
        </member>
        <member name="M:Rhino.FileIO.ManifestTable.FindId(System.Guid,Rhino.DocObjects.ModelComponentType)">
            <summary>
            Uses the guid to find a model component. Deleted objects cannot be found by id.
            The guid is the value that is stored in the .Id property.
            In a single document, no two active objects have the same guid. If an object is
            replaced with a new object, then the guid  persists. For example, if the _Move command
            moves an object, then the moved object inherits its guid from the starting object.
            If the Copy command copies an object, then the copy gets a new guid. This guid persists
            through file saving/opening operations. This function will not find grip objects.
            </summary>
            <param name="id">ID of model component to search for.</param>
            <param name="type">The type to be searched. If this is <see cref="F:Rhino.DocObjects.ModelComponentType.Unset"/>
            then all types are searched.</param>
            <returns>Reference to the rhino object with the objectId or null if no such object could be found.</returns>
            <since>6.0</since>
        </member>
        <member name="M:Rhino.FileIO.ManifestTable.FindId``1(System.Guid)">
            <summary>
            Uses the guid to find a model component. Deleted objects cannot be found by id.
            The guid is the value that is stored in the .Id property.
            In a single document, no two active objects have the same guid. If an object is
            replaced with a new object, then the guid  persists. For example, if the _Move command
            moves an object, then the moved object inherits its guid from the starting object.
            If the Copy command copies an object, then the copy gets a new guid. This guid persists
            through file saving/opening operations. This function will not find grip objects.
            </summary>
            <param name="id">Index of model component to search for.</param>
            <typeparam name="T">The type, derived from ModelComponent or ModelComponent itself.</typeparam>
            <returns>Reference to the rhino object or null if no such object could be found.</returns>
            <since>6.0</since>
        </member>
        <member name="M:Rhino.FileIO.ManifestTable.FindIndex(System.Int32,Rhino.DocObjects.ModelComponentType)">
            <summary>
            Uses the index to find a model component.
            The index is the value that is stored in the .Index property.
            </summary>
            <param name="index">Index of model component to search for.</param>
            <param name="type">The type to be searched. Cannot be <see cref="F:Rhino.DocObjects.ModelComponentType.Unset"/>.</param>
            <returns>Reference to the rhino object or null if no such object could be found.</returns>
            <since>6.0</since>
        </member>
        <member name="M:Rhino.FileIO.ManifestTable.FindIndex``1(System.Int32)">
            <summary>
            Uses the index to find a model component.
            The index is the value that is stored in the .Index property.
            </summary>
            <param name="index">Index of model component to search for.</param>
            <typeparam name="T">The type, derived from ModelComponent. Cannot be ModelComponent itself.</typeparam>
            <returns>Reference to the rhino object or null if no such object could be found.</returns>
            <since>6.0</since>
        </member>
        <member name="M:Rhino.FileIO.ManifestTable.FindName(System.String,Rhino.DocObjects.ModelComponentType,System.Guid)">
            <summary>
            Uses the name to find a model component.
            The name is the value that is stored in the .Name property.
            Deleted objects have no name.
            </summary>
            <param name="name">Name of model component to search for.</param>
            <param name="type">The type to be searched. Cannot be <see cref="F:Rhino.DocObjects.ModelComponentType.Unset"/>.</param>
            <param name="parent">Parent object id. This is only required for layers.</param>
            <returns>Reference to the rhino object or null if no such object could be found.</returns>
            <since>6.0</since>
        </member>
        <member name="M:Rhino.FileIO.ManifestTable.FindName``1(System.String,System.Guid)">
            <summary>
            Uses the name to find a model component.
            The name is the value that is stored in the .Name property.
            Deleted objects have no name.
            </summary>
            <typeparam name="T">The type, derived from ModelComponent. Cannot be ModelComponent itself.</typeparam>
            <param name="name">Name of model component to search for.</param>
            <param name="parent">Parent object id. This is only required for layers.</param>
            <returns>Reference to the rhino object or null if no such object could be found.</returns>
            <since>6.0</since>
        </member>
        <member name="M:Rhino.FileIO.ManifestTable.FindNameHash(Rhino.FileIO.NameHash,Rhino.DocObjects.ModelComponentType)">
            <summary>
            Uses the hash of the name to find a model component.
            Deleted objects have no name.
            </summary>
            <param name="nameHash">NameHash of model component to search for.</param>
            <param name="type">The type to be searched. Cannot be <see cref="F:Rhino.DocObjects.ModelComponentType.Unset"/>.</param>
            <returns>Reference to the rhino object or null if no such object could be found.</returns>
            <since>6.0</since>
        </member>
        <member name="M:Rhino.FileIO.ManifestTable.FindNameHash``1(Rhino.FileIO.NameHash)">
            <summary>
            Uses the hash of the name to find a model component.
            Deleted objects have no name.
            </summary>
            <typeparam name="T">The type, derived from ModelComponent.</typeparam>
            <param name="nameHash">Name hash of model component to search for.</param>
            <since>6.0</since>
        </member>
        <member name="P:Rhino.FileIO.ManifestTable.Count">
            <summary>
            Total number of items in the manifest, including deleted items.
            </summary>
            <since>6.0</since>
        </member>
        <member name="P:Rhino.FileIO.ManifestTable.LongCount">
            <summary>
            Total number of items in the manifest, including deleted items.
            </summary>
            <since>6.0</since>
        </member>
        <member name="P:Rhino.FileIO.ManifestTable.ComponentType">
            <summary>
            Returns <see cref="F:Rhino.DocObjects.ModelComponentType.Mixed"/>.
            </summary>
            <since>6.0</since>
        </member>
        <member name="M:Rhino.FileIO.ManifestTable.ActiveObjectCount(Rhino.DocObjects.ModelComponentType)">
            <summary>
            Total number of items in the manifest, including deleted items.
            </summary>
            <since>6.0</since>
        </member>
        <member name="M:Rhino.FileIO.ManifestTable.Rhino#FileIO#ICommonComponentTable{Rhino#DocObjects#ModelComponent}#FindNameHash(Rhino.FileIO.NameHash)">
            <since>6.0</since>
        </member>
        <member name="M:Rhino.FileIO.ManifestTable.System#Collections#IEnumerable#GetEnumerator">
            <since>6.0</since>
        </member>
        <member name="M:Rhino.FileIO.ManifestTable.GetEnumerator``1">
            <summary>
            Visits all model components in the document, including default ones.
            </summary>
            <returns>An enumerator.</returns>
            <since>6.0</since>
        </member>
        <member name="M:Rhino.FileIO.ManifestTable.GetModelComponentTypeFromGenericType``1">
            <summary>
            Returns the result of the ComponentType property of a ModelComponent.
            </summary>
            <typeparam name="T">A model component type.</typeparam>
            <returns>A <see cref="T:Rhino.DocObjects.ModelComponentType"/>.</returns>
            <since>6.0</since>
        </member>
        <member name="M:Rhino.FileIO.ManifestTable.GetEnumerator">
            <summary>
            Visits all model components in the document, including default ones.
            </summary>
            <returns>An enumerator.</returns>
            <since>6.0</since>
        </member>
        <member name="M:Rhino.FileIO.ManifestTable.GetEnumerator(Rhino.DocObjects.ModelComponentType)">
            <summary>
            Returns an enumerators that yields all model components, including default ones,
            relating to a particular type.
            </summary>
            <param name="type">The model component type.</param>
            <returns>An enumerator.</returns>
            <since>6.0</since>
        </member>
        <member name="M:Rhino.FileIO.ManifestTable.Clear">
            <summary>
            Marks all items as deleted.
            </summary>
            <since>6.0</since>
        </member>
        <member name="M:Rhino.FileIO.ManifestTable.Contains(Rhino.DocObjects.ModelComponent)">
            <summary>
            Determines if an items is contained in this table.
            </summary>
            <param name="item">An item, or null. Null is never contained.</param>
            <returns>True if the item is contained; otherwise, false.</returns>
            <since>6.0</since>
        </member>
        <member name="M:Rhino.FileIO.ManifestTable.CopyTo(Rhino.DocObjects.ModelComponent[],System.Int32)">
            <summary>
            Copies the content of this table to an array.
            </summary>
            <param name="array">The array to copy to.</param>
            <param name="arrayIndex">The position in the array from which to start copying.</param>
            <since>6.0</since>
        </member>
        <member name="T:Rhino.FileIO.File3dmObjectTable">
            <summary>
            Represents a simple object table for a file that is open externally.
            <para>This class mimics Rhino.DocObjects.Tables.ObjectTable while providing external access to the file.</para>
            </summary>
        </member>
        <member name="P:Rhino.FileIO.File3dmObjectTable.ComponentType">
            <summary>
            Returns <see cref="F:Rhino.DocObjects.ModelComponentType.ModelGeometry"/>.
            </summary>
            <since>6.0</since>
        </member>
        <member name="M:Rhino.FileIO.File3dmObjectTable.FindByLayer(System.String)">
            <summary>
            Finds all File3dmObject that are in a given layer.
            </summary>
            <param name="layer">Layer to search.</param>
            <returns>
            Array of objects that belong to the specified layer or empty array if no objects could be found.
            </returns>
            <since>5.0</since>
        </member>
        <member name="M:Rhino.FileIO.File3dmObjectTable.FindByLayer(Rhino.DocObjects.Layer)">
            <summary>
            Finds all File3dmObject that are in a given layer.
            </summary>
            <param name="layer">A layer instance.</param>
            <returns>Array of objects that belong to the specified layer or empty array if no objects could be found.</returns>
            <exception cref="T:System.ArgumentNullException">If layer is null.</exception>
            <since>6.0</since>
        </member>
        <member name="M:Rhino.FileIO.File3dmObjectTable.FindByGroup(Rhino.DocObjects.Group)">
            <summary>
            Finds all File3dmObject that are in a given group.
            </summary>
            <param name="group">A group instance.</param>
            <returns>Array of objects that belong to the specified group or empty array if no objects could be found.</returns>
            <exception cref="T:System.ArgumentNullException">If group is null.</exception>
            <since>6.20</since>
        </member>
        <member name="M:Rhino.FileIO.File3dmObjectTable.GetBoundingBox">
            <summary>Gets the bounding box containing every object in this table.</summary>
            <returns>The computed bounding box.</returns>
            <since>5.0</since>
        </member>
        <member name="M:Rhino.FileIO.File3dmObjectTable.Add(Rhino.FileIO.File3dmObject)">
            <summary>
            Duplicates the object, then adds a copy of the object to the document.
            </summary>
            <param name="item">The item to duplicate and add.</param>
            <since>6.0</since>
        </member>
        <member name="M:Rhino.FileIO.File3dmObjectTable.Add(Rhino.Geometry.GeometryBase,Rhino.DocObjects.ObjectAttributes)">
            <summary>
            Duplicates the object, then adds a copy of the object to the document.
            </summary>
            <param name="item">The item to duplicate and add.</param>
            <param name="attributes">The attributes to link with geometry.</param>
            <since>6.0</since>
        </member>
        <member name="M:Rhino.FileIO.File3dmObjectTable.AddPoint(System.Double,System.Double,System.Double)">
            <summary>
            Adds a point object to the table.
            </summary>
            <param name="x">X component of point coordinate.</param>
            <param name="y">Y component of point coordinate.</param>
            <param name="z">Z component of point coordinate.</param>
            <returns>id of new object.</returns>
            <since>5.0</since>
        </member>
        <member name="M:Rhino.FileIO.File3dmObjectTable.AddPoint(Rhino.Geometry.Point3d)">
            <summary>Adds a point object to the table.</summary>
            <param name="point">A location for point.</param>
            <returns>Id of new object.</returns>
            <since>5.0</since>
        </member>
        <member name="M:Rhino.FileIO.File3dmObjectTable.AddPoint(Rhino.Geometry.Point3d,Rhino.DocObjects.ObjectAttributes)">
            <summary>Adds a point object to the document.</summary>
            <param name="point">A location for point.</param>
            <param name="attributes">attributes to apply to point.</param>
            <returns>A unique identifier for the object.</returns>
            <since>5.0</since>
        </member>
        <member name="M:Rhino.FileIO.File3dmObjectTable.AddPoint(Rhino.Geometry.Point3f)">
            <summary>Adds a point object to the document.</summary>
            <param name="point">location of point.</param>
            <returns>A unique identifier for the object.</returns>
            <since>5.0</since>
        </member>
        <member name="M:Rhino.FileIO.File3dmObjectTable.AddPoint(Rhino.Geometry.Point3f,Rhino.DocObjects.ObjectAttributes)">
            <summary>Adds a point object to the document.</summary>
            <param name="point">location of point.</param>
            <param name="attributes">attributes to apply to point.</param>
            <returns>A unique identifier for the object.</returns>
            <since>5.0</since>
        </member>
        <member name="M:Rhino.FileIO.File3dmObjectTable.AddPoints(System.Collections.Generic.IEnumerable{Rhino.Geometry.Point3d})">
            <summary>
            Adds multiple points to the document.
            </summary>
            <param name="points">Points to add.</param>
            <returns>List of object ids.</returns>
            <since>5.0</since>
        </member>
        <member name="M:Rhino.FileIO.File3dmObjectTable.AddPoints(System.Collections.Generic.IEnumerable{Rhino.Geometry.Point3d},Rhino.DocObjects.ObjectAttributes)">
            <summary>
            Adds multiple points to the document.
            </summary>
            <param name="points">Points to add.</param>
            <param name="attributes">Attributes to apply to point objects.</param>
            <returns>An array of object unique identifiers.</returns>
            <since>5.0</since>
        </member>
        <member name="M:Rhino.FileIO.File3dmObjectTable.AddPoints(System.Collections.Generic.IEnumerable{Rhino.Geometry.Point3f})">
            <summary>
            Adds multiple points to the document.
            </summary>
            <param name="points">Points to add.</param>
            <returns>An array of object unique identifiers.</returns>
            <since>5.0</since>
        </member>
        <member name="M:Rhino.FileIO.File3dmObjectTable.AddPoints(System.Collections.Generic.IEnumerable{Rhino.Geometry.Point3f},Rhino.DocObjects.ObjectAttributes)">
            <summary>
            Adds multiple points to the document.
            </summary>
            <param name="points">Points to add.</param>
            <param name="attributes">Attributes to apply to point objects.</param>
            <returns>An array of object unique identifiers.</returns>
            <since>5.0</since>
        </member>
        <member name="M:Rhino.FileIO.File3dmObjectTable.AddPointCloud(Rhino.Geometry.PointCloud)">
            <summary>Adds a point cloud object to the document.</summary>
            <param name="cloud">PointCloud to add.</param>
            <returns>A unique identifier for the object.</returns>
            <since>5.0</since>
        </member>
        <member name="M:Rhino.FileIO.File3dmObjectTable.AddPointCloud(Rhino.Geometry.PointCloud,Rhino.DocObjects.ObjectAttributes)">
            <summary>Adds a point cloud object to the document.</summary>
            <param name="cloud">PointCloud to add.</param>
            <param name="attributes">attributes to apply to point cloud.</param>
            <returns>A unique identifier for the object.</returns>
            <since>5.0</since>
        </member>
        <member name="M:Rhino.FileIO.File3dmObjectTable.AddPointCloud(System.Collections.Generic.IEnumerable{Rhino.Geometry.Point3d})">
            <summary>Adds a point cloud object to the document.</summary>
            <param name="points">A list, an array or any enumerable set of <see cref="T:Rhino.Geometry.Point3d"/>.</param>
            <returns>A unique identifier for the object.</returns>
            <since>5.0</since>
        </member>
        <member name="M:Rhino.FileIO.File3dmObjectTable.AddPointCloud(System.Collections.Generic.IEnumerable{Rhino.Geometry.Point3d},Rhino.DocObjects.ObjectAttributes)">
            <summary>Adds a point cloud object to the document.</summary>
            <param name="points">A list, an array or any enumerable set of <see cref="T:Rhino.Geometry.Point3d"/>.</param>
            <param name="attributes">Attributes to apply to point cloud.</param>
            <returns>A unique identifier for the object.</returns>
            <since>5.0</since>
        </member>
        <member name="M:Rhino.FileIO.File3dmObjectTable.AddClippingPlane(Rhino.Geometry.Plane,System.Double,System.Double,System.Guid)">
            <summary>
            Adds a clipping plane object to Rhino.
            </summary>
            <param name="plane">A plane.</param>
            <param name="uMagnitude">The size in U direction.</param>
            <param name="vMagnitude">The size in V direction.</param>
            <param name="clippedViewportId">The viewport id that the new clipping plane will clip.</param>
            <returns>A unique identifier for the object.</returns>
            <example>
            <code source='examples\vbnet\ex_addclippingplane.vb' lang='vbnet'/>
            <code source='examples\cs\ex_addclippingplane.cs' lang='cs'/>
            <code source='examples\py\ex_addclippingplane.py' lang='py'/>
            </example>
            <since>5.0</since>
        </member>
        <member name="M:Rhino.FileIO.File3dmObjectTable.AddClippingPlane(Rhino.Geometry.Plane,System.Double,System.Double,System.Collections.Generic.IEnumerable{System.Guid})">
            <summary>
            Adds a clipping plane object to Rhino.
            </summary>
            <param name="plane">A plane.</param>
            <param name="uMagnitude">The size in U direction.</param>
            <param name="vMagnitude">The size in V direction.</param>
            <param name="clippedViewportIds">A list, an array or any enumerable of viewport ids that the new clipping plane will clip.</param>
            <returns>A unique identifier for the object.</returns>
            <since>5.0</since>
        </member>
        <member name="M:Rhino.FileIO.File3dmObjectTable.AddClippingPlane(Rhino.Geometry.Plane,System.Double,System.Double,System.Collections.Generic.IEnumerable{System.Guid},Rhino.DocObjects.ObjectAttributes)">
            <summary>
            Adds a clipping plane object to Rhino.
            </summary>
            <param name="plane">A plane.</param>
            <param name="uMagnitude">The size in U direction.</param>
            <param name="vMagnitude">The size in V direction.</param>
            <param name="clippedViewportIds">list of viewport ids that the new clipping plane will clip.</param>
            <param name="attributes">Attributes to apply to point cloud.</param>
            <returns>A unique identifier for the object.</returns>
            <since>5.0</since>
        </member>
        <member name="M:Rhino.FileIO.File3dmObjectTable.AddLinearDimension(Rhino.Geometry.LinearDimension)">
            <summary>
            Adds a linear dimension to the 3dm file object table.
            </summary>
            <param name="dimension">A dimension.</param>
            <returns>A unique identifier for the object.</returns>
            <since>5.0</since>
        </member>
        <member name="M:Rhino.FileIO.File3dmObjectTable.AddLinearDimension(Rhino.Geometry.LinearDimension,Rhino.DocObjects.ObjectAttributes)">
            <summary>
            Adds a linear dimension to the 3dm file object table.
            </summary>
            <param name="dimension">A dimension.</param>
            <param name="attributes">Attributes to apply to dimension.</param>
            <returns>A unique identifier for the object.</returns>
            <since>5.0</since>
        </member>
        <member name="M:Rhino.FileIO.File3dmObjectTable.AddAngularDimension(Rhino.Geometry.AngularDimension)">
            <summary>
            Adds a angular dimension object to the 3dm file object table.
            </summary>
            <param name="dimension">Dimension object to add.</param>
            <returns>A unique identifier for the object.</returns>
            <since>6.5</since>
        </member>
        <member name="M:Rhino.FileIO.File3dmObjectTable.AddAngularDimension(Rhino.Geometry.AngularDimension,Rhino.DocObjects.ObjectAttributes)">
            <summary>
            Adds a angular dimension object to the 3dm file object table.
            </summary>
            <param name="dimension">Dimension object to add.</param>
            <param name="attributes">Attributes to apply to dimension.</param>
            <returns>A unique identifier for the object.</returns>
            <since>6.5</since>
        </member>
        <member name="M:Rhino.FileIO.File3dmObjectTable.AddOrdinateDimension(Rhino.Geometry.OrdinateDimension)">
            <summary>
            Adds an ordinate dimension object to the 3dm file object table.
            </summary>
            <param name="dimension">Dimension object to add.</param>
            <returns>A unique identifier for the object.</returns>
            <since>7.32</since>
        </member>
        <member name="M:Rhino.FileIO.File3dmObjectTable.AddOrdinateDimension(Rhino.Geometry.OrdinateDimension,Rhino.DocObjects.ObjectAttributes)">
            <summary>
            Adds an ordinate dimension object to the 3dm file object table.
            </summary>
            <param name="dimension">Dimension object to add.</param>
            <param name="attributes">Attributes to apply to dimension.</param>
            <returns>A unique identifier for the object.</returns>
            <since>7.32</since>
        </member>
        <member name="M:Rhino.FileIO.File3dmObjectTable.AddRadialDimension(Rhino.Geometry.RadialDimension)">
            <summary>
            Adds a radial dimension object to the 3dm file object table.
            </summary>
            <param name="dimension">Dimension object to add.</param>
            <returns>A unique identifier for the object.</returns>
            <since>7.32</since>
        </member>
        <member name="M:Rhino.FileIO.File3dmObjectTable.AddRadialDimension(Rhino.Geometry.RadialDimension,Rhino.DocObjects.ObjectAttributes)">
            <summary>
            Adds a radial dimension object to the 3dm file object table.
            </summary>
            <param name="dimension">Dimension object to add.</param>
            <param name="attributes">Attributes to apply to dimension.</param>
            <returns>A unique identifier for the object.</returns>
            <since>7.32</since>
        </member>
        <member name="M:Rhino.FileIO.File3dmObjectTable.AddLine(Rhino.Geometry.Point3d,Rhino.Geometry.Point3d)">
            <summary>Adds a line object to Rhino.</summary>
            <param name="from">A line start point.</param>
            <param name="to">A line end point.</param>
            <returns>A unique identifier of new rhino object.</returns>
            <since>5.0</since>
        </member>
        <member name="M:Rhino.FileIO.File3dmObjectTable.AddLine(Rhino.Geometry.Point3d,Rhino.Geometry.Point3d,Rhino.DocObjects.ObjectAttributes)">
            <summary>Adds a line object to Rhino.</summary>
            <param name="from">The start point of the line.</param>
            <param name="to">The end point of the line.</param>
            <param name="attributes">Attributes to apply to line.</param>
            <returns>A unique identifier for the object.</returns>
            <since>5.0</since>
        </member>
        <member name="M:Rhino.FileIO.File3dmObjectTable.AddLine(Rhino.Geometry.Line)">
            <summary>Adds a line object to Rhino.</summary>
            <returns>A unique identifier for the object.</returns>
            <since>5.0</since>
        </member>
        <member name="M:Rhino.FileIO.File3dmObjectTable.AddLine(Rhino.Geometry.Line,Rhino.DocObjects.ObjectAttributes)">
            <summary>Adds a line object to Rhino.</summary>
            <param name="line">A line.</param>
            <param name="attributes">Attributes to apply to line.</param>
            <returns>A unique identifier for the object.</returns>
            <since>5.0</since>
        </member>
        <member name="M:Rhino.FileIO.File3dmObjectTable.AddPolyline(System.Collections.Generic.IEnumerable{Rhino.Geometry.Point3d})">
            <summary>Adds a polyline object to Rhino.</summary>
            <param name="points">A list, an array or any enumerable set of <see cref="T:Rhino.Geometry.Point3d"/>.</param>
            <returns>A unique identifier for the object.</returns>
            <since>5.0</since>
        </member>
        <member name="M:Rhino.FileIO.File3dmObjectTable.AddPolyline(System.Collections.Generic.IEnumerable{Rhino.Geometry.Point3d},Rhino.DocObjects.ObjectAttributes)">
            <summary>Adds a polyline object to Rhino.</summary>
            <param name="points">A list, an array or any enumerable set of <see cref="T:Rhino.Geometry.Point3d"/>.</param>
            <param name="attributes">Attributes to apply to line.</param>
            <returns>A unique identifier for the object.</returns>
            <since>5.0</since>
        </member>
        <member name="M:Rhino.FileIO.File3dmObjectTable.AddArc(Rhino.Geometry.Arc)">
            <summary>Adds a curve object to the document representing an arc.</summary>
            <param name="arc">An arc.</param>
            <returns>A unique identifier for the object.</returns>
            <since>5.0</since>
        </member>
        <member name="M:Rhino.FileIO.File3dmObjectTable.AddArc(Rhino.Geometry.Arc,Rhino.DocObjects.ObjectAttributes)">
            <summary>Adds a curve object to the document representing an arc.</summary>
            <param name="arc">An arc to add.</param>
            <param name="attributes">attributes to apply to arc.</param>
            <returns>A unique identifier for the object.</returns>
            <since>5.0</since>
        </member>
        <member name="M:Rhino.FileIO.File3dmObjectTable.AddCircle(Rhino.Geometry.Circle)">
            <summary>Adds a curve object to the document representing a circle.</summary>
            <param name="circle">A circle to add.</param>
            <returns>A unique identifier for the object.</returns>
            <since>5.0</since>
        </member>
        <member name="M:Rhino.FileIO.File3dmObjectTable.AddCircle(Rhino.Geometry.Circle,Rhino.DocObjects.ObjectAttributes)">
            <summary>Adds a curve object to the document representing a circle.</summary>
            <param name="circle">A circle to add.</param>
            <param name="attributes">attributes to apply to circle.</param>
            <returns>A unique identifier for the object.</returns>
            <since>5.0</since>
        </member>
        <member name="M:Rhino.FileIO.File3dmObjectTable.AddEllipse(Rhino.Geometry.Ellipse)">
            <summary>Adds a curve object to the document representing an ellipse.</summary>
            <param name="ellipse">An ellipse to add.</param>
            <returns>A unique identifier for the object.</returns>
            <since>5.0</since>
        </member>
        <member name="M:Rhino.FileIO.File3dmObjectTable.AddEllipse(Rhino.Geometry.Ellipse,Rhino.DocObjects.ObjectAttributes)">
            <summary>Adds a curve object to the document representing an ellipse.</summary>
            <param name="ellipse">An ellipse to add.</param>
            <param name="attributes">attributes to apply to ellipse.</param>
            <returns>A unique identifier for the object.</returns>
            <since>5.0</since>
        </member>
        <member name="M:Rhino.FileIO.File3dmObjectTable.AddSphere(Rhino.Geometry.Sphere)">
            <summary>
            Adds a surface object to the document representing a sphere.
            </summary>
            <param name="sphere">A sphere to add.</param>
            <returns>A unique identifier for the object.</returns>
            <since>5.0</since>
        </member>
        <member name="M:Rhino.FileIO.File3dmObjectTable.AddSphere(Rhino.Geometry.Sphere,Rhino.DocObjects.ObjectAttributes)">
            <summary>
            Adds a surface object to the document representing a sphere.
            </summary>
            <param name="sphere">A sphere to add.</param>
            <param name="attributes">Attributes to link with the sphere.</param>
            <returns>A unique identifier for the object.</returns>
            <since>5.0</since>
        </member>
        <member name="M:Rhino.FileIO.File3dmObjectTable.AddCurve(Rhino.Geometry.Curve)">
            <summary>Adds a curve object to the table.</summary>
            <param name="curve">A curve to add.</param>
            <returns>A unique identifier for the object.</returns>
            <since>5.0</since>
        </member>
        <member name="M:Rhino.FileIO.File3dmObjectTable.AddCurve(Rhino.Geometry.Curve,Rhino.DocObjects.ObjectAttributes)">
            <summary>Adds a curve object to the table.</summary>
            <param name="curve">A duplicate of this curve is added to Rhino.</param>
            <param name="attributes">Attributes to apply to curve.</param>
            <returns>A unique identifier for the object.</returns>
            <since>5.0</since>
        </member>
        <member name="M:Rhino.FileIO.File3dmObjectTable.AddTextDot(System.String,Rhino.Geometry.Point3d)">
            <summary>Adds a text dot object to the table.</summary>
            <param name="text">The text.</param>
            <param name="location">The location.</param>
            <returns>A unique identifier for the object.</returns>
            <since>5.0</since>
        </member>
        <member name="M:Rhino.FileIO.File3dmObjectTable.AddTextDot(System.String,Rhino.Geometry.Point3d,Rhino.DocObjects.ObjectAttributes)">
            <summary>Adds a text dot object to the table.</summary>
            <param name="text">The text.</param>
            <param name="location">The location.</param>
            <param name="attributes">Attributes to link with curve.</param>
            <returns>A unique identifier for the object.</returns>
            <since>5.0</since>
        </member>
        <member name="M:Rhino.FileIO.File3dmObjectTable.AddTextDot(Rhino.Geometry.TextDot)">
            <summary>Adds a text dot object to the table.</summary>
            <param name="dot">The text dot.</param>
            <returns>A unique identifier for the object.</returns>
            <since>5.0</since>
        </member>
        <member name="M:Rhino.FileIO.File3dmObjectTable.AddTextDot(Rhino.Geometry.TextDot,Rhino.DocObjects.ObjectAttributes)">
            <summary>Adds a text dot object to the table.</summary>
            <param name="dot">The text dot.</param>
            <param name="attributes">Attributes to link with text dot.</param>
            <returns>A unique identifier for the object.</returns>
            <since>5.0</since>
        </member>
        <member name="M:Rhino.FileIO.File3dmObjectTable.AddInstanceObject(Rhino.Geometry.InstanceReferenceGeometry)">
            <summary>
            Adds an instance reference geometry object to the table.
            </summary>
            <param name="instanceReference">The instance reference geometry object.</param>
            <returns>A unique identifier for the object.</returns>
            <since>6.5</since>
        </member>
        <member name="M:Rhino.FileIO.File3dmObjectTable.AddInstanceObject(Rhino.Geometry.InstanceReferenceGeometry,Rhino.DocObjects.ObjectAttributes)">
            <summary>
            Adds an instance reference geometry object to the table.
            </summary>
            <param name="instanceReference">The instance reference geometry object.</param>
            <param name="attributes">The attributes to link with the object.</param>
            <returns>A unique identifier for the object.</returns>
            <since>6.5</since>
        </member>
        <member name="M:Rhino.FileIO.File3dmObjectTable.AddInstanceObject(System.Int32,Rhino.Geometry.Transform)">
            <summary>
            Adds an instance reference geometry object to the table.
            </summary>
            <param name="instanceDefinitionIndex">The index of the instance definition geometry object.</param>
            <param name="instanceXform">The transformation.</param>
            <returns>A unique identifier for the object.</returns>
            <since>6.5</since>
        </member>
        <member name="M:Rhino.FileIO.File3dmObjectTable.AddInstanceObject(System.Int32,Rhino.Geometry.Transform,Rhino.DocObjects.ObjectAttributes)">
            <summary>
            Adds an instance reference geometry object to the table.
            </summary>
            <param name="instanceDefinitionIndex">The index of the instance definition geometry object.</param>
            <param name="instanceXform">The transformation.</param>
            <param name="attributes">The object attributes.</param>
            <returns>A unique identifier for the object.</returns>
            <since>6.5</since>
        </member>
        <member name="M:Rhino.FileIO.File3dmObjectTable.AddText(System.String,Rhino.Geometry.Plane,System.Double,System.String,System.Boolean,System.Boolean)">
            <summary>
            Adds an annotation text object to the document.
            </summary>
            <param name="text">Text string.</param>
            <param name="plane">Plane of text.</param>
            <param name="height">Height of text.</param>
            <param name="fontName">Name of FontFace.</param>
            <param name="bold">Bold flag.</param>
            <param name="italic">Italic flag.</param>
            <returns>The Guid of the newly added object or Guid.Empty on failure.</returns>
            <since>5.0</since>
        </member>
        <member name="M:Rhino.FileIO.File3dmObjectTable.AddText(System.String,Rhino.Geometry.Plane,System.Double,System.String,System.Boolean,System.Boolean,Rhino.Geometry.TextJustification)">
            <summary>
            Adds an annotation text object to the document.
            </summary>
            <param name="text">Text string.</param>
            <param name="plane">Plane of text.</param>
            <param name="height">Height of text.</param>
            <param name="fontName">Name of FontFace.</param>
            <param name="bold">Bold flag.</param>
            <param name="italic">Italic flag.</param>
            <param name="justification">The justification of the text.</param>
            <returns>The Guid of the newly added object or Guid.Empty on failure.</returns>
            <since>5.0</since>
        </member>
        <member name="M:Rhino.FileIO.File3dmObjectTable.AddText(System.String,Rhino.Geometry.Plane,System.Double,System.String,System.Boolean,System.Boolean,Rhino.Geometry.TextJustification,Rhino.DocObjects.ObjectAttributes)">
            <summary>
            Adds an annotation text object to the document.
            </summary>
            <param name="text">Text string.</param>
            <param name="plane">Plane of text.</param>
            <param name="height">Height of text.</param>
            <param name="fontName">Name of FontFace.</param>
            <param name="bold">Bold flag.</param>
            <param name="italic">Italic flag.</param>
            <param name="justification">The justification of the text.</param>
            <param name="attributes">Attributes to link to the object.</param>
            <returns>The Guid of the newly added object or Guid.Empty on failure.</returns>
            <since>5.0</since>
        </member>
        <member name="M:Rhino.FileIO.File3dmObjectTable.AddText(System.String,Rhino.Geometry.Plane,System.Double,System.String,System.Boolean,System.Boolean,Rhino.DocObjects.ObjectAttributes)">
            <summary>
            Adds an annotation text object to the document.
            </summary>
            <param name="text">Text string.</param>
            <param name="plane">Plane of text.</param>
            <param name="height">Height of text.</param>
            <param name="fontName">Name of FontFace.</param>
            <param name="bold">Bold flag.</param>
            <param name="italic">Italic flag.</param>
            <param name="attributes">Object Attributes.</param>
            <returns>The Guid of the newly added object or Guid.Empty on failure.</returns>
            <since>5.0</since>
        </member>
        <member name="M:Rhino.FileIO.File3dmObjectTable.AddSurface(Rhino.Geometry.Surface)">
            <summary>Adds a surface object to Rhino.</summary>
            <param name="surface">A duplicate of this surface is added to Rhino.</param>
            <returns>A unique identifier for the object.</returns>
            <since>5.0</since>
        </member>
        <member name="M:Rhino.FileIO.File3dmObjectTable.AddSurface(Rhino.Geometry.Surface,Rhino.DocObjects.ObjectAttributes)">
            <summary>Adds a surface object to Rhino.</summary>
            <param name="surface">A duplicate of this surface is added to Rhino.</param>
            <param name="attributes">Attributes to link to the object.</param>
            <returns>A unique identifier for the object.</returns>
            <since>5.0</since>
        </member>
        <member name="M:Rhino.FileIO.File3dmObjectTable.AddExtrusion(Rhino.Geometry.Extrusion)">
            <summary>Adds an extrusion object to Rhino.</summary>
            <param name="extrusion">A duplicate of this extrusion is added to Rhino.</param>
            <returns>A unique identifier for the object.</returns>
            <since>5.0</since>
        </member>
        <member name="M:Rhino.FileIO.File3dmObjectTable.AddExtrusion(Rhino.Geometry.Extrusion,Rhino.DocObjects.ObjectAttributes)">
            <summary>Adds an extrusion object to Rhino.</summary>
            <param name="extrusion">A duplicate of this extrusion is added to Rhino.</param>
            <param name="attributes">Attributes to link to the object.</param>
            <returns>A unique identifier for the object.</returns>
            <since>5.0</since>
        </member>
        <member name="M:Rhino.FileIO.File3dmObjectTable.AddMesh(Rhino.Geometry.Mesh)">
            <summary>Adds a mesh object to Rhino.</summary>
            <param name="mesh">A duplicate of this mesh is added to Rhino.</param>
            <returns>A unique identifier for the object.</returns>
            <since>5.0</since>
        </member>
        <member name="M:Rhino.FileIO.File3dmObjectTable.AddMesh(Rhino.Geometry.Mesh,Rhino.DocObjects.ObjectAttributes)">
            <summary>Adds a mesh object to Rhino.</summary>
            <param name="mesh">A duplicate of this mesh is added to Rhino.</param>
            <param name="attributes">Attributes to link to the object.</param>
            <returns>A unique identifier for the object.</returns>
            <since>5.0</since>
        </member>
        <member name="M:Rhino.FileIO.File3dmObjectTable.AddBrep(Rhino.Geometry.Brep)">
            <summary>Adds a brep object to Rhino.</summary>
            <param name="brep">A duplicate of this brep is added to Rhino.</param>
            <returns>A unique identifier for the object.</returns>
            <since>5.0</since>
        </member>
        <member name="M:Rhino.FileIO.File3dmObjectTable.AddBrep(Rhino.Geometry.Brep,Rhino.DocObjects.ObjectAttributes)">
            <summary>Adds a brep object to Rhino.</summary>
            <param name="brep">A duplicate of this brep is added to Rhino.</param>
            <param name="attributes">Attributes to apply to brep.</param>
            <returns>A unique identifier for the object.</returns>
            <since>5.0</since>
        </member>
        <member name="M:Rhino.FileIO.File3dmObjectTable.AddLeader(Rhino.Geometry.Plane,System.Collections.Generic.IEnumerable{Rhino.Geometry.Point2d})">
            <summary>
            Adds an annotation leader to the document.
            </summary>
            <param name="plane">A plane.</param>
            <param name="points">A list, an array or any enumerable set of 2d points.</param>
            <returns>A unique identifier for the object; or <see cref="F:System.Guid.Empty"/> on failure.</returns>
            <since>5.0</since>
        </member>
        <member name="M:Rhino.FileIO.File3dmObjectTable.AddLeader(Rhino.Geometry.Plane,System.Collections.Generic.IEnumerable{Rhino.Geometry.Point2d},Rhino.DocObjects.ObjectAttributes)">
            <summary>
            Adds an annotation leader to the document.
            </summary>
            <param name="plane">A plane.</param>
            <param name="points">A list, an array or any enumerable set of 2d points.</param>
            <param name="attributes">Attributes to apply to brep.</param>
            <returns>A unique identifier for the object; or <see cref="F:System.Guid.Empty"/> on failure.</returns>
            <since>5.0</since>
        </member>
        <member name="M:Rhino.FileIO.File3dmObjectTable.AddLeader(System.String,Rhino.Geometry.Plane,System.Collections.Generic.IEnumerable{Rhino.Geometry.Point2d},Rhino.DocObjects.ObjectAttributes)">
            <summary>
            Adds an annotation leader to the document.
            </summary>
            <param name="text">The text.</param>
            <param name="plane">A plane.</param>
            <param name="points">A list, an array or any enumerable set of 2d points.</param>
            <param name="attributes">Attributes to apply to brep.</param>
            <returns>A unique identifier for the object; or <see cref="F:System.Guid.Empty"/> on failure.</returns>
            <since>5.0</since>
        </member>
        <member name="M:Rhino.FileIO.File3dmObjectTable.AddLeader(System.String,Rhino.Geometry.Plane,System.Collections.Generic.IEnumerable{Rhino.Geometry.Point2d})">
            <summary>
            Adds an annotation leader to the document.
            </summary>
            <param name="text">The text.</param>
            <param name="plane">A plane.</param>
            <param name="points">A list, an array or any enumerable set of 2d points.</param>
            <returns>A unique identifier for the object; or <see cref="F:System.Guid.Empty"/> on failure.</returns>
            <since>5.0</since>
        </member>
        <member name="M:Rhino.FileIO.File3dmObjectTable.AddHatch(Rhino.Geometry.Hatch)">
            <summary>
            Adds a hatch to the document.
            </summary>
            <param name="hatch">A hatch.</param>
            <returns>A unique identifier for the hatch, or <see cref="F:System.Guid.Empty"/> on failure.</returns>
            <since>5.0</since>
        </member>
        <member name="M:Rhino.FileIO.File3dmObjectTable.AddHatch(Rhino.Geometry.Hatch,Rhino.DocObjects.ObjectAttributes)">
            <summary>
            Adds a hatch to the document.
            </summary>
            <param name="hatch">A hatch.</param>
            <param name="attributes">Attributes to apply</param>
            <returns>A unique identifier for the hatch, or <see cref="F:System.Guid.Empty"/> on failure.</returns>
            <since>5.0</since>
        </member>
        <member name="M:Rhino.FileIO.File3dmObjectTable.AddSubD(Rhino.Geometry.SubD)">
            <summary>
            Adds a SubD to the document
            </summary>
            <param name="subd">the Subd to add</param>
            <returns>A unique identifier for the SubD, or <see cref="F:System.Guid.Empty"/> on failure</returns>
            <since>7.1</since>
        </member>
        <member name="M:Rhino.FileIO.File3dmObjectTable.AddSubD(Rhino.Geometry.SubD,Rhino.DocObjects.ObjectAttributes)">
            <summary>
            Adds a SubD to the document
            </summary>
            <param name="subd">the Subd to add</param>
            <param name="attributes">Attributes to apply</param>
            <returns>A unique identifier for the SubD, or <see cref="F:System.Guid.Empty"/> on failure</returns>
            <since>7.1</since>
        </member>
        <member name="M:Rhino.FileIO.File3dmObjectTable.Delete(System.Guid)">
            <summary>
            Deletes object from document.
            </summary>
            <param name="objectId">Id of the object to delete.</param>
            <returns>true on success, false on failure.</returns>
            <since>5.2</since>
        </member>
        <member name="M:Rhino.FileIO.File3dmObjectTable.Delete(System.Collections.Generic.IEnumerable{System.Guid})">
            <summary>
            Deletes a collection of objects from the document.
            </summary>
            <param name="objectIds">Ids of all objects to delete.</param>
            <returns>The number of successfully deleted objects.</returns>
            <since>5.2</since>
        </member>
        <member name="P:Rhino.FileIO.File3dmObjectTable.Count">
            <summary>
            Returns the total amount of items in the object table, including lights.
            </summary>
            <since>5.0</since>
        </member>
        <member name="M:Rhino.FileIO.File3dmObjectTable.GetEnumerator">
            <summary>
            Returns an enumerator that yields all objects in this document.
            Like in Rhino, this includes lights. Unlike in Rhino, however, all lights are returned in the end of the list.
            </summary>
            <returns>An enumerator that yields all objects in a document.</returns>
            <since>5.0</since>
        </member>
        <member name="T:Rhino.FileIO.File3dmPlugInData">
            <summary>
            Represents custom plug-in data, in the 3dm file, written by a plug-in.
            </summary>
        </member>
        <member name="P:Rhino.FileIO.File3dmPlugInData.PlugInId">
            <summary>
            Gets the id of the plug-in that is associated with this custom data.
            </summary>
            <since>5.0</since>
        </member>
        <member name="T:Rhino.FileIO.File3dmPlugInDataTable">
            <summary>
            Table of custom data provided by plug-ins
            </summary>
        </member>
        <member name="M:Rhino.FileIO.File3dmPlugInDataTable.Dump">
            <summary>Prepares a text dump of table.</summary>
            <returns>A string containing the dump.</returns>
            <since>5.0</since>
        </member>
        <member name="P:Rhino.FileIO.File3dmPlugInDataTable.Count">
            <summary>
            Gets the number of <see cref="T:Rhino.FileIO.File3dmPlugInData"/> objects in this table.
            </summary>
            <since>5.0</since>
        </member>
        <member name="P:Rhino.FileIO.File3dmPlugInDataTable.Item(System.Int32)">
            <summary>
            Gets the <see cref="T:Rhino.FileIO.File3dmPlugInData"/> object at the given index. 
            </summary>
            <param name="index">Index of File3dmPlugInData to access.</param>
            <exception cref="T:System.IndexOutOfRangeException">Thrown when the index is invalid.</exception>
            <returns>The File3dmPlugInData at [index].</returns>
        </member>
        <member name="M:Rhino.FileIO.File3dmPlugInDataTable.TryRead(Rhino.FileIO.File3dmPlugInData,System.Func{Rhino.FileIO.File3dm,Rhino.FileIO.BinaryArchiveReader,System.Boolean})">
            <summary>
            Attempts to read a Rhino plug-in's custom data from the <see cref="T:Rhino.FileIO.File3dm"/> file.
            </summary>
            <param name="pluginData">The plug-in whose data you want to try to read.</param>
            <param name="dataReader">
            The function that will read the data.
            This function must be implemented identical to the the originating plug-in's <see cref="!:PlugIns.PlugIn.ReadDocument(RhinoDoc, BinaryArchiveReader, FileReadOptions)"/> method.
            </param>
            <returns>The value returned by the data reading function if successful, false otherwise.</returns>
        </member>
        <member name="M:Rhino.FileIO.File3dmPlugInDataTable.Clear">
            <summary>
            Remove all entries from this table.
            </summary>
            <since>5.0</since>
        </member>
        <member name="M:Rhino.FileIO.File3dmPlugInDataTable.GetEnumerator">
            <summary>
            Gets the enumerator that visits any <see cref="T:Rhino.FileIO.File3dmPlugInData"/> in this table.
            </summary>
            <returns>The enumerator.</returns>
            <since>5.0</since>
        </member>
        <member name="M:Rhino.FileIO.File3dmPlugInDataTable.System#Collections#IEnumerable#GetEnumerator">
            <since>5.0</since>
        </member>
        <member name="T:Rhino.FileIO.File3dmMaterialTable">
            <summary>
            Provides access to materials in the 3dm file.
            </summary>
        </member>
        <member name="P:Rhino.FileIO.File3dmMaterialTable.ComponentType">
            <summary>
            Returns <see cref="F:Rhino.DocObjects.ModelComponentType.RenderMaterial"/>.
            </summary>
            <since>6.0</since>
        </member>
        <member name="M:Rhino.FileIO.File3dmMaterialTable.FindIndex(System.Int32)">
            <summary>
            Retrieves a material based on Index. This search type of search is discouraged.
            We are moving towards using only IDs for all tables.
            </summary>
            <param name="index">The index to search for.</param>
            <returns>A material, or null if none was found.</returns>
            <since>6.0</since>
        </member>
        <member name="M:Rhino.FileIO.File3dmMaterialTable.AddMaterial(Rhino.DocObjects.Material)">
            <summary>
            Adds a material to the model material table
            </summary>
            <param name="material"></param>
            <returns>The material's index (>=0) is returned. Otherwise, RhinoMath.UnsetIntIndex is returned.</returns>
        </member>
        <member name="T:Rhino.FileIO.File3dmLinetypeTable">
            <summary>
            Provides access to Linetypes in the 3dm file.
            </summary>
        </member>
        <member name="P:Rhino.FileIO.File3dmLinetypeTable.ComponentType">
            <summary>
            Returns <see cref="F:Rhino.DocObjects.ModelComponentType.LinePattern"/>.
            </summary>
            <since>6.0</since>
        </member>
        <member name="M:Rhino.FileIO.File3dmLinetypeTable.FindName(System.String)">
            <summary>
            Finds a Linetype given its name.
            </summary>
            <param name="name">The name of the Linetype to be searched.</param>
            <returns>A Linetype, or null on error.</returns>
            <since>6.0</since>
        </member>
        <member name="M:Rhino.FileIO.File3dmLinetypeTable.FindNameHash(Rhino.FileIO.NameHash)">
            <summary>
            Finds a Linetype given its name hash.
            </summary>
            <param name="nameHash">The name hash of the Linetype to be searched.</param>
            <returns>An Linetype, or null on error.</returns>
            <since>6.0</since>
        </member>
        <member name="M:Rhino.FileIO.File3dmLinetypeTable.FindIndex(System.Int32)">
            <summary>
            Retrieves a Linetype object based on Index. This search type of search is discouraged.
            We are moving towards using only IDs for all tables.
            </summary>
            <param name="index">The index to search for.</param>
            <returns>A Linetype, or null if none was found.</returns>
            <since>6.0</since>
        </member>
        <member name="T:Rhino.FileIO.File3dmLayerTable">
            <summary>
            Provides access to layers in the 3dm file.
            </summary>
        </member>
        <member name="P:Rhino.FileIO.File3dmLayerTable.ComponentType">
            <summary>
            Returns <see cref="F:Rhino.DocObjects.ModelComponentType.Layer"/>.
            </summary>
            <since>6.0</since>
        </member>
        <member name="M:Rhino.FileIO.File3dmLayerTable.AddLayer(System.String,System.Drawing.Color)">
            <summary>
            Easy way to add a new layer to the model.
            </summary>
            <param name="name">Layer name.</param>
            <param name="color">Layer color.</param>
            <returns>
            The layer's index (>=0) is returned. Otherwise, RhinoMath.UnsetIntIndex is returned.
            </returns>
            <remarks>
            Note, the layer name will be modified as needed in the model and manifest.
            </remarks>
            <since>7.6</since>
        </member>
        <member name="M:Rhino.FileIO.File3dmLayerTable.AddLayer(System.String,System.Drawing.Color,System.Guid)">
            <summary>
            Add a new layer to the model.
            </summary>
            <param name="name">Layer name.</param>
            <param name="color">Layer color.</param>
            <param name="parentId">The id of the parent layer, can be Guid.Empty.</param>
            <returns>
            The layer's index (>=0) is returned. Otherwise, RhinoMath.UnsetIntIndex is returned.
            </returns>
            <since>7.30</since>
        </member>
        <member name="M:Rhino.FileIO.File3dmLayerTable.AddDefaultLayer(System.String,System.Drawing.Color)">
            <summary>
            Easy way to add a default layer to the model.
            </summary>
            <param name="name">Layer name.</param>
            <param name="color">Layer color.</param>
            <returns>
            The layer's index (>=0) is returned. Otherwise, RhinoMath.UnsetIntIndex is returned.
            </returns>
            <remarks>
            Note, the layer name will be modified as needed in the model and manifest.
            </remarks>
            <since>7.30</since>
        </member>
        <member name="M:Rhino.FileIO.File3dmLayerTable.FindName(System.String,System.Guid)">
            <summary>
            Finds a Layer given its name.
            </summary>
            <param name="name">The name of the Layer to be searched.</param>
            <param name="parentId">The id of the parent Layer to be searched.</param>
            <returns>A Layer, or null on error.</returns>
            <since>6.0</since>
        </member>
        <member name="M:Rhino.FileIO.File3dmLayerTable.FindNameHash(Rhino.FileIO.NameHash)">
            <summary>
            Finds a Layer given its name hash.
            </summary>
            <param name="nameHash">The name hash of the Layer to be searched.</param>
            <returns>An Layer, or null on error.</returns>
            <since>6.0</since>
        </member>
        <member name="M:Rhino.FileIO.File3dmLayerTable.FindIndex(System.Int32)">
            <summary>
            Retrieves a Layer object based on Index. This search type of search is discouraged.
            We are moving towards using only IDs for all tables.
            </summary>
            <param name="index">The index to search for.</param>
            <returns>A Layer object, or null if none was found.</returns>
            <since>6.0</since>
        </member>
        <member name="T:Rhino.FileIO.File3dmGroupTable">
            <summary>
            Provides access to groups in the 3dm file.
            </summary>
        </member>
        <member name="P:Rhino.FileIO.File3dmGroupTable.ComponentType">
            <summary>
            Returns <see cref="F:Rhino.DocObjects.ModelComponentType.Group"/>.
            </summary>
            <since>6.5</since>
        </member>
        <member name="M:Rhino.FileIO.File3dmGroupTable.FindName(System.String)">
            <summary>
            Finds a Group given its name.
            </summary>
            <param name="name">The name of the Group to be searched.</param>
            <returns>A Group, or null on error.</returns>
            <since>6.5</since>
        </member>
        <member name="M:Rhino.FileIO.File3dmGroupTable.FindNameHash(Rhino.FileIO.NameHash)">
            <summary>
            Finds a Group given its name hash.
            </summary>
            <param name="nameHash">The name hash of the Group to be searched.</param>
            <returns>A Group, or null on error.</returns>
            <since>6.5</since>
        </member>
        <member name="M:Rhino.FileIO.File3dmGroupTable.FindIndex(System.Int32)">
            <summary>
            Retrieves a Group object based on an index. This search type of search is discouraged.
            We are moving towards using only IDs for all tables.
            </summary>
            <param name="groupIndex">The index to search for.</param>
            <returns>A Group object, or null if none was found.</returns>
            <since>6.5</since>
        </member>
        <member name="M:Rhino.FileIO.File3dmGroupTable.GroupMembers(System.Int32)">
            <summary>
            Gets an array of all of the objects in a group.
            </summary>
            <param name="groupIndex">The index of the group in this table.</param>
            <returns>Array of objects that belong to the specified group or empty array if no objects could be found.</returns>
            <since>6.20</since>
        </member>
        <member name="M:Rhino.FileIO.File3dmGroupTable.AddGroup">
            <summary>
            Adds a new empty group to the group table. 
            </summary>
            <returns>>=0 index of new group or -1 on error.</returns>
        </member>
        <member name="T:Rhino.FileIO.File3dmDimStyleTable">
            <summary>
            Provides access to annotation styles in the 3dm file.
            </summary>
        </member>
        <member name="P:Rhino.FileIO.File3dmDimStyleTable.ComponentType">
            <summary>
            Returns <see cref="F:Rhino.DocObjects.ModelComponentType.DimStyle"/>.
            </summary>
            <since>6.0</since>
        </member>
        <member name="M:Rhino.FileIO.File3dmDimStyleTable.FindName(System.String)">
            <summary>
            Finds a DimensionStyle given its name.
            </summary>
            <param name="name">The name of the DimensionStyle to be searched.</param>
            <returns>An DimensionStyle, or null on error.</returns>
            <since>6.0</since>
        </member>
        <member name="M:Rhino.FileIO.File3dmDimStyleTable.FindNameHash(Rhino.FileIO.NameHash)">
            <summary>
            Finds a DimensionStyle given its name hash.
            </summary>
            <param name="nameHash">The name hash of the DimensionStyle to be searched.</param>
            <returns>An DimensionStyle, or null on error.</returns>
            <since>6.0</since>
        </member>
        <member name="M:Rhino.FileIO.File3dmDimStyleTable.FindIndex(System.Int32)">
            <summary>
            Retrieves a DimensionStyle object based on Index. This search type of search is discouraged.
            We are moving towards using only IDs for all tables.
            </summary>
            <param name="index">The index to search for.</param>
            <returns>A DimensionStyle object, or null if none was found.</returns>
            <since>6.0</since>
        </member>
        <member name="T:Rhino.FileIO.File3dmHatchPatternTable">
            <summary>
            Provides access to hatch pattern definitions in the 3dm file.
            </summary>
        </member>
        <member name="P:Rhino.FileIO.File3dmHatchPatternTable.ComponentType">
            <summary>
            Returns <see cref="F:Rhino.DocObjects.ModelComponentType.HatchPattern"/>.
            </summary>
            <since>6.0</since>
        </member>
        <member name="M:Rhino.FileIO.File3dmHatchPatternTable.FindName(System.String)">
            <summary>
            Finds a HatchPattern given its name.
            </summary>
            <param name="name">The name of the HatchPattern to be searched.</param>
            <returns>An HatchPattern, or null on error.</returns>
            <since>6.0</since>
        </member>
        <member name="M:Rhino.FileIO.File3dmHatchPatternTable.FindNameHash(Rhino.FileIO.NameHash)">
            <summary>
            Finds a HatchPattern given its name hash.
            </summary>
            <param name="nameHash">The name hash of the HatchPattern to be searched.</param>
            <returns>An HatchPattern, or null on error.</returns>
            <since>6.0</since>
        </member>
        <member name="M:Rhino.FileIO.File3dmHatchPatternTable.FindIndex(System.Int32)">
            <summary>
            Retrieves a HatchPattern object based on Index. This search type of search is discouraged.
            We are moving towards using only IDs for all tables.
            </summary>
            <param name="index">The index to search for.</param>
            <returns>A HatchPattern object, or null if none was found.</returns>
            <since>6.0</since>
        </member>
        <member name="T:Rhino.FileIO.File3dmInstanceDefinitionTable">
            <summary>
            Provides access to instance (block) definitions in the 3dm file.
            </summary>
        </member>
        <member name="P:Rhino.FileIO.File3dmInstanceDefinitionTable.ComponentType">
            <summary>
            Returns <see cref="F:Rhino.DocObjects.ModelComponentType.InstanceDefinition"/>.
            </summary>
            <since>6.0</since>
        </member>
        <member name="M:Rhino.FileIO.File3dmInstanceDefinitionTable.FindName(System.String)">
            <summary>
            Finds an InstanceDefinitionGeometry given its name.
            </summary>
            <param name="name">The name of the InstanceDefinitionGeometry to be searched.</param>
            <returns>An InstanceDefinitionGeometry, or null on error.</returns>
            <since>6.0</since>
        </member>
        <member name="M:Rhino.FileIO.File3dmInstanceDefinitionTable.FindNameHash(Rhino.FileIO.NameHash)">
            <summary>
            Finds a InstanceDefinitionGeometry given its name hash.
            </summary>
            <param name="nameHash">The name hash of the InstanceDefinitionGeometry to be searched.</param>
            <returns>An InstanceDefinitionGeometry, or null on error.</returns>
            <since>6.0</since>
        </member>
        <member name="M:Rhino.FileIO.File3dmInstanceDefinitionTable.Add(System.String,System.String,System.String,System.String,Rhino.Geometry.Point3d,System.Collections.Generic.IEnumerable{Rhino.Geometry.GeometryBase},System.Collections.Generic.IEnumerable{Rhino.DocObjects.ObjectAttributes})">
            <summary>
            Adds an instance definition to the instance definition table.
            </summary>
            <param name="name">The definition name.</param>
            <param name="description">The definition description.</param>
            <param name="url">A URL or hyperlink.</param>
            <param name="urlTag">A description of the URL or hyperlink.</param>
            <param name="basePoint">A base point.</param>
            <param name="geometry">An array, a list or any enumerable set of geometry.</param>
            <param name="attributes">An array, a list or any enumerable set of attributes.</param>
            <returns>
            &gt;=0  index of instance definition in the instance definition table. -1 on failure.
            </returns>
            <since>7.0</since>
        </member>
        <member name="M:Rhino.FileIO.File3dmInstanceDefinitionTable.Add(System.String,System.String,Rhino.Geometry.Point3d,System.Collections.Generic.IEnumerable{Rhino.Geometry.GeometryBase},System.Collections.Generic.IEnumerable{Rhino.DocObjects.ObjectAttributes})">
            <summary>
            Adds an instance definition to the instance definition table.
            </summary>
            <param name="name">The definition name.</param>
            <param name="description">The definition description.</param>
            <param name="basePoint">A base point.</param>
            <param name="geometry">An array, a list or any enumerable set of geometry.</param>
            <param name="attributes">An array, a list or any enumerable set of attributes.</param>
            <returns>
            &gt;=0  index of instance definition in the instance definition table. -1 on failure.
            </returns>
            <since>6.5</since>
        </member>
        <member name="M:Rhino.FileIO.File3dmInstanceDefinitionTable.Add(System.String,System.String,Rhino.Geometry.Point3d,System.Collections.Generic.IEnumerable{Rhino.Geometry.GeometryBase})">
            <summary>
            Adds an instance definition to the instance definition table.
            </summary>
            <param name="name">The definition name.</param>
            <param name="description">The definition description.</param>
            <param name="basePoint">A base point.</param>
            <param name="geometry">An array, a list or any enumerable set of geometry.</param>
            <returns>
            &gt;=0  index of instance definition in the instance definition table. -1 on failure.
            </returns>
            <since>6.5</since>
        </member>
        <member name="M:Rhino.FileIO.File3dmInstanceDefinitionTable.Add(System.String,System.String,Rhino.Geometry.Point3d,Rhino.Geometry.GeometryBase,Rhino.DocObjects.ObjectAttributes)">
            <summary>
            Adds an instance definition to the instance definition table.
            </summary>
            <param name="name">The definition name.</param>
            <param name="description">The definition description.</param>
            <param name="basePoint">A base point.</param>
            <param name="geometry">An element.</param>
            <param name="attributes">An attribute.</param>
            <returns>
            &gt;=0  index of instance definition in the instance definition table. -1 on failure.
            </returns>
            <since>6.5</since>
        </member>
        <member name="M:Rhino.FileIO.File3dmInstanceDefinitionTable.AddLinked(System.String,System.String,System.String)">
            <summary>
            Adds a linked instance definition to the instance definition table.
            </summary>
            <param name="filename">Full path of the file to link.</param>
            <param name="name">The definition name.</param>
            <param name="description">The definition description.</param>
            <returns></returns>
            <since>6.13</since>
        </member>
        <member name="T:Rhino.FileIO.File3dmViewTable">
            <summary>
            Provides access to views in the 3dm file.
            </summary>
        </member>
        <member name="M:Rhino.FileIO.File3dmViewTable.FindName(System.String)">
            <summary>
            Finds a ViewInfo given its name.
            </summary>
            <param name="name">The name of the ViewInfo to be searched.</param>
            <returns>An ViewInfo, or null on error.</returns>
            <since>6.0</since>
        </member>
        <member name="M:Rhino.FileIO.File3dmViewTable.IndexOf(Rhino.DocObjects.ViewInfo)">
            <summary>
            Returns the index of the current ViewInfo.
            </summary>
            <param name="item">The item to be searched.</param>
            <returns>The index of the ViewInfo.</returns>
            <since>6.0</since>
        </member>
        <member name="M:Rhino.FileIO.File3dmViewTable.Delete(System.Int32)">
            <summary>
            Removes an item.
            </summary>
            <param name="index">The index of the item to remove.</param>
            <returns>True if the item was removed.</returns>
            <since>6.0</since>
        </member>
        <member name="P:Rhino.FileIO.File3dmViewTable.Item(System.Int32)">
            <summary>
            Gets the view info at an index. The set method always throws NotSupportedException.
            </summary>
            <param name="index">The index of the item to search for.</param>
            <returns>A non-null instance, or an exception is thrown.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">If index is invalid.</exception>
        </member>
        <member name="M:Rhino.FileIO.File3dmViewTable.Add(Rhino.DocObjects.ViewInfo)">
            <summary>
            Adds a 
            </summary>
            <param name="item"></param>
            <since>6.0</since>
        </member>
        <member name="M:Rhino.FileIO.File3dmViewTable.Clear">
            <summary>
            Removes all items from the table.
            </summary>
            <since>6.0</since>
        </member>
        <member name="M:Rhino.FileIO.File3dmViewTable.Contains(Rhino.DocObjects.ViewInfo)">
            <summary>
            Returns an indication of the presence of a view in the table.
            </summary>
            <param name="item">The view to check.</param>
            <returns>true if the item is in the table; false otherwise.</returns>
            <since>6.0</since>
        </member>
        <member name="M:Rhino.FileIO.File3dmViewTable.CopyTo(Rhino.DocObjects.ViewInfo[],System.Int32)">
            <summary>
            Copies the content of the table to an array.
            </summary>
            <param name="array"></param>
            <param name="arrayIndex"></param>
            <since>6.0</since>
        </member>
        <member name="P:Rhino.FileIO.File3dmViewTable.Count">
            <summary>
            Gets the amount of items in the table.
            </summary>
            <since>6.0</since>
        </member>
        <member name="M:Rhino.FileIO.File3dmViewTable.Delete(Rhino.DocObjects.ViewInfo)">
            <summary>
            Deletes an item.
            </summary>
            <param name="item"></param>
            <returns></returns>
            <since>6.0</since>
        </member>
        <member name="M:Rhino.FileIO.File3dmViewTable.GetEnumerator">
            <summary>
            Returns an enumerator that yields all views in the table.
            </summary>
            <returns>An enumerator.</returns>
            <since>6.0</since>
        </member>
        <member name="M:Rhino.FileIO.File3dmViewTable.System#Collections#IEnumerable#GetEnumerator">
            <since>6.0</since>
        </member>
        <member name="T:Rhino.FileIO.File3dmNamedConstructionPlanes">
            <summary>
            Provides access to named construction planes in the 3dm file.
            </summary>
        </member>
        <member name="M:Rhino.FileIO.File3dmNamedConstructionPlanes.FindName(System.String)">
            <summary>
            Finds a named construction plane given its name.
            </summary>
            <param name="name">The name of the construction plane to be searched.</param>
            <returns>A ConstructionPlane, or null if not found.</returns>
            <since>6.0</since>
        </member>
        <member name="M:Rhino.FileIO.File3dmNamedConstructionPlanes.IndexOf(Rhino.DocObjects.ConstructionPlane)">
            <summary>
            Returns the index of a named construction plane.
            </summary>
            <param name="cplane">The construction plane to be searched.</param>
            <returns>The index of the named construction plane, -1 if not found.</returns>
            <since>6.0</since>
        </member>
        <member name="M:Rhino.FileIO.File3dmNamedConstructionPlanes.Delete(System.Int32)">
            <summary>
            Remove a named construction plane from the table.
            </summary>
            <param name="index">Zero based array index.</param>
            <returns>true if successful.</returns>
            <since>6.0</since>
        </member>
        <member name="M:Rhino.FileIO.File3dmNamedConstructionPlanes.Delete(Rhino.DocObjects.ConstructionPlane)">
            <summary>
            Deletes a named construction plane from the table.
            </summary>
            <param name="cplane">The construction plane to delete.</param>
            <returns></returns>
            <since>6.0</since>
        </member>
        <member name="P:Rhino.FileIO.File3dmNamedConstructionPlanes.Item(System.Int32)">
            <summary>
            Gets the named construction plane at an index.
            </summary>
            <param name="index">Zero based array index.</param>
            <returns>
            A construction plane at the index, or null on error.
            </returns>
        </member>
        <member name="M:Rhino.FileIO.File3dmNamedConstructionPlanes.Add(System.String,Rhino.Geometry.Plane)">
            <summary>
            Adds a named construction plane to the table.
            </summary>
            <param name="name">
            The name of the named construction plane.
            </param>
            <param name="plane">The plane value.</param>
            <returns>
            0 based index of the named construction plane.
            -1 on failure.
            </returns>
            <since>6.0</since>
        </member>
        <member name="M:Rhino.FileIO.File3dmNamedConstructionPlanes.Add(Rhino.DocObjects.ConstructionPlane)">
            <summary>
            Adds a named construction plane to the table.
            </summary>
            <param name="cplane">The construction plane to add.</param>
            <since>6.0</since>
        </member>
        <member name="M:Rhino.FileIO.File3dmNamedConstructionPlanes.Clear">
            <summary>
            Removes all named construction planes from the table.
            </summary>
            <since>6.0</since>
        </member>
        <member name="M:Rhino.FileIO.File3dmNamedConstructionPlanes.Contains(Rhino.DocObjects.ConstructionPlane)">
            <summary>
            Returns an indication of the presence of a named construction plane in the table.
            </summary>
            <param name="cplane">The construction plane to check.</param>
            <returns>true if the named construction plane is in the table; false otherwise.</returns>
            <since>6.0</since>
        </member>
        <member name="M:Rhino.FileIO.File3dmNamedConstructionPlanes.CopyTo(Rhino.DocObjects.ConstructionPlane[],System.Int32)">
            <summary>
            Copies the content of the table to an array.
            </summary>
            <param name="array"></param>
            <param name="arrayIndex"></param>
            <since>6.0</since>
        </member>
        <member name="P:Rhino.FileIO.File3dmNamedConstructionPlanes.Count">
            <summary>
            Number of named construction planes in the table.
            </summary>
            <since>6.0</since>
        </member>
        <member name="M:Rhino.FileIO.File3dmNamedConstructionPlanes.GetEnumerator">
            <summary>
            Gets an enumerator that yields all construction planes in this collection.
            </summary>
            <returns>The enumerator.</returns>
            <since>6.0</since>
        </member>
        <member name="M:Rhino.FileIO.File3dmNamedConstructionPlanes.System#Collections#IEnumerable#GetEnumerator">
            <since>6.0</since>
        </member>
        <member name="T:Rhino.FileIO.File3dmStringTable">
            <summary>
            Provides access to document strings in the 3dm file.
            </summary>
        </member>
        <member name="P:Rhino.FileIO.File3dmStringTable.Count">
            <summary>
            Returns the number of document strings in the 3dm file.
            </summary>
            <since>6.0</since>
        </member>
        <member name="P:Rhino.FileIO.File3dmStringTable.DocumentUserTextCount">
            <summary>
            Returns the number of Section/Entry-style key values.
            </summary>
            <since>6.0</since>
        </member>
        <member name="M:Rhino.FileIO.File3dmStringTable.GetKey(System.Int32)">
            <summary>
            Returns a key value at a given index.
            </summary>
            <param name="i">The index.</param>
            <returns>The key if successful.</returns>
            <since>6.0</since>
        </member>
        <member name="M:Rhino.FileIO.File3dmStringTable.GetValue(System.Int32)">
            <summary>
            Returns a string value at a given index.
            </summary>
            <param name="i">The index at which to get the value.</param>
            <returns>The string value if successful.</returns>
            <since>6.0</since>
        </member>
        <member name="M:Rhino.FileIO.File3dmStringTable.GetValue(System.String)">
            <summary>
            Returns a string value at a key.
            </summary>
            <param name="key">The key at which to get the value.</param>
            <returns>The string value if successful.</returns>
            <since>6.0</since>
        </member>
        <member name="M:Rhino.FileIO.File3dmStringTable.GetValue(System.String,System.String)">
            <summary>
            Returns a string value given a section and entry.
            </summary>
            <param name="section">The section at which to get the value.</param>
            <param name="entry">The entry to search for.</param>
            <returns>The string value if successful.</returns>
            <since>6.0</since>
        </member>
        <member name="M:Rhino.FileIO.File3dmStringTable.GetSectionNames">
            <summary>
            Returns a list of all the section names for document strings in the 3dm file.
            <para>By default a section name is a key that is prefixed with a string separated by a backslash.</para>
            </summary>
            <returns>An array of section names. This can be empty, but not null.</returns>
            <since>6.0</since>
        </member>
        <member name="M:Rhino.FileIO.File3dmStringTable.GetEntryNames(System.String)">
            <summary>
            Return list of all entry names for a given section of document strings in the 3dm file.
            </summary>
            <param name="section">The section from which to retrieve section names.</param>
            <returns>An array of section names. This can be empty, but not null.</returns>
            <since>6.0</since>
        </member>
        <member name="M:Rhino.FileIO.File3dmStringTable.SetString(System.String,System.String,System.String)">
            <summary>
            Adds or sets a document string in the 3dm file.
            </summary>
            <param name="section">The section.</param>
            <param name="entry">The entry name.</param>
            <param name="value">The entry value.</param>
            <returns>
            The previous value if successful.
            </returns>
            <since>6.0</since>
        </member>
        <member name="M:Rhino.FileIO.File3dmStringTable.SetString(System.String,System.String)">
            <summary>
            Adds or sets a a document string in the 3dm file.
            </summary>
            <param name="key">The key.</param>
            <param name="value">The entry value.</param>
            <returns>
            The previous value if successful.
            </returns>
            <since>6.0</since>
        </member>
        <member name="M:Rhino.FileIO.File3dmStringTable.Delete(System.String,System.String)">
            <summary>
            Removes document strings from the 3dm file.
            </summary>
            <param name="section">name of section to delete. If null, all sections will be deleted.</param>
            <param name="entry">name of entry to delete. If null, all entries will be deleted for a given section.</param>
            <since>6.0</since>
        </member>
        <member name="M:Rhino.FileIO.File3dmStringTable.Delete(System.String)">
            <summary>
            Removes a document string from the 3dm file.
            </summary>
            <param name="key">The key to remove.</param>
            <since>6.0</since>
        </member>
        <member name="T:Rhino.FileIO.FileReference">
            <summary>
            Manages a reference to an existing or non-existing file,
            using either or both absolute or relative paths.
            Once constructed, this class is immutable.
            </summary>
        </member>
        <member name="M:Rhino.FileIO.FileReference.#ctor(System.String,System.String,Rhino.FileIO.ContentHash,Rhino.FileIO.FileReferenceStatus)">
            <summary>
            Constructs a new instance of the FileReference class,
            given a fullPath, a relativePath a content hash and a status value.
            </summary>
            <since>6.0</since>
        </member>
        <member name="M:Rhino.FileIO.FileReference.ConstructAndOwnFromConstPtr(System.IntPtr)">
            <summary>
            No need to check for IntPtr.Zero. The resulting FileReference will be subject to garbage collection.
            </summary>
        </member>
        <member name="M:Rhino.FileIO.FileReference.CreateFromFullPath(System.String)">
            <summary>
            Returns a new file reference. This returns a new instance even if the path does not exist.
            </summary>
            <param name="fullPath">A full path.</param>
            <returns>A file reference to the specified path.</returns>
            <since>6.0</since>
        </member>
        <member name="M:Rhino.FileIO.FileReference.CreateFromFullAndRelativePaths(System.String,System.String)">
            <summary>
            Returns a new file reference. This returns a new instance even if the path does not exist.
            </summary>
            <param name="fullPath">A full path. This parameter cannot be null.</param>
            <param name="relativePath">A relative path. This parameter can be null.</param>
            <returns>A file reference to the specified paths.</returns>
            <since>6.0</since>
        </member>
        <member name="P:Rhino.FileIO.FileReference.FullPath">
            <summary>
            Gets the absolute path of this file reference.
            </summary>
            <since>6.0</since>
        </member>
        <member name="P:Rhino.FileIO.FileReference.RelativePath">
            <summary>
            Gets the relative path of this file reference.
            </summary>
            <since>6.0</since>
        </member>
        <member name="P:Rhino.FileIO.FileReference.ContentHash">
            <summary>
            Gets the content hash.
            </summary>
            <since>6.0</since>
        </member>
        <member name="P:Rhino.FileIO.FileReference.FullPathStatus">
            <summary>
            Gets the file reference status.
            </summary>
            <since>6.0</since>
        </member>
        <member name="P:Rhino.FileIO.FileReference.IsSet">
            <summary>
            Returns an indication of the fact that the reference is actually set to a non-null value.
            </summary>
            <since>6.0</since>
        </member>
        <member name="M:Rhino.FileIO.FileReference.Dispose">
            <summary>
            Reclaims unmanaged resources used by this object.
            </summary>
            <since>6.0</since>
        </member>
        <member name="M:Rhino.FileIO.FileReference.Finalize">
            <summary>
            
            </summary>
        </member>
        <member name="T:Rhino.FileIO.NameHash">
            <summary>
            Contains information that is useful to uniquely identify an object name.
            <remarks>This object is immutable.</remarks>
            </summary>
        </member>
        <member name="F:Rhino.FileIO.NameHash.m_sha1_hash">
            <summary>SHA-1 hash of ordinal minimum mapped Unicode (UTF-32) code points.</summary>
        </member>
        <member name="F:Rhino.FileIO.NameHash.m_flags">
            <summary> m_flags - used internally </summary>
        </member>
        <member name="F:Rhino.FileIO.NameHash.m_parent_id">
            <summary> When names appear in a tree structure,
            m_parent_id identifies the parent node. </summary>
        </member>
        <member name="M:Rhino.FileIO.NameHash.#ctor(System.String)">
            <summary>
            Creates a new NameHash, representing a piece of text.
            </summary>
            <param name="name">A name. This can be null and can refer to a non-existing path.</param>
            <returns></returns>
            <since>6.0</since>
        </member>
        <member name="M:Rhino.FileIO.NameHash.#ctor(System.String,System.Guid)">
            <summary>
            Creates a new NameHash, representing a piece of text.
            </summary>
            <param name="name">A name. This can be null and can refer to a non-existing path.</param>
            <param name="parentId">The id of the parent layer. This is only useful with layers.</param>
            <returns>A new hash</returns>
            <since>6.0</since>
        </member>
        <member name="M:Rhino.FileIO.NameHash.#ctor(System.String,System.Guid,Rhino.DocObjects.ModelComponentType)">
            <summary>
            Creates a new NameHash, representing a piece of text.
            </summary>
            <param name="name">A name. This can be null and can refer to a non-existing path.</param>
            <param name="parentId">The id of the parent layer. This is only useful with layers.</param>
            <param name="type">Calls <see cref="M:Rhino.DocObjects.ModelComponent.ModelComponentTypeIgnoresCase(Rhino.DocObjects.ModelComponentType)"/> to determine if case should be used in search.</param>
            <returns>A new hash</returns>
            <since>6.0</since>
        </member>
        <member name="M:Rhino.FileIO.NameHash.#ctor(System.String,System.Guid,System.Boolean)">
            <summary>
            Creates a new NameHash, representing a piece of text.
            </summary>
            <param name="name">A name. This can be null and can refer to a non-existing path.</param>
            <param name="parentId">The id of the parent layer. This is only useful with layers.</param>
            <param name="ignoreCase">All manifest searches currently ignore case, except for groups.</param>
            <returns>A new hash</returns>
            <since>6.0</since>
        </member>
        <member name="M:Rhino.FileIO.NameHash.#ctor(Rhino.FileIO.NameHash)">
            <summary>
            Constructs a copy of a content hash.
            </summary>
            <param name="other">The other content hash to copy.</param>
        </member>
        <member name="M:Rhino.FileIO.NameHash.#ctor(System.Guid,System.Byte[],System.UInt32)">
            <summary>
            Constructs a new instance of the content hash class. Fields are NOT copied.
            </summary>
        </member>
        <member name="P:Rhino.FileIO.NameHash.Sha1Hash">
            <summary>
            Gets the 20-bytes long SHA-1 hash of ordinal minimum mapped Unicode (UTF-32) code points.
            </summary>
            <since>6.0</since>
        </member>
        <member name="P:Rhino.FileIO.NameHash.MappedCodePoints">
            <summary>
            Gets the NameHash flags. In some cases = number of mapped code points.
            </summary>
            <since>6.0</since>
        </member>
        <member name="P:Rhino.FileIO.NameHash.ParentId">
            <summary>
            Only useful if this participates in a tree structure, as with layers.
            </summary>
            <since>6.0</since>
        </member>
        <member name="M:Rhino.FileIO.NameHash.GetDisposableHandle">
            <summary>
            Be responsible: call Dispose()
            </summary>
        </member>
        <member name="M:Rhino.FileIO.NameHash.CreateFilePathHash(System.String)">
            <summary>
            Creates a new NameHash, representing the name of a file.
            </summary>
            <param name="path">A path. This can be null and can refer to a non-existing path.</param>
            <returns></returns>
            <since>6.0</since>
        </member>
        <member name="M:Rhino.FileIO.NameHash.System#ICloneable#Clone">
            <since>6.0</since>
        </member>
        <member name="M:Rhino.FileIO.NameHash.Clone">
            <summary>
            Creates a copy of this name hash.
            Because content hash is immutable, this can be used as a deep copy.
            </summary>
            <returns>A different instance of the same name hash.</returns>
            <since>6.0</since>
        </member>
        <member name="M:Rhino.FileIO.NameHash.Equals(Rhino.FileIO.NameHash)">
            <summary>
            Determines if another name hash has the same value.
            </summary>
            <param name="other">The other name hash to compare.</param>
            <returns>True if the two hashes are equal.</returns>
            <since>6.0</since>
        </member>
        <member name="M:Rhino.FileIO.NameHash.Equals(System.Object)">
            <summary>
            Determines if another object is a name hash with same value.
            </summary>
            <param name="obj">The other content hash to compare.</param>
            <returns>True if the two hashes are equal.</returns>
        </member>
        <member name="M:Rhino.FileIO.NameHash.GetHashCode">
            <summary>
            Gets an hash code for this name hash.
            Two equal content hashes have equal hash code. The other way around might not be true.
            </summary>
            <returns>An hash code value.</returns>
        </member>
        <member name="M:Rhino.FileIO.NameHash.op_Equality(Rhino.FileIO.NameHash,Rhino.FileIO.NameHash)">
            <summary>
            Determines if two NameHash instances are equal by value.
            </summary>
            <param name="left">The first hash.</param>
            <param name="right">The second hash.</param>
            <returns>True if they are equal by value, otherwise false.</returns>
            <since>6.0</since>
        </member>
        <member name="M:Rhino.FileIO.NameHash.op_Inequality(Rhino.FileIO.NameHash,Rhino.FileIO.NameHash)">
            <summary>
            Determines if two NameHash instances are different by value.
            </summary>
            <param name="left">The first hash.</param>
            <param name="right">The second hash.</param>
            <returns>True if they are different by value, otherwise false.</returns>
            <since>6.0</since>
        </member>
        <member name="T:Rhino.FileIO.ContentHash">
            <summary>
            Contains information that is useful to uniquely identify an object.
            <remarks>This object is immutable.</remarks>
            </summary>
        </member>
        <member name="M:Rhino.FileIO.ContentHash.#ctor(Rhino.FileIO.ContentHash)">
            <summary>
            Constructs a copy of a content hash.
            </summary>
            <param name="other">The other content hash to copy.</param>
        </member>
        <member name="M:Rhino.FileIO.ContentHash.#ctor(System.Byte[],System.UInt64,System.Byte[],System.UInt64,System.UInt64)">
            <summary>
            Constructs a new instance of the content hash class.
            </summary>
            <param name="sha1NameHash">Provide an immutable copy of this array or use the public constructor.</param>
            <param name="byteCount">Length in bytes.</param>
            <param name="sha1ContentHash">Provide an immutable copy of this array or use the public constructor.</param>
            <param name="hashTime">Seconds from UNIX epoch.</param>
            <param name="contentLastModifiedTime">Seconds from UNIX epoch.</param>
        </member>
        <member name="P:Rhino.FileIO.ContentHash.Sha1NameHash">
            <summary>
            Gets the 20-bytes long SHA1 hash of the name.
            </summary>
            <since>6.0</since>
        </member>
        <member name="P:Rhino.FileIO.ContentHash.ByteCount">
            <summary>
            Gets the length of the content, in bytes.
            </summary>
            <since>6.0</since>
        </member>
        <member name="P:Rhino.FileIO.ContentHash.Sha1ContentHash">
            <summary>
            Gets the 20-bytes long SHA1 hash of the content.
            </summary>
            <since>6.0</since>
        </member>
        <member name="P:Rhino.FileIO.ContentHash.HashTime">
            <summary>
            Gets the hash time, rounded to seconds.
            </summary>
            <since>6.0</since>
        </member>
        <member name="M:Rhino.FileIO.ContentHash.GetDisposableHandle">
            <summary>
            Be responsible: call Dispose()
            </summary>
        </member>
        <member name="M:Rhino.FileIO.ContentHash.CreateFromFile(System.String)">
            <summary>
            Creates a new ContentHash, representing the content of a file.
            </summary>
            <param name="path">A path. This can be null and can refer to a non-existing path.</param>
            <returns></returns>
            <since>6.0</since>
        </member>
        <member name="M:Rhino.FileIO.ContentHash.System#ICloneable#Clone">
            <since>6.0</since>
        </member>
        <member name="M:Rhino.FileIO.ContentHash.Clone">
            <summary>
            Creates a copy of this content hash.
            Because content hash is immutable, this can be used as a deep copy.
            </summary>
            <returns>A different instance of the same content hash.</returns>
            <since>6.0</since>
        </member>
        <member name="M:Rhino.FileIO.ContentHash.Equals(Rhino.FileIO.ContentHash)">
            <summary>
            Determines if another content hash has the same value.
            </summary>
            <param name="other">The other content hash to compare.</param>
            <returns>True if the two hashes are equal.</returns>
            <since>6.0</since>
        </member>
        <member name="M:Rhino.FileIO.ContentHash.Equals(System.Object)">
            <summary>
            Determines if another object is a content hash with same value.
            </summary>
            <param name="obj">The other content hash to compare.</param>
            <returns>True if the two hashes are equal.</returns>
        </member>
        <member name="M:Rhino.FileIO.ContentHash.GetHashCode">
            <summary>
            Gets an hash code for this content hash.
            Two equal content hashes have equal hash code. The other way around might not be true.
            </summary>
            <returns>An hash code value.</returns>
        </member>
        <member name="M:Rhino.FileIO.ContentHash.op_Equality(Rhino.FileIO.ContentHash,Rhino.FileIO.ContentHash)">
            <summary>
            Determines if two ContentHash instances are equal by value.
            </summary>
            <param name="left">The first hash.</param>
            <param name="right">The second hash.</param>
            <returns>True if they are equal by value, otherwise false.</returns>
            <since>6.0</since>
        </member>
        <member name="M:Rhino.FileIO.ContentHash.op_Inequality(Rhino.FileIO.ContentHash,Rhino.FileIO.ContentHash)">
            <summary>
            Determines if two ContentHash instances are different by value.
            </summary>
            <param name="left">The first hash.</param>
            <param name="right">The second hash.</param>
            <returns>True if they are different by value, otherwise false.</returns>
            <since>6.0</since>
        </member>
        <member name="T:Rhino.FileIO.File3dmDisplacement">
            <summary>
            Represents the displacement attached to file3dm object attributes.
            </summary>
        </member>
        <member name="P:Rhino.FileIO.File3dmDisplacement.On">
            <summary>
            Specifies whether the displacement feature is enabled or not.
            </summary>
            <since>8.0</since>
        </member>
        <member name="P:Rhino.FileIO.File3dmDisplacement.TextureId">
            <summary>
            Specifies which texture is used for computing the displacement amount.
            </summary>
            <since>8.0</since>
        </member>
        <member name="P:Rhino.FileIO.File3dmDisplacement.MappingChannel">
            <summary>
            Specifies which texture mapping channel is used for the displacement texture.
            </summary>
            <since>8.0</since>
        </member>
        <member name="P:Rhino.FileIO.File3dmDisplacement.BlackPoint">
            <summary>
            Specifies the amount of displacement for the black color in the texture.
            </summary>
            <since>8.0</since>
        </member>
        <member name="P:Rhino.FileIO.File3dmDisplacement.WhitePoint">
            <summary>
            Specifies the amount of displacement for the white color in the texture.
            </summary>
            <since>8.0</since>
        </member>
        <member name="P:Rhino.FileIO.File3dmDisplacement.InitialQuality">
            <summary>
            Specifies how densely the object is initially subdivided.
            The lower the value, the higher the resolution of the displaced mesh.
            </summary>
            <since>8.0</since>
        </member>
        <member name="P:Rhino.FileIO.File3dmDisplacement.FinalMaxFacesOn">
            <summary>
            Specifies whether to perform a mesh reduction as a post process to simplify the result of displacement.
            </summary>
            <since>8.0</since>
        </member>
        <member name="P:Rhino.FileIO.File3dmDisplacement.FinalMaxFaces">
            <summary>
            Specifies how many faces the reduction post process should target.
            </summary>
            <since>8.0</since>
        </member>
        <member name="P:Rhino.FileIO.File3dmDisplacement.FairingOn">
            <summary>
            Specifies whether or not to perform a fairing step. Fairing straightens rough feature edges.
            </summary>
            <since>8.0</since>
        </member>
        <member name="P:Rhino.FileIO.File3dmDisplacement.Fairing">
            <summary>
            Specifies the number of steps for the fairing process. Fairing straightens rough feature edges.
            </summary>
            <since>8.0</since>
        </member>
        <member name="P:Rhino.FileIO.File3dmDisplacement.PostWeldAngle">
            <summary>
             Specifies the maximum angle between face normals of adjacent faces that will get welded together.
            </summary>
            <since>8.0</since>
        </member>
        <member name="P:Rhino.FileIO.File3dmDisplacement.MeshMemoryLimit">
            <summary>
            Specifies in megabytes how much memory can be allocated for use by the displacement mesh.
            </summary>
            <since>8.0</since>
        </member>
        <member name="P:Rhino.FileIO.File3dmDisplacement.RefineSteps">
            <summary>
            Specifies the number of refinement passes
            </summary>
            <since>8.0</since>
        </member>
        <member name="P:Rhino.FileIO.File3dmDisplacement.RefineSensitivity">
            <summary>
            Specifies how sensitive the divider for contrasts is on the displacement texture.
            Specify 1 to split all mesh edges on each refine step.
            Specify 0.99 to make even slight contrasts on the displacement texture cause edges to be split.
            Specifying 0.01 only splits edges where heavy contrast exists.
            </summary>
            <since>8.0</since>
        </member>
        <member name="T:Rhino.FileIO.File3dmDisplacement.SweepResolutionFormulas">
            <summary>
            Formula to use to calculate sweep resolution from initial quality.
            </summary>
            <since>8.0</since>
        </member>
        <member name="F:Rhino.FileIO.File3dmDisplacement.SweepResolutionFormulas.Default">
            <summary>
            Default formula.
            </summary>
        </member>
        <member name="F:Rhino.FileIO.File3dmDisplacement.SweepResolutionFormulas.AbsoluteToleranceDependent">
            <summary>
            Formula used in Rhino 5. Dependent on absolute tolerance.
            </summary>
        </member>
        <member name="P:Rhino.FileIO.File3dmDisplacement.SweepResolutionFormula">
            <summary>
            Specifies which formula is used to calculate sweep resolution from initial quality.
            </summary>
            <since>8.0</since>
        </member>
        <member name="M:Rhino.FileIO.File3dmDisplacement.GetSubItemFaceIndexes">
            <summary>
            Gets all the sub-items on the displacement. Sub-items can exist to override the top-level parameters
            for polysurface/SubD faces. Sub-items are identified by the face index that they apply to.
            <return>An array of the face indexes of each sub-item on the displacement.</return>
            </summary>
            <since>8.0</since>
        </member>
        <member name="M:Rhino.FileIO.File3dmDisplacement.AddSubItem(System.Int32,System.Boolean,System.Guid,System.Int32,System.Double,System.Double)">
            <summary>
            Adds a new sub-item to the displacement.
            <param>face_index is the index of the face on the polysurface/SubD.</param>
            <param>on is the override for File3dmDisplacement.On.</param>
            <param>texture is the override for File3dmDisplacement.TextureId.</param>
            <param>mapping_channel is the override for File3dmDisplacement.MappingChannel.</param>
            <param>black_point is the override for File3dmDisplacement.BlackPoint.</param>
            <param>white_point is the override for File3dmDisplacement.WhitePoint.</param>
            </summary>
            <since>8.0</since>
        </member>
        <member name="M:Rhino.FileIO.File3dmDisplacement.DeleteSubItem(System.Int32)">
            <summary>
            Deletes a sub-item by its face index.
            <param>face_index is the index of the face on the polysurface/SubD.</param>
            </summary>
            <since>8.0</since>
        </member>
        <member name="M:Rhino.FileIO.File3dmDisplacement.DeleteAllSubItems">
            <summary>
            Deletes all the sub-items from the displacement.
            </summary>
            <since>8.0</since>
        </member>
        <member name="M:Rhino.FileIO.File3dmDisplacement.SubItemOn(System.Int32)">
            <summary>
            Gets the override for displacement 'on'.
            <param>face_index is the index of the face on the polysurface/SubD.</param>
            </summary>
            <since>8.0</since>
        </member>
        <member name="M:Rhino.FileIO.File3dmDisplacement.SetSubItemOn(System.Int32,System.Boolean)">
            <summary>
            Sets the override for displacement 'on'.
            <param>face_index is the index of the face on the polysurface/SubD.</param>
            </summary>
            <since>8.0</since>
        </member>
        <member name="M:Rhino.FileIO.File3dmDisplacement.SubItemTexture(System.Int32)">
            <summary>
            Gets the override for displacement 'texture'.
            <param>face_index is the index of the face on the polysurface/SubD.</param>
            </summary>
            <since>8.0</since>
        </member>
        <member name="M:Rhino.FileIO.File3dmDisplacement.SetSubItemTexture(System.Int32,System.Guid)">
            <summary>
            Sets the override for displacement 'texture'.
            <param>face_index is the index of the face on the polysurface/SubD.</param>
            </summary>
            <since>8.0</since>
        </member>
        <member name="M:Rhino.FileIO.File3dmDisplacement.SubItemMappingChannel(System.Int32)">
            <summary>
            Gets the override for displacement 'mapping channel'.
            <param>face_index is the index of the face on the polysurface/SubD.</param>
            </summary>
            <since>8.0</since>
        </member>
        <member name="M:Rhino.FileIO.File3dmDisplacement.SetSubItemMappingChannel(System.Int32,System.Int32)">
            <summary>
            Sets the override for displacement 'mapping channel'.
            <param>face_index is the index of the face on the polysurface/SubD.</param>
            </summary>
            <since>8.0</since>
        </member>
        <member name="M:Rhino.FileIO.File3dmDisplacement.SubItemBlackPoint(System.Int32)">
            <summary>
            Gets the override for displacement 'black-point'.
            <param>face_index is the index of the face on the polysurface/SubD.</param>
            </summary>
            <since>8.0</since>
        </member>
        <member name="M:Rhino.FileIO.File3dmDisplacement.SetSubItemBlackPoint(System.Int32,System.Double)">
            <summary>
            Sets the override for displacement 'black-point'.
            <param>face_index is the index of the face on the polysurface/SubD.</param>
            </summary>
            <since>8.0</since>
        </member>
        <member name="M:Rhino.FileIO.File3dmDisplacement.SubItemWhitePoint(System.Int32)">
            <summary>
            Gets the override for displacement 'white-point'.
            <param>face_index is the index of the face on the polysurface/SubD.</param>
            </summary>
            <since>8.0</since>
        </member>
        <member name="M:Rhino.FileIO.File3dmDisplacement.SetSubItemWhitePoint(System.Int32,System.Double)">
            <summary>
            Sets the override for displacement 'white-point'.
            <param>face_index is the index of the face on the polysurface/SubD.</param>
            </summary>
            <since>8.0</since>
        </member>
        <member name="T:Rhino.FileIO.File3dmEdgeSoftening">
            <summary>
            Represents the edge softening attached to file3dm object attributes.
            </summary>
        </member>
        <member name="P:Rhino.FileIO.File3dmEdgeSoftening.On">
            <summary>
            Specifies whether edge softening is enabled or not.
            </summary>
            <since>8.0</since>
        </member>
        <member name="P:Rhino.FileIO.File3dmEdgeSoftening.Softening">
            <summary>
            The softening radius.
            </summary>
            <since>8.0</since>
        </member>
        <member name="P:Rhino.FileIO.File3dmEdgeSoftening.Chamfer">
            <summary>
            Specifies whether to chamfer the edges.
            </summary>
            <since>8.0</since>
        </member>
        <member name="P:Rhino.FileIO.File3dmEdgeSoftening.Faceted">
            <summary>
            Specifies whether the edges are faceted.
            </summary>
            <since>8.0</since>
        </member>
        <member name="P:Rhino.FileIO.File3dmEdgeSoftening.EdgeAngleThreshold">
            <summary>
            Threshold angle (in degrees) which controls whether an edge is softened or not.
            The angle refers to the angles between the adjacent faces of an edge.
            </summary>
            <since>8.0</since>
        </member>
        <member name="P:Rhino.FileIO.File3dmEdgeSoftening.ForceSoftening">
            <summary>
            Specifies whether to soften edges despite too large a radius.
            </summary>
            <since>8.0</since>
        </member>
        <member name="T:Rhino.FileIO.File3dmThickening">
            <summary>
            Represents the thickening attached to file3dm object attributes.
            </summary>
        </member>
        <member name="P:Rhino.FileIO.File3dmThickening.On">
            <summary>
            Specifies whether the feature is enabled or not.
            </summary>
            <since>8.0</since>
        </member>
        <member name="P:Rhino.FileIO.File3dmThickening.Distance">
            <summary>
            Specifies how thick meshes will be made.
            </summary>
            <since>8.0</since>
        </member>
        <member name="P:Rhino.FileIO.File3dmThickening.Solid">
            <summary>
            Specifies whether to make open meshes solid by adding walls when thickening.
            </summary>
            <since>8.0</since>
        </member>
        <member name="P:Rhino.FileIO.File3dmThickening.OffsetOnly">
            <summary>
            Specifies whether to only offset the original surface.
            </summary>
            <since>8.0</since>
        </member>
        <member name="P:Rhino.FileIO.File3dmThickening.BothSides">
            <summary>
            Specifies whether to thicken to both sides of the surface.
            </summary>
            <since>8.0</since>
        </member>
        <member name="T:Rhino.FileIO.File3dmCurvePiping">
            <summary>
            Represents the curve piping attached to file3dm object attributes.
            </summary>
        </member>
        <member name="P:Rhino.FileIO.File3dmCurvePiping.On">
            <summary>
            Specifies whether curve piping is enabled or not.
            </summary>
            <since>8.0</since>
        </member>
        <member name="P:Rhino.FileIO.File3dmCurvePiping.Radius">
            <summary>
            Specifies the radius of the pipe (minimum value 0.0001).
            </summary>
            <since>8.0</since>
        </member>
        <member name="P:Rhino.FileIO.File3dmCurvePiping.Segments">
            <summary>
            Specifies the number of segments in the pipe (minimum value 2).
            </summary>
            <since>8.0</since>
        </member>
        <member name="P:Rhino.FileIO.File3dmCurvePiping.Faceted">
            <summary>
            Specifies whether the pipe is faceted or not.
            </summary>
            <since>8.0</since>
        </member>
        <member name="P:Rhino.FileIO.File3dmCurvePiping.Accuracy">
            <summary>
            Specifies the accuracy of the pipe in the range 0 to 100.
            </summary>
            <since>8.0</since>
        </member>
        <member name="T:Rhino.FileIO.File3dmCurvePiping.CapTypes">
            <summary>
            Defines how the pipe is capped at the ends.
            </summary>
            <since>8.0</since>
        </member>
        <member name="F:Rhino.FileIO.File3dmCurvePiping.CapTypes.None">
            <summary>
            No capping.
            </summary>
        </member>
        <member name="F:Rhino.FileIO.File3dmCurvePiping.CapTypes.Flat">
            <summary>
            A flat surface will cap the pipe.
            </summary>
        </member>
        <member name="F:Rhino.FileIO.File3dmCurvePiping.CapTypes.Box">
            <summary>
            A simple construction will cap the pipe.
            </summary>
        </member>
        <member name="F:Rhino.FileIO.File3dmCurvePiping.CapTypes.Dome">
            <summary>
            A meridians-and-parallels hemisphere construction will cap the pipe.
            </summary>
        </member>
        <member name="P:Rhino.FileIO.File3dmCurvePiping.CapType">
            <summary>
            Specifies the cap type to use.
            </summary>
            <since>8.0</since>
        </member>
        <member name="T:Rhino.FileIO.File3dmShutLining">
            <summary>
            Represents the shut-lining attached to file3dm object attributes.
            </summary>
        </member>
        <member name="P:Rhino.FileIO.File3dmShutLining.On">
            <summary>
            Specifies whether shut-lining is enabled or not.
            </summary>
            <since>8.0</since>
        </member>
        <member name="P:Rhino.FileIO.File3dmShutLining.Faceted">
            <summary>
            Specifies whether the shut-lining is faceted or not.
            </summary>
            <since>8.0</since>
        </member>
        <member name="P:Rhino.FileIO.File3dmShutLining.AutoUpdate">
            <summary>
            Specifies whether the shut-lining automatically updates or not.
            </summary>
            <since>8.0</since>
        </member>
        <member name="P:Rhino.FileIO.File3dmShutLining.ForceUpdate">
            <summary>
            Specifies whether updating is forced or not.
            </summary>
            <since>8.0</since>
        </member>
        <member name="M:Rhino.FileIO.File3dmShutLining.GetCurves">
            <summary>
            Gets all the curves on the shut-lining. Each curve is identified by a Guid.
            If there are no curves present, the array will be empty.
            </summary>
            <since>8.0</since>
        </member>
        <member name="M:Rhino.FileIO.File3dmShutLining.AddCurve">
            <summary>
            Adds a new curve to the shut-lining. The curve will have an id of Guid.Empty.
            After adding a curve, you should set the id to that of a curve in the model
            that will be used to calculate the shut-lining.
            </summary>
            <since>8.0</since>
        </member>
        <member name="M:Rhino.FileIO.File3dmShutLining.DeleteAllCurves">
            <summary>
            Deletes all the curves from the shut-lining.
            </summary>
            <since>8.0</since>
        </member>
        <member name="M:Rhino.FileIO.File3dmShutLining.CurveEnabled(System.Guid)">
            <summary>
            Return whether shut-line is created for the given curve.
            </summary>
            <since>8.0</since>
        </member>
        <member name="M:Rhino.FileIO.File3dmShutLining.SetCurveEnabled(System.Guid,System.Boolean)">
            <summary>
            Sets whether shut-line is created for the given curve.
            </summary>
            <since>8.0</since>
        </member>
        <member name="M:Rhino.FileIO.File3dmShutLining.CurveRadius(System.Guid)">
            <summary>
            Returns the radius of the pipe used to create the shut-line for the given curve.
            </summary>
            <since>8.0</since>
        </member>
        <member name="M:Rhino.FileIO.File3dmShutLining.SetCurveRadius(System.Guid,System.Double)">
            <summary>
            Sets the radius of the pipe used to create the shut-line for the given curve.
            </summary>
            <since>8.0</since>
        </member>
        <member name="M:Rhino.FileIO.File3dmShutLining.CurveProfile(System.Guid)">
            <summary>
            Returns the profile of the shut-line for the given curve.
            </summary>
            <since>8.0</since>
        </member>
        <member name="M:Rhino.FileIO.File3dmShutLining.SetCurveProfile(System.Guid,System.Int32)">
            <summary>
            Sets the profile of the shut-line for the given curve.
            </summary>
            <since>8.0</since>
        </member>
        <member name="M:Rhino.FileIO.File3dmShutLining.CurvePull(System.Guid)">
            <summary>
            Returns whether the given curve is pulled to the surface before creating the shut-line.
            </summary>
            <since>8.0</since>
        </member>
        <member name="M:Rhino.FileIO.File3dmShutLining.SetCurvePull(System.Guid,System.Boolean)">
            <summary>
            Sets whether the given curve is pulled to the surface before creating the shut-line.
            </summary>
            <since>8.0</since>
        </member>
        <member name="M:Rhino.FileIO.File3dmShutLining.CurveIsBump(System.Guid)">
            <summary>
            Returns whether to create a bump instead of a dent for the given curve.
            </summary>
            <since>8.0</since>
        </member>
        <member name="M:Rhino.FileIO.File3dmShutLining.SetCurveIsBump(System.Guid,System.Boolean)">
            <summary>
            Sets whether to create a bump instead of a dent for the given curve.
            </summary>
            <since>8.0</since>
        </member>
        <member name="T:Rhino.FileIO.File3dmMeshModifiers">
            <summary>
            Represents the mesh modifiers attached to file3dm object attributes.
            </summary>
        </member>
        <member name="P:Rhino.FileIO.File3dmMeshModifiers.Displacement">
            <summary>
            Returns an object that provides access to displacement information.
            If no displacement information is present, the method returns null.
            </summary>
            <since>8.0</since>
        </member>
        <member name="P:Rhino.FileIO.File3dmMeshModifiers.EdgeSoftening">
            <summary>
            Returns an object that provides access to edge softening information.
            If no edge softening information is present, the method returns null.
            </summary>
            <since>8.0</since>
        </member>
        <member name="P:Rhino.FileIO.File3dmMeshModifiers.Thickening">
            <summary>
            Returns an object that provides access to thickening information.
            If no thickening information is present, the method returns null.
            </summary>
            <since>8.0</since>
        </member>
        <member name="P:Rhino.FileIO.File3dmMeshModifiers.CurvePiping">
            <summary>
            Returns an object that provides access to curve piping information.
            If no curve piping information is present, the method returns null.
            </summary>
            <since>8.0</since>
        </member>
        <member name="P:Rhino.FileIO.File3dmMeshModifiers.ShutLining">
            <summary>
            Returns an object that provides access to shut-lining information.
            If no shutlining information is present, the method returns null.
            </summary>
            <since>8.0</since>
        </member>
        <member name="T:Rhino.FileIO.File3dmRenderMaterials">
            <summary></summary>
        </member>
        <member name="M:Rhino.FileIO.File3dmRenderMaterials.#ctor(Rhino.FileIO.File3dm)">
            <summary></summary>
            <since>8.0</since>
        </member>
        <member name="M:Rhino.FileIO.File3dmRenderMaterials.GetEnumerator">
            <summary></summary>
            <since>8.0</since>
        </member>
        <member name="M:Rhino.FileIO.File3dmRenderMaterials.Find(System.Guid)">
            <summary>
            Finds a material by its id, if possible. Returns null on failure.
            </summary>
            <since>8.0</since>
        </member>
        <member name="M:Rhino.FileIO.File3dmRenderMaterials.System#Collections#IEnumerable#GetEnumerator">
            <summary></summary>
            <since>8.0</since>
        </member>
        <member name="T:Rhino.FileIO.File3dmRenderEnvironments">
            <summary></summary>
        </member>
        <member name="M:Rhino.FileIO.File3dmRenderEnvironments.#ctor(Rhino.FileIO.File3dm)">
            <summary></summary>
            <since>8.0</since>
        </member>
        <member name="M:Rhino.FileIO.File3dmRenderEnvironments.GetEnumerator">
            <summary></summary>
            <since>8.0</since>
        </member>
        <member name="M:Rhino.FileIO.File3dmRenderEnvironments.Find(System.Guid)">
            <summary>
            Finds an environment by its id, if possible. Returns null on failure.
            </summary>
            <since>8.0</since>
        </member>
        <member name="M:Rhino.FileIO.File3dmRenderEnvironments.System#Collections#IEnumerable#GetEnumerator">
            <summary></summary>
            <since>8.0</since>
        </member>
        <member name="T:Rhino.FileIO.File3dmRenderTextures">
            <summary></summary>
        </member>
        <member name="M:Rhino.FileIO.File3dmRenderTextures.#ctor(Rhino.FileIO.File3dm)">
            <summary></summary>
            <since>8.0</since>
        </member>
        <member name="M:Rhino.FileIO.File3dmRenderTextures.GetEnumerator">
            <summary></summary>
            <since>8.0</since>
        </member>
        <member name="M:Rhino.FileIO.File3dmRenderTextures.Find(System.Guid)">
            <summary>
            Finds a texture by its id, if possible. Returns null on failure.
            </summary>
            <since>8.0</since>
        </member>
        <member name="M:Rhino.FileIO.File3dmRenderTextures.System#Collections#IEnumerable#GetEnumerator">
            <summary></summary>
            <since>8.0</since>
        </member>
        <member name="T:Rhino.FileIO.File3dmRenderContent">
            <summary/>
        </member>
        <member name="M:Rhino.FileIO.File3dmRenderContent.#ctor(System.Guid,Rhino.FileIO.File3dm)">
            <summary>
            Constructor for when the object is top-level.
            </summary>
        </member>
        <member name="M:Rhino.FileIO.File3dmRenderContent.#ctor(System.Guid,Rhino.FileIO.File3dmRenderContent)">
            <summary>
            Constructor for when the object is a child.
            </summary>
        </member>
        <member name="P:Rhino.FileIO.File3dmRenderContent.Kind">
            <summary>
            <return>the kind of render content as a string.</return>
            </summary>
            <since>8.0</since>
        </member>
        <member name="P:Rhino.FileIO.File3dmRenderContent.TypeName">
            <summary>
            <return>The internal name of the content type.</return>
            </summary>
            <since>8.0</since>
        </member>
        <member name="P:Rhino.FileIO.File3dmRenderContent.TypeId">
            <summary>
            <return>The unique id of the content type.</return>
            </summary>
            <since>8.0</since>
        </member>
        <member name="P:Rhino.FileIO.File3dmRenderContent.RenderEngineId">
            <summary>
            <return>The content's render-engine id.</return>
            </summary>
            <since>8.0</since>
        </member>
        <member name="P:Rhino.FileIO.File3dmRenderContent.PlugInId">
            <summary>
            <return>The content's plug-in id.</return>
            </summary>
            <since>8.0</since>
        </member>
        <member name="P:Rhino.FileIO.File3dmRenderContent.GroupId">
            <summary>
            <return>The content's group id.</return>
            </summary>
            <since>8.0</since>
        </member>
        <member name="P:Rhino.FileIO.File3dmRenderContent.Notes">
            <summary>
            <return>The content's notes.</return>
            </summary>
            <since>8.0</since>
        </member>
        <member name="P:Rhino.FileIO.File3dmRenderContent.Tags">
            <summary>
            <return>The content's tags.</return>
            </summary>
            <since>8.0</since>
        </member>
        <member name="P:Rhino.FileIO.File3dmRenderContent.Hidden">
            <summary>
            <return>True if the content is hidden.</return>
            </summary>
            <since>8.0</since>
        </member>
        <member name="P:Rhino.FileIO.File3dmRenderContent.Reference">
            <summary>
            <return>True if the content is a reference content.</return>
            </summary>
            <since>8.0</since>
        </member>
        <member name="P:Rhino.FileIO.File3dmRenderContent.AutoDelete">
            <summary>
            <return>True if the content is automatically deleted when not in use.</return>
            </summary>
            <since>8.0</since>
        </member>
        <member name="M:Rhino.FileIO.File3dmRenderContent.GetParameter(System.String)">
            <summary>
            Gets a named parameter.
            <return>The parameter value or null if not found.</return>
            </summary>
            <since>8.0</since>
        </member>
        <member name="M:Rhino.FileIO.File3dmRenderContent.SetParameter(System.String,System.Object)">
            <summary>
            Sets a named parameter.
            <return>True if the parameter was set, else false.</return>
            </summary>
            <since>8.0</since>
        </member>
        <member name="P:Rhino.FileIO.File3dmRenderContent.File3dmParent">
            <summary>
            <return>The parent File3dm of the entire hierarchy.</return>
            </summary>
            <since>8.0</since>
        </member>
        <member name="P:Rhino.FileIO.File3dmRenderContent.Parent">
            <summary>
            <return>The parent content or null if this is the top level object.</return>
            </summary>
            <since>8.0</since>
        </member>
        <member name="P:Rhino.FileIO.File3dmRenderContent.TopLevel">
            <summary>
            <return>The top-level parent content. Returns this if this is the top-level item.</return>
            </summary>
            <since>8.0</since>
        </member>
        <member name="P:Rhino.FileIO.File3dmRenderContent.Children">
            <summary/>
            <since>8.0</since>
        </member>
        <member name="P:Rhino.FileIO.File3dmRenderContent.IsTopLevel">
            <summary>
            <return>True if this is a top-level render content (i.e., has no parent; is not a child).</return>
            </summary>
            <since>8.0</since>
        </member>
        <member name="P:Rhino.FileIO.File3dmRenderContent.IsChild">
            <summary>
            <return>True if this is a child of another render content (i.e., has a parent; is not top-level).</return>
            </summary>
            <since>8.0</since>
        </member>
        <member name="P:Rhino.FileIO.File3dmRenderContent.ChildSlotName">
            <summary>
            <return>The render content's child slot name.</return>
            </summary>
            <since>8.0</since>
        </member>
        <member name="M:Rhino.FileIO.File3dmRenderContent.ChildSlotOn(System.String)">
            <summary>
            <return>True if a particular child slot is 'on'.</return>
            </summary>
            <since>8.0</since>
        </member>
        <member name="M:Rhino.FileIO.File3dmRenderContent.DeleteChild(System.String)">
            <summary>
            Deletes any existing child with the specified child slot name.
            <return>True if successful, else false.</return>
            </summary>
            <since>8.0</since>
        </member>
        <member name="M:Rhino.FileIO.File3dmRenderContent.FindChild(System.String)">
            <summary>
            <return>The child with the specified child slot name, or null if no such child exists.</return>
            </summary>
            <since>8.0</since>
        </member>
        <member name="M:Rhino.FileIO.File3dmRenderContent.XML(System.Boolean)">
            <summary>
            Gets the render content's state as an XML string.
            </summary>
            <since>8.0</since>
        </member>
        <member name="P:Rhino.FileIO.File3dmRenderContent.ComponentType">
            <summary>
            Returns <see cref="F:Rhino.DocObjects.ModelComponentType.RenderContent"/>.
            </summary>
            <since>8.0</since>
        </member>
        <member name="M:Rhino.FileIO.File3dmRenderContent._InternalGetConstPointer">
            <summary/>
        </member>
        <member name="T:Rhino.FileIO.File3dmRenderMaterial">
            <summary/>
        </member>
        <member name="M:Rhino.FileIO.File3dmRenderMaterial.#ctor(System.Guid,Rhino.FileIO.File3dm)">
            <summary>
            Constructor for when the object is top-level.
            </summary>
        </member>
        <member name="M:Rhino.FileIO.File3dmRenderMaterial.#ctor(System.Guid,Rhino.FileIO.File3dmRenderContent)">
            <summary>
            Constructor for when the object is a child.
            </summary>
        </member>
        <member name="M:Rhino.FileIO.File3dmRenderMaterial.ToMaterial">
            <summary>
            Get a simulated material that approximates this material's appearance.
            </summary>
            <since>8.0</since>
        </member>
        <member name="T:Rhino.FileIO.File3dmRenderEnvironment">
            <summary/>
        </member>
        <member name="M:Rhino.FileIO.File3dmRenderEnvironment.#ctor(System.Guid,Rhino.FileIO.File3dm)">
            <summary>
            Constructor for when the object is top-level.
            </summary>
        </member>
        <member name="M:Rhino.FileIO.File3dmRenderEnvironment.#ctor(System.Guid,Rhino.FileIO.File3dmRenderContent)">
            <summary>
            Constructor for when the object is a child.
            </summary>
        </member>
        <member name="M:Rhino.FileIO.File3dmRenderEnvironment.ToEnvironment">
            <summary>
            Get a simulated environment that approximates this environment's appearance.
            </summary>
            <since>8.0</since>
        </member>
        <member name="T:Rhino.FileIO.File3dmRenderTexture">
            <summary/>
        </member>
        <member name="M:Rhino.FileIO.File3dmRenderTexture.#ctor(System.Guid,Rhino.FileIO.File3dm)">
            <summary>
            Constructor for when the object is top-level.
            </summary>
        </member>
        <member name="M:Rhino.FileIO.File3dmRenderTexture.#ctor(System.Guid,Rhino.FileIO.File3dmRenderContent)">
            <summary>
            Constructor for when the object is a child.
            </summary>
        </member>
        <member name="M:Rhino.FileIO.File3dmRenderTexture.ToTexture">
            <summary>
            Get a simulated texture that approximates this texture's appearance.
            </summary>
            <since>8.0</since>
        </member>
        <member name="P:Rhino.FileIO.File3dmRenderTexture.Filename">
            <summary>
            If the texture has a file name, returns that file name. Otherwise returns an empty string.
            </summary>
            <since>8.0</since>
        </member>
        <member name="T:Rhino.FileIO.TextLog">
            <summary>
            Used for collecting text data
            </summary>
        </member>
        <member name="M:Rhino.FileIO.TextLog.#ctor">
            <summary>
            Creates a text log that stores all text in memory.  Use ToString on this
            version of the TextLog to get the text that we written
            </summary>
            <since>5.1</since>
        </member>
        <member name="M:Rhino.FileIO.TextLog.#ctor(System.String)">
            <summary>
            Creates a text log that writes all text to a file. If no filename is
            provided, then text is written to StdOut
            </summary>
            <param name="filename">
            Name of file to create and write to. If null, then text output
            is sent to StdOut
            </param>
            <since>5.1</since>
        </member>
        <member name="M:Rhino.FileIO.TextLog.#ctor(System.IntPtr)">
            Create a TextLog from a pointer owned elsewhere. Need
            to ensure that pointer isn't deleted on Disposal of this array
            <since>6.0</since>
        </member>
        <member name="M:Rhino.FileIO.TextLog.ToString">
            <summary>
            If the TextLog was constructed using the empty constructor, then the text
            information is stored in a runtime string.  The contents of this string
            is retrieved using ToString for this case
            </summary>
            <returns></returns>
        </member>
        <member name="M:Rhino.FileIO.TextLog.PushIndent">
            <summary>
            Increase the indentation level
            </summary>
            <example>
            <code source='examples\vbnet\ex_printinstancedefinitiontree.vb' lang='vbnet'/>
            <code source='examples\cs\ex_printinstancedefinitiontree.cs' lang='cs'/>
            <code source='examples\py\ex_printinstancedefinitiontree.py' lang='py'/>
            </example>
            <since>5.1</since>
        </member>
        <member name="M:Rhino.FileIO.TextLog.PopIndent">
            <summary>
            Decrease the indentation level
            </summary>
            <example>
            <code source='examples\vbnet\ex_printinstancedefinitiontree.vb' lang='vbnet'/>
            <code source='examples\cs\ex_printinstancedefinitiontree.cs' lang='cs'/>
            <code source='examples\py\ex_printinstancedefinitiontree.py' lang='py'/>
            </example>
            <since>5.1</since>
        </member>
        <member name="P:Rhino.FileIO.TextLog.IndentSize">
            <summary>
            0: one tab per indent. &gt;0: number of spaces per indent
            </summary>
            <since>5.1</since>
        </member>
        <member name="M:Rhino.FileIO.TextLog.PrintWrappedText(System.String,System.Int32)">
            <summary>
            Send text wrapped at a set line length
            </summary>
            <param name="text"></param>
            <param name="lineLength"></param>
            <since>5.1</since>
        </member>
        <member name="M:Rhino.FileIO.TextLog.Print(System.String)">
            <summary>
            Send text to the text log
            </summary>
            <param name="text"></param>
            <example>
            <code source='examples\vbnet\ex_printinstancedefinitiontree.vb' lang='vbnet'/>
            <code source='examples\cs\ex_printinstancedefinitiontree.cs' lang='cs'/>
            <code source='examples\py\ex_printinstancedefinitiontree.py' lang='py'/>
            </example>
            <since>5.1</since>
        </member>
        <member name="M:Rhino.FileIO.TextLog.Print(System.String,System.Object)">
            <summary>
            Send formatted text to the text log
            </summary>
            <param name="format"></param>
            <param name="arg0"></param>
            <since>5.1</since>
        </member>
        <member name="M:Rhino.FileIO.TextLog.Print(System.String,System.Object,System.Object)">
            <summary>
            Send formatted text to the text log
            </summary>
            <param name="format"></param>
            <param name="arg0"></param>
            <param name="arg1"></param>
            <since>5.1</since>
        </member>
        <member name="M:Rhino.FileIO.TextLog.Finalize">
            <summary>
            Passively reclaims unmanaged resources when the class user did not explicitly call Dispose().
            </summary>
        </member>
        <member name="M:Rhino.FileIO.TextLog.Dispose">
            <summary>
            Actively reclaims unmanaged resources that this instance uses.
            </summary>
            <since>5.1</since>
        </member>
        <member name="M:Rhino.FileIO.TextLog.Dispose(System.Boolean)">
            <summary>
            For derived class implementers.
            <para>This method is called with argument true when class user calls Dispose(), while with argument false when
            the Garbage Collector invokes the finalizer, or Finalize() method.</para>
            <para>You must reclaim all used unmanaged resources in both cases, and can use this chance to call Dispose on disposable fields if the argument is true.</para>
            <para>Also, you must call the base virtual method within your overriding method.</para>
            </summary>
            <param name="disposing">true if the call comes from the Dispose() method; false if it comes from the Garbage Collector finalizer.</param>
        </member>
        <member name="M:Rhino.FileIO.FileType.#ctor(System.String,System.String)">
            <since>5.0</since>
        </member>
        <member name="P:Rhino.FileIO.FileType.Description">
            <since>5.0</since>
        </member>
        <member name="P:Rhino.FileIO.FileType.Extension">
            <since>5.0</since>
        </member>
        <member name="T:Rhino.DocObjects.Font">
            <summary>Defines a format for text.</summary>
        </member>
        <member name="T:Rhino.DocObjects.Font.FontOrigin">
            <summary>
            Platform where font originated. This information is useful when 
            searching for appropriate substitutes.
            </summary>
        </member>
        <member name="F:Rhino.DocObjects.Font.FontOrigin.Unset">
            <summary> Not set. </summary>
        </member>
        <member name="F:Rhino.DocObjects.Font.FontOrigin.Unknown">
            <summary> Origin unknown. Changing an ON_Font characteristic like weight or style sets the origin to unknown. </summary>
        </member>
        <member name="F:Rhino.DocObjects.Font.FontOrigin.WindowsFont">
            <summary> 
            Set from a Windows IDWriteFont by ON_Font::SetFromDWriteFont() 
            or a Windows LOGFONT by ON_Font::SetFromWindowsLogFont() and
            FaceName and WindowLogfontName match a font installed on a Windows device.
            </summary>
        </member>
        <member name="F:Rhino.DocObjects.Font.FontOrigin.AppleFont">
            <summary> 
            Set from an Apple CTFont. The PostScriptName() and FamilyName() match a
            font installed on device running MacOS or iOS. The FaceName() matches
            the "typeface" name shonw in the MacOS FontBook app.
            </summary>
        </member>
        <member name="T:Rhino.DocObjects.Font.FontType">
            <summary>
            An enum that reports if the font face is available on the current device.
            </summary>
        </member>
        <member name="F:Rhino.DocObjects.Font.FontType.Unset">
            <summary> Not set. </summary>
        </member>
        <member name="F:Rhino.DocObjects.Font.FontType.ManagedFont">
            <summary> 
            In the managed font list.
            </summary>
        </member>
        <member name="F:Rhino.DocObjects.Font.FontType.InstalledFont">
            <summary> 
            In the installed font list.
            </summary>
        </member>
        <member name="T:Rhino.DocObjects.Font.FontWeight">
            <summary>
            Weight enum values
            Avoid casting these values to int.
            Use ON_Font::WindowsLogfontWeightFromWeight() or
            ON_Font::AppleWeightOfFontFromWeight() or
            add another converter.
            </summary>
        </member>
        <member name="F:Rhino.DocObjects.Font.FontWeight.Unset">
            <summary> Not set. </summary>
        </member>
        <member name="F:Rhino.DocObjects.Font.FontWeight.Thin">
            <summary> IsLight = true </summary>
        </member>
        <member name="F:Rhino.DocObjects.Font.FontWeight.Ultralight">
            <summary> IsLight = true </summary>
        </member>
        <member name="F:Rhino.DocObjects.Font.FontWeight.Light">
            <summary> IsLight = true </summary>
        </member>
        <member name="F:Rhino.DocObjects.Font.FontWeight.Normal">
            <summary> Default font weight. IsNormalWeight = true  Also called Regular.</summary>
        </member>
        <member name="F:Rhino.DocObjects.Font.FontWeight.Medium">
            <summary> IsNormalWeight = true </summary>
        </member>
        <member name="F:Rhino.DocObjects.Font.FontWeight.Semibold">
            <summary> IsBold = true </summary>
        </member>
        <member name="F:Rhino.DocObjects.Font.FontWeight.Bold">
            <summary> IsBold = true </summary>
        </member>
        <member name="F:Rhino.DocObjects.Font.FontWeight.Ultrabold">
            <summary> IsBold = true </summary>
        </member>
        <member name="F:Rhino.DocObjects.Font.FontWeight.Heavy">
            <summary> IsBold = true Also called Black</summary>
        </member>
        <member name="T:Rhino.DocObjects.Font.FontStretch">
            <summary>
            Horizontal expansion or contraction of font
            </summary>
        </member>
        <member name="F:Rhino.DocObjects.Font.FontStretch.Unset">
            <summary> Not set. </summary>
        </member>
        <member name="F:Rhino.DocObjects.Font.FontStretch.Ultracondensed">
            <summary> </summary>
        </member>
        <member name="F:Rhino.DocObjects.Font.FontStretch.Extracondensed">
            <summary> </summary>
        </member>
        <member name="F:Rhino.DocObjects.Font.FontStretch.Condensed">
            <summary> </summary>
        </member>
        <member name="F:Rhino.DocObjects.Font.FontStretch.Semicondensed">
            <summary> </summary>
        </member>
        <member name="F:Rhino.DocObjects.Font.FontStretch.Medium">
            <summary> Default font stretch. </summary>
        </member>
        <member name="F:Rhino.DocObjects.Font.FontStretch.Semiexpanded">
            <summary> </summary>
        </member>
        <member name="F:Rhino.DocObjects.Font.FontStretch.Expanded">
            <summary> </summary>
        </member>
        <member name="F:Rhino.DocObjects.Font.FontStretch.Extraexpanded">
            <summary> </summary>
        </member>
        <member name="F:Rhino.DocObjects.Font.FontStretch.Ultraexpanded">
            <summary> </summary>
        </member>
        <member name="T:Rhino.DocObjects.Font.FontStyle">
            <summary>
            Vertical angle of font
            Upright, Italic, or Oblique
            </summary>
        </member>
        <member name="F:Rhino.DocObjects.Font.FontStyle.Unset">
            <summary> Not set. </summary>
        </member>
        <member name="F:Rhino.DocObjects.Font.FontStyle.Upright">
            <summary> Default font style. </summary>
        </member>
        <member name="F:Rhino.DocObjects.Font.FontStyle.Italic">
            <summary> 
            The face is sloped so the top is to the right of the base.
            Face names sometimes use the word "oblique" for italic faces.
            </summary>
        </member>
        <member name="F:Rhino.DocObjects.Font.FontStyle.Oblique">
            <summary> 
            The face is sloped so the top is to the left of the base.
            This is extremely rare.
            NOTE WELL: Face names sometimes use the word "oblique" for italic faces.
            </summary>
        </member>
        <member name="M:Rhino.DocObjects.Font.#ctor(System.String)">
            <since>6.0</since>
        </member>
        <member name="M:Rhino.DocObjects.Font.#ctor(System.String,Rhino.DocObjects.Font.FontWeight,Rhino.DocObjects.Font.FontStyle,System.Boolean,System.Boolean)">
            <since>6.0</since>
        </member>
        <member name="M:Rhino.DocObjects.Font.#ctor(System.String,Rhino.DocObjects.Font.FontWeight,Rhino.DocObjects.Font.FontStyle,Rhino.DocObjects.Font.FontStretch,System.Boolean,System.Boolean)">
            <since>8.0</since>
        </member>
        <member name="M:Rhino.DocObjects.Font.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Protected constructor for internal use.
            </summary>
            <param name="info">Serialization data.</param>
            <param name="context">Serialization stream.</param>
            <since>8.0</since>
        </member>
        <member name="M:Rhino.DocObjects.Font.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Populates a System.Runtime.Serialization.SerializationInfo with the data needed to serialize the target object.
            </summary>
            <param name="info">The System.Runtime.Serialization.SerializationInfo to populate with data.</param>
            <param name="context">The destination (see System.Runtime.Serialization.StreamingContext) for this serialization.</param>
            <since>8.0</since>
        </member>
        <member name="M:Rhino.DocObjects.Font.FromQuartetProperties(System.String,System.Boolean,System.Boolean)">
            <since>6.7</since>
        </member>
        <member name="P:Rhino.DocObjects.Font.QuartetName">
            <since>6.7</since>
        </member>
        <member name="P:Rhino.DocObjects.Font.EnglishQuartetName">
            <since>6.12</since>
        </member>
        <member name="P:Rhino.DocObjects.Font.FaceName">
            <summary>
            Returns Face name
            </summary>
            <since>5.0</since>
        </member>
        <member name="P:Rhino.DocObjects.Font.EnglishFaceName">
            <summary>
            Returns English Face name
            </summary>
            <since>6.9</since>
        </member>
        <member name="P:Rhino.DocObjects.Font.LogfontName">
            <summary>
            Returns Windows LOGFONT Face name
            </summary>
            <since>6.5</since>
        </member>
        <member name="P:Rhino.DocObjects.Font.FamilyPlusFaceName">
            <summary>
            Returns concatenated Family and Face names
            </summary>
            <since>6.9</since>
        </member>
        <member name="P:Rhino.DocObjects.Font.PostScriptName">
            <summary>
            Returns the Font PostScriptName - "Apple font name"
            </summary>
            <since>6.5</since>
        </member>
        <member name="P:Rhino.DocObjects.Font.RichTextFontName">
            <summary>
            Returns the Font RichTextFontName used in RTF strings:
            {\\fonttbl...{\\fN RichTextFontName;}...}
            </summary>
            <since>6.5</since>
        </member>
        <member name="P:Rhino.DocObjects.Font.Description">
            <summary>
            Returns a long description that includes family, face, weight, stretch and style information. 
            Generally not useful for finding matching fonts.
            </summary>
            <since>6.5</since>
        </member>
        <member name="P:Rhino.DocObjects.Font.Bold">
            <since>5.0</since>
        </member>
        <member name="P:Rhino.DocObjects.Font.Italic">
            <since>5.0</since>
        </member>
        <member name="P:Rhino.DocObjects.Font.Underlined">
            <since>6.0</since>
        </member>
        <member name="P:Rhino.DocObjects.Font.Strikeout">
            <since>6.0</since>
        </member>
        <member name="P:Rhino.DocObjects.Font.IsEngravingFont">
            <since>6.10</since>
        </member>
        <member name="P:Rhino.DocObjects.Font.IsSymbolFont">
            <since>6.5</since>
        </member>
        <member name="P:Rhino.DocObjects.Font.IsSingleStrokeFont">
            <since>6.5</since>
        </member>
        <member name="P:Rhino.DocObjects.Font.IsSimulated">
            <since>6.5</since>
        </member>
        <member name="P:Rhino.DocObjects.Font.Style">
            <since>6.0</since>
        </member>
        <member name="P:Rhino.DocObjects.Font.Weight">
            <since>6.0</since>
        </member>
        <member name="P:Rhino.DocObjects.Font.Stretch">
            <since>8.0</since>
        </member>
        <member name="P:Rhino.DocObjects.Font.PointSize">
            <since>6.0</since>
        </member>
        <member name="P:Rhino.DocObjects.Font.FamilyName">
            <since>6.5</since>
        </member>
        <member name="P:Rhino.DocObjects.Font.EnglishFamilyName">
            <since>6.9</since>
        </member>
        <member name="T:Rhino.DocObjects.TextVerticalAlignment">
            <summary>
            Vertical location of text attach point relative to text
            </summary>
        </member>
        <member name="F:Rhino.DocObjects.TextVerticalAlignment.Top">
            <summary>
             Attach to top of an "I" on the first line. (Independent of glyphs being displayed.)
            </summary>
        </member>
        <member name="F:Rhino.DocObjects.TextVerticalAlignment.MiddleOfTop">
            <summary>
             Attach to middle of an "I" on the first line. (Independent of glyphs being displayed.)
            </summary>
        </member>
        <member name="F:Rhino.DocObjects.TextVerticalAlignment.BottomOfTop">
            <summary>
             Attach to baseline of first line. (Independent of glyphs being displayed.)
            </summary>
        </member>
        <member name="F:Rhino.DocObjects.TextVerticalAlignment.Middle">
            <summary>
             Attach to middle of text vertical advance. (Independent of glyphs being displayed.)
            </summary>
        </member>
        <member name="F:Rhino.DocObjects.TextVerticalAlignment.MiddleOfBottom">
            <summary>
             Attach to middle of an "I" on the last line. (Independent of glyphs being displayed.)
            </summary>
        </member>
        <member name="F:Rhino.DocObjects.TextVerticalAlignment.Bottom">
            <summary>
             Attach to the baseline of the last line. (Independent of glyphs being displayed.)
            </summary>
        </member>
        <member name="F:Rhino.DocObjects.TextVerticalAlignment.BottomOfBoundingBox">
            <summary>
             Attach to the bottom of the boudning box of the visible glyphs.
            </summary>
        </member>
        <member name="T:Rhino.DocObjects.TextHorizontalAlignment">
            <summary>
            Horizontal location of text attach point relative to text
            </summary>
        </member>
        <member name="F:Rhino.DocObjects.TextHorizontalAlignment.Left">
            <summary>
            Attach at left of text lines (Independent of glyphs being displayed.)
            </summary>
        </member>
        <member name="F:Rhino.DocObjects.TextHorizontalAlignment.Center">
            <summary>
            Attach point at center of text horizontal advance (not glyph bounding box)
            </summary>
        </member>
        <member name="F:Rhino.DocObjects.TextHorizontalAlignment.Right">
            <summary>
            Attach point at right text horizontal advance (not glyph bounding box)
            </summary>
        </member>
        <member name="F:Rhino.DocObjects.TextHorizontalAlignment.Auto">
            <summary>
            Used for Leaders only
            Attach point adjusts to Right or Left depending on leader tail direction in view
            If tail direction is to the Left, alignment is Right
            If tail direction is to the Right, alignment is Left
            </summary>
        </member>
        <member name="T:Rhino.DocObjects.TextOrientation">
            <summary>
            Method for getting rotation for drawing text
            </summary>
        </member>
        <member name="F:Rhino.DocObjects.TextOrientation.InPlane">
            <summary>
            Text has fixed rotation on a world coordinate plane
            </summary>
        </member>
        <member name="F:Rhino.DocObjects.TextOrientation.InView">
            <summary>
            Text is drawn on a plane perpendicular to view direction horizontal to the screen
            </summary>
        </member>
        <member name="T:Rhino.DocObjects.LineCapStyle">
            <summary>
            Shape to be used at the ends of open curves
            </summary>
        </member>
        <member name="F:Rhino.DocObjects.LineCapStyle.Round">
            <summary> Ends are extended by a half circle with diameter equal to the curve width </summary>
        </member>
        <member name="F:Rhino.DocObjects.LineCapStyle.Flat">
            <summary> Also known as butt. Ends are flat and do not extend </summary>
        </member>
        <member name="F:Rhino.DocObjects.LineCapStyle.Square">
            <summary> Ends are flat and extended by half of the curve width </summary>
        </member>
        <member name="T:Rhino.DocObjects.LineJoinStyle">
            <summary>
            Shape to be used at the corners of curves
            </summary>
        </member>
        <member name="F:Rhino.DocObjects.LineJoinStyle.Round">
            <summary> Rounds corners </summary>
        </member>
        <member name="F:Rhino.DocObjects.LineJoinStyle.Miter">
            <summary> Sharp corners where outer edges are extended to a point where they meet </summary>
        </member>
        <member name="F:Rhino.DocObjects.LineJoinStyle.Bevel">
            <summary> Beveled corner where outer edges are connected without extending </summary>
        </member>
        <member name="T:Rhino.DocObjects.ObjectSectionFillRule">
            <summary>
            For sectioning an object; the decision of when to generate hatches and fills.
            </summary>
            <since>8.0</since>
        </member>
        <member name="F:Rhino.DocObjects.ObjectSectionFillRule.ClosedCurves">
            <summary>If a the section results in a closed curve, then generate a fill</summary>
        </member>
        <member name="F:Rhino.DocObjects.ObjectSectionFillRule.SolidObjects">
            <summary>Only generate a fill for objects that are considered Solid</summary>
        </member>
        <member name="T:Rhino.DocObjects.ObjectSectionAttributesSource">
            <summary>
            The source of sectioning attributes on an object.
            </summary>
            <since>8.0</since>
        </member>
        <member name="F:Rhino.DocObjects.ObjectSectionAttributesSource.FromLayer">
            <summary>Section attributes defined by object's layer</summary>
        </member>
        <member name="F:Rhino.DocObjects.ObjectSectionAttributesSource.FromObject">
            <summary>Section attributes are specific to the object</summary>
        </member>
        <member name="F:Rhino.DocObjects.ObjectSectionAttributesSource.FromParent">
            <summary>Section attributes defined by object's parent</summary>
        </member>
        <member name="F:Rhino.DocObjects.ObjectSectionAttributesSource.FromSectioner">
            <summary>Section attributes defined by the cutting object</summary>
        </member>
        <member name="T:Rhino.DocObjects.SectionLabelStyle">
            <summary>
            The source of sectioning attributes on an object.
            </summary>
            <since>8.0</since>
        </member>
        <member name="F:Rhino.DocObjects.SectionLabelStyle.None">
            <summary>No label</summary>
        </member>
        <member name="F:Rhino.DocObjects.SectionLabelStyle.TextDotFromName">
            <summary>Label shown as a text dot with content from name</summary>
        </member>
        <member name="F:Rhino.DocObjects.SectionLabelStyle.TextFromName">
            <summary>Label shown as text with content from name</summary>
        </member>
        <member name="T:Rhino.DocObjects.ViewSectionBehavior">
            <summary>
            Defines how views work with clipping planes.
            </summary>
            <since>8.0</since>
        </member>
        <member name="F:Rhino.DocObjects.ViewSectionBehavior.ClipAndSection">
            <summary>Default - show geometry on unclipped side of clipping plane and show section</summary>
        </member>
        <member name="F:Rhino.DocObjects.ViewSectionBehavior.SectionOnly">
            <summary>Only show the section at the intersection of a clipping plane</summary>
        </member>
        <member name="T:Rhino.DocObjects.ModelComponentType">
            <summary>
            The ON_ModelComponent::Type enum has a value for each explicit component type
            and two special values, Unset and Mixed. Use an ON_ModelComponentTypeIterator
            instance to iterate over the ON_ModelComponent::Type values.
            </summary>
        </member>
        <member name="F:Rhino.DocObjects.ModelComponentType.Unset">
            <summary>No value set.</summary>
        </member>
        <member name="F:Rhino.DocObjects.ModelComponentType.Image">
            <summary>Embedded image (bitmap) components.</summary>
        </member>
        <member name="F:Rhino.DocObjects.ModelComponentType.TextureMapping">
            <summary>Texture mapping.</summary>
        </member>
        <member name="F:Rhino.DocObjects.ModelComponentType.Material">
            <summary>Material.</summary>
        </member>
        <member name="F:Rhino.DocObjects.ModelComponentType.RenderMaterial">
            <summary>Render material. Deprecated in favor of Material.</summary>
        </member>
        <member name="F:Rhino.DocObjects.ModelComponentType.LinePattern">
            <summary>Line pattern (linetype).</summary>
        </member>
        <member name="F:Rhino.DocObjects.ModelComponentType.Layer">
            <summary>Layer.</summary>
        </member>
        <member name="F:Rhino.DocObjects.ModelComponentType.Group">
            <summary>Group.</summary>
        </member>
        <member name="F:Rhino.DocObjects.ModelComponentType.TextStyle">
            <summary>Text style.</summary>
        </member>
        <member name="F:Rhino.DocObjects.ModelComponentType.DimStyle">
            <summary>AnnotationDimension style.</summary>
        </member>
        <member name="F:Rhino.DocObjects.ModelComponentType.RenderLight">
            <summary>Render light.</summary>
        </member>
        <member name="F:Rhino.DocObjects.ModelComponentType.HatchPattern">
            <summary>Hatch pattern.</summary>
        </member>
        <member name="F:Rhino.DocObjects.ModelComponentType.InstanceDefinition">
            <summary>Instance definition.</summary>
        </member>
        <member name="F:Rhino.DocObjects.ModelComponentType.ModelGeometry">
            <summary>Model objects (points, curves, surfaces, ..., annotation, page details, ...), including objects referenced by instance definitions.</summary>
        </member>
        <member name="F:Rhino.DocObjects.ModelComponentType.HistoryRecord">
            <summary>History record.</summary>
        </member>
        <member name="F:Rhino.DocObjects.ModelComponentType.RenderContent">
            <summary>Render content.</summary>
        </member>
        <member name="F:Rhino.DocObjects.ModelComponentType.EmbeddedFile">
            <summary>Embedded file for render texture.</summary>
        </member>
        <member name="F:Rhino.DocObjects.ModelComponentType.ObsoleteValue">
            <summary>This value was never used and is now obsolete.</summary>
        </member>
        <member name="F:Rhino.DocObjects.ModelComponentType.SectionStyle">
            <summary>Section style attributes</summary>
        </member>
        <member name="F:Rhino.DocObjects.ModelComponentType.NumOf">
            <summary>Number of items above.</summary>
        </member>
        <member name="F:Rhino.DocObjects.ModelComponentType.Mixed">
            <summary>Multiple component types. Used when a component type filter must include all explicit component types.</summary>
        </member>
        <member name="T:Rhino.DocObjects.DimensionStyle">
            <summary>
            Can also be considered an annotation style since it is used for
            more than just dimensions
            </summary>
        </member>
        <member name="T:Rhino.DocObjects.DimensionStyle.ArrowType">
            <summary>
            Defines enumerated values for arrowhead shapes.
            </summary>
        </member>
        <member name="F:Rhino.DocObjects.DimensionStyle.ArrowType.None">
            <summary> </summary>
        </member>
        <member name="F:Rhino.DocObjects.DimensionStyle.ArrowType.UserBlock">
            <summary> </summary>
        </member>
        <member name="F:Rhino.DocObjects.DimensionStyle.ArrowType.SolidTriangle">
            <summary> </summary>
        </member>
        <member name="F:Rhino.DocObjects.DimensionStyle.ArrowType.Dot">
            <summary> </summary>
        </member>
        <member name="F:Rhino.DocObjects.DimensionStyle.ArrowType.Tick">
            <summary> </summary>
        </member>
        <member name="F:Rhino.DocObjects.DimensionStyle.ArrowType.ShortTriangle">
            <summary> </summary>
        </member>
        <member name="F:Rhino.DocObjects.DimensionStyle.ArrowType.OpenArrow">
            <summary> </summary>
        </member>
        <member name="F:Rhino.DocObjects.DimensionStyle.ArrowType.Rectangle">
            <summary> </summary>
        </member>
        <member name="F:Rhino.DocObjects.DimensionStyle.ArrowType.LongTriangle">
            <summary> </summary>
        </member>
        <member name="F:Rhino.DocObjects.DimensionStyle.ArrowType.LongerTriangle">
            <summary> </summary>
        </member>
        <member name="T:Rhino.DocObjects.DimensionStyle.MaskType">
            <summary>
            Text mask drawn with background color or explicit color
            </summary>
        </member>
        <member name="F:Rhino.DocObjects.DimensionStyle.MaskType.BackgroundColor">
            <summary>
            Text mask drawn with background color
            </summary>
        </member>
        <member name="F:Rhino.DocObjects.DimensionStyle.MaskType.MaskColor">
            <summary>
            Text mask drawn with explicit color
            </summary>
        </member>
        <member name="T:Rhino.DocObjects.DimensionStyle.MaskFrame">
            <summary>
            Draw a frame stroke around the text mask area
            </summary>
        </member>
        <member name="F:Rhino.DocObjects.DimensionStyle.MaskFrame.NoFrame">
            <summary> Text mask frame not drawn </summary>
        </member>
        <member name="F:Rhino.DocObjects.DimensionStyle.MaskFrame.RectFrame">
            <summary> Text mask frame outline rectangle drawn </summary>
        </member>
        <member name="F:Rhino.DocObjects.DimensionStyle.MaskFrame.CapsuleFrame">
            <summary> Text mask frame outline capsule drawn </summary>
        </member>
        <member name="T:Rhino.DocObjects.DimensionStyle.LengthDisplay">
            <summary>
            Dimension display length unit system and style
            </summary>
        </member>
        <member name="F:Rhino.DocObjects.DimensionStyle.LengthDisplay.ModelUnits">
            <summary>
            Decimal current model units
            </summary>
        </member>
        <member name="F:Rhino.DocObjects.DimensionStyle.LengthDisplay.Millmeters">
            <summary>
            Decimal Millimeters
            </summary>
        </member>
        <member name="F:Rhino.DocObjects.DimensionStyle.LengthDisplay.Centimeters">
            <summary>
            Decimal Centimeters
            </summary>
        </member>
        <member name="F:Rhino.DocObjects.DimensionStyle.LengthDisplay.Meters">
            <summary>
            Decimal Meters
            </summary>
        </member>
        <member name="F:Rhino.DocObjects.DimensionStyle.LengthDisplay.Kilometers">
            <summary>
            Decimal Kilometers
            </summary>
        </member>
        <member name="F:Rhino.DocObjects.DimensionStyle.LengthDisplay.InchesDecimal">
            <summary>
            Decimal Inches
            </summary>
        </member>
        <member name="F:Rhino.DocObjects.DimensionStyle.LengthDisplay.InchesFractional">
            <summary>
            Fractional Inches ( 1.75 inches displays as 1-3/4 )
            </summary>
        </member>
        <member name="F:Rhino.DocObjects.DimensionStyle.LengthDisplay.FeetDecimal">
            <summary>
            Decimal Feet
            </summary>
        </member>
        <member name="F:Rhino.DocObjects.DimensionStyle.LengthDisplay.FeetAndInches">
            <summary>
            Feet and Inches ( 14.75 inches displays as 1&apos;-2-3/4&quot; )
            </summary>
        </member>
        <member name="F:Rhino.DocObjects.DimensionStyle.LengthDisplay.Miles">
            <summary>
            Decimal Miles
            </summary>
        </member>
        <member name="T:Rhino.DocObjects.DimensionStyle.ToleranceDisplayFormat">
            <summary>
            Style of tolerance display for dimensions
            </summary>
        </member>
        <member name="F:Rhino.DocObjects.DimensionStyle.ToleranceDisplayFormat.None">
            <summary>
            No tolerance display
            </summary>
        </member>
        <member name="F:Rhino.DocObjects.DimensionStyle.ToleranceDisplayFormat.Symmetrical">
            <summary>
            Symmetrical +/- tolerance
            </summary>
        </member>
        <member name="F:Rhino.DocObjects.DimensionStyle.ToleranceDisplayFormat.Deviation">
            <summary>
            Distance +tol, -tol
            </summary>
        </member>
        <member name="F:Rhino.DocObjects.DimensionStyle.ToleranceDisplayFormat.Limits">
            <summary>
            Distance upper and lower limits
            </summary>
        </member>
        <member name="T:Rhino.DocObjects.DimensionStyle.LeaderContentAngleStyle">
            <summary>
            Angle for text or other leader or dimension content
            </summary>
        </member>
        <member name="F:Rhino.DocObjects.DimensionStyle.LeaderContentAngleStyle.Horizontal">
            <summary>
            Annotation text is horizontal in annotation object's plane
            </summary>
        </member>
        <member name="F:Rhino.DocObjects.DimensionStyle.LeaderContentAngleStyle.Aligned">
            <summary>
            Aligned with last leader direction or dimension line
            </summary>
        </member>
        <member name="F:Rhino.DocObjects.DimensionStyle.LeaderContentAngleStyle.Rotated">
            <summary>
            Explicit angle
            </summary>
        </member>
        <member name="T:Rhino.DocObjects.DimensionStyle.LeaderCurveStyle">
            <summary>
            Type of leader curve
            </summary>
        </member>
        <member name="F:Rhino.DocObjects.DimensionStyle.LeaderCurveStyle.None">
             <summary>
            
             </summary>
        </member>
        <member name="F:Rhino.DocObjects.DimensionStyle.LeaderCurveStyle.Polyline">
             <summary>
            
             </summary>
        </member>
        <member name="F:Rhino.DocObjects.DimensionStyle.LeaderCurveStyle.Spline">
             <summary>
            
             </summary>
        </member>
        <member name="T:Rhino.DocObjects.DimensionStyle.Field">
            <summary>
            Field identifiers used for file i/o and getting/setting values
            </summary>
        </member>
        <member name="F:Rhino.DocObjects.DimensionStyle.Field.Unset">
            <summary></summary>
        </member>
        <member name="F:Rhino.DocObjects.DimensionStyle.Field.Name">
            <summary>Dimension style Name property. Cannot be inherited from parent.</summary>
        </member>
        <member name="F:Rhino.DocObjects.DimensionStyle.Field.Index">
            <summary>Dimension style runtime model component index property. Cannot be inherited from parent.</summary>
        </member>
        <member name="F:Rhino.DocObjects.DimensionStyle.Field.ExtensionLineExtension">
            <summary></summary>
        </member>
        <member name="F:Rhino.DocObjects.DimensionStyle.Field.ExtensionLineOffset">
            <summary></summary>
        </member>
        <member name="F:Rhino.DocObjects.DimensionStyle.Field.Arrowsize">
            <summary></summary>
        </member>
        <member name="F:Rhino.DocObjects.DimensionStyle.Field.LeaderArrowsize">
            <summary></summary>
        </member>
        <member name="F:Rhino.DocObjects.DimensionStyle.Field.Centermark">
            <summary></summary>
        </member>
        <member name="F:Rhino.DocObjects.DimensionStyle.Field.TextGap">
            <summary></summary>
        </member>
        <member name="F:Rhino.DocObjects.DimensionStyle.Field.TextHeight">
            <summary></summary>
        </member>
        <member name="F:Rhino.DocObjects.DimensionStyle.Field.DimTextLocation">
            <summary>Linear, angular, and ordinate dimension text location above/in/below</summary>
        </member>
        <member name="F:Rhino.DocObjects.DimensionStyle.Field.MaskFrameType">
            <summary>Text mask frame</summary>
        </member>
        <member name="F:Rhino.DocObjects.DimensionStyle.Field.LengthResolution">
            <summary></summary>
        </member>
        <member name="F:Rhino.DocObjects.DimensionStyle.Field.AngleFormat">
            <summary></summary>
        </member>
        <member name="F:Rhino.DocObjects.DimensionStyle.Field.AngleResolution">
            <summary></summary>
        </member>
        <member name="F:Rhino.DocObjects.DimensionStyle.Field.Font">
            <summary></summary>
        </member>
        <member name="F:Rhino.DocObjects.DimensionStyle.Field.LengthFactor">
             <summary>
             LengthFactor is a rarely used. It applies when a model is being
             drawn to a scale and the dimension length values should be
             reverse scaled. For example, if a model is drawn at 1/4 scale,
             a line 5 units long indicates the real world line is 20 units
             long. In this case setting LengthFactor to 4 would cause
             a linear dimension applied to that line to display a value of 20.
            </summary>
        </member>
        <member name="F:Rhino.DocObjects.DimensionStyle.Field.Alternate">
            <summary></summary>
        </member>
        <member name="F:Rhino.DocObjects.DimensionStyle.Field.AlternateLengthFactor">
             <summary>
             AlternateLengthFactor is a rarely used. See Length factor for
             a description of this property.
            </summary>
        </member>
        <member name="F:Rhino.DocObjects.DimensionStyle.Field.AlternateLengthResolution">
            <summary></summary>
        </member>
        <member name="F:Rhino.DocObjects.DimensionStyle.Field.Prefix">
            <summary></summary>
        </member>
        <member name="F:Rhino.DocObjects.DimensionStyle.Field.Suffix">
            <summary></summary>
        </member>
        <member name="F:Rhino.DocObjects.DimensionStyle.Field.AlternatePrefix">
            <summary></summary>
        </member>
        <member name="F:Rhino.DocObjects.DimensionStyle.Field.AlternateSuffix">
            <summary></summary>
        </member>
        <member name="F:Rhino.DocObjects.DimensionStyle.Field.DimensionLineExtension">
            <summary></summary>
        </member>
        <member name="F:Rhino.DocObjects.DimensionStyle.Field.SuppressExtension1">
            <summary></summary>
        </member>
        <member name="F:Rhino.DocObjects.DimensionStyle.Field.SuppressExtension2">
            <summary></summary>
        </member>
        <member name="F:Rhino.DocObjects.DimensionStyle.Field.ExtLineColorSource">
            <summary></summary>
        </member>
        <member name="F:Rhino.DocObjects.DimensionStyle.Field.DimLineColorSource">
            <summary></summary>
        </member>
        <member name="F:Rhino.DocObjects.DimensionStyle.Field.ArrowColorSource">
            <summary></summary>
        </member>
        <member name="F:Rhino.DocObjects.DimensionStyle.Field.TextColorSource">
            <summary></summary>
        </member>
        <member name="F:Rhino.DocObjects.DimensionStyle.Field.ExtLineColor">
            <summary></summary>
        </member>
        <member name="F:Rhino.DocObjects.DimensionStyle.Field.DimLineColor">
            <summary></summary>
        </member>
        <member name="F:Rhino.DocObjects.DimensionStyle.Field.ArrowColor">
            <summary></summary>
        </member>
        <member name="F:Rhino.DocObjects.DimensionStyle.Field.TextColor">
            <summary></summary>
        </member>
        <member name="F:Rhino.DocObjects.DimensionStyle.Field.ExtLinePlotColorSource">
            <summary></summary>
        </member>
        <member name="F:Rhino.DocObjects.DimensionStyle.Field.DimLinePlotColorSource">
            <summary></summary>
        </member>
        <member name="F:Rhino.DocObjects.DimensionStyle.Field.ArrowPlotColorSource">
            <summary></summary>
        </member>
        <member name="F:Rhino.DocObjects.DimensionStyle.Field.TextPlotColorSource">
            <summary></summary>
        </member>
        <member name="F:Rhino.DocObjects.DimensionStyle.Field.ExtLinePlotColor">
            <summary></summary>
        </member>
        <member name="F:Rhino.DocObjects.DimensionStyle.Field.DimLinePlotColor">
            <summary></summary>
        </member>
        <member name="F:Rhino.DocObjects.DimensionStyle.Field.ArrowPlotColor">
            <summary></summary>
        </member>
        <member name="F:Rhino.DocObjects.DimensionStyle.Field.TextPlotColor">
            <summary></summary>
        </member>
        <member name="F:Rhino.DocObjects.DimensionStyle.Field.ExtLinePlotWeightSource">
            <summary></summary>
        </member>
        <member name="F:Rhino.DocObjects.DimensionStyle.Field.DimLinePlotWeightSource">
            <summary></summary>
        </member>
        <member name="F:Rhino.DocObjects.DimensionStyle.Field.ExtLinePlotWeight_mm">
            <summary></summary>
        </member>
        <member name="F:Rhino.DocObjects.DimensionStyle.Field.DimLinePlotWeight_mm">
            <summary></summary>
        </member>
        <member name="F:Rhino.DocObjects.DimensionStyle.Field.ToleranceFormat">
            <summary></summary>
        </member>
        <member name="F:Rhino.DocObjects.DimensionStyle.Field.ToleranceResolution">
            <summary></summary>
        </member>
        <member name="F:Rhino.DocObjects.DimensionStyle.Field.ToleranceUpperValue">
            <summary></summary>
        </member>
        <member name="F:Rhino.DocObjects.DimensionStyle.Field.ToleranceLowerValue">
            <summary></summary>
        </member>
        <member name="F:Rhino.DocObjects.DimensionStyle.Field.AltToleranceResolution">
            <summary></summary>
        </member>
        <member name="F:Rhino.DocObjects.DimensionStyle.Field.ToleranceHeightScale">
            <summary></summary>
        </member>
        <member name="F:Rhino.DocObjects.DimensionStyle.Field.BaselineSpacing">
            <summary></summary>
        </member>
        <member name="F:Rhino.DocObjects.DimensionStyle.Field.DrawMask">
            <summary></summary>
        </member>
        <member name="F:Rhino.DocObjects.DimensionStyle.Field.MaskColorSource">
            <summary></summary>
        </member>
        <member name="F:Rhino.DocObjects.DimensionStyle.Field.MaskColor">
            <summary></summary>
        </member>
        <member name="F:Rhino.DocObjects.DimensionStyle.Field.MaskBorder">
            <summary></summary>
        </member>
        <member name="F:Rhino.DocObjects.DimensionStyle.Field.DimensionScale">
            <summary></summary>
        </member>
        <member name="F:Rhino.DocObjects.DimensionStyle.Field.DimscaleSource">
            <summary></summary>
        </member>
        <member name="F:Rhino.DocObjects.DimensionStyle.Field.FixedExtensionLength">
            <summary></summary>
        </member>
        <member name="F:Rhino.DocObjects.DimensionStyle.Field.FixedExtensionOn">
            <summary></summary>
        </member>
        <member name="F:Rhino.DocObjects.DimensionStyle.Field.TextRotation">
            <summary></summary>
        </member>
        <member name="F:Rhino.DocObjects.DimensionStyle.Field.SuppressArrow1">
            <summary></summary>
        </member>
        <member name="F:Rhino.DocObjects.DimensionStyle.Field.SuppressArrow2">
            <summary></summary>
        </member>
        <member name="F:Rhino.DocObjects.DimensionStyle.Field.TextmoveLeader">
            <summary></summary>
        </member>
        <member name="F:Rhino.DocObjects.DimensionStyle.Field.ArclengthSymbol">
            <summary></summary>
        </member>
        <member name="F:Rhino.DocObjects.DimensionStyle.Field.StackTextheightScale">
            <summary></summary>
        </member>
        <member name="F:Rhino.DocObjects.DimensionStyle.Field.StackFormat">
            <summary></summary>
        </member>
        <member name="F:Rhino.DocObjects.DimensionStyle.Field.AltRound">
            <summary></summary>
        </member>
        <member name="F:Rhino.DocObjects.DimensionStyle.Field.Round">
            <summary></summary>
        </member>
        <member name="F:Rhino.DocObjects.DimensionStyle.Field.AngularRound">
            <summary></summary>
        </member>
        <member name="F:Rhino.DocObjects.DimensionStyle.Field.AltZeroSuppress">
            <summary></summary>
        </member>
        <member name="F:Rhino.DocObjects.DimensionStyle.Field.AngleZeroSuppress">
            <summary></summary>
        </member>
        <member name="F:Rhino.DocObjects.DimensionStyle.Field.ZeroSuppress">
            <summary></summary>
        </member>
        <member name="F:Rhino.DocObjects.DimensionStyle.Field.AltBelow">
            <summary></summary>
        </member>
        <member name="F:Rhino.DocObjects.DimensionStyle.Field.ArrowType1">
            <summary></summary>
        </member>
        <member name="F:Rhino.DocObjects.DimensionStyle.Field.ArrowType2">
            <summary></summary>
        </member>
        <member name="F:Rhino.DocObjects.DimensionStyle.Field.LeaderArrowType">
            <summary></summary>
        </member>
        <member name="F:Rhino.DocObjects.DimensionStyle.Field.ArrowBlockId1">
            <summary></summary>
        </member>
        <member name="F:Rhino.DocObjects.DimensionStyle.Field.ArrowBlockId2">
            <summary></summary>
        </member>
        <member name="F:Rhino.DocObjects.DimensionStyle.Field.LeaderArrowBlock">
            <summary></summary>
        </member>
        <member name="F:Rhino.DocObjects.DimensionStyle.Field.DimRadialTextLocation">
            <summary>Radial dimension text location above/in/below</summary>
        </member>
        <member name="F:Rhino.DocObjects.DimensionStyle.Field.TextVerticalAlignment">
            <summary></summary>
        </member>
        <member name="F:Rhino.DocObjects.DimensionStyle.Field.LeaderTextVerticalAlignment">
            <summary></summary>
        </member>
        <member name="F:Rhino.DocObjects.DimensionStyle.Field.LeaderContentAngleStyle">
            <summary></summary>
        </member>
        <member name="F:Rhino.DocObjects.DimensionStyle.Field.LeaderCurveType">
            <summary></summary>
        </member>
        <member name="F:Rhino.DocObjects.DimensionStyle.Field.LeaderContentAngle">
            <summary></summary>
        </member>
        <member name="F:Rhino.DocObjects.DimensionStyle.Field.LeaderHasLanding">
            <summary></summary>
        </member>
        <member name="F:Rhino.DocObjects.DimensionStyle.Field.LeaderLandingLength">
            <summary></summary>
        </member>
        <member name="F:Rhino.DocObjects.DimensionStyle.Field.MaskFlags">
            <summary></summary>
        </member>
        <member name="F:Rhino.DocObjects.DimensionStyle.Field.CentermarkStyle">
            <summary></summary>
        </member>
        <member name="F:Rhino.DocObjects.DimensionStyle.Field.TextHorizontalAlignment">
            <summary></summary>
        </member>
        <member name="F:Rhino.DocObjects.DimensionStyle.Field.LeaderTextHorizontalAlignment">
            <summary></summary>
        </member>
        <member name="F:Rhino.DocObjects.DimensionStyle.Field.DrawForward">
            <summary></summary>
        </member>
        <member name="F:Rhino.DocObjects.DimensionStyle.Field.SignedOrdinate">
            <summary></summary>
        </member>
        <member name="F:Rhino.DocObjects.DimensionStyle.Field.UnitSystem">
             <summary>
             Unit system for dimension rendering sizes like  TextHeight, TextGap, ArrowSize, ExtOffset,
             and dozens of other properties that control the appearance and placement of the components
             used to render a dimension.
            </summary>
        </member>
        <member name="F:Rhino.DocObjects.DimensionStyle.Field.TextMask">
            <summary></summary>
        </member>
        <member name="F:Rhino.DocObjects.DimensionStyle.Field.TextOrientation">
            <summary></summary>
        </member>
        <member name="F:Rhino.DocObjects.DimensionStyle.Field.LeaderTextOrientation">
            <summary></summary>        
        </member>
        <member name="F:Rhino.DocObjects.DimensionStyle.Field.DimTextOrientation">
            <summary></summary>
        </member>
        <member name="F:Rhino.DocObjects.DimensionStyle.Field.DimRadialTextOrientation">
            <summary></summary>
        </member>
        <member name="F:Rhino.DocObjects.DimensionStyle.Field.DimTextAngleStyle">
            <summary></summary>
        </member>
        <member name="F:Rhino.DocObjects.DimensionStyle.Field.DimRadialTextAngleStyle">
            <summary></summary>
        </member>
        <member name="F:Rhino.DocObjects.DimensionStyle.Field.TextUnderlined">
            <summary></summary>
        </member>
        <member name="F:Rhino.DocObjects.DimensionStyle.Field.DimensionLengthDisplay">
            <summary>
            Dimension length display. See ON_DimStyle::DimensionLengthDisplay() for a descpription of this parameter.
            </summary>
        </member>
        <member name="F:Rhino.DocObjects.DimensionStyle.Field.AlternateDimensionLengthDisplay">
            <summary>
            Alternate dimension length display. See ON_DimStyle::AlternateDimensionLengthDisplay() for a descpription of this parameter.
            </summary>
        </member>
        <member name="F:Rhino.DocObjects.DimensionStyle.Field.ForceDimLine">
            <summary>
            Force dimension line to draw when text is moved outside
            </summary>
        </member>
        <member name="F:Rhino.DocObjects.DimensionStyle.Field.ArrowFit">
            <summary>
            Arrow position when arrows won't fit between extensions
            </summary>
        </member>
        <member name="F:Rhino.DocObjects.DimensionStyle.Field.TextFit">
            <summary>
            Text position when text won't fit between extensions
            </summary>
        </member>
        <member name="F:Rhino.DocObjects.DimensionStyle.Field.DecimalSeparator">
            <summary>
            Character to use for decimal separator in dimension text
            </summary>
        </member>
        <member name="F:Rhino.DocObjects.DimensionStyle.Field.Count">
            <summary>Every enum UINT value that identifies a valid dimension style property is less than the UINT value of Count.</summary>
        </member>
        <member name="T:Rhino.DocObjects.DimensionStyle.AngleDisplayFormat">
            <summary>
            Display format for angles
            </summary>
        </member>
        <member name="F:Rhino.DocObjects.DimensionStyle.AngleDisplayFormat.DecimalDegrees">
            <summary> Decimal Degrees </summary>
        </member>
        <member name="F:Rhino.DocObjects.DimensionStyle.AngleDisplayFormat.DegMinSec">
            <summary> Degrees Minutes Seconds </summary>
        </member>
        <member name="F:Rhino.DocObjects.DimensionStyle.AngleDisplayFormat.Radians">
            <summary> Decimal Radians </summary>
        </member>
        <member name="F:Rhino.DocObjects.DimensionStyle.AngleDisplayFormat.Grads">
            <summary> Decimal Gradians </summary>
        </member>
        <member name="T:Rhino.DocObjects.DimensionStyle.LengthDisplayFormat">
            <summary>
            Obsolete format for length display - use ON_DimStyle::DimensionLengthDisplay instead
            </summary>
        </member>
        <member name="F:Rhino.DocObjects.DimensionStyle.LengthDisplayFormat.Decimal">
            <summary>Obsolete - use ON_DimStyle::DimensionLengthDisplay::ModelUnits.</summary>
        </member>
        <member name="F:Rhino.DocObjects.DimensionStyle.LengthDisplayFormat.Fractional">
            <summary>Obsolete - use ON_DimStyle::DimensionLengthDisplay::InchesFractional</summary>
        </member>
        <member name="F:Rhino.DocObjects.DimensionStyle.LengthDisplayFormat.FeetInches">
            <summary>Obsolete - use ON_DimStyle::DimensionLengthDisplay::FeetAndInches</summary>
        </member>
        <member name="F:Rhino.DocObjects.DimensionStyle.LengthDisplayFormat.FeetDecimalInches">
            <summary>Obsolete - use ON_DimStyle::DimensionLengthDisplay::FeetAndInches enum.</summary>
        </member>
        <member name="T:Rhino.DocObjects.DimensionStyle.TextLocation">
            <summary>
            The location of text in linear, angular, radial, and ordinate dimensions.
            </summary>
        </member>
        <member name="F:Rhino.DocObjects.DimensionStyle.TextLocation.AboveDimLine">
            <summary>Text is above dimension line.</summary>
        </member>
        <member name="F:Rhino.DocObjects.DimensionStyle.TextLocation.InDimLine">
            <summary>Text is centered in dimension line.</summary>
        </member>
        <member name="F:Rhino.DocObjects.DimensionStyle.TextLocation.BelowDimLine">
            <summary>Text is below dimension line.</summary>
        </member>
        <member name="T:Rhino.DocObjects.DimensionStyle.ZeroSuppression">
            <summary>
            Marks leading and trailing zeros for removal.
            </summary>
        </member>
        <member name="F:Rhino.DocObjects.DimensionStyle.ZeroSuppression.None">
            <summary>No zero suppression.</summary>
        </member>
        <member name="F:Rhino.DocObjects.DimensionStyle.ZeroSuppression.SuppressLeading">
            <summary>Suppress leading zeros.</summary>
        </member>
        <member name="F:Rhino.DocObjects.DimensionStyle.ZeroSuppression.SuppressTrailing">
            <summary>Suppress trailing zeros.</summary>
        </member>
        <member name="F:Rhino.DocObjects.DimensionStyle.ZeroSuppression.SuppressLeadingAndTrailing">
            <summary>Suppress leading and trailing zeros.</summary>
        </member>
        <member name="F:Rhino.DocObjects.DimensionStyle.ZeroSuppression.SuppressZeroFeet">
            <summary>Suppress zero feet.</summary>
        </member>
        <member name="F:Rhino.DocObjects.DimensionStyle.ZeroSuppression.SuppressZeroInches">
            <summary>Suppress zero inches.</summary>
        </member>
        <member name="F:Rhino.DocObjects.DimensionStyle.ZeroSuppression.SuppressZeroFeetAndZeroInches">
            <summary>Suppress zero feet and zero inches.</summary>
        </member>
        <member name="T:Rhino.DocObjects.DimensionStyle.StackDisplayFormat">
            <summary>
            Format of stacked fractions
            </summary>
        </member>
        <member name="F:Rhino.DocObjects.DimensionStyle.StackDisplayFormat.None">
            <summary> No stacking </summary>
        </member>
        <member name="F:Rhino.DocObjects.DimensionStyle.StackDisplayFormat.StackHorizontal">
            <summary> Stack with horizontal line </summary>
        </member>
        <member name="F:Rhino.DocObjects.DimensionStyle.StackDisplayFormat.StackDiagonal">
            <summary> Stack with angled line </summary>
        </member>
        <member name="T:Rhino.DocObjects.DimensionStyle.CenterMarkStyle">
            <summary>
            Style for drawing centermark for Radial dimensions and Centermark objects
            </summary>
        </member>
        <member name="F:Rhino.DocObjects.DimensionStyle.CenterMarkStyle.None">
            <summary>
            No centermark display
            </summary>
        </member>
        <member name="F:Rhino.DocObjects.DimensionStyle.CenterMarkStyle.Mark">
            <summary>
            + mark only
            </summary>
        </member>
        <member name="F:Rhino.DocObjects.DimensionStyle.CenterMarkStyle.MarkAndLines">
            <summary>
            + mark and lines to radius
            </summary>
        </member>
        <member name="T:Rhino.DocObjects.DimensionStyle.ArrowFit">
            <summary>
            Arrow display position inside or outside extension lines
            </summary>
        </member>
        <member name="F:Rhino.DocObjects.DimensionStyle.ArrowFit.Auto">
            <summary> Auto - Display when space permits </summary>
        </member>
        <member name="F:Rhino.DocObjects.DimensionStyle.ArrowFit.ArrowsInside">
            <summary> Force arrows inside extensions </summary>
        </member>
        <member name="F:Rhino.DocObjects.DimensionStyle.ArrowFit.ArrowsOutside">
            <summary> Force arrows outside extensions </summary>
        </member>
        <member name="T:Rhino.DocObjects.DimensionStyle.TextFit">
            <summary>
            Text display position inside or outside extension lines
            </summary>
        </member>
        <member name="F:Rhino.DocObjects.DimensionStyle.TextFit.Auto">
            <summary> Auto - Display inside when space permits </summary>
        </member>
        <member name="F:Rhino.DocObjects.DimensionStyle.TextFit.TextInside">
            <summary> Force text inside extensions </summary>
        </member>
        <member name="F:Rhino.DocObjects.DimensionStyle.TextFit.TextRight">
            <summary> Force text outside to the right of extensions </summary>
        </member>
        <member name="F:Rhino.DocObjects.DimensionStyle.TextFit.TextLeft">
            <summary> Force text outside to the left of extensions </summary>
        </member>
        <member name="F:Rhino.DocObjects.DimensionStyle.TextFit.TextHintRight">
            <summary> Move text outside to the right of extensions when it won't fit inside </summary>
        </member>
        <member name="F:Rhino.DocObjects.DimensionStyle.TextFit.TextHintLeft">
            <summary> Move text outside to the left of extensions when it won't fit inside  </summary>
        </member>
        <member name="M:Rhino.DocObjects.DimensionStyle.#ctor">
            <summary> Create a new non-document controlled annotation style </summary>
            <since>5.0</since>
        </member>
        <member name="M:Rhino.DocObjects.DimensionStyle.Duplicate">
            <summary> Construct a deep (full) copy of this object. </summary>
            <returns>An object of the same type as this, with the same properties and behavior.</returns>
            <since>6.0</since>
        </member>
        <member name="M:Rhino.DocObjects.DimensionStyle.Duplicate(System.String,System.Guid,System.Guid)">
            <summary> Construct a deep (full) copy of this object. </summary>
            <returns>An object of the same type as this, with the same properties and behavior.</returns>
            <since>6.0</since>
        </member>
        <member name="M:Rhino.DocObjects.DimensionStyle.CopyFrom(Rhino.DocObjects.DimensionStyle)">
            <summary>
            Copy settings from source dimension style without changing the name, Id or
            index of this DimensionStyle.
            </summary>
            <param name="source">
            DimensionStyle to copy settings from.
            </param>
            <since>6.0</since>
        </member>
        <member name="P:Rhino.DocObjects.DimensionStyle.ComponentType">
            <summary>
            Returns <see cref="F:Rhino.DocObjects.ModelComponentType.DimStyle"/>.
            </summary>
            <since>6.0</since>
        </member>
        <member name="P:Rhino.DocObjects.DimensionStyle.IsReference">
            <since>5.0</since>
        </member>
        <member name="P:Rhino.DocObjects.DimensionStyle.IsDeleted">
            <since>6.0</since>
        </member>
        <member name="P:Rhino.DocObjects.DimensionStyle.Font">
            <since>6.0</since>
        </member>
        <member name="M:Rhino.DocObjects.DimensionStyle.ScaleLengthValues(System.Double)">
            <summary>
            Scales all length values by 'scale'
            </summary>
            <param name="scale"></param>
            <since>6.0</since>
        </member>
        <member name="P:Rhino.DocObjects.DimensionStyle.ArrowBlockId1">
            <since>6.0</since>
        </member>
        <member name="P:Rhino.DocObjects.DimensionStyle.ArrowBlockId2">
            <since>6.0</since>
        </member>
        <member name="P:Rhino.DocObjects.DimensionStyle.LeaderArrowBlockId">
            <since>6.0</since>
        </member>
        <member name="P:Rhino.DocObjects.DimensionStyle.SuppressExtension1">
            <since>6.0</since>
        </member>
        <member name="P:Rhino.DocObjects.DimensionStyle.SuppressExtension2">
            <since>6.0</since>
        </member>
        <member name="P:Rhino.DocObjects.DimensionStyle.SuppressArrow1">
            <since>6.0</since>
        </member>
        <member name="P:Rhino.DocObjects.DimensionStyle.SuppressArrow2">
            <since>6.0</since>
        </member>
        <member name="P:Rhino.DocObjects.DimensionStyle.AlternateUnitsDisplay">
            <since>6.0</since>
        </member>
        <member name="P:Rhino.DocObjects.DimensionStyle.AlternateBelowLine">
            <since>6.0</since>
        </member>
        <member name="P:Rhino.DocObjects.DimensionStyle.DrawTextMask">
            <since>6.0</since>
        </member>
        <member name="P:Rhino.DocObjects.DimensionStyle.FixedExtensionOn">
            <since>6.0</since>
        </member>
        <member name="P:Rhino.DocObjects.DimensionStyle.LeaderHasLanding">
            <since>6.0</since>
        </member>
        <member name="P:Rhino.DocObjects.DimensionStyle.DrawForward">
            <since>6.0</since>
        </member>
        <member name="P:Rhino.DocObjects.DimensionStyle.TextUnderlined">
            <since>6.0</since>
        </member>
        <member name="P:Rhino.DocObjects.DimensionStyle.MaskOffset">
            <since>6.0</since>
        </member>
        <member name="P:Rhino.DocObjects.DimensionStyle.ExtensionLineExtension">
            <since>5.0</since>
        </member>
        <member name="P:Rhino.DocObjects.DimensionStyle.ExtensionLineOffset">
            <since>5.0</since>
        </member>
        <member name="P:Rhino.DocObjects.DimensionStyle.DimensionLineExtension">
            <since>6.0</since>
        </member>
        <member name="P:Rhino.DocObjects.DimensionStyle.ArrowLength">
            <since>5.0</since>
        </member>
        <member name="P:Rhino.DocObjects.DimensionStyle.LeaderArrowLength">
            <since>5.0</since>
        </member>
        <member name="P:Rhino.DocObjects.DimensionStyle.CentermarkSize">
            <since>5.0</since>
        </member>
        <member name="P:Rhino.DocObjects.DimensionStyle.TextGap">
            <since>5.0</since>
        </member>
        <member name="P:Rhino.DocObjects.DimensionStyle.TextHeight">
            <since>5.0</since>
        </member>
        <member name="P:Rhino.DocObjects.DimensionStyle.LengthFactor">
            <since>5.0</since>
        </member>
        <member name="P:Rhino.DocObjects.DimensionStyle.AlternateLengthFactor">
            <since>5.0</since>
        </member>
        <member name="P:Rhino.DocObjects.DimensionStyle.ToleranceUpperValue">
            <since>6.0</since>
        </member>
        <member name="P:Rhino.DocObjects.DimensionStyle.ToleranceLowerValue">
            <since>6.0</since>
        </member>
        <member name="P:Rhino.DocObjects.DimensionStyle.ToleranceHeightScale">
            <since>6.0</since>
        </member>
        <member name="P:Rhino.DocObjects.DimensionStyle.BaselineSpacing">
            <since>6.0</since>
        </member>
        <member name="P:Rhino.DocObjects.DimensionStyle.DimensionScale">
            <since>6.0</since>
        </member>
        <member name="P:Rhino.DocObjects.DimensionStyle.FixedExtensionLength">
            <since>6.0</since>
        </member>
        <member name="P:Rhino.DocObjects.DimensionStyle.TextRotation">
            <since>6.0</since>
        </member>
        <member name="P:Rhino.DocObjects.DimensionStyle.StackHeightScale">
            <since>6.0</since>
        </member>
        <member name="P:Rhino.DocObjects.DimensionStyle.Roundoff">
            <since>6.0</since>
        </member>
        <member name="P:Rhino.DocObjects.DimensionStyle.AlternateRoundoff">
            <since>6.0</since>
        </member>
        <member name="P:Rhino.DocObjects.DimensionStyle.AngularRoundoff">
            <since>6.0</since>
        </member>
        <member name="P:Rhino.DocObjects.DimensionStyle.LeaderLandingLength">
            <since>6.0</since>
        </member>
        <member name="P:Rhino.DocObjects.DimensionStyle.LeaderTextRotationRadians">
            <summary>
            Angle of leader text for Rotated style
            </summary>
            <since>6.0</since>
        </member>
        <member name="P:Rhino.DocObjects.DimensionStyle.LeaderTextRotationDegrees">
            <since>6.0</since>
        </member>
        <member name="P:Rhino.DocObjects.DimensionStyle.DimensionScaleValue">
            <since>6.0</since>
        </member>
        <member name="P:Rhino.DocObjects.DimensionStyle.ScaleLeftLengthMillimeters">
            <since>6.0</since>
        </member>
        <member name="P:Rhino.DocObjects.DimensionStyle.ScaleRightLengthMillimeters">
            <since>6.0</since>
        </member>
        <member name="P:Rhino.DocObjects.DimensionStyle.FitText">
            <since>6.20</since>
        </member>
        <member name="P:Rhino.DocObjects.DimensionStyle.FitArrow">
            <since>6.20</since>
        </member>
        <member name="P:Rhino.DocObjects.DimensionStyle.ForceDimensionLineBetweenExtensionLines">
            <since>6.20</since>
        </member>
        <member name="P:Rhino.DocObjects.DimensionStyle.DimensionLengthDisplay">
            <since>6.0</since>
        </member>
        <member name="P:Rhino.DocObjects.DimensionStyle.AlternateDimensionLengthDisplay">
            <since>6.0</since>
        </member>
        <member name="M:Rhino.DocObjects.DimensionStyle.DimensionLengthDisplayUnit(System.UInt32)">
            <since>6.0</since>
        </member>
        <member name="M:Rhino.DocObjects.DimensionStyle.AlternateDimensionLengthDisplayUnit(System.UInt32)">
            <since>6.0</since>
        </member>
        <member name="P:Rhino.DocObjects.DimensionStyle.AngleFormat">
            <since>6.0</since>
        </member>
        <member name="P:Rhino.DocObjects.DimensionStyle.ToleranceFormat">
            <since>6.0</since>
        </member>
        <member name="P:Rhino.DocObjects.DimensionStyle.MaskColorSource">
            <since>6.0</since>
        </member>
        <member name="P:Rhino.DocObjects.DimensionStyle.MaskFrameType">
            <since>7.0</since>
        </member>
        <member name="P:Rhino.DocObjects.DimensionStyle.StackFractionFormat">
            <since>6.0</since>
        </member>
        <member name="P:Rhino.DocObjects.DimensionStyle.ZeroSuppress">
            <since>6.0</since>
        </member>
        <member name="P:Rhino.DocObjects.DimensionStyle.AlternateZeroSuppress">
            <since>6.0</since>
        </member>
        <member name="P:Rhino.DocObjects.DimensionStyle.ToleranceZeroSuppress">
            <since>6.0</since>
        </member>
        <member name="P:Rhino.DocObjects.DimensionStyle.AngleZeroSuppress">
            <since>6.0</since>
        </member>
        <member name="P:Rhino.DocObjects.DimensionStyle.ArrowType1">
            <since>6.0</since>
        </member>
        <member name="P:Rhino.DocObjects.DimensionStyle.ArrowType2">
            <since>6.0</since>
        </member>
        <member name="P:Rhino.DocObjects.DimensionStyle.LeaderArrowType">
            <since>5.6</since>
        </member>
        <member name="P:Rhino.DocObjects.DimensionStyle.TextMoveLeader">
            <since>6.0</since>
        </member>
        <member name="P:Rhino.DocObjects.DimensionStyle.ArcLengthSymbol">
            <since>6.0</since>
        </member>
        <member name="P:Rhino.DocObjects.DimensionStyle.CenterMarkType">
            <since>6.0</since>
        </member>
        <member name="P:Rhino.DocObjects.DimensionStyle.LeaderContentAngleType">
            <summary>
            Style of leader content angle
            Horizontal
            Aligned
            Rotated
            </summary>
            <since>6.0</since>
        </member>
        <member name="P:Rhino.DocObjects.DimensionStyle.TextVerticalAlignment">
            <since>6.0</since>
        </member>
        <member name="P:Rhino.DocObjects.DimensionStyle.TextHorizontalAlignment">
            <since>6.0</since>
        </member>
        <member name="P:Rhino.DocObjects.DimensionStyle.LeaderTextVerticalAlignment">
            <since>6.0</since>
        </member>
        <member name="P:Rhino.DocObjects.DimensionStyle.LeaderTextHorizontalAlignment">
            <since>6.0</since>
        </member>
        <member name="P:Rhino.DocObjects.DimensionStyle.DimTextLocation">
            <since>6.0</since>
        </member>
        <member name="P:Rhino.DocObjects.DimensionStyle.DimRadialTextLocation">
            <since>6.0</since>
        </member>
        <member name="P:Rhino.DocObjects.DimensionStyle.LeaderCurveType">
            <since>6.0</since>
        </member>
        <member name="P:Rhino.DocObjects.DimensionStyle.DimTextAngleType">
            <since>6.0</since>
        </member>
        <member name="P:Rhino.DocObjects.DimensionStyle.DimRadialTextAngleType">
            <since>6.0</since>
        </member>
        <member name="P:Rhino.DocObjects.DimensionStyle.TextOrientation">
            <since>6.0</since>
        </member>
        <member name="P:Rhino.DocObjects.DimensionStyle.LeaderTextOrientation">
            <since>6.0</since>
        </member>
        <member name="P:Rhino.DocObjects.DimensionStyle.DimTextOrientation">
            <since>6.0</since>
        </member>
        <member name="P:Rhino.DocObjects.DimensionStyle.DimRadialTextOrientation">
            <since>6.0</since>
        </member>
        <member name="P:Rhino.DocObjects.DimensionStyle.LengthResolution">
            <since>5.0</since>
        </member>
        <member name="P:Rhino.DocObjects.DimensionStyle.AlternateLengthResolution">
            <since>6.0</since>
        </member>
        <member name="P:Rhino.DocObjects.DimensionStyle.AngleResolution">
            <since>5.0</since>
        </member>
        <member name="P:Rhino.DocObjects.DimensionStyle.ToleranceResolution">
            <since>6.0</since>
        </member>
        <member name="P:Rhino.DocObjects.DimensionStyle.AlternateToleranceResolution">
            <since>6.0</since>
        </member>
        <member name="P:Rhino.DocObjects.DimensionStyle.MaskColor">
            <since>6.0</since>
        </member>
        <member name="P:Rhino.DocObjects.DimensionStyle.DecimalSeparator">
            <since>7.0</since>
        </member>
        <member name="P:Rhino.DocObjects.DimensionStyle.Prefix">
            <since>5.0</since>
        </member>
        <member name="P:Rhino.DocObjects.DimensionStyle.Suffix">
            <since>5.0</since>
        </member>
        <member name="P:Rhino.DocObjects.DimensionStyle.AlternatePrefix">
            <since>6.0</since>
        </member>
        <member name="P:Rhino.DocObjects.DimensionStyle.AlternateSuffix">
            <since>6.0</since>
        </member>
        <member name="M:Rhino.DocObjects.DimensionStyle.IsFieldOverriden(Rhino.DocObjects.DimensionStyle.Field)">
            Normally, a DimensionStyle is neither a Child nor a Parent.
            Setting the value of DimensionStyle.ParentId to the Id of another
            DimensionStyle makes that style the Parent of this style.
            Fields in a DimensionStyle can get their values from the 
            Child style or the Parent style.
            If a field is marked overridden in the Child style, 
            the value of that field comes from the Parent.
            Typically, when an individual field is overridden for a specific annotation
            object, a Child DimensionStyle is made with that field marked as
            an overridden field (SetFieldOverride()) and that DimensionStyle is
            made the Child of the annotation object's DimensionStyle.
            Then the DimensionStyleId of the annotation object is set to the 
            Id of the Child style
            <summary> </summary>
            <param name= "field"></param>
            <returns>
            True if the field corresponding to field_id is overridden in this AnnotationStyle
            False if the field is not overridden
            </returns>
            <since>6.0</since>
        </member>
        <member name="M:Rhino.DocObjects.DimensionStyle.SetFieldOverride(Rhino.DocObjects.DimensionStyle.Field)">
            <summary> Set a field as overridden </summary>
            <param name="field"></param>
            <since>6.0</since>
        </member>
        <member name="M:Rhino.DocObjects.DimensionStyle.ClearFieldOverride(Rhino.DocObjects.DimensionStyle.Field)">
            <summary>
            Set the field as not overridden
            </summary>
            <param name="field"></param>
            <since>6.0</since>
        </member>
        <member name="M:Rhino.DocObjects.DimensionStyle.ClearAllFieldOverrides">
            <summary>
            Sets all the fields in this DimensionStyle to be not overridden
            Does not change any dimstyle_id's or parent_id's
            </summary>
            <since>6.0</since>
        </member>
        <member name="P:Rhino.DocObjects.DimensionStyle.HasFieldOverrides">
            <summary>
            Checks if any fields in this DimensionStyle are overrides 
            </summary>
            <returns>
            True if any fields are overrides
            False is no fields are overrides
            </returns>
            <since>6.0</since>
        </member>
        <member name="P:Rhino.DocObjects.DimensionStyle.IsChild">
            <summary>
            Tests if this DimensionStyle is a child of any other DimensionStyle
            </summary>
            <returns>
            True if this is a child DimensionStyle, 
            False otherwise.
            </returns>
            <since>6.0</since>
        </member>
        <member name="M:Rhino.DocObjects.DimensionStyle.IsChildOf(System.Guid)">
            <summary>
            Tests if this DimensionStyle is a child of a specific DimensionStyle
            </summary>
            <param name="parentId"></param>
            <returns>
            True if this is a child of the DimensionStyle with Parent
            False otherwise.
            </returns>
            <since>6.0</since>
        </member>
        <member name="P:Rhino.DocObjects.DimensionStyle.ParentId">
            <summary>
            Get or Set the Id of this DimensionStyle's parent.
            If ParentId is Guid.Empty, this DimensionStyle has no parent
            </summary>
            <since>6.0</since>
        </member>
        <member name="T:Rhino.DocObjects.SectionBackgroundFillMode">
            <summary>
            Defines how a background fill is applied to a section
            </summary>
        </member>
        <member name="F:Rhino.DocObjects.SectionBackgroundFillMode.None">
            <summary>
            Do not fill in the background of a section
            </summary>
        </member>
        <member name="F:Rhino.DocObjects.SectionBackgroundFillMode.Viewport">
            <summary>
            Use the current display mode settings to determine how to apply a fill.
            Wireframe will not fill while shaded and rendered will fill using colors
            and materials matching how the object is drawn.
            </summary>
        </member>
        <member name="F:Rhino.DocObjects.SectionBackgroundFillMode.SolidColor">
            <summary>
            Use a solid color for a background fill. If BackgroundFillColor is set
            on this section style, then that color will be used. Otherwise, the item's
            color that this section style is associated will be used
            </summary>
        </member>
        <member name="T:Rhino.DocObjects.TextureProjectionModes">
            <summary>
            Enum describing how texture is projected onto geometry
            </summary>
        </member>
        <member name="F:Rhino.DocObjects.TextureProjectionModes.Undefined">
            <summary>Not valid projection type</summary>
        </member>
        <member name="F:Rhino.DocObjects.TextureProjectionModes.MappingChannel">
            <summary>Uses a texture mapping to generate texture coordinates</summary>
        </member>
        <member name="F:Rhino.DocObjects.TextureProjectionModes.ScreenBased">
            <summary>Screen based</summary>
        </member>
        <member name="F:Rhino.DocObjects.TextureProjectionModes.Wcs">
            <summary>World coordinate system projection</summary>
        </member>
        <member name="F:Rhino.DocObjects.TextureProjectionModes.WcsBox">
            <summary>Box type world coordinate system projection</summary>
        </member>
        <member name="F:Rhino.DocObjects.TextureProjectionModes.EnvironmentMapBox">
            <summary>Box type environtment mapping</summary>
        </member>
        <member name="F:Rhino.DocObjects.TextureProjectionModes.EnvironmentMapLightProbe">
            <summary>Light probe type environtment mapping</summary>
        </member>
        <member name="F:Rhino.DocObjects.TextureProjectionModes.EnvironmentMapSpherical">
            <summary>Spherical environtment mapping</summary>
        </member>
        <member name="F:Rhino.DocObjects.TextureProjectionModes.EnvironmentMapCube">
            <summary>Cube type environtment mapping</summary>
        </member>
        <member name="F:Rhino.DocObjects.TextureProjectionModes.EnvironmentMapVCrossCube">
            <summary>Vertical cross cube type environtment mapping</summary>
        </member>
        <member name="F:Rhino.DocObjects.TextureProjectionModes.EnvironmentMapHCrossCube">
            <summary>Horizontal cross type environtment mapping</summary>
        </member>
        <member name="F:Rhino.DocObjects.TextureProjectionModes.EnvironmentMapHemispherical">
            <summary>Hemispherical environtment mapping</summary>
        </member>
        <member name="F:Rhino.DocObjects.TextureProjectionModes.EnvironmentMapEmap">
            <summary>Emap type environtment mapping</summary>
        </member>
        <member name="F:Rhino.DocObjects.TextureProjectionModes.SurfaceParameterization">
            <summary>Surface parameterization</summary>
        </member>
        <member name="T:Rhino.DocObjects.NamespaceDoc">
            <summary>
            The DocObjects namespace contains types that correspond to geometry
            that is found in a document.
            <para>Generally, these types reference an attribute and have a
            distinctive ID.</para>
            </summary>
        </member>
        <member name="T:Rhino.DocObjects.ConstructionPlane">
            <summary>
            Represents a construction plane inside the document.
            <para>Use Rhino.DocObjects.Tables.NamedConstructionPlaneTable
            methods and indexers to add and access a <see cref="T:Rhino.DocObjects.ConstructionPlane"/>.</para>
            </summary>
        </member>
        <member name="M:Rhino.DocObjects.ConstructionPlane.#ctor">
            <summary>
            Initializes a new instance of <see cref="T:Rhino.DocObjects.ConstructionPlane"/>.
            </summary>
            <since>5.0</since>
        </member>
        <member name="P:Rhino.DocObjects.ConstructionPlane.Plane">
            <summary>
            Gets or sets the geometric plane to use for construction.
            </summary>
            <since>5.0</since>
        </member>
        <member name="P:Rhino.DocObjects.ConstructionPlane.GridSpacing">
            <summary>
            Gets or sets the distance between grid lines.
            </summary>
            <since>5.0</since>
        </member>
        <member name="P:Rhino.DocObjects.ConstructionPlane.SnapSpacing">
            <summary>
            when "grid snap" is enabled, the distance between snap points.
            Typically this is the same distance as grid spacing.
            </summary>
            <since>5.0</since>
        </member>
        <member name="P:Rhino.DocObjects.ConstructionPlane.GridLineCount">
            <summary>
            Gets or sets the total amount of grid lines in each direction.
            </summary>
            <since>5.0</since>
        </member>
        <member name="P:Rhino.DocObjects.ConstructionPlane.ThickLineFrequency">
            <summary>
            Gets or sets the recurrence of a wider line on the grid.
            <para>0: No lines are thick, all are drawn thin.</para>
            <para>1: All lines are thick.</para>
            <para>2: Every other line is thick.</para>
            <para>3: One line in three lines is thick (and two are thin).</para>
            <para>4: ...</para>
            </summary>
            <since>5.0</since>
        </member>
        <member name="P:Rhino.DocObjects.ConstructionPlane.DepthBuffered">
            <summary>
            Gets or sets whether the grid is drawn on top of geometry.
            <para>false=grid is always drawn behind 3d geometry</para>
            <para>true=grid is drawn at its depth as a 3d plane and grid lines obscure things behind the grid.</para>
            </summary>
            <since>5.0</since>
        </member>
        <member name="P:Rhino.DocObjects.ConstructionPlane.Name">
            <summary>
            Gets or sets the name of the construction plane.
            </summary>
            <since>5.0</since>
        </member>
        <member name="P:Rhino.DocObjects.ConstructionPlane.ShowGrid">
            <summary>
            Gets or sets whether the grid itself should be visible. 
            </summary>
            <since>5.0</since>
        </member>
        <member name="P:Rhino.DocObjects.ConstructionPlane.ShowAxes">
            <summary>
            Gets or sets whether the axes of the grid should be visible.
            </summary>
            <since>5.0</since>
        </member>
        <member name="P:Rhino.DocObjects.ConstructionPlane.ShowZAxis">
            <summary>
            Gets or sets whether the Z axis of the grid should be visible.
            </summary>
            <since>6.0</since>
        </member>
        <member name="P:Rhino.DocObjects.ConstructionPlane.ThinLineColor">
            <summary>
            Gets or sets the color of the thinner, less prominent line.
            </summary>
            <since>5.0</since>
        </member>
        <member name="P:Rhino.DocObjects.ConstructionPlane.ThickLineColor">
            <summary>
            Gets or sets the color of the thicker, wider line.
            </summary>
            <since>5.0</since>
        </member>
        <member name="P:Rhino.DocObjects.ConstructionPlane.GridXColor">
            <summary>
            Gets or sets the color of the grid X-axis mark.
            </summary>
            <since>5.0</since>
        </member>
        <member name="P:Rhino.DocObjects.ConstructionPlane.GridYColor">
            <summary>
            Gets or sets the color of the grid Y-axis mark.
            </summary>
            <since>5.0</since>
        </member>
        <member name="P:Rhino.DocObjects.ConstructionPlane.GridZColor">
            <summary>
            Gets or sets the color of the grid Z-axis mark.
            </summary>
            <since>5.0</since>
        </member>
        <member name="T:Rhino.DocObjects.ViewInfoFocalBlurModes">
            <summary>
            The different focal blur modes of the ViewInfo
            </summary>
            <since>6.0</since>
        </member>
        <member name="F:Rhino.DocObjects.ViewInfoFocalBlurModes.None">
            <summary> No focal blur </summary>
        </member>
        <member name="F:Rhino.DocObjects.ViewInfoFocalBlurModes.Automatic">
            <summary>Auto-focus on selected objects</summary>
        </member>
        <member name="F:Rhino.DocObjects.ViewInfoFocalBlurModes.Manual">
            <summary>Fully manual focus</summary>
        </member>
        <member name="T:Rhino.DocObjects.ViewInfo">
            <summary>
            Represents the name and orientation of a View (and named view).
            <para>views can be thought of as cameras.</para>
            </summary>
        </member>
        <member name="M:Rhino.DocObjects.ViewInfo.#ctor">
            <summary>
            Create a default ViewInfo instance
            </summary>
        </member>
        <member name="M:Rhino.DocObjects.ViewInfo.Finalize">
            <summary>
            Passively reclaims unmanaged resources when the class user did not explicitly call Dispose().
            </summary>
        </member>
        <member name="M:Rhino.DocObjects.ViewInfo.Dispose">
            <summary>
            Actively reclaims unmanaged resources that this instance uses.
            </summary>
            <since>5.0</since>
        </member>
        <member name="M:Rhino.DocObjects.ViewInfo.Dispose(System.Boolean)">
            <summary>
            For derived class implementers.
            <para>This method is called with argument true when class user calls Dispose(), while with argument false when
            the Garbage Collector invokes the finalizer, or Finalize() method.</para>
            <para>You must reclaim all used unmanaged resources in both cases, and can use this chance to call Dispose on disposable fields if the argument is true.</para>
            <para>Also, you must call the base virtual method within your overriding method.</para>
            </summary>
            <param name="disposing">true if the call comes from the Dispose() method; false if it comes from the Garbage Collector finalizer.</param>
        </member>
        <member name="P:Rhino.DocObjects.ViewInfo.Name">
            <summary>
            Gets or sets the name of the view.
            </summary>
            <since>5.0</since>
        </member>
        <member name="P:Rhino.DocObjects.ViewInfo.NamedViewId">
            <summary>
            Returns a unique id if this is a named view otherwise an empty Guid.
            </summary>
            <since>7.28</since>
        </member>
        <member name="P:Rhino.DocObjects.ViewInfo.WallpaperFilename">
            <summary>
            Get filename for wallpaper set to this view, if any.
            </summary>
            <since>6.0</since>
        </member>
        <member name="P:Rhino.DocObjects.ViewInfo.ShowWallpaperInGrayScale">
            <summary>
            True if wallpaper (if any) is to be shown in gray scale in this view.
            </summary>
            <since>6.0</since>
        </member>
        <member name="P:Rhino.DocObjects.ViewInfo.WallpaperHidden">
            <summary>
            True if wallpaper (if any) is to be hidden from this view.
            </summary>
            <since>6.0</since>
        </member>
        <member name="P:Rhino.DocObjects.ViewInfo.FocalBlurDistance">
            <summary>
            Gets or sets the Focal blur distance of the active viewport
            </summary>
            <since>6.0</since>
        </member>
        <member name="P:Rhino.DocObjects.ViewInfo.FocalBlurAperture">
            <summary>
            Gets or sets the Focal blur aperture of the active viewport
            </summary>
            <since>6.0</since>
        </member>
        <member name="P:Rhino.DocObjects.ViewInfo.FocalBlurJitter">
            <summary>
            Gets or sets the Focal blur jitter of the active viewport
            </summary>
            <since>6.0</since>
        </member>
        <member name="P:Rhino.DocObjects.ViewInfo.FocalBlurSampleCount">
            <summary>
            Gets or sets the Focal blur sample count of the active viewport
            </summary>
            <since>6.0</since>
        </member>
        <member name="P:Rhino.DocObjects.ViewInfo.FocalBlurMode">
            <summary>
            Gets or sets the Focal blur mode of the active viewport
            </summary>
            <since>6.0</since>
        </member>
        <member name="P:Rhino.DocObjects.ViewInfo.SectionBehavior">
            <summary>
            How a view will interact with clipping planes
            </summary>
            <since>8.0</since>
        </member>
        <member name="P:Rhino.DocObjects.ViewInfo.Viewport">
            <summary>
            Gets the viewport, or viewing frustum, associated with this view.
            </summary>
            <since>5.0</since>
        </member>
        <member name="T:Rhino.DocObjects.EarthAnchorPoint">
            <summary>
            Contains information about the model's position in latitude, longitude,
            and elevation for GIS mapping applications.
            </summary>
        </member>
        <member name="M:Rhino.DocObjects.EarthAnchorPoint.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Rhino.DocObjects.EarthAnchorPoint"/> class.
            </summary>
            <since>5.0</since>
        </member>
        <member name="M:Rhino.DocObjects.EarthAnchorPoint.Finalize">
            <summary>
            Passively reclaims unmanaged resources when the class user did not explicitly call Dispose().
            </summary>
        </member>
        <member name="M:Rhino.DocObjects.EarthAnchorPoint.Dispose">
            <summary>
            Actively reclaims unmanaged resources that this instance uses.
            </summary>
            <since>5.0</since>
        </member>
        <member name="M:Rhino.DocObjects.EarthAnchorPoint.Dispose(System.Boolean)">
            <summary>
            For derived class implementers.
            <para>This method is called with argument true when class user calls Dispose(), while with argument false when
            the Garbage Collector invokes the finalizer, or Finalize() method.</para>
            <para>You must reclaim all used unmanaged resources in both cases, and can use this chance to call Dispose on disposable fields if the argument is true.</para>
            <para>Also, you must call the base virtual method within your overriding method.</para>
            </summary>
            <param name="disposing">true if the call comes from the Dispose() method; false if it comes from the Garbage Collector finalizer.</param>
        </member>
        <member name="P:Rhino.DocObjects.EarthAnchorPoint.EarthBasepointLatitude">
            <summary>
            Gets or sets a point latitude on earth, in degrees.
            +90 = north pole, 0 = equator, -90 = south pole.
            </summary>
            <since>5.0</since>
        </member>
        <member name="P:Rhino.DocObjects.EarthAnchorPoint.EarthBasepointLongitude">
            <summary>
            Gets or sets the point longitude on earth, in degrees.
            </summary>
            <since>5.0</since>
        </member>
        <member name="P:Rhino.DocObjects.EarthAnchorPoint.EarthBasepointElevation">
            <summary>
            Gets or sets the point elevation on earth, in meters.
            </summary>
            <since>5.0</since>
        </member>
        <member name="P:Rhino.DocObjects.EarthAnchorPoint.EarthBasepointElevationZero">
            <summary>
            Gets or sets a value indicating the zero level convention relating to a location on Earth.
            </summary>
            <since>5.0</since>
        </member>
        <member name="P:Rhino.DocObjects.EarthAnchorPoint.KMLOrientationHeadingAngleDegrees">
            <summary>
            Gets Keyhole Markup Language (KML) orientation heading angle in degrees.
            </summary>
            <since>7.11</since>
        </member>
        <member name="P:Rhino.DocObjects.EarthAnchorPoint.KMLOrientationTiltAngleDegrees">
            <summary>
            Gets Keyhole Markup Language (KML) orientation tilt angle in degrees.
            </summary>
            <since>7.11</since>
        </member>
        <member name="P:Rhino.DocObjects.EarthAnchorPoint.KMLOrientationRollAngleDegrees">
            <summary>
            Gets Keyhole Markup Language (KML) orientation roll angle in degrees.
            </summary>
            <since>7.11</since>
        </member>
        <member name="P:Rhino.DocObjects.EarthAnchorPoint.KMLOrientationHeadingAngleRadians">
            <summary>
            Gets Keyhole Markup Language (KML) orientation heading angle in degrees.
            </summary>
            <since>7.11</since>
        </member>
        <member name="P:Rhino.DocObjects.EarthAnchorPoint.KMLOrientationTiltAngleRadians">
            <summary>
            Gets Keyhole Markup Language (KML) orientation tilt angle in degrees.
            </summary>
            <since>7.11</since>
        </member>
        <member name="P:Rhino.DocObjects.EarthAnchorPoint.KMLOrientationRollAngleRadians">
            <summary>
            Gets Keyhole Markup Language (KML) orientation roll angle in degrees.
            </summary>
            <since>7.11</since>
        </member>
        <member name="P:Rhino.DocObjects.EarthAnchorPoint.ModelBasePoint">
            <summary>Corresponding model point in model coordinates.</summary>
            <since>5.0</since>
        </member>
        <member name="P:Rhino.DocObjects.EarthAnchorPoint.ModelNorth">
            <summary>Earth directions in model coordinates.</summary>
            <since>5.0</since>
        </member>
        <member name="P:Rhino.DocObjects.EarthAnchorPoint.ModelEast">
            <summary>Earth directions in model coordinates.</summary>
            <since>5.0</since>
        </member>
        <member name="P:Rhino.DocObjects.EarthAnchorPoint.Name">
            <summary>
            Gets or sets the short form of the identifying information about this location.
            </summary>
            <since>5.0</since>
        </member>
        <member name="P:Rhino.DocObjects.EarthAnchorPoint.Description">
            <summary>
            Gets or sets the long form of the identifying information about this location.
            </summary>
            <since>5.0</since>
        </member>
        <member name="M:Rhino.DocObjects.EarthAnchorPoint.EarthLocationIsSet">
            <summary>
            Checks if the earth location is set or not.
            </summary>
            <returns>Boolean value, true if set else false</returns>
            <since>6.0</since>
        </member>
        <member name="M:Rhino.DocObjects.EarthAnchorPoint.GetModelCompass">
            <summary>
            Returns a plane in model coordinates whose X axis points East,
            Y axis points North and Z axis points Up. The origin
            is set to ModelBasepoint.
            </summary>
            <returns>A plane value. This might be invalid on error.</returns>
            <since>5.0</since>
        </member>
        <member name="M:Rhino.DocObjects.EarthAnchorPoint.GetModelToEarthTransform(Rhino.UnitSystem)">
            <summary>
            Gets a transformation from model coordinates to earth coordinates.
            This transformation assumes the model is small enough that
            the curvature of the earth can be ignored.
            </summary>
            <param name="modelUnitSystem">The model unit system.</param>
            <returns>
            Transform on success. Invalid Transform on error.
            </returns>
            <remarks>
            If M is a point in model coordinates and E = model_to_earth*M,
            then 
              E.x = latitude in decimal degrees
              E.y = longitude in decimal degrees
              E.z = elevation in meters above mean sea level
            Because the earth is not flat, there is a small amount of error
            when using a linear transformation to calculate oblate spherical 
            coordinates.  This error is small.  If the distance from P to M
            is d meters, then the approximation error is
            latitude error  &lt;=
            longitude error &lt;=
            elevation error &lt;= 6379000*((1 + (d/6356000)^2)-1) meters
            
            In particular, if every point in the model is within 1000 meters of
            the m_model_basepoint, then the maximum approximation errors are
            latitude error  &lt;=
            longitude error &lt;=
            elevation error &lt;= 8 centimeters.
            </remarks>
            <since>5.0</since>
        </member>
        <member name="M:Rhino.DocObjects.EarthAnchorPoint.GetEarthAnchorPlane(Rhino.Geometry.Vector3d@)">
            <summary> Returns the earth anchor plane </summary>
            <param name="anchorNorth"></param>
            <returns>A plane value.</returns>
            <since>6.0</since>
        </member>
        <member name="T:Rhino.DocObjects.BasepointZero">
            <summary>
            Specifies enumerated constants used to indicate the zero level convention relating to a location on Earth.
            <para>This is used in conjunction with the <see cref="T:Rhino.DocObjects.EarthAnchorPoint"/> class.</para>
            </summary>
            <since>5.0</since>
        </member>
        <member name="F:Rhino.DocObjects.BasepointZero.GroundLevel">
            <summary>
            The ground level is the convention for 0.
            </summary>
        </member>
        <member name="F:Rhino.DocObjects.BasepointZero.MeanSeaLevel">
            <summary>
            The mean sea level is the convention for 0.
            </summary>
        </member>
        <member name="F:Rhino.DocObjects.BasepointZero.CenterOfEarth">
            <summary>
            The center of the planet is the convention for 0.
            </summary>
        </member>
        <member name="T:Rhino.DocObjects.AnimationProperties">
            <summary>
            Contains information used by the Animation Tools to create sun, season,
            turntable and fly through animations.
            </summary>
        </member>
        <member name="M:Rhino.DocObjects.AnimationProperties.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Rhino.DocObjects.AnimationProperties"/> class.
            </summary>
            <since>6.11</since>
        </member>
        <member name="M:Rhino.DocObjects.AnimationProperties.#ctor(Rhino.DocObjects.AnimationProperties)">
            <summary> Initialize new instance of the AnimationProperties class. </summary>
            <param name="source">If not null, settings are copied from source</param>
            <since>6.11</since>
        </member>
        <member name="M:Rhino.DocObjects.AnimationProperties.Finalize">
            <summary>
            Passively reclaims unmanaged resources when the class user did not explicitly call Dispose().
            </summary>
        </member>
        <member name="M:Rhino.DocObjects.AnimationProperties.Dispose">
            <summary>
            Actively reclaims unmanaged resources that this instance uses.
            </summary>
            <since>6.11</since>
        </member>
        <member name="M:Rhino.DocObjects.AnimationProperties.Dispose(System.Boolean)">
            <summary>
            For derived class implementers.
            <para>This method is called with argument true when class user calls Dispose(), while with argument false when
            the Garbage Collector invokes the finalizer, or Finalize() method.</para>
            <para>You must reclaim all used unmanaged resources in both cases, and can use this chance to call Dispose on disposable fields if the argument is true.</para>
            <para>Also, you must call the base virtual method within your overriding method.</para>
            </summary>
            <param name="disposing">true if the call comes from the Dispose() method; false if it comes from the Garbage Collector finalizer.</param>
        </member>
        <member name="T:Rhino.DocObjects.AnimationProperties.CaptureTypes">
            <summary>
            Constants that define the mode of the animation tools.
            </summary>
            <since>6.11</since>
        </member>
        <member name="F:Rhino.DocObjects.AnimationProperties.CaptureTypes.Path">
            <summary> Camera and target movement along separate path curves </summary>
        </member>
        <member name="F:Rhino.DocObjects.AnimationProperties.CaptureTypes.Turntable">
            <summary> Rotate a view around the target. </summary>
        </member>
        <member name="F:Rhino.DocObjects.AnimationProperties.CaptureTypes.Flythrough">
            <summary> Camera and target movement along a path curve </summary>
        </member>
        <member name="F:Rhino.DocObjects.AnimationProperties.CaptureTypes.DaySunStudy">
            <summary> Sun movement through a specified calendar day  </summary>
        </member>
        <member name="F:Rhino.DocObjects.AnimationProperties.CaptureTypes.SeasonalSunStudy">
            <summary> Sun movement through a specified week, month, or year </summary>
        </member>
        <member name="F:Rhino.DocObjects.AnimationProperties.CaptureTypes.None">
            <summary> No capture type specified </summary>
        </member>
        <member name="P:Rhino.DocObjects.AnimationProperties.CaptureType">
            <summary>
            Gets or sets the capture type of the animation.
            </summary>
            <since>6.11</since>
        </member>
        <member name="P:Rhino.DocObjects.AnimationProperties.FileExtension">
            <summary>
            Gets or sets the file extension of the saved frames created by the animation.
            </summary>
            <since>6.11</since>
        </member>
        <member name="P:Rhino.DocObjects.AnimationProperties.CaptureMethod">
            <summary>
            Gets or sets the capture method of the animation which is either preview or full.
            </summary>
            <since>6.11</since>
        </member>
        <member name="P:Rhino.DocObjects.AnimationProperties.ViewportName">
            <summary>
            Gets or sets the viewport that will be captured.
            </summary>
            <since>6.11</since>
        </member>
        <member name="P:Rhino.DocObjects.AnimationProperties.AnimationName">
            <summary>
            Gets or sets the name of the animation sequence.
            </summary>
            <since>6.11</since>
        </member>
        <member name="P:Rhino.DocObjects.AnimationProperties.DisplayMode">
            <summary>
            Gets or sets the ID of the view display mode (wireframe, shaded...).
            </summary>
            <since>6.11</since>
        </member>
        <member name="P:Rhino.DocObjects.AnimationProperties.CameraPoints">
            <summary>
            Gets or sets points of the camera path.
            </summary>
            <since>6.11</since>
        </member>
        <member name="P:Rhino.DocObjects.AnimationProperties.TargetPoints">
            <summary>
            Gets or sets points of the target path.
            </summary>
            <since>6.11</since>
        </member>
        <member name="P:Rhino.DocObjects.AnimationProperties.FrameCount">
            <summary>
            Gets or sets the number of frames to be captured.
            </summary>
            <since>6.11</since>
        </member>
        <member name="P:Rhino.DocObjects.AnimationProperties.CurrentFrame">
            <summary>
            Gets or sets the current frame during animation record.
            </summary>
            <since>7.12</since>
        </member>
        <member name="P:Rhino.DocObjects.AnimationProperties.CameraPathId">
            <summary>
            Gets or sets the object ID of the camera path.
            </summary>
            <since>6.11</since>
        </member>
        <member name="P:Rhino.DocObjects.AnimationProperties.TargetPathId">
            <summary>
            Gets or sets the object ID of the target path.
            </summary>
            <since>6.11</since>
        </member>
        <member name="P:Rhino.DocObjects.AnimationProperties.Latitude">
            <summary>
            Gets or sets the latitude for sun animations in the range of -90 to +90.
            </summary>
            <since>6.11</since>
        </member>
        <member name="P:Rhino.DocObjects.AnimationProperties.Longitude">
            <summary>
            Gets or sets the longitude for sun animations in the range of -180 to +180.
            </summary>
            <since>6.11</since>
        </member>
        <member name="P:Rhino.DocObjects.AnimationProperties.NorthAngle">
            <summary>
            Gets or sets the world angle corresponding to North in degrees.
            This angle is zero along the x-axis and increases anticlockwise.
            </summary>
            <since>6.11</since>
        </member>
        <member name="P:Rhino.DocObjects.AnimationProperties.StartDay">
            <summary>
            Gets or sets the start day for seasonal/one day sun animation in the range 1 to 31.
            </summary>
            <since>6.11</since>
        </member>
        <member name="P:Rhino.DocObjects.AnimationProperties.StartMonth">
            <summary>
            Gets or sets the start month for seasonal/one day sun animation in the range 1 to 12.
            </summary>
            <since>6.11</since>
        </member>
        <member name="P:Rhino.DocObjects.AnimationProperties.StartYear">
            <summary>
            Gets or sets the start year for seasonal/one day sun animation in the range 1800 to 2199.
            </summary>
            <since>6.11</since>
        </member>
        <member name="P:Rhino.DocObjects.AnimationProperties.StartHour">
            <summary>
            Gets or sets the start hour for seasonal/one day sun animation in the range 0 to 23.
            </summary>
            <since>6.11</since>
        </member>
        <member name="P:Rhino.DocObjects.AnimationProperties.StartMinutes">
            <summary>
            Gets or sets the start minutes for seasonal/one day sun animation in the range 0 to 59.
            </summary>
            <since>6.11</since>
        </member>
        <member name="P:Rhino.DocObjects.AnimationProperties.StartSeconds">
            <summary>
            Gets or sets the start seconds for seasonal/one day sun animation in the range 0 to 59.
            </summary>
            <since>6.11</since>
        </member>
        <member name="P:Rhino.DocObjects.AnimationProperties.EndDay">
            <summary>
            Gets or sets the end day for seasonal day sun animation in the range 1 to 31.
            </summary>
            <since>6.11</since>
        </member>
        <member name="P:Rhino.DocObjects.AnimationProperties.EndMonth">
            <summary>
            Gets or sets the end month for seasonal day sun animation in the range 1 to 12.
            </summary>
            <since>6.11</since>
        </member>
        <member name="P:Rhino.DocObjects.AnimationProperties.EndYear">
            <summary>
            Gets or sets the end year for seasonal day sun animation in the range 1800 to 2199.
            </summary>
            <since>6.11</since>
        </member>
        <member name="P:Rhino.DocObjects.AnimationProperties.EndHour">
            <summary>
            Gets or sets the end hour for one day sun animation in the range 0 to 23.
            </summary>
            <since>6.11</since>
        </member>
        <member name="P:Rhino.DocObjects.AnimationProperties.EndMinutes">
            <summary>
            Gets or sets the end minutes for one day sun animation in the range 0 to 59.
            </summary>
            <since>6.11</since>
        </member>
        <member name="P:Rhino.DocObjects.AnimationProperties.EndSeconds">
            <summary>
            Gets or sets the end seconds for one day sun animation in the range 0 to 59.
            </summary>
            <since>6.11</since>
        </member>
        <member name="P:Rhino.DocObjects.AnimationProperties.DaysBetweenFrames">
            <summary>
            Gets or sets the days between captured frames for seasonal sun animation.
            </summary>
            <since>6.11</since>
        </member>
        <member name="P:Rhino.DocObjects.AnimationProperties.MinutesBetweenFrames">
            <summary>
            Gets or sets the minutes between captured frames for one day sun animation.
            </summary>
            <since>6.11</since>
        </member>
        <member name="P:Rhino.DocObjects.AnimationProperties.LightIndex">
            <summary>
            Internal value used while previewing animation.
            </summary>
            <since>6.11</since>
        </member>
        <member name="P:Rhino.DocObjects.AnimationProperties.FolderName">
            <summary>
            Gets or sets the location for the saved frames.
            </summary>
            <since>6.11</since>
        </member>
        <member name="P:Rhino.DocObjects.AnimationProperties.HtmlFileName">
            <summary>
            Gets or sets the HTML file name.
            </summary>
            <since>7.12</since>
        </member>
        <member name="P:Rhino.DocObjects.AnimationProperties.HtmlFullPath">
             <summary>
             Return HTML file path consisting of FolderName and HtmlFileName.
            
             To change this set FolderName and HtmlFileName.
             </summary>
             <since>7.12</since>
        </member>
        <member name="P:Rhino.DocObjects.AnimationProperties.Images">
            <summary>
            Gets or sets the full path to the saved frames of an animation.
            </summary>
            <since>6.11</since>
        </member>
        <member name="P:Rhino.DocObjects.AnimationProperties.Dates">
            <summary>
            Gets or sets the dates that are calculated for seasonal/one day sun animations.
            </summary>
            <since>6.11</since>
        </member>
        <member name="P:Rhino.DocObjects.AnimationProperties.RenderFull">
            <summary>
            Gets or sets a value indicating whether to capture a frame in rendered mode.
            </summary>
            <since>6.11</since>
        </member>
        <member name="P:Rhino.DocObjects.AnimationProperties.RenderPreview">
            <summary>
            Gets or sets a value indicating whether to capture a frame in preview rendered mode.
            </summary>
            <since>6.11</since>
        </member>
        <member name="T:Rhino.DocObjects.ActiveSpace">
            <summary>Defines the current working space.</summary>
            <since>5.0</since>
        </member>
        <member name="F:Rhino.DocObjects.ActiveSpace.None">
            <summary>There is no working space.</summary>
        </member>
        <member name="F:Rhino.DocObjects.ActiveSpace.ModelSpace">
            <summary>3d modeling or "world" space.</summary>
        </member>
        <member name="F:Rhino.DocObjects.ActiveSpace.PageSpace">
            <summary>page/layout/paper/printing space.</summary>
        </member>
        <member name="F:Rhino.DocObjects.ActiveSpace.UVEditorSpace">
            <summary>UV Editor space.</summary>
        </member>
        <member name="F:Rhino.DocObjects.ActiveSpace.BlockEditorSpace">
            <summary>Block Editor space.</summary>
        </member>
        <member name="T:Rhino.DocObjects.CoordinateSystem">
            <summary>
            Defines enumerated values for coordinate systems to use as references.
            </summary>
            <since>5.0</since>
        </member>
        <member name="F:Rhino.DocObjects.CoordinateSystem.World">
            <summary>
            The world coordinate system. This has origin (0,0,0),
            X unit axis is (1, 0, 0) and Y unit axis is (0, 1, 0).
            </summary>
        </member>
        <member name="F:Rhino.DocObjects.CoordinateSystem.Camera">
            <summary>
            The camera coordinate system.
            </summary>
        </member>
        <member name="F:Rhino.DocObjects.CoordinateSystem.Clip">
            <summary>
            The clip coordinate system.
            </summary>
        </member>
        <member name="F:Rhino.DocObjects.CoordinateSystem.Screen">
            <summary>
            The screen coordinate system.
            </summary>
        </member>
        <member name="T:Rhino.DocObjects.ObjectMode">
            <summary>
            Defines enumerated values for the display and behavior of single objects.
            </summary>
            <since>5.0</since>
        </member>
        <member name="F:Rhino.DocObjects.ObjectMode.Normal">
            <summary>Object mode comes from layer.</summary>
        </member>
        <member name="F:Rhino.DocObjects.ObjectMode.Hidden">
            <summary>Not visible, object cannot be selected or changed.</summary>
        </member>
        <member name="F:Rhino.DocObjects.ObjectMode.Locked">
            <summary>Visible, object cannot be selected or changed.</summary>
        </member>
        <member name="F:Rhino.DocObjects.ObjectMode.InstanceDefinitionObject">
            <summary>
            Object is part of an InstanceDefinition. The InstanceDefinition
            m_object_uuid[] array will contain this object attribute's id.
            </summary>
        </member>
        <member name="T:Rhino.DocObjects.ObjectColorSource">
            <summary>
            Defines enumerated values for the source of display color of single objects.
            </summary>
            <since>5.0</since>
        </member>
        <member name="F:Rhino.DocObjects.ObjectColorSource.ColorFromLayer">
            <summary>use color assigned to layer.</summary>
        </member>
        <member name="F:Rhino.DocObjects.ObjectColorSource.ColorFromObject">
            <summary>use color assigned to object.</summary>
        </member>
        <member name="F:Rhino.DocObjects.ObjectColorSource.ColorFromMaterial">
            <summary>use diffuse render material color.</summary>
        </member>
        <member name="F:Rhino.DocObjects.ObjectColorSource.ColorFromParent">
            <summary>
            for objects with parents (like objects in instance references, use parent linetype)
            if no parent, treat as color_from_layer.
            </summary>
        </member>
        <member name="T:Rhino.DocObjects.ObjectPlotColorSource">
            <summary>
            Defines enumerated values for the source of plotting/printing color of single objects.
            </summary>
            <since>5.0</since>
        </member>
        <member name="F:Rhino.DocObjects.ObjectPlotColorSource.PlotColorFromLayer">
            <summary>use plot color assigned to layer.</summary>
        </member>
        <member name="F:Rhino.DocObjects.ObjectPlotColorSource.PlotColorFromObject">
            <summary>use plot color assigned to object.</summary>
        </member>
        <member name="F:Rhino.DocObjects.ObjectPlotColorSource.PlotColorFromDisplay">
            <summary>use display color.</summary>
        </member>
        <member name="F:Rhino.DocObjects.ObjectPlotColorSource.PlotColorFromParent">
            <summary>
            for objects with parents (like objects in instance references, use parent plot color)
            if no parent, treat as plot_color_from_layer.
            </summary>
        </member>
        <member name="T:Rhino.DocObjects.ObjectPlotWeightSource">
            <summary>
            Defines enumerated values for the source of plotting/printing weight of single objects.
            </summary>
            <since>5.0</since>
        </member>
        <member name="F:Rhino.DocObjects.ObjectPlotWeightSource.PlotWeightFromLayer">
            <summary>use plot color assigned to layer.</summary>
        </member>
        <member name="F:Rhino.DocObjects.ObjectPlotWeightSource.PlotWeightFromObject">
            <summary>use plot color assigned to object.</summary>
        </member>
        <member name="F:Rhino.DocObjects.ObjectPlotWeightSource.PlotWeightFromParent">
            <summary>
            for objects with parents (like objects in instance references, use parent plot color)
            if no parent, treat as plot_color_from_layer.
            </summary>
        </member>
        <member name="T:Rhino.DocObjects.ObjectLinetypeSource">
            <summary>
            Defines enumerated values for the source of linetype of single objects.
            </summary>
            <since>5.0</since>
        </member>
        <member name="F:Rhino.DocObjects.ObjectLinetypeSource.LinetypeFromLayer">
            <summary>use line style assigned to layer.</summary>
        </member>
        <member name="F:Rhino.DocObjects.ObjectLinetypeSource.LinetypeFromObject">
            <summary>use line style assigned to object.</summary>
        </member>
        <member name="F:Rhino.DocObjects.ObjectLinetypeSource.LinetypeFromParent">
            <summary>
            for objects with parents (like objects in instance references, use parent linetype)
            if not parent, treat as linetype_from_layer.
            </summary>
        </member>
        <member name="T:Rhino.DocObjects.ObjectMaterialSource">
            <summary>
            Defines enumerated values for the source of material of single objects.
            </summary>
            <since>5.0</since>
        </member>
        <member name="F:Rhino.DocObjects.ObjectMaterialSource.MaterialFromLayer">
            <summary>use material assigned to layer.</summary>
        </member>
        <member name="F:Rhino.DocObjects.ObjectMaterialSource.MaterialFromObject">
            <summary>use material assigned to object.</summary>
        </member>
        <member name="F:Rhino.DocObjects.ObjectMaterialSource.MaterialFromParent">
            <summary>
            for objects with parents, like definition geometry in instance
            references and faces in polysurfaces, this value indicates the
            material definition should come from the parent. If the object
            does not have an obvious "parent", then treat it the same as
            material_from_layer.
            </summary>
        </member>
        <member name="T:Rhino.DocObjects.DisplayMode">
            <summary>
            Defines enumerated values for display modes, such as wireframe or shaded.
            </summary>
            <since>5.0</since>
        </member>
        <member name="F:Rhino.DocObjects.DisplayMode.Default">
            <summary>
            The default display mode.
            </summary>
        </member>
        <member name="F:Rhino.DocObjects.DisplayMode.Wireframe">
            <summary>
            The wireframe display mode.
            <para>Objects are generally only outlined by their corresponding isocurves and edges.</para>
            </summary>
        </member>
        <member name="F:Rhino.DocObjects.DisplayMode.Shaded">
            <summary>
            The shaded display mode.
            <para>Objects are generally displayed with their corresponding isocurves and edges,
            and are filled with their display colors.</para>
            </summary>
        </member>
        <member name="F:Rhino.DocObjects.DisplayMode.RenderPreview">
            <summary>
            The render display mode.
            <para>Objects are generally displayed in a similar way to the one that will be resulting
            from rendering.</para>
            </summary>
        </member>
        <member name="T:Rhino.DocObjects.DistanceDisplayMode">
            <summary>
            Defines enumerated values for the display of distances in US customary and Imperial units.
            </summary>
            <since>5.0</since>
        </member>
        <member name="F:Rhino.DocObjects.DistanceDisplayMode.Decimal">
            <summary>
            Shows distance decimals.
            </summary>
        </member>
        <member name="F:Rhino.DocObjects.DistanceDisplayMode.Feet">
            <summary>
            Show feet.
            </summary>
        </member>
        <member name="F:Rhino.DocObjects.DistanceDisplayMode.FeetAndInches">
            <summary>
            Show feet and inches.
            </summary>
        </member>
        <member name="T:Rhino.DocObjects.AngleDisplayMode">
            <summary>
            Defines enumerated values for the display of angles.
            </summary>
            <since>6.0</since>
        </member>
        <member name="F:Rhino.DocObjects.AngleDisplayMode.Degrees">
            <summary>
            Shows angle in decimal degrees
            </summary>
        </member>
        <member name="F:Rhino.DocObjects.AngleDisplayMode.DMS">
            <summary>
            Show angle as degree,minute,second.
            </summary>
        </member>
        <member name="F:Rhino.DocObjects.AngleDisplayMode.Grads">
            <summary>
            Show angle as grads.
            </summary>
        </member>
        <member name="T:Rhino.DocObjects.TextDisplayAlignment">
            <summary>
            Defines enumerated values for the line alignment of text.
            </summary>
            <since>5.0</since>
        </member>
        <member name="F:Rhino.DocObjects.TextDisplayAlignment.Normal">
            <summary>
            Normal alignment.
            </summary>
        </member>
        <member name="F:Rhino.DocObjects.TextDisplayAlignment.Horizontal">
            <summary>
            Horizontal alignment.
            </summary>
        </member>
        <member name="F:Rhino.DocObjects.TextDisplayAlignment.AboveLine">
            <summary>
            Above line alignment.
            </summary>
        </member>
        <member name="F:Rhino.DocObjects.TextDisplayAlignment.InLine">
            <summary>
            In line alignment.
            </summary>
        </member>
        <member name="T:Rhino.DocObjects.ObjectType">
            <summary>
            Defines binary mask values for each object type that can be found in a document.
            </summary>
            <since>5.0</since>
        </member>
        <member name="F:Rhino.DocObjects.ObjectType.None">
            <summary>
            Nothing.
            </summary>
        </member>
        <member name="F:Rhino.DocObjects.ObjectType.Point">
            <summary>
            A point.
            </summary>
        </member>
        <member name="F:Rhino.DocObjects.ObjectType.PointSet">
            <summary>
            A point set or cloud.
            </summary>
        </member>
        <member name="F:Rhino.DocObjects.ObjectType.Curve">
            <summary>
            A curve.
            </summary>
        </member>
        <member name="F:Rhino.DocObjects.ObjectType.Surface">
            <summary>
            A surface.
            </summary>
        </member>
        <member name="F:Rhino.DocObjects.ObjectType.Brep">
            <summary>
            A brep.
            </summary>
        </member>
        <member name="F:Rhino.DocObjects.ObjectType.Mesh">
            <summary>
            A mesh.
            </summary>
        </member>
        <member name="F:Rhino.DocObjects.ObjectType.Light">
            <summary>
            A rendering light.
            </summary>
        </member>
        <member name="F:Rhino.DocObjects.ObjectType.Annotation">
            <summary>
            An annotation.
            </summary>
        </member>
        <member name="F:Rhino.DocObjects.ObjectType.InstanceDefinition">
            <summary>
            A block definition.
            </summary>
        </member>
        <member name="F:Rhino.DocObjects.ObjectType.InstanceReference">
            <summary>
            A block reference.
            </summary>
        </member>
        <member name="F:Rhino.DocObjects.ObjectType.TextDot">
            <summary>
            A text dot.
            </summary>
        </member>
        <member name="F:Rhino.DocObjects.ObjectType.Grip">
            <summary>Selection filter value - not a real object type.</summary>
        </member>
        <member name="F:Rhino.DocObjects.ObjectType.Detail">
            <summary>
            A detail.
            </summary>
        </member>
        <member name="F:Rhino.DocObjects.ObjectType.Hatch">
            <summary>
            A hatch.
            </summary>
        </member>
        <member name="F:Rhino.DocObjects.ObjectType.MorphControl">
            <summary>
            A morph control.
            </summary>
        </member>
        <member name="F:Rhino.DocObjects.ObjectType.SubD">
            <summary>
            A SubD object.
            </summary>
        </member>
        <member name="F:Rhino.DocObjects.ObjectType.BrepLoop">
            <summary>
            A brep loop.
            </summary>
        </member>
        <member name="F:Rhino.DocObjects.ObjectType.BrepVertex">
            <summary>
            a brep vertex.
            </summary>
        </member>
        <member name="F:Rhino.DocObjects.ObjectType.PolysrfFilter">
            <summary>Selection filter value - not a real object type.</summary>
        </member>
        <member name="F:Rhino.DocObjects.ObjectType.EdgeFilter">
            <summary>Selection filter value - not a real object type.</summary>
        </member>
        <member name="F:Rhino.DocObjects.ObjectType.PolyedgeFilter">
            <summary>Selection filter value - not a real object type.</summary>
        </member>
        <member name="F:Rhino.DocObjects.ObjectType.MeshVertex">
            <summary>
            A mesh vertex.
            </summary>
        </member>
        <member name="F:Rhino.DocObjects.ObjectType.MeshEdge">
            <summary>
            A mesh edge.
            </summary>
        </member>
        <member name="F:Rhino.DocObjects.ObjectType.MeshFace">
            <summary>
            A mesh face.
            </summary>
        </member>
        <member name="F:Rhino.DocObjects.ObjectType.Cage">
            <summary>
            A cage.
            </summary>
        </member>
        <member name="F:Rhino.DocObjects.ObjectType.Phantom">
            <summary>
            A phantom object.
            </summary>
        </member>
        <member name="F:Rhino.DocObjects.ObjectType.ClipPlane">
            <summary>
            A clipping plane.
            </summary>
        </member>
        <member name="F:Rhino.DocObjects.ObjectType.Extrusion">
            <summary>
            An extrusion.
            </summary>
        </member>
        <member name="F:Rhino.DocObjects.ObjectType.AnyObject">
            <summary>
            All bits set.
            </summary>
        </member>
        <member name="T:Rhino.DocObjects.ObjectDecoration">
            <summary>
            Defines bit mask values to represent object decorations.
            </summary>
            <since>5.0</since>
        </member>
        <member name="F:Rhino.DocObjects.ObjectDecoration.None">
            <summary>There are no object decorations.</summary>
        </member>
        <member name="F:Rhino.DocObjects.ObjectDecoration.StartArrowhead">
            <summary>Arrow head at start.</summary>
        </member>
        <member name="F:Rhino.DocObjects.ObjectDecoration.EndArrowhead">
            <summary>Arrow head at end.</summary>
        </member>
        <member name="F:Rhino.DocObjects.ObjectDecoration.BothArrowhead">
            <summary>Arrow head at start and end.</summary>
        </member>
        <member name="T:Rhino.DocObjects.Environment">
            <summary>
            Represents an environment.
            </summary>
        </member>
        <member name="T:Rhino.DocObjects.Environment.BackgroundProjections">
            <summary>
            The available background projections.
            </summary>
            
            <since>8.0</since>
        </member>
        <member name="F:Rhino.DocObjects.Environment.BackgroundProjections.Planar">
            <summary>Planar.</summary>
        </member>
        <member name="F:Rhino.DocObjects.Environment.BackgroundProjections.Spherical">
            <summary>Spherical.</summary>
        </member>
        <member name="F:Rhino.DocObjects.Environment.BackgroundProjections.Emap">
            <summary>Environment map.</summary>
        </member>
        <member name="F:Rhino.DocObjects.Environment.BackgroundProjections.Box">
            <summary>Box.</summary>
        </member>
        <member name="F:Rhino.DocObjects.Environment.BackgroundProjections.Automatic">
            <summary>Automatic.</summary>
        </member>
        <member name="F:Rhino.DocObjects.Environment.BackgroundProjections.LightProbe">
            <summary>Light probe.</summary>
        </member>
        <member name="F:Rhino.DocObjects.Environment.BackgroundProjections.CubeMap">
            <summary>Cube map.</summary>
        </member>
        <member name="F:Rhino.DocObjects.Environment.BackgroundProjections.VerticalCrossCubeMap">
            <summary>Vertical cross cube map.</summary>
        </member>
        <member name="F:Rhino.DocObjects.Environment.BackgroundProjections.HorizontalCrossCubeMap">
            <summary>Horizontal cross cube map.</summary>
        </member>
        <member name="F:Rhino.DocObjects.Environment.BackgroundProjections.Hemispherical">
            <summary>Hemispherical.</summary>
        </member>
        <member name="M:Rhino.DocObjects.Environment.#ctor">
            <summary>
            Initializes a new environment.
            </summary>
            <since>8.0</since>
        </member>
        <member name="P:Rhino.DocObjects.Environment.BackgroundColor">
            <summary>
            <return>The background color.</return>
            </summary>
            <since>8.0</since>
        </member>
        <member name="P:Rhino.DocObjects.Environment.BackgroundImage">
            <summary>
            <return>The background image texture.</return>
            </summary>
            <since>8.0</since>
        </member>
        <member name="P:Rhino.DocObjects.Environment.BackgroundProjection">
            <summary>
            <return>The background projection.</return>
            </summary>
            <since>8.0</since>
        </member>
        <member name="M:Rhino.DocObjects.PhysicallyBasedMaterial.#ctor">
            <since>6.12</since>
        </member>
        <member name="P:Rhino.DocObjects.PhysicallyBasedMaterial.Material">
            <since>7.0</since>
        </member>
        <member name="M:Rhino.DocObjects.PhysicallyBasedMaterial.SetTexture(Rhino.DocObjects.Texture,Rhino.DocObjects.TextureType)">
            <summary>
            Set the texture that corresponds with the specified texture type for this material.
            </summary>
            <param name="texture">An instance of Rhino.DocObjects.Texture</param>
            <param name="which">Use Rhino.DocObjects.TextureType</param>
            <returns></returns>
            <since>7.0</since>
        </member>
        <member name="M:Rhino.DocObjects.PhysicallyBasedMaterial.GetTexture(Rhino.DocObjects.TextureType)">
            <summary>
            Get the texture that corresponds with the specified texture type for this material.
            </summary>
            <param name="which"></param>
            <returns></returns>
            <since>7.0</since>
        </member>
        <member name="M:Rhino.DocObjects.PhysicallyBasedMaterial.GetTextures">
            <summary>
            Get array of textures that this material uses
            </summary>
            <returns></returns>
            <since>7.0</since>
        </member>
        <member name="M:Rhino.DocObjects.PhysicallyBasedMaterial.SynchronizeLegacyMaterial">
            <since>7.0</since>
        </member>
        <member name="P:Rhino.DocObjects.PhysicallyBasedMaterial.BaseColor">
            <since>7.0</since>
        </member>
        <member name="T:Rhino.DocObjects.PhysicallyBasedMaterial.BRDFs">
            <since>7.0</since>
        </member>
        <member name="P:Rhino.DocObjects.PhysicallyBasedMaterial.BRDF">
            <since>7.0</since>
        </member>
        <member name="P:Rhino.DocObjects.PhysicallyBasedMaterial.SubsurfaceScatteringColor">
            <since>7.0</since>
        </member>
        <member name="P:Rhino.DocObjects.PhysicallyBasedMaterial.Subsurface">
            <since>7.0</since>
        </member>
        <member name="P:Rhino.DocObjects.PhysicallyBasedMaterial.SubsurfaceScatteringRadius">
            <since>7.0</since>
        </member>
        <member name="P:Rhino.DocObjects.PhysicallyBasedMaterial.Metallic">
            <since>7.0</since>
        </member>
        <member name="P:Rhino.DocObjects.PhysicallyBasedMaterial.Specular">
            <since>7.0</since>
        </member>
        <member name="P:Rhino.DocObjects.PhysicallyBasedMaterial.ReflectiveIOR">
            <since>7.0</since>
        </member>
        <member name="P:Rhino.DocObjects.PhysicallyBasedMaterial.SpecularTint">
            <since>7.0</since>
        </member>
        <member name="P:Rhino.DocObjects.PhysicallyBasedMaterial.Roughness">
            <since>7.0</since>
        </member>
        <member name="P:Rhino.DocObjects.PhysicallyBasedMaterial.Anisotropic">
            <since>7.0</since>
        </member>
        <member name="P:Rhino.DocObjects.PhysicallyBasedMaterial.AnisotropicRotation">
            <since>7.0</since>
        </member>
        <member name="P:Rhino.DocObjects.PhysicallyBasedMaterial.Sheen">
            <since>7.0</since>
        </member>
        <member name="P:Rhino.DocObjects.PhysicallyBasedMaterial.SheenTint">
            <since>7.0</since>
        </member>
        <member name="P:Rhino.DocObjects.PhysicallyBasedMaterial.Clearcoat">
            <since>7.0</since>
        </member>
        <member name="P:Rhino.DocObjects.PhysicallyBasedMaterial.ClearcoatRoughness">
            <since>7.0</since>
        </member>
        <member name="P:Rhino.DocObjects.PhysicallyBasedMaterial.OpacityIOR">
            <since>7.0</since>
        </member>
        <member name="P:Rhino.DocObjects.PhysicallyBasedMaterial.Opacity">
            <since>7.0</since>
        </member>
        <member name="P:Rhino.DocObjects.PhysicallyBasedMaterial.OpacityRoughness">
            <since>7.0</since>
        </member>
        <member name="P:Rhino.DocObjects.PhysicallyBasedMaterial.Alpha">
            <since>7.1</since>
        </member>
        <member name="P:Rhino.DocObjects.PhysicallyBasedMaterial.UseBaseColorTextureAlphaForObjectAlphaTransparencyTexture">
            <since>7.1</since>
        </member>
        <member name="P:Rhino.DocObjects.PhysicallyBasedMaterial.Emission">
            <since>7.0</since>
        </member>
        <member name="T:Rhino.DocObjects.ModelComponent">
            <summary>
            Base class for all components in a model (document) and manages the
            index, id and other information common to this type of objects.
            <para>This class parallels the C++ ON_ModelComponent.</para>
            </summary>
        </member>
        <member name="M:Rhino.DocObjects.ModelComponent.#ctor">
            <summary>
            Allows construction from inheriting classes.
            </summary>
        </member>
        <member name="M:Rhino.DocObjects.ModelComponent.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Protected constructor for internal use.
            </summary>
            <param name="info">Serialization data.</param>
            <param name="context">Serialization stream.</param>
        </member>
        <member name="M:Rhino.DocObjects.ModelComponent.DataCRC(System.UInt32)">
            <summary>
            Increments the Cyclic Redundancy Check value by this instance.
            </summary>
            <param name="currentRemainder">The current remainder value.</param>
            <returns>The updated remainder value.</returns>
            <since>6.0</since>
        </member>
        <member name="P:Rhino.DocObjects.ModelComponent.IsSystemComponent">
            <summary>
            True if this model component is a system constant.
            <para>An incomplete list of system constant model components is below:</para>
            <para></para>
            <list type="bullet">
            <item>ON_ModelComponent::Unset
            <para> </para></item>
            <item>ON_InstanceDefinition::Empty
            <para> </para></item>
            <item>ON_Linetype::Unset</item>
            <item>ON_Linetype::Continuous</item>
            <item>ON_Linetype::ByLayer</item>
            <item>ON_Linetype::ByParent
            <para> </para></item>
            <item>ON_Layer::Unset</item>
            <item>ON_Layer::Default
            <para> </para></item>
            <item>ON_TextStyle::Unset</item>
            <item>ON_TextStyle::Default</item>
            <item>ON_TextStyle::ByLayer</item>
            <item>ON_TextStyle::ByParent
            <para> </para></item>
            <item>ON_DimStyle::Unset</item>
            <item>ON_DimStyle::Default</item>
            <item>ON_DimStyle::DefaultInchDecimal</item>
            <item>ON_DimStyle::DefaultInchFractional</item>
            <item>ON_DimStyle::DefaultFootInchArchitecture</item>
            <item>ON_DimStyle::DefaultMillimeterSmall</item>
            <item>ON_DimStyle::DefaultMillimeterLarge</item>
            <item>ON_DimStyle::DefaultMillimeterArchitecture</item>
            </list>
            </summary>
            <since>6.0</since>
        </member>
        <member name="P:Rhino.DocObjects.ModelComponent.IsDeleted">
            <summary>
            true if the component is deleted.
            Deleted components are kept by the document for undo purposes.
            </summary>
            <since>8.0</since>
        </member>
        <member name="P:Rhino.DocObjects.ModelComponent.IsReference">
            <summary>
            Gets a value indicting whether this component is a referenced component. 
            Referenced components are part of referenced documents.
            </summary>
            <since>8.0</since>
        </member>
        <member name="P:Rhino.DocObjects.ModelComponent.Id">
            <summary>
            Gets or sets the ID of the current instance.
            </summary>
            <exception cref="T:System.InvalidOperationException">
            When setting the ID failed.
            This usually happened because the instance ID is already locked.
            </exception>
            <since>6.0</since>
        </member>
        <member name="M:Rhino.DocObjects.ModelComponent.ClearId">
            <summary>
            Resets the HasId property of the model component to false, if possible.
            </summary>
            <exception cref="T:System.InvalidOperationException">If the ID is locked.</exception>
            <since>6.0</since>
        </member>
        <member name="P:Rhino.DocObjects.ModelComponent.HasId">
            <summary>
            Returns a value indicating whether the component has an ID.
            </summary>
            <since>6.0</since>
        </member>
        <member name="P:Rhino.DocObjects.ModelComponent.IdIsLocked">
            <summary>
            Returns a value indicating whether the component ID is already locked.
            </summary>
            <since>6.0</since>
        </member>
        <member name="M:Rhino.DocObjects.ModelComponent.LockId">
            <summary>
            Locks the component Id property.
            </summary>
            <since>6.0</since>
        </member>
        <member name="P:Rhino.DocObjects.ModelComponent.Index">
            <summary>
            Gets or sets the model component index attribute.
            </summary>
            <exception cref="T:System.InvalidOperationException">
            When setting the Index failed.
            This usually happens because the instance Index is already locked.
            </exception>
            <since>6.0</since>
        </member>
        <member name="M:Rhino.DocObjects.ModelComponent.ClearIndex">
            <summary>
            Resets the HasIndex property of the model component to false, if possible.
            </summary>
            <exception cref="T:System.InvalidOperationException">If the index is locked.</exception>
            <since>6.0</since>
        </member>
        <member name="P:Rhino.DocObjects.ModelComponent.HasIndex">
            <summary>
            Returns a value indicating whether the component has an Index.
            </summary>
            <since>6.0</since>
        </member>
        <member name="P:Rhino.DocObjects.ModelComponent.IndexIsLocked">
            <summary>
            Returns a value indicating whether the component Index is already locked.
            </summary>
            <since>6.0</since>
        </member>
        <member name="M:Rhino.DocObjects.ModelComponent.LockIndex">
            <summary>
            Locks the component Index property.
            </summary>
            <since>6.0</since>
        </member>
        <member name="P:Rhino.DocObjects.ModelComponent.ComponentStatus">
            <summary>
            Gets or sets the component status of the model component.
            </summary>
            <since>6.0</since>
        </member>
        <member name="P:Rhino.DocObjects.ModelComponent.IsComponentStatusLocked">
            <summary>
            The component status itself can be locked. This returns an indication.
            </summary>
            <since>6.0</since>
        </member>
        <member name="M:Rhino.DocObjects.ModelComponent.IsValidComponentName(System.String)">
            <summary>
            Tests for a valid model component name.
            </summary>
            <param name="name">The string to validate.</param>
            <returns>true if the string is a valid model component name, false otherwise.</returns>
            <since>6.15</since>
        </member>
        <member name="P:Rhino.DocObjects.ModelComponent.Name">
            <summary>
            Gets or sets the name
            </summary>
            <exception cref="T:System.InvalidOperationException">
            When setting the Name failed.
            This usually happens because the instance Name is already locked.
            </exception>
            <example>
            <code source='examples\vbnet\ex_hatchcurve.vb' lang='vbnet'/>
            <code source='examples\cs\ex_hatchcurve.cs' lang='cs'/>
            <code source='examples\py\ex_hatchcurve.py' lang='py'/>
            </example>
            <since>6.0</since>
        </member>
        <member name="M:Rhino.DocObjects.ModelComponent.ClearName">
            <summary>
            Resets the HasName property of the model component to false, if possible.
            </summary>
            <exception cref="T:System.InvalidOperationException">If the name is locked.</exception>
            <since>6.0</since>
        </member>
        <member name="P:Rhino.DocObjects.ModelComponent.HasName">
            <summary>
            Returns a value indicating whether the component has a Name.
            </summary>
            <since>6.0</since>
        </member>
        <member name="P:Rhino.DocObjects.ModelComponent.NameIsLocked">
            <summary>
            Returns a value indicating whether the component Name is already locked.
            </summary>
            <since>6.0</since>
        </member>
        <member name="M:Rhino.DocObjects.ModelComponent.LockName">
            <summary>
            Locks the component Name property.
            </summary>
            <since>6.0</since>
        </member>
        <member name="P:Rhino.DocObjects.ModelComponent.DeletedName">
            <summary>
            Gets the name of a component that is deleted.
            </summary>
            <since>6.2</since>
        </member>
        <member name="P:Rhino.DocObjects.ModelComponent.NamePathSeparator">
            <summary>
            Returns the string "::". This is the string Rhino uses in layer full path names to separate the names of individual layers.
            </summary>
            <since>8.0</since>
        </member>
        <member name="P:Rhino.DocObjects.ModelComponent.ModelSerialNumber">
            <summary>
            A value identifying the model that manages this component.
            </summary>
            <remarks>
            If the component is being managed by a model, this value identifies the model.
            In Rhino, this value is the document runtime serial number.
            Typically this value is set and locked by the code that adds a component to a model.
            This value is not saved in .3dm archives.
            </remarks>
            <since>6.12</since>
        </member>
        <member name="P:Rhino.DocObjects.ModelComponent.ReferenceModelSerialNumber">
            <summary>
            When a component is in a model for reference, this value identifies the reference model.
            </summary>
            <remarks>
            Reference components are not saved in .3dm archives. 
            Typically this value is set and locked by the code that adds a component to a model.
            This value is not saved in .3dm archives.
            </remarks>
            <since>6.12</since>
        </member>
        <member name="P:Rhino.DocObjects.ModelComponent.InstanceDefinitionModelSerialNumber">
            <summary>
            When a component is in a model as part of the information required for a linked instance definition,
            this value identifies the linked instance definition reference model.
            </summary>
            <remarks>
            Reference components are not saved in .3dm archives. 
            Typically this value is set and locked by the code that adds a component to a model.
            This value is not saved in .3dm archives.
            </remarks>
            <since>6.12</since>
        </member>
        <member name="P:Rhino.DocObjects.ModelComponent.ComponentType">
            <summary>
            Gets the <see cref="T:Rhino.DocObjects.ModelComponentType"/> for this object.
            Useful in switch statements.
            </summary>
            <since>6.0</since>
        </member>
        <member name="M:Rhino.DocObjects.ModelComponent.ToString">
            <summary>
            Returns the name of the model component type, and then its name and index.
            </summary>
            <remarks>This is provided as a visual aid. Do not rely on this for serialization.</remarks>
            <returns></returns>
        </member>
        <member name="M:Rhino.DocObjects.ModelComponent.ModelComponentTypeRequiresUniqueName(Rhino.DocObjects.ModelComponentType)">
            <summary>
            Informs the developer if a particular model component type will require uniqueness within a document.
            This is currently true with render materials and model geometry; false otherwise.
            </summary>
            <param name="type">The type to check.</param>
            <returns>true with render materials and model geometry; false otherwise.</returns>
            <since>6.0</since>
        </member>
        <member name="M:Rhino.DocObjects.ModelComponent.ModelComponentTypeIgnoresCase(Rhino.DocObjects.ModelComponentType)">
            <summary>
            Informs the developer if a particular model component type will require case-ignoring searching within a document.
            This is currently true with groups; false otherwise.
            </summary>
            <param name="type">True if the component ignores case.</param>
            <since>6.0</since>
        </member>
        <member name="M:Rhino.DocObjects.ModelComponent.ModelComponentTypeIncludesParent(Rhino.DocObjects.ModelComponentType)">
            <summary>
            Informs the developer if a particular model component type will include the hash of the parent.
            </summary>
            <param name="type">True if the component includes parent hash.</param>
            <since>6.0</since>
        </member>
        <member name="T:Rhino.DocObjects.SectionStyle">
            <summary>
            SectionStyle helps define the attributes to use when drawing a section
            </summary>
        </member>
        <member name="M:Rhino.DocObjects.SectionStyle.#ctor">
            <summary>Create a new instance of a SectionStyle</summary>
            <since>8.0</since>
        </member>
        <member name="M:Rhino.DocObjects.SectionStyle.#ctor(Rhino.DocObjects.SectionStyle)">
            <summary>Create a new SetionStyle that is a copy of another SectionStyle</summary>
            <since>8.0</since>
        </member>
        <member name="P:Rhino.DocObjects.SectionStyle.ComponentType">
            <summary>
            Returns <see cref="F:Rhino.DocObjects.ModelComponentType.SectionStyle"/>.
            </summary>
            <since>8.0</since>
        </member>
        <member name="P:Rhino.DocObjects.SectionStyle.BackgroundFillMode">
            <summary>
            How the background should be filled
            </summary>
            <since>8.0</since>
        </member>
        <member name="P:Rhino.DocObjects.SectionStyle.BackgroundFillColor">
            <summary>
            Fill color to apply to the background. Default is Color.Empty which means
            get the color from the source where this section style came from (object
            attributes or layer)
            </summary>
            <since>8.0</since>
        </member>
        <member name="P:Rhino.DocObjects.SectionStyle.BackgroundFillPrintColor">
            <summary>
            Fill print color to apply to the background. Default is Color.Empty which
            means get the color from the source where this section style came from
            (object attributes or layer)
            </summary>
            <since>8.0</since>
        </member>
        <member name="P:Rhino.DocObjects.SectionStyle.BoundaryVisible">
            <summary>
            Should the boundary for this section be displayed
            </summary>
            <since>8.0</since>
        </member>
        <member name="P:Rhino.DocObjects.SectionStyle.BoundaryWidthScale">
            <summary>
            Scale applied to the boundary wire thickness
            </summary>
            <since>8.0</since>
        </member>
        <member name="P:Rhino.DocObjects.SectionStyle.BoundaryColor">
            <summary>
            Color to apply for the boundary curves. Default is Color.Empty which means
            get the color from the source where this section style came from (object
            attributes or layer)
            </summary>
            <since>8.0</since>
        </member>
        <member name="P:Rhino.DocObjects.SectionStyle.BoundaryPrintColor">
            <summary>
            Print color to apply for the boundary curves. Default is Color.Empty which
            means get the color from the source where this section style came from
            (object attributes or layer)
            </summary>
            <since>8.0</since>
        </member>
        <member name="P:Rhino.DocObjects.SectionStyle.SectionFillRule">
            <summary>
            Rule to determine when to generate a hatch pattern and fill
            </summary>
            <since>8.0</since>
        </member>
        <member name="P:Rhino.DocObjects.SectionStyle.HatchIndex">
            <summary>
            Hatch pattern to use when drawing a fill pattern
            </summary>
            <since>8.0</since>
        </member>
        <member name="P:Rhino.DocObjects.SectionStyle.HatchScale">
            <summary>
            Scale to apply to the hatch pattern
            </summary>
            <since>8.0</since>
        </member>
        <member name="P:Rhino.DocObjects.SectionStyle.HatchRotationRadians">
            <summary>
            Rotation to apply to the hatch patterh
            </summary>
            <since>8.0</since>
        </member>
        <member name="P:Rhino.DocObjects.SectionStyle.HatchPatternColor">
            <summary>
            Color to apply for the hatch pattern. Default is Color.Empty which means
            get the color from the source where this section style came from (object
            attributes or layer)
            </summary>
            <since>8.0</since>
        </member>
        <member name="P:Rhino.DocObjects.SectionStyle.HatchPatternPrintColor">
            <summary>
            Print color to apply for the hatch pattern. Default is Color.Empty which
            means get the color from the source where this section style came from
            (object attributes or layer)
            </summary>
            <since>8.0</since>
        </member>
        <member name="M:Rhino.DocObjects.SectionStyle.GetBoundaryLinetype">
            <summary>
             Get an optional custom linetype associated with this section style. If null,
             then the linetype will come from the parent attributes or layer
            </summary>
             <since>8.0</since>
        </member>
        <member name="M:Rhino.DocObjects.SectionStyle.SetBoundaryLinetype(Rhino.DocObjects.Linetype)">
            <since>8.0</since>
        </member>
        <member name="M:Rhino.DocObjects.SectionStyle.RemoveBoundaryLinetype">
            <since>8.0</since>
        </member>
        <member name="T:Rhino.DocObjects.TextureType">
            <summary>
            The TextureType controls how the pixels in the bitmap
            are interpreted.
            </summary>
            <since>5.6</since>
        </member>
        <member name="F:Rhino.DocObjects.TextureType.None">
            <summary> 
            </summary>
        </member>
        <member name="F:Rhino.DocObjects.TextureType.Bitmap">
            <summary>
            Deprecated - this should be diffuse
            </summary>
        </member>
        <member name="F:Rhino.DocObjects.TextureType.Diffuse">
            <summary>
            The diffuse color of the material, ideally the albedo.
            </summary>
        </member>
        <member name="F:Rhino.DocObjects.TextureType.Bump">
            <summary>
            bump map
            </summary>
        </member>
        <member name="F:Rhino.DocObjects.TextureType.Transparency">
            <summary>
            Deprecated - see Opacity.  This has always actually meant opacity in Rhino, so there is nothing to change.
            </summary>
        </member>
        <member name="F:Rhino.DocObjects.TextureType.Opacity">
            <summary>
            value = alpha
            </summary>
        </member>
        <member name="F:Rhino.DocObjects.TextureType.Emap">
            <summary>
            Emap/Environment texture
            </summary>
        </member>
        <member name="F:Rhino.DocObjects.TextureType.PBR_BaseColor">
            <summary>
            Physically based materials only - base color.  Re-uses diffuse texture slot.
            </summary>
        </member>
        <member name="F:Rhino.DocObjects.TextureType.PBR_Subsurface">
            <summary>
            Physically based materials only - subsurface (greyscale)
            </summary>
        </member>
        <member name="F:Rhino.DocObjects.TextureType.PBR_SubsurfaceScattering">
            <summary>
            Physically based materials only - subsurface scattering
            </summary>
        </member>
        <member name="F:Rhino.DocObjects.TextureType.PBR_SubsurfaceScatteringRadius">
            <summary>
            Physically based materials only - subsurface scattering radius (greyscale)
            </summary>
        </member>
        <member name="F:Rhino.DocObjects.TextureType.PBR_Metallic">
            <summary>
            Physically based materials only - metallic (greyscale)
            </summary>
        </member>
        <member name="F:Rhino.DocObjects.TextureType.PBR_Specular">
            <summary>
            Physically based materials only - specular (greyscale)
            </summary>
        </member>
        <member name="F:Rhino.DocObjects.TextureType.PBR_SpecularTint">
            <summary>
            Physically based materials only - specular tint (greyscale)
            </summary>
        </member>
        <member name="F:Rhino.DocObjects.TextureType.PBR_Roughness">
            <summary>
            Physically based materials only - roughness (greyscale)
            </summary>
        </member>
        <member name="F:Rhino.DocObjects.TextureType.PBR_Anisotropic">
            <summary>
            Physically based materials only - anisotropic (greyscale)
            </summary>
        </member>
        <member name="F:Rhino.DocObjects.TextureType.PBR_Anisotropic_Rotation">
            <summary>
            Physically based materials only - anisotropic rotation 0 = 0, 255 = 360
            </summary>
        </member>
        <member name="F:Rhino.DocObjects.TextureType.PBR_Sheen">
            <summary>
            Physically based materials only - sheen (greyscale)
            </summary>
        </member>
        <member name="F:Rhino.DocObjects.TextureType.PBR_SheenTint">
            <summary>
            Physically based materials only - sheen tint (greyscale)
            </summary>
        </member>
        <member name="F:Rhino.DocObjects.TextureType.PBR_Clearcoat">
            <summary>
            Physically based materials only - clearcoat (greyscale)
            </summary>
        </member>
        <member name="F:Rhino.DocObjects.TextureType.PBR_ClearcoatRoughness">
            <summary>
            Physically based materials only - clearcoat roughness (greyscale)
            </summary>
        </member>
        <member name="F:Rhino.DocObjects.TextureType.PBR_OpacityIor">
            <summary>
            Physically based materials only - ior (greyscale - remaps from 1.0 to 2.0)
            </summary>
        </member>
        <member name="F:Rhino.DocObjects.TextureType.PBR_OpacityRoughness">
            <summary>
            Physically based materials only - transparency roughness (greyscale)
            </summary>
        </member>
        <member name="F:Rhino.DocObjects.TextureType.PBR_Emission">
            <summary>
            Physically based materials only - emission (greyscale)
            </summary>
        </member>
        <member name="F:Rhino.DocObjects.TextureType.PBR_AmbientOcclusion">
            <summary>
            Physically based materials only - occlusion (greyscale)
            </summary>
        </member>
        <member name="F:Rhino.DocObjects.TextureType.PBR_Displacement">
            <summary>
            Physically based materials only - normal 8-bit RGB, alpha is ignored
            </summary>
        </member>
        <member name="F:Rhino.DocObjects.TextureType.PBR_ClearcoatBump">
            <summary>
            Physically based materials only - clearcoat normal  or bump (normal map, RGB)
            </summary>
        </member>
        <member name="F:Rhino.DocObjects.TextureType.PBR_Alpha">
            <summary>
            Physically based materials only - clearcoat normal  or bump (normal map, RGB)
            </summary>
        </member>
        <member name="T:Rhino.DocObjects.TextureCombineMode">
            <summary>
            Determines how this texture is combined with others in a material's
            texture list.
            </summary>
            <since>5.6</since>
        </member>
        <member name="F:Rhino.DocObjects.TextureCombineMode.None">
            <summary>
            </summary>
        </member>
        <member name="F:Rhino.DocObjects.TextureCombineMode.Modulate">
            <summary>
            Modulate with material diffuse color
            </summary>
        </member>
        <member name="F:Rhino.DocObjects.TextureCombineMode.Decal">
            <summary>
            Decal
            </summary>
        </member>
        <member name="F:Rhino.DocObjects.TextureCombineMode.Blend">
            <summary>
            Blend texture with others in the material
              To "add" a texture, set BlendAmount = +1
              To "subtract" a texture, set BlendAmount = -1
            </summary>
        </member>
        <member name="T:Rhino.DocObjects.TextureUvwWrapping">
            <summary>
            Defines Texture UVW wrapping modes
            </summary>
            <since>5.6</since>
        </member>
        <member name="F:Rhino.DocObjects.TextureUvwWrapping.Repeat">
            <summary>
            Repeat the texture
            </summary>
        </member>
        <member name="F:Rhino.DocObjects.TextureUvwWrapping.Clamp">
            <summary>
            Clamp the texture
            </summary>
        </member>
        <member name="T:Rhino.DocObjects.TextureFilter">
            <summary>
            Determines how the color of the image pixel is calculated when the image
            pixel corresponds to multiple texture bitmap pixels.
            </summary>
            <since>8.3</since>
        </member>
        <member name="F:Rhino.DocObjects.TextureFilter.Nearest">
            <summary>
            Nearest texture pixel is used.
            </summary>
        </member>
        <member name="F:Rhino.DocObjects.TextureFilter.Linear">
            <summary>
            Weighted average of corresponding texture pixels.
            </summary>
        </member>
        <member name="T:Rhino.DocObjects.Texture">
            <summary>
            Represents a texture that is mapped on objects.
            </summary>
        </member>
        <member name="M:Rhino.DocObjects.Texture.#ctor">
            <summary>
            Initializes a new texture.
            </summary>
            <since>5.0</since>
        </member>
        <member name="M:Rhino.DocObjects.Texture.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Protected constructor for internal use.
            </summary>
            <param name="info">Serialization data.</param>
            <param name="context">Serialization stream.</param>
        </member>
        <member name="P:Rhino.DocObjects.Texture.FileName">
            <summary>
            Gets or sets a file name that is used by this texture.
            <para>NOTE: We are moving away from string-based FileName, and suggest
            the usage of the new FileReference class.</para>
            <para>Also, this filename may well not be a path that makes sense
            on a user's computer because it was a path initially set on
            a different user's computer. If you want to get a workable path
            for this user, use the BitmapTable.Find function using this
            property.</para>
            </summary>
            <since>5.0</since>
        </member>
        <member name="P:Rhino.DocObjects.Texture.FileReference">
            <summary>
            Gets or sets a copy of the file reference that is used by this texture.
            <remarks>After the get or the set method complete,
            you own the copy you received or passed in, and can Dispose() of it.</remarks>
            </summary>
            <since>6.0</since>
        </member>
        <member name="P:Rhino.DocObjects.Texture.Id">
            <summary>
            Gets the globally unique identifier of this texture.
            </summary>
            <since>5.0</since>
        </member>
        <member name="P:Rhino.DocObjects.Texture.Enabled">
            <summary>
            If the texture is enabled then it will be visible in the rendered
            display otherwise it will not.
            </summary>
            <since>5.0</since>
        </member>
        <member name="P:Rhino.DocObjects.Texture.TextureType">
            <summary>
            Controls how the pixels in the bitmap are interpreted
            </summary>
            <since>5.6</since>
        </member>
        <member name="P:Rhino.DocObjects.Texture.MinFilter">
            <summary>
            The MinFilter setting controls how the color
            of the image pixel is calculated when the image pixel
            corresponds to multiple texture bitmap pixels.
            </summary>
            <since>8.3</since>
        </member>
        <member name="P:Rhino.DocObjects.Texture.MagFilter">
            <summary>
            The MagFilter setting controls how the color
            of the image pixel is calculated when the image pixel
            corresponds to a fraction of a texture bitmap pixel.
            </summary>
            <since>8.3</since>
        </member>
        <member name="P:Rhino.DocObjects.Texture.MappingChannelId">
            <summary>
            
            </summary>
            <since>5.10</since>
        </member>
        <member name="P:Rhino.DocObjects.Texture.ProjectionMode">
            <summary>
            How texture is projected onto geometry
            </summary>
        </member>
        <member name="P:Rhino.DocObjects.Texture.WcsProjected">
            <summary>
            Is true if this texture uses world coordinate system (WCS) projection for texture mapping.
             Notice: If this texture is used by an object that has an object coordinate system (OCS) frame
             defined on a mapping channel then that OCS frame is used instead of the WCS.
            </summary>
        </member>
        <member name="P:Rhino.DocObjects.Texture.WcsBoxProjected">
            <summary>
            Is true if this texture uses world coordinate system (WCS) box projection for texture mapping.
             Notice: If this texture is used by an object that has an object coordinate system (OCS) frame
             defined on a mapping channel then that OCS frame is used instead of the WCS.
            </summary>
        </member>
        <member name="P:Rhino.DocObjects.Texture.TextureCombineMode">
            <summary>
            Determines how this texture is combined with others in a material's
            texture list.
            </summary>
            <since>5.6</since>
        </member>
        <member name="M:Rhino.DocObjects.Texture.WrapUvwHelper(System.Int32)">
            <summary>
            Helper function for getting the ON_Texture::WRAP mode and converting
            it to a TextureUvwWrapping value.
            </summary>
            <param name="mode"></param>
            <returns></returns>
        </member>
        <member name="P:Rhino.DocObjects.Texture.WrapU">
            <summary>
            Texture wrapping mode in the U direction
            </summary>
            <since>5.6</since>
        </member>
        <member name="P:Rhino.DocObjects.Texture.WrapV">
            <summary>
            Texture wrapping mode in the V direction
            </summary>
            <since>5.6</since>
        </member>
        <member name="P:Rhino.DocObjects.Texture.WrapW">
            <summary>
            Texture wrapping mode in the W direction
            </summary>
            <since>5.6</since>
        </member>
        <member name="P:Rhino.DocObjects.Texture.ApplyUvwTransform">
            <summary>
            If true then the UVW transform is applied to the texture
            otherwise the UVW transform is ignored.
            </summary>
            <since>5.6</since>
        </member>
        <member name="P:Rhino.DocObjects.Texture.UvwTransform">
            <summary>
            Transform to be applied to each instance of this texture
            if ApplyUvw is true
            </summary>
            <since>5.6</since>
        </member>
        <member name="P:Rhino.DocObjects.Texture.Repeat">
            <summary>
            Helper for access to the repeat value encoded in UvwTransform
            </summary>
            <since>8.0</since>
        </member>
        <member name="P:Rhino.DocObjects.Texture.Offset">
            <summary>
            Helper for access to the offset value encoded in UvwTransform
            </summary>
            <since>8.0</since>
        </member>
        <member name="P:Rhino.DocObjects.Texture.Rotation">
            <summary>
            Helper for access to the rotation value encoded in UvwTransform
            </summary>
            <since>8.0</since>
        </member>
        <member name="M:Rhino.DocObjects.Texture.GetAlphaBlendValues(System.Double@,System.Double@,System.Double@,System.Double@,System.Double@)">
            <summary>
            If the TextureCombineMode is Blend, then the blending function
            for alpha is determined by
            <para>
            new alpha = constant
                        + a0*(current alpha)
                        + a1*(texture alpha)
                        + a2*min(current alpha,texture alpha)
                        + a3*max(current alpha,texture alpha)
            </para>
            </summary>
            <param name="constant"></param>
            <param name="a0"></param>
            <param name="a1"></param>
            <param name="a2"></param>
            <param name="a3"></param>
            <since>5.6</since>
        </member>
        <member name="M:Rhino.DocObjects.Texture.SetAlphaBlendValues(System.Double,System.Double,System.Double,System.Double,System.Double)">
            <summary>
            If the TextureCombineMode is Blend, then the blending function
            for alpha is determined by
            <para>
            new alpha = constant
                        + a0*(current alpha)
                        + a1*(texture alpha)
                        + a2*min(current alpha,texture alpha)
                        + a3*max(current alpha,texture alpha)
            </para>
            </summary>
            <param name="constant"></param>
            <param name="a0"></param>
            <param name="a1"></param>
            <param name="a2"></param>
            <param name="a3"></param>
            <since>5.6</since>
        </member>
        <member name="M:Rhino.DocObjects.Texture.SetRGBBlendValues(System.Drawing.Color,System.Double,System.Double,System.Double,System.Double)">
             <summary>
             If the TextureCombineMode is Blend, then the blending function
             for RGB is determined by
             <para>
             new rgb = colorcolor
                     + a0[0]*(current RGB)
                     + a1[1]*(texture RGB)
                     + a2[2]*min(current RGB,texture RGB)
                     + a3[3]*max(current RGB,texture RGB)
            </para>
             </summary>
             <param name="color"></param>
             <param name="a0"></param>
             <param name="a1"></param>
             <param name="a2"></param>
             <param name="a3"></param>
             <since>6.0</since>
        </member>
        <member name="T:Rhino.DocObjects.Custom.UserData">
            <summary>
            Provides a base class for custom classes of information which may be attached to
            geometry or attribute classes.
            </summary>
        </member>
        <member name="M:Rhino.DocObjects.Custom.UserData.Finalize">
            <summary>
            Passively reclaims unmanaged resources when the class user did not explicitly call Dispose().
            </summary>
        </member>
        <member name="M:Rhino.DocObjects.Custom.UserData.Dispose">
            <summary>
            Actively reclaims unmanaged resources that this instance uses.
            </summary>
            <since>5.0</since>
        </member>
        <member name="M:Rhino.DocObjects.Custom.UserData.Dispose(System.Boolean)">
            <summary>
            For derived class implementers.
            <para>This method is called with argument true when class user calls Dispose(), while with argument false when
            the Garbage Collector invokes the finalizer, or Finalize() method.</para>
            <para>You must reclaim all used unmanaged resources in both cases, and can use this chance to call Dispose on disposable fields if the argument is true.</para>
            <para>Also, you must call the base virtual method within your overriding method.</para>
            </summary>
            <param name="disposing">true if the call comes from the Dispose() method; false if it comes from the Garbage Collector finalizer.</param>
        </member>
        <member name="P:Rhino.DocObjects.Custom.UserData.Description">
            <summary>Descriptive name of the user data.</summary>
            <since>5.0</since>
        </member>
        <member name="P:Rhino.DocObjects.Custom.UserData.ShouldWrite">
            <summary>
            If you want to save this user data in a 3dm file, override
            ShouldWrite and return true.  If you do support serialization,
            you must also override the Read and Write functions.
            </summary>
            <since>5.0</since>
        </member>
        <member name="M:Rhino.DocObjects.Custom.UserData.Write(Rhino.FileIO.BinaryArchiveWriter)">
            <summary>Writes the content of this data to a stream archive.</summary>
            <param name="archive">An archive.</param>
            <returns>true if the data was successfully written. The default implementation always returns false.</returns>
        </member>
        <member name="M:Rhino.DocObjects.Custom.UserData.Read(Rhino.FileIO.BinaryArchiveReader)">
            <summary>Reads the content of this data from a stream archive.</summary>
            <param name="archive">An archive.</param>
            <returns>true if the data was successfully written. The default implementation always returns false.</returns>
        </member>
        <member name="M:Rhino.DocObjects.Custom.UserData.OnTransform(Rhino.Geometry.Transform)">
            <summary>
            Is called when the object associated with this data is transformed. If you override this
            function, make sure to call the base class if you want the stored Transform to be updated.
            </summary>
            <param name="transform">The transform being applied.</param>
        </member>
        <member name="M:Rhino.DocObjects.Custom.UserData.OnGetChangeSerialNumber">
             <summary>
             Is called when DataCRC on a user data is called that derives from Custom.UserData.
            
             Note that this doesn't really implement a DataCRC, but rather it'll return the
             current change serial number if the implementing class supports that, or 0 by default.
             
             Currently ArchivableDictionary supports this where each SetItem call increments the
             change serial number of the instance.
             </summary>
             <returns></returns>
        </member>
        <member name="M:Rhino.DocObjects.Custom.UserData.OnDuplicate(Rhino.DocObjects.Custom.UserData)">
            <summary>
            Is called when the object is being duplicated.
            </summary>
            <param name="source">The source data.</param>
        </member>
        <member name="M:Rhino.DocObjects.Custom.UserData.OnGetChangeSerialNumber(System.Int32,System.UInt32)">
            <summary>
            Get the current change serial number, if supported by the implement class. 0 by defauult
            if a UD is found, otherwise just the currentRemainder as given.
            
            Note that this builds on the DataCRC method to reuse it in a way for which it wasn't
            designed. Instead an increasing change serial number is returned. Increases happen on
            SetItem in ArchivableDictionary at least.
            </summary>
            <param name="serialNumber"></param>
            <param name="currentRemainder"></param>
            <returns></returns>
        </member>
        <member name="M:Rhino.DocObjects.Custom.UserData.Copy(Rhino.Runtime.CommonObject,Rhino.Runtime.CommonObject)">
            <summary>
            Expert user tool that copies user data that has a positive 
            CopyCount from the source object to a destination object.
            Generally speaking you don't need to use Copy().
            Simply rely on things like the copy constructors to do the right thing.
            </summary>
            <param name="source">A source object for the data.</param>
            <param name="destination">A destination object for the data.</param>
            <since>5.0</since>
        </member>
        <member name="M:Rhino.DocObjects.Custom.UserData.MoveUserDataFrom(Rhino.Runtime.CommonObject)">
            <summary>
            Moves the user data from objectWithUserData to a temporary data storage
            identified by the return Guid.  When MoveUserDataFrom returns, the
            objectWithUserData will not have any user data.
            </summary>
            <param name="objectWithUserData">Object with user data attached.</param>
            <returns>
            Guid identifier for storage of UserData that is held in a temporary list
            by this class. This function should be used in conjunction with MoveUserDataTo
            to transfer the user data to a different object.
            Returns Guid.Empty if there was no user data to transfer.
            </returns>
            <since>5.0</since>
        </member>
        <member name="M:Rhino.DocObjects.Custom.UserData.MoveUserDataTo(Rhino.Runtime.CommonObject,System.Guid,System.Boolean)">
            <summary>
            Moves the user data.
            <para>See <see cref="M:Rhino.DocObjects.Custom.UserData.MoveUserDataFrom(Rhino.Runtime.CommonObject)"/> for more information.</para>
            </summary>
            <param name="objectToGetUserData">Object data source.</param>
            <param name="id">Target.</param>
            <param name="append">If the data should be appended or replaced.</param>
            <since>5.0</since>
        </member>
        <member name="P:Rhino.DocObjects.Custom.UserData.Transform">
            <summary>
            Updated if user data is attached to a piece of geometry that is
            transformed and the virtual OnTransform() is not overridden.  If you
            override OnTransform() and want Transform to be updated, then call the 
            base class OnTransform() in your override.
            The default constructor sets Transform to the identity.
            </summary>
            <since>5.0</since>
        </member>
        <member name="T:Rhino.DocObjects.Custom.UnknownUserData">
            <summary>
            Represents user data with unknown origin.
            </summary>
        </member>
        <member name="M:Rhino.DocObjects.Custom.UnknownUserData.#ctor(System.IntPtr)">
            <summary>
            Constructs a new unknown data entity.
            </summary>
            <param name="pointerNativeUserData">A pointer to the entity.</param>
            <since>5.0</since>
        </member>
        <member name="T:Rhino.DocObjects.Custom.UserDataListEnumerator">
            <summary>
            Enumerator for UserDataList
            </summary>
        </member>
        <member name="M:Rhino.DocObjects.Custom.UserDataListEnumerator.#ctor(Rhino.DocObjects.Custom.UserDataList)">
            <summary>
            Create new UserDataListEnumerator
            </summary>
            <param name="udl">UserDataList to enumerate</param>
            <since>6.0</since>
        </member>
        <member name="P:Rhino.DocObjects.Custom.UserDataListEnumerator.Current">
            <summary>
            Get current UserData on the enumerator.
            </summary>
            <since>6.0</since>
        </member>
        <member name="P:Rhino.DocObjects.Custom.UserDataListEnumerator.System#Collections#IEnumerator#Current">
            <since>6.0</since>
        </member>
        <member name="M:Rhino.DocObjects.Custom.UserDataListEnumerator.Dispose">
            <summary>
            Implement Dispose(). NOP.
            </summary>
            <since>6.0</since>
        </member>
        <member name="M:Rhino.DocObjects.Custom.UserDataListEnumerator.MoveNext">
            <summary>
            Advance enumerator to next UserData item.
            </summary>
            <returns>True if there is a next item.</returns>
            <since>6.0</since>
        </member>
        <member name="M:Rhino.DocObjects.Custom.UserDataListEnumerator.Reset">
            <summary>
            Reset the enumerator
            </summary>
            <since>6.0</since>
        </member>
        <member name="T:Rhino.DocObjects.Custom.UserDataList">
            <summary>Represents a collection of user data.</summary>
        </member>
        <member name="P:Rhino.DocObjects.Custom.UserDataList.Count">
            <summary>Number of UserData objects in this list.</summary>
            <since>5.0</since>
        </member>
        <member name="M:Rhino.DocObjects.Custom.UserDataList.Remove(Rhino.DocObjects.Custom.UserData)">
            <summary>
            Remove the user-data from this list
            </summary>
            <param name="userdata"></param>
            <returns>true if the user data was successfully removed</returns>
            <since>5.6</since>
        </member>
        <member name="M:Rhino.DocObjects.Custom.UserDataList.Find(System.Type)">
            <summary>
            Finds a specific data type in this regulated collection.
            </summary>
            <param name="userdataType">A data type.</param>
            <returns>The found data, or null of nothing was found.</returns>
            <since>5.0</since>
        </member>
        <member name="P:Rhino.DocObjects.Custom.UserDataList.Item(System.Int32)">
            <summary>
            Retrieve through indexer. Read-only access.
            </summary>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="M:Rhino.DocObjects.Custom.UserDataList.Contains(System.Guid)">
            <summary>
            Checks for the existence of a specific type of user-data in this list
            Both .NET and native user-data is checked
            </summary>
            <param name="userdataId"></param>
            <returns></returns>
            <since>6.1</since>
        </member>
        <member name="M:Rhino.DocObjects.Custom.UserDataList.GetEnumerator">
            <summary>
            Get enumerator for UserDataList
            </summary>
            <returns></returns>
            <since>6.0</since>
        </member>
        <member name="M:Rhino.DocObjects.Custom.UserDataList.System#Collections#IEnumerable#GetEnumerator">
            <since>6.0</since>
        </member>
        <member name="M:Rhino.DocObjects.Custom.UserDataList.Purge">
            <summary>
            Removes all user data from this geometry.
            </summary>
            <remarks>User <see cref="M:Rhino.DocObjects.Custom.UserDataList.Remove(Rhino.DocObjects.Custom.UserData)"/> to delete a single, known, item.</remarks>
            <since>6.0</since>
        </member>
        <member name="T:Rhino.DocObjects.Custom.UserDictionary">
            <summary>
            Defines the storage data class for a <see cref="T:Rhino.Collections.ArchivableDictionary">user dictionary</see>.
            </summary>
        </member>
        <member name="P:Rhino.DocObjects.Custom.UserDictionary.Dictionary">
            <summary>
            Gets the dictionary that is associated with this class.
            <para>This dictionary is unique.</para>
            </summary>
            <since>5.0</since>
        </member>
        <member name="P:Rhino.DocObjects.Custom.UserDictionary.Description">
            <summary>
            Gets the text "RhinoCommon UserDictionary".
            </summary>
            <since>5.0</since>
        </member>
        <member name="M:Rhino.DocObjects.Custom.UserDictionary.OnDuplicate(Rhino.DocObjects.Custom.UserData)">
            <summary>
            Clones the user data.
            </summary>
            <param name="source">The source data.</param>
        </member>
        <member name="P:Rhino.DocObjects.Custom.UserDictionary.ShouldWrite">
            <summary>
            Writes this entity if the count is larger than 0.
            </summary>
            <since>5.0</since>
        </member>
        <member name="M:Rhino.DocObjects.Custom.UserDictionary.Read(Rhino.FileIO.BinaryArchiveReader)">
            <summary>
            Is called to read this entity.
            </summary>
            <param name="archive">An archive.</param>
            <returns>Always returns true.</returns>
        </member>
        <member name="M:Rhino.DocObjects.Custom.UserDictionary.Write(Rhino.FileIO.BinaryArchiveWriter)">
            <summary>
            Is called to write this entity.
            </summary>
            <param name="archive">An archive.</param>
            <returns>Always returns true.</returns>
        </member>
        <member name="M:Rhino.DocObjects.Custom.UserDictionary.OnGetChangeSerialNumber">
            <summary>
            Get current change serial number.
            </summary>
            <returns>current change serial number</returns>
        </member>
        <member name="T:Rhino.DocObjects.Custom.ClassIdAttribute">
            <summary>
            Useful for legacy UserData
            </summary>
        </member>
        <member name="M:Rhino.DocObjects.Custom.ClassIdAttribute.#ctor(System.String)">
            <summary>Initializes a class id attribute.</summary>
            <param name="id">String in the form of a Guid.</param>
            <since>6.0</since>
        </member>
        <member name="P:Rhino.DocObjects.Custom.ClassIdAttribute.Id">
            <summary>
            Gets the associated style.
            </summary>
            <since>6.0</since>
        </member>
        <member name="T:Rhino.DocObjects.ViewportInfo">
            <summary>
            Represents a viewing frustum.
            </summary>
        </member>
        <member name="M:Rhino.DocObjects.ViewportInfo.#ctor">
            <summary>
            Initializes a new instance.
            </summary>
            <since>5.0</since>
        </member>
        <member name="M:Rhino.DocObjects.ViewportInfo.#ctor(Rhino.DocObjects.ViewportInfo)">
            <summary>
             Initializes a new instance by copying values from another instance.
            </summary>
            <param name="other">The other viewport info.</param>
            <since>5.0</since>
        </member>
        <member name="P:Rhino.DocObjects.ViewportInfo.IsValidCamera">
            <summary>
            Gets a value that indicates whether the camera is valid.
            </summary>
            <since>5.0</since>
        </member>
        <member name="P:Rhino.DocObjects.ViewportInfo.IsValidFrustum">
            <summary>
            Gets a value that indicates whether the frustum is valid.
            </summary>
            <since>5.0</since>
        </member>
        <member name="P:Rhino.DocObjects.ViewportInfo.IsPerspectiveProjection">
            <summary>
            Get or set whether this projection is perspective.
            </summary>
            <since>5.0</since>
        </member>
        <member name="P:Rhino.DocObjects.ViewportInfo.IsParallelProjection">
            <summary>
            Get or set whether this projection is parallel.
            </summary>
            <since>5.0</since>
        </member>
        <member name="P:Rhino.DocObjects.ViewportInfo.IsTwoPointPerspectiveProjection">
            <summary>
            Gets a value that indicates whether this projection is a two-point perspective.
            </summary>
            <since>5.0</since>
        </member>
        <member name="M:Rhino.DocObjects.ViewportInfo.ChangeToParallelProjection(System.Boolean)">
            <summary>
            Use this function to change projections of valid viewports
            from parallel to perspective.  It will make common additional
            adjustments to the frustum and camera location so the resulting
            views are similar.  The camera direction and target point are
            not be changed.
            If the current projection is parallel and symmetricFrustum,
            FrustumIsLeftRightSymmetric() and FrustumIsTopBottomSymmetric()
            are all equal, then no changes are made and true is returned.
            </summary>
            <param name="symmetricFrustum">true if you want the resulting frustum to be symmetric.</param>
            <returns>true if the operation succeeded; otherwise, false.</returns>
            <since>5.0</since>
        </member>
        <member name="M:Rhino.DocObjects.ViewportInfo.ChangeToPerspectiveProjection(System.Double,System.Boolean,System.Double)">
            <summary>
            Use this function to change projections of valid viewports
            from parallel to perspective.  It will make common additional
            adjustments to the frustum and camera location so the resulting
            views are similar.  The camera direction and target point are
            not changed.
            If the current projection is perspective and symmetricFrustum,
            IsFrustumIsLeftRightSymmetric, and IsFrustumIsTopBottomSymmetric
            are all equal, then no changes are made and true is returned.
            </summary>
            <param name="targetDistance">
            If RhinoMath.UnsetValue this parameter is ignored.
            Otherwise it must be > 0 and indicates which plane in the current view frustum should be preserved.
            </param>
            <param name="symmetricFrustum">
            true if you want the resulting frustum to be symmetric.
            </param>
            <param name="lensLength">(pass 50.0 when in doubt)
            35 mm lens length to use when changing from parallel
            to perspective projections. If the current projection
            is perspective or lens_length is &lt;= 0.0,
            then this parameter is ignored.</param>
            <returns>true if the operation succeeded; otherwise, false.</returns>
            <since>5.0</since>
        </member>
        <member name="M:Rhino.DocObjects.ViewportInfo.ChangeToTwoPointPerspectiveProjection(System.Double,Rhino.Geometry.Vector3d,System.Double)">
            <summary>
            Changes projections of valid viewports
            to a two point perspective.  It will make common additional
            adjustments to the frustum and camera location and direction
            so the resulting views are similar.
            If the current projection is perspective and
            IsFrustumIsLeftRightSymmetric is true and
            IsFrustumIsTopBottomSymmetric is false, then no changes are
            made and true is returned.
            </summary>
            <param name="targetDistance">
            If RhinoMath.UnsetValue this parameter is ignored.  Otherwise
            it must be > 0 and indicates which plane in the current 
            view frustum should be preserved.
            </param>
            <param name="up">
            The locked up direction. Pass Vector3d.Zero if you want to use the world
            axis direction that is closest to the current up direction.
            Pass CameraY() if you want to preserve the current up direction.
            </param>
            <param name="lensLength">
            (pass 50.0 when in doubt)
            35 mm lens length to use when changing from parallel
            to perspective projections. If the current projection
            is perspective or lens_length is &lt;= 0.0,
            then this parameter is ignored.
            </param>
            <returns>true if the operation succeeded; otherwise, false.</returns>
            <since>5.0</since>
        </member>
        <member name="P:Rhino.DocObjects.ViewportInfo.CameraLocation">
            <summary>
            Gets the camera location (position) point.
            </summary>
            <since>5.0</since>
        </member>
        <member name="M:Rhino.DocObjects.ViewportInfo.SetCameraLocation(Rhino.Geometry.Point3d)">
            <summary>
            Sets the camera location (position) point.
            </summary>
            <returns>true if the operation succeeded; otherwise, false.</returns>
            <since>5.0</since>
        </member>
        <member name="P:Rhino.DocObjects.ViewportInfo.CameraDirection">
            <summary>
            Gets the direction that the camera faces.
            </summary>
            <since>5.0</since>
        </member>
        <member name="M:Rhino.DocObjects.ViewportInfo.SetCameraDirection(Rhino.Geometry.Vector3d)">
            <summary>
            Sets the direction that the camera faces.
            </summary>
            <param name="direction">A new direction.</param>
            <returns>true if the direction was set; otherwise false.</returns>
            <since>5.0</since>
        </member>
        <member name="P:Rhino.DocObjects.ViewportInfo.CameraUp">
            <summary>
            Gets the camera up vector.
            </summary>
            <since>5.0</since>
        </member>
        <member name="M:Rhino.DocObjects.ViewportInfo.SetCameraUp(Rhino.Geometry.Vector3d)">
            <summary>
            Sets the camera up vector.
            </summary>
            <param name="up">A new direction.</param>
            <returns>true if the direction was set; otherwise false.</returns>
            <since>5.0</since>
        </member>
        <member name="P:Rhino.DocObjects.ViewportInfo.IsCameraLocationLocked">
            <summary>
            Gets or sets a value that indicates whether the camera location is unmodifiable.
            </summary>
            <since>5.0</since>
        </member>
        <member name="P:Rhino.DocObjects.ViewportInfo.IsCameraDirectionLocked">
            <summary>
            Gets or sets a value that indicates whether the direction that the camera faces is unmodifiable.
            </summary>
            <since>5.0</since>
        </member>
        <member name="P:Rhino.DocObjects.ViewportInfo.IsCameraUpLocked">
            <summary>
            Gets or sets a value that indicates whether the camera up vector is unmodifiable.
            </summary>
            <since>5.0</since>
        </member>
        <member name="P:Rhino.DocObjects.ViewportInfo.IsFrustumLeftRightSymmetric">
            <summary>
            Gets or sets a value that indicates whether the camera frustum has a vertical symmetry axis.
            </summary>
            <since>5.0</since>
        </member>
        <member name="P:Rhino.DocObjects.ViewportInfo.IsFrustumTopBottomSymmetric">
            <summary>
            Gets or sets a value that indicates whether the camera frustum has a horizontal symmetry axis.
            </summary>
            <since>5.0</since>
        </member>
        <member name="M:Rhino.DocObjects.ViewportInfo.UnlockCamera">
            <summary>
            Unlocks the camera vectors and location.
            </summary>
            <since>5.0</since>
        </member>
        <member name="M:Rhino.DocObjects.ViewportInfo.UnlockFrustumSymmetry">
            <summary>
            Unlocks frustum horizontal and vertical symmetries.
            </summary>
            <since>5.0</since>
        </member>
        <member name="M:Rhino.DocObjects.ViewportInfo.GetCameraFrame(Rhino.Geometry.Point3d@,Rhino.Geometry.Vector3d@,Rhino.Geometry.Vector3d@,Rhino.Geometry.Vector3d@)">
            <summary>
            Gets location and vectors of this camera.
            </summary>
            <param name="location">An out parameter that will be filled with a point during the call.</param>
            <param name="cameraX">An out parameter that will be filled with the X vector during the call.</param>
            <param name="cameraY">An out parameter that will be filled with the Y vector during the call.</param>
            <param name="cameraZ">An out parameter that will be filled with the Z vector during the call.</param>
            <returns>true if current camera orientation is valid; otherwise false.</returns>
            <since>5.0</since>
        </member>
        <member name="P:Rhino.DocObjects.ViewportInfo.CameraX">
            <summary>
            Gets the unit "to the right" vector.
            </summary>
            <since>5.0</since>
        </member>
        <member name="P:Rhino.DocObjects.ViewportInfo.CameraY">
            <summary>
            Gets the unit "up" vector.
            </summary>
            <since>5.0</since>
        </member>
        <member name="P:Rhino.DocObjects.ViewportInfo.CameraZ">
            <summary>
            Gets the unit vector in -CameraDirection.
            </summary>
            <since>5.0</since>
        </member>
        <member name="P:Rhino.DocObjects.ViewportInfo.DefaultCameraDirection">
            <summary> Default z=up perspective camera direction </summary>
            <since>6.0</since>
        </member>
        <member name="M:Rhino.DocObjects.ViewportInfo.SetFrustum(System.Double,System.Double,System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Sets the view frustum. If FrustumSymmetryIsLocked() is true
            and left != -right or bottom != -top, then they will be
            adjusted so the resulting frustum is symmetric.
            </summary>
            <param name="left">A new left value.</param>
            <param name="right">A new right value.</param>
            <param name="bottom">A new bottom value.</param>
            <param name="top">A new top value.</param>
            <param name="nearDistance">A new near distance value.</param>
            <param name="farDistance">A new far distance value.</param>
            <returns>true if operation succeeded; otherwise, false.</returns>
            <since>5.0</since>
        </member>
        <member name="M:Rhino.DocObjects.ViewportInfo.GetFrustum(System.Double@,System.Double@,System.Double@,System.Double@,System.Double@,System.Double@)">
            <summary>
            Gets the view frustum.
            </summary>
            <param name="left">A left value that will be filled during the call.</param>
            <param name="right">A right value that will be filled during the call.</param>
            <param name="bottom">A bottom value that will be filled during the call.</param>
            <param name="top">A top value that will be filled during the call.</param>
            <param name="nearDistance">A near distance value that will be filled during the call.</param>
            <param name="farDistance">A far distance value that will be filled during the call.</param>
            <returns>true if operation succeeded; otherwise, false.</returns>
            <since>5.0</since>
        </member>
        <member name="P:Rhino.DocObjects.ViewportInfo.FrustumAspect">
            <summary>
            Setting FrustumAspect changes the larger of the frustum's width/height
            so that the resulting value of width/height matches the requested
            aspect.  The camera angle is not changed.  If you change the shape
            of the view port with a call SetScreenPort(), then you generally 
            want to call SetFrustumAspect() with the value returned by 
            GetScreenPortAspect().
            </summary>
            <since>5.0</since>
        </member>
        <member name="P:Rhino.DocObjects.ViewportInfo.FrustumCenter">
            <summary>
            Gets the frustum center point.
            </summary>
            <since>5.0</since>
        </member>
        <member name="P:Rhino.DocObjects.ViewportInfo.FrustumLeft">
            <summary>
            Gets the frustum left value. This is -right if the frustum has a vertical symmetry axis.
            <para>This number is usually negative.</para>
            </summary>
            <since>5.0</since>
        </member>
        <member name="P:Rhino.DocObjects.ViewportInfo.FrustumRight">
            <summary>
            Gets the frustum right value. This is -left if the frustum has a vertical symmetry axis.
            <para>This number is usually positive.</para>
            </summary>
            <since>5.0</since>
        </member>
        <member name="P:Rhino.DocObjects.ViewportInfo.FrustumBottom">
            <summary>
            Gets the frustum bottom value. This is -top if the frustum has a horizontal symmetry axis.
            <para>This number is usually negative.</para>
            </summary>
            <since>5.0</since>
        </member>
        <member name="P:Rhino.DocObjects.ViewportInfo.FrustumTop">
            <summary>
            Gets the frustum top value. This is -bottom if the frustum has a horizontal symmetry axis.
            <para>This number is usually positive.</para>
            </summary>
            <since>5.0</since>
        </member>
        <member name="P:Rhino.DocObjects.ViewportInfo.FrustumNear">
            <summary>
            Gets the frustum near-cutting value.
            </summary>
            <since>5.0</since>
        </member>
        <member name="P:Rhino.DocObjects.ViewportInfo.FrustumFar">
            <summary>
            Gets the frustum far-cutting value.
            </summary>
            <since>5.0</since>
        </member>
        <member name="P:Rhino.DocObjects.ViewportInfo.FrustumWidth">
            <summary>
            Gets the frustum width. This is <see cref="P:Rhino.DocObjects.ViewportInfo.FrustumRight"/> - <see cref="P:Rhino.DocObjects.ViewportInfo.FrustumLeft"/>.
            </summary>
            <since>5.0</since>
        </member>
        <member name="P:Rhino.DocObjects.ViewportInfo.FrustumHeight">
            <summary>
            Gets the frustum height. This is <see cref="P:Rhino.DocObjects.ViewportInfo.FrustumTop"/> - <see cref="P:Rhino.DocObjects.ViewportInfo.FrustumBottom"/>.
            </summary>
            <since>5.0</since>
        </member>
        <member name="P:Rhino.DocObjects.ViewportInfo.FrustumMinimumDiameter">
            <summary>
            Gets the frustum minimum diameter, or the minimum between <see cref="P:Rhino.DocObjects.ViewportInfo.FrustumWidth"/> and <see cref="P:Rhino.DocObjects.ViewportInfo.FrustumHeight"/>.
            </summary>
            <since>5.0</since>
        </member>
        <member name="P:Rhino.DocObjects.ViewportInfo.FrustumMaximumDiameter">
            <summary>
            Gets the frustum maximum diameter, or the maximum between <see cref="P:Rhino.DocObjects.ViewportInfo.FrustumWidth"/> and <see cref="P:Rhino.DocObjects.ViewportInfo.FrustumHeight"/>.
            </summary>
            <since>5.0</since>
        </member>
        <member name="M:Rhino.DocObjects.ViewportInfo.SetFrustumNearFar(Rhino.Geometry.BoundingBox)">
            <summary>
            Sets the frustum near and far using a bounding box.
            </summary>
            <param name="boundingBox">A bounding box to use.</param>
            <returns>true if operation succeeded; otherwise, false.</returns>
            <since>5.0</since>
        </member>
        <member name="M:Rhino.DocObjects.ViewportInfo.SetFrustumNearFar(Rhino.Geometry.Point3d,System.Double)">
            <summary>
            Sets the frustum near and far using a center point and radius.
            </summary>
            <param name="center">A center point.</param>
            <param name="radius">A radius value.</param>
            <returns>true if operation succeeded; otherwise, false.</returns>
            <since>5.0</since>
        </member>
        <member name="M:Rhino.DocObjects.ViewportInfo.SetFrustumNearFar(System.Double,System.Double)">
            <summary>
            Sets the frustum near and far distances using two values.
            </summary>
            <param name="nearDistance">The new near distance.</param>
            <param name="farDistance">The new far distance.</param>
            <returns>true if operation succeeded; otherwise, false.</returns>
            <since>5.0</since>
        </member>
        <member name="M:Rhino.DocObjects.ViewportInfo.ChangeToSymmetricFrustum(System.Boolean,System.Boolean,System.Double)">
            <summary>
            If needed, adjusts the current frustum so it has the 
            specified symmetries and adjust the camera location
            so the target plane remains visible.
            </summary>
            <param name="isLeftRightSymmetric">If true, the frustum will be adjusted so left = -right.</param>
            <param name="isTopBottomSymmetric">If true, the frustum will be adjusted so top = -bottom.</param>
            <param name="targetDistance">
            If projection is not perspective or target_distance is RhinoMath.UnsetValue,
            then this parameter is ignored. If the projection is perspective and targetDistance
            is not RhinoMath.UnsetValue, then it must be > 0.0 and it is used to determine
            which plane in the old frustum will appear unchanged in the new frustum.
            </param>
            <returns>
            Returns true if the viewport has now a frustum with the specified symmetries.
            </returns>
            <since>5.0</since>
        </member>
        <member name="M:Rhino.DocObjects.ViewportInfo.GetPointDepth(Rhino.Geometry.Point3d,System.Double@)">
            <summary>
            Gets the clipping distance of a point. This function ignores the
            current value of the viewport's near and far settings. If
            the viewport is a perspective projection, then it intersects
            the semi infinite frustum volume with the bounding box and
            returns the near and far distances of the intersection.
            If the viewport is a parallel projection, it intersects the
            infinite view region with the bounding box and returns the
            near and far distances of the projection.
            </summary>
            <param name="point">A point to measure.</param>
            <param name="distance">distance of the point (can be &lt; 0)</param>
            <returns>true if the bounding box intersects the view frustum and
            near_dist/far_dist were set.
            false if the bounding box does not intersect the view frustum.</returns>
            <since>5.0</since>
        </member>
        <member name="M:Rhino.DocObjects.ViewportInfo.GetBoundingBoxDepth(Rhino.Geometry.BoundingBox,System.Double@,System.Double@)">
            <summary>
            Gets near and far clipping distances of a bounding box.
            This function ignores the current value of the viewport's 
            near and far settings. If the viewport is a perspective
            projection, the it intersects the semi infinite frustum
            volume with the bounding box and returns the near and far
            distances of the intersection.  If the viewport is a parallel
            projection, it intersects the infinite view region with the
            bounding box and returns the near and far distances of the
            projection.
            </summary>
            <param name="bbox">The bounding box to sample.</param>
            <param name="nearDistance">Near distance of the box. This value can be zero or 
            negative when the camera location is inside box.</param>
            <param name="farDistance">Far distance of the box. This value can be equal to 
            near_dist, zero or negative when the camera location is in front of the bounding box.</param>
            <returns>true if the bounding box intersects the view frustum and near_dist/far_dist were set. 
            false if the bounding box does not intersect the view frustum.</returns>
            <since>5.0</since>
        </member>
        <member name="M:Rhino.DocObjects.ViewportInfo.GetSphereDepth(Rhino.Geometry.Sphere,System.Double@,System.Double@)">
            <summary>
            Gets near and far clipping distances of a bounding sphere.
            </summary>
            <param name="sphere">The sphere to sample.</param>
            <param name="nearDistance">Near distance of the sphere (can be &lt; 0)</param>
            <param name="farDistance">Far distance of the sphere (can be equal to near_dist)</param>
            <returns>true if the sphere intersects the view frustum and near_dist/far_dist were set.
            false if the sphere does not intersect the view frustum.</returns>
            <since>5.0</since>
        </member>
        <member name="M:Rhino.DocObjects.ViewportInfo.SetFrustumNearFar(System.Double,System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Sets near and far clipping distance subject to constraints.
            </summary>
            <param name="nearDistance">(>0) desired near clipping distance.</param>
            <param name="farDistance">(>near_dist) desired near clipping distance.</param>
            <param name="minNearDistance">
            If min_near_dist &lt;= 0.0, it is ignored.
            If min_near_dist &gt; 0 and near_dist &lt; min_near_dist, then the frustum's near_dist will be increased to min_near_dist.
            </param>
            <param name="minNearOverFar">
            If min_near_over_far &lt;= 0.0, it is ignored.
            If near_dist &lt; far_dist*min_near_over_far, then
            near_dist is increased and/or far_dist is decreased
            so that near_dist = far_dist*min_near_over_far.
            If near_dist &lt; target_dist &lt; far_dist, then near_dist
            near_dist is increased and far_dist is decreased so that
            projection precision will be good at target_dist.
            Otherwise, near_dist is simply set to 
            far_dist*min_near_over_far.
            </param>
            <param name="targetDistance">If target_dist &lt;= 0.0, it is ignored.
            If target_dist &gt; 0, it is used as described in the
            description of the min_near_over_far parameter.</param>
            <returns>true if operation succeeded; otherwise, false.</returns>
            <since>5.0</since>
        </member>
        <member name="P:Rhino.DocObjects.ViewportInfo.FrustumNearPlane">
            <summary>
            Gets near clipping plane if camera and frustum
            are valid.  The plane's frame is the same as the camera's
            frame.  The origin is located at the intersection of the
            camera direction ray and the near clipping plane. The plane's
            normal points out of the frustum towards the camera
            location.
            </summary>
            <since>5.0</since>
        </member>
        <member name="P:Rhino.DocObjects.ViewportInfo.FrustumFarPlane">
            <summary>
            Gets far clipping plane if camera and frustum
            are valid.  The plane's frame is the same as the camera's
            frame.  The origin is located at the intersection of the
            camera direction ray and the far clipping plane. The plane's
            normal points into the frustum towards the camera location.
            </summary>
            <since>5.0</since>
        </member>
        <member name="P:Rhino.DocObjects.ViewportInfo.FrustumLeftPlane">
            <summary>
            Gets the frustum left plane that separates visible from off-screen.
            </summary>
            <since>5.0</since>
        </member>
        <member name="P:Rhino.DocObjects.ViewportInfo.FrustumRightPlane">
            <summary>
            Gets the frustum right plane that separates visible from off-screen.
            </summary>
            <since>5.0</since>
        </member>
        <member name="P:Rhino.DocObjects.ViewportInfo.FrustumBottomPlane">
            <summary>
            Gets the frustum bottom plane that separates visible from off-screen.
            </summary>
            <since>5.0</since>
        </member>
        <member name="P:Rhino.DocObjects.ViewportInfo.FrustumTopPlane">
            <summary>
            Gets the frustum top plane that separates visible from off-screen.
            </summary>
            <since>5.0</since>
        </member>
        <member name="M:Rhino.DocObjects.ViewportInfo.GetNearPlaneCorners">
            <summary>
            Gets the corners of near clipping plane rectangle.
            4 points are returned in the order of bottom left, bottom right,
            top left, top right.
            </summary>
            <returns>
            Four corner points on success.
            Empty array if viewport is not valid.
            </returns>
            <since>5.0</since>
        </member>
        <member name="M:Rhino.DocObjects.ViewportInfo.GetFarPlaneCorners">
            <summary>
            Gets the corners of far clipping plane rectangle.
            4 points are returned in the order of bottom left, bottom right,
            top left, top right.
            </summary>
            <returns>
            Four corner points on success.
            Empty array if viewport is not valid.
            </returns>
            <since>5.0</since>
        </member>
        <member name="M:Rhino.DocObjects.ViewportInfo.GetFramePlaneCorners(System.Double)">
            <summary>
            Gets the corners of the frame plane rectangle at specified depth.
            4 points are returned in the order of bottom left, bottom right,
            top left, top right.
            </summary>
            <param name="depth">Distance from camera location.</param>
            <returns>
            Four corner points on success.
            Empty array if viewport is not valid.
            </returns>
            <since>8.0</since>
        </member>
        <member name="M:Rhino.DocObjects.ViewportInfo.SetScreenPort(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Location of viewport in pixels.
            These are provided so you can set the port you are using
            and get the appropriate transformations to and from
            screen space.
            // For a Windows window
            /      int width = width of window client area in pixels;
            /      int height = height of window client area in pixels;
            /      port_left = 0;
            /      port_right = width;
            /      port_top = 0;
            /      port_bottom = height;
            /      port_near = 0;
            /      port_far = 1;
            /      SetScreenPort( port_left, port_right, 
            /                     port_bottom, port_top, 
            /                     port_near, port_far );
            </summary>
            <param name="left">A left value.</param>
            <param name="right">A left value. (port_left != port_right)</param>
            <param name="bottom">A bottom value.</param>
            <param name="top">A top value. (port_top != port_bottom)</param>
            <param name="near">A near value.</param>
            <param name="far">A far value.</param>
            <returns>true if input is valid.</returns>
            <since>5.0</since>
        </member>
        <member name="M:Rhino.DocObjects.ViewportInfo.SetScreenPort(System.Drawing.Rectangle,System.Int32,System.Int32)">
            <summary>
            Gets the location of viewport in pixels.
            <para>See value meanings in <see cref="M:Rhino.DocObjects.ViewportInfo.SetScreenPort(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">SetScreenPort</see>.</para>
            </summary>
            <param name="windowRectangle">A new rectangle.</param>
            <param name="near">The near value.</param>
            <param name="far">The far value.</param>
            <returns>true if input is valid.</returns>
            <since>5.0</since>
        </member>
        <member name="M:Rhino.DocObjects.ViewportInfo.SetScreenPort(System.Drawing.Rectangle)">
            <summary>
            Gets the location of viewport in pixels.
            <para>See value meanings in <see cref="M:Rhino.DocObjects.ViewportInfo.SetScreenPort(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">SetScreenPort</see>.</para>
            </summary>
            <param name="windowRectangle">A new rectangle.</param>
            <returns>true if input is valid.</returns>
            <since>5.0</since>
        </member>
        <member name="M:Rhino.DocObjects.ViewportInfo.GetScreenPortLocation(System.Int32@,System.Int32@,System.Int32@,System.Int32@)">
            <summary>
            Get the location of viewport in pixels (non System.Drawing version of GetScreenPort)
            </summary>
            <param name="left"></param>
            <param name="top"></param>
            <param name="right"></param>
            <param name="bottom"></param>
            <since>6.0</since>
        </member>
        <member name="M:Rhino.DocObjects.ViewportInfo.GetScreenPort(System.Int32@,System.Int32@)">
            <summary>
            Gets the location of viewport in pixels.
            <para>See value meanings in <see cref="M:Rhino.DocObjects.ViewportInfo.SetScreenPort(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">SetScreenPort</see>.</para>
            </summary>
            <param name="near">The near value. This out parameter is assigned during the call.</param>
            <param name="far">The far value. This out parameter is assigned during the call.</param>
            <returns>The rectangle, or <see cref="F:System.Drawing.Rectangle.Empty">Empty</see> rectangle on error.</returns>
            <since>5.0</since>
        </member>
        <member name="M:Rhino.DocObjects.ViewportInfo.GetScreenPort">
            <summary>
            Gets the location of viewport in pixels.
            See documentation for <see cref="M:Rhino.DocObjects.ViewportInfo.SetScreenPort(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">SetScreenPort</see>.
            </summary>
            <returns>The rectangle, or <see cref="F:System.Drawing.Rectangle.Empty">Empty</see> rectangle on error.</returns>
            <since>5.0</since>
        </member>
        <member name="P:Rhino.DocObjects.ViewportInfo.ScreenPort">
            <summary>
            Get or set the screen port. <see cref="M:Rhino.DocObjects.ViewportInfo.SetScreenPort(System.Drawing.Rectangle)"/> and <seealso cref="M:Rhino.DocObjects.ViewportInfo.GetScreenPort"/>
            </summary>
            <since>6.0</since>
        </member>
        <member name="P:Rhino.DocObjects.ViewportInfo.ScreenPortAspect">
            <summary>
            Gets the screen aspect ratio.
            <para>This is width / height.</para>
            </summary>
            <since>5.0</since>
        </member>
        <member name="M:Rhino.DocObjects.ViewportInfo.GetCameraAngles(System.Double@,System.Double@,System.Double@)">
            <summary>
            Gets the field of view angles.
            </summary>
            <param name="halfDiagonalAngleRadians">1/2 of diagonal subtended angle. This out parameter is assigned during this call.</param>
            <param name="halfVerticalAngleRadians">1/2 of vertical subtended angle. This out parameter is assigned during this call.</param>
            <param name="halfHorizontalAngleRadians">1/2 of horizontal subtended angle. This out parameter is assigned during this call.</param>
            <returns>true if the operation succeeded; otherwise, false.</returns>
            <since>5.0</since>
        </member>
        <member name="P:Rhino.DocObjects.ViewportInfo.CameraAngle">
            <summary>
            Gets or sets the 1/2 smallest angle. See <see cref="M:Rhino.DocObjects.ViewportInfo.GetCameraAngles(System.Double@,System.Double@,System.Double@)"/> for more information.
            </summary>
            <since>5.0</since>
        </member>
        <member name="P:Rhino.DocObjects.ViewportInfo.Camera35mmLensLength">
            <summary>
            This property assumes the camera is horizontal and crop the
            film rather than the image when the aspect of the frustum
            is not 36/24.  (35mm film is 36mm wide and 24mm high.)
            Setting preserves camera location,
            changes the frustum, but maintains the frustum's aspect.
            </summary>
            <since>5.0</since>
        </member>
        <member name="M:Rhino.DocObjects.ViewportInfo.GetXform(Rhino.DocObjects.CoordinateSystem,Rhino.DocObjects.CoordinateSystem)">
            <summary>
            Computes a transform from a coordinate system to another.
            </summary>
            <param name="sourceSystem">The coordinate system to map from.</param>
            <param name="destinationSystem">The coordinate system to map into.</param>
            <returns>The 4x4 transformation matrix (acts on the left).</returns>
            <since>5.0</since>
        </member>
        <member name="M:Rhino.DocObjects.ViewportInfo.GetFrustumLine(System.Double,System.Double)">
            <summary>
            Gets the world coordinate line in the view frustum
            that projects to a point on the screen.
            </summary>
            <param name="screenX">(screenx,screeny) = screen location.</param>
            <param name="screenY">(screenx,screeny) = screen location.</param>
            <returns>3d world coordinate line segment starting on the near clipping plane and ending on the far clipping plane.</returns>
            <since>5.1</since>
        </member>
        <member name="M:Rhino.DocObjects.ViewportInfo.GetFrustumLine(System.Drawing.Point)">
            <summary>
            Gets the world coordinate line in the view frustum
            that projects to a point on the screen.
            </summary>
            <param name="screenPoint">screen location</param>
            <returns>3d world coordinate line segment starting on the near clipping plane and ending on the far clipping plane.</returns>
            <since>5.1</since>
        </member>
        <member name="M:Rhino.DocObjects.ViewportInfo.GetFrustumLine(System.Drawing.PointF)">
            <summary>
            Gets the world coordinate line in the view frustum
            that projects to a point on the screen.
            </summary>
            <param name="screenPoint">screen location</param>
            <returns>3d world coordinate line segment starting on the near clipping plane and ending on the far clipping plane.</returns>
            <since>5.1</since>
        </member>
        <member name="M:Rhino.DocObjects.ViewportInfo.GetWorldToScreenScale(Rhino.Geometry.Point3d)">
            <summary>
            Gets the scale factor from point in frustum to screen scale.
            </summary>
            <param name="pointInFrustum">point in viewing frustum.</param>
            <returns>number of pixels per world unit at the 3d point.</returns>
            <since>5.1</since>
        </member>
        <member name="M:Rhino.DocObjects.ViewportInfo.Extents(System.Double,Rhino.Geometry.BoundingBox)">
            <summary>
            Extends this viewport view to include a bounding box.
            <para>Use Extents() as a quick way to set a viewport to so that bounding
            volume is inside of a viewports frustum.
            The view angle is used to determine the position of the camera.</para>
            </summary>
            <param name="halfViewAngleRadians">1/2 smallest subtended view angle in radians.</param>
            <param name="bbox">A bounding box in 3d world coordinates.</param>
            <returns>true if the operation succeeded; otherwise, false.</returns>
            <since>5.0</since>
        </member>
        <member name="M:Rhino.DocObjects.ViewportInfo.Extents(System.Double,Rhino.Geometry.Sphere)">
            <summary>
            Extends this viewport view to include a sphere.
            <para>Use Extents() as a quick way to set a viewport to so that bounding
            volume is inside of a viewports frustum.
            The view angle is used to determine the position of the camera.</para>
            </summary>
            <param name="halfViewAngleRadians">1/2 smallest subtended view angle in radians.</param>
            <param name="sphere">A sphere in 3d world coordinates.</param>
            <returns>true if the operation succeeded; otherwise, false.</returns>
            <since>5.0</since>
        </member>
        <member name="M:Rhino.DocObjects.ViewportInfo.ZoomToScreenRect(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Zooms to a screen zone.
            <para>View changing from screen input points. Handy for
            using a mouse to manipulate a view.
            ZoomToScreenRect() may change camera and frustum settings.</para>
            </summary>
            <param name="left">Screen coordinate.</param>
            <param name="top">Screen coordinate.</param>
            <param name="right">Screen coordinate.</param>
            <param name="bottom">Screen coordinate.</param>
            <returns>true if the operation succeeded; otherwise, false.</returns>
            <since>5.0</since>
        </member>
        <member name="M:Rhino.DocObjects.ViewportInfo.ZoomToScreenRect(System.Drawing.Rectangle)">
            <summary>
            Zooms to a screen zone.
            <para>View changing from screen input points. Handy for
            using a mouse to manipulate a view.
            ZoomToScreenRect() may change camera and frustum settings.</para>
            </summary>
            <param name="windowRectangle">The new window rectangle in screen space.</param>
            <returns>true if the operation succeeded; otherwise, false.</returns>
            <since>5.0</since>
        </member>
        <member name="M:Rhino.DocObjects.ViewportInfo.DollyCamera(Rhino.Geometry.Vector3d)">
            <summary>
            DollyCamera() does not update the frustum's clipping planes.
            To update the frustum's clipping planes call DollyFrustum(d)
            with d = dollyVector o cameraFrameZ.  To convert screen locations
            into a dolly vector, use GetDollyCameraVector().
            Does not update frustum.  To update frustum use DollyFrustum(d) with d = dollyVector o cameraFrameZ.
            </summary>
            <param name="dollyVector">dolly vector in world coordinates.</param>
            <returns>true if the operation succeeded; otherwise, false.</returns>
            <since>5.0</since>
        </member>
        <member name="M:Rhino.DocObjects.ViewportInfo.GetDollyCameraVector(System.Int32,System.Int32,System.Int32,System.Int32,System.Double)">
            <summary>
            Gets a world coordinate dolly vector that can be passed to DollyCamera().
            </summary>
            <param name="screenX0">Screen coordinates of start point.</param>
            <param name="screenY0">Screen coordinates of start point.</param>
            <param name="screenX1">Screen coordinates of end point.</param>
            <param name="screenY1">Screen coordinates of end point.</param>
            <param name="projectionPlaneDistance">Distance of projection plane from camera. When in doubt, use 0.5*(frus_near+frus_far).</param>
            <returns>The world coordinate dolly vector.</returns>
            <since>5.0</since>
        </member>
        <member name="M:Rhino.DocObjects.ViewportInfo.GetDollyCameraVector(System.Drawing.Point,System.Drawing.Point,System.Double)">
            <summary>
            Gets a world coordinate dolly vector that can be passed to DollyCamera().
            </summary>
            <param name="screen0">Start point.</param>
            <param name="screen1">End point.</param>
            <param name="projectionPlaneDistance">Distance of projection plane from camera. When in doubt, use 0.5*(frus_near+frus_far).</param>
            <returns>The world coordinate dolly vector.</returns>
            <since>5.0</since>
        </member>
        <member name="M:Rhino.DocObjects.ViewportInfo.DollyFrustum(System.Double)">
            <summary>
            Moves the frustum clipping planes.
            </summary>
            <param name="dollyDistance">Distance to move in camera direction.</param>
            <returns>true if the operation succeeded; otherwise, false.</returns>
            <since>5.0</since>
        </member>
        <member name="M:Rhino.DocObjects.ViewportInfo.DollyExtents(System.Collections.Generic.IEnumerable{Rhino.Geometry.GeometryBase},System.Double)">
            <summary>
            Dolly the camera location and so that the view frustum contains
            all of the document objects that can be seen in view.
            If the projection is perspective, the camera angle is not changed.
            </summary>
            <param name="geometry"></param>
            <param name="border">
            If border > 1.0, then the frustum in enlarged by this factor
            to provide a border around the view.  1.1 works well for
            parallel projections; 0.0 is suggested for perspective projections.
            </param>
            <returns>True if successful.</returns>
            <since>5.6</since>
        </member>
        <member name="M:Rhino.DocObjects.ViewportInfo.DollyExtents(Rhino.Geometry.BoundingBox,System.Double)">
            <summary>
            Dolly the camera location and so that the view frustum contains
            all of the document objects that can be seen in view.
            If the projection is perspective, the camera angle is not changed.
            </summary>
            <param name="cameraCoordinateBoundingBox"></param>
            <param name="border">
            If border > 1.0, then the frustum in enlarged by this factor
            to provide a border around the view.  1.1 works well for
            parallel projections; 0.0 is suggested for perspective projections.
            </param>
            <returns>True if successful.</returns>
            <since>5.6</since>
        </member>
        <member name="P:Rhino.DocObjects.ViewportInfo.ViewScale">
            <summary>
            Applies scaling factors to parallel projection clipping coordinates
            by setting the m_clip_mod transformation. 
            If you want to compress the view projection across the viewing
            plane, then set x = 0.5, y = 1.0, and z = 1.0.
            </summary>
            <since>5.0</since>
        </member>
        <member name="M:Rhino.DocObjects.ViewportInfo.SetViewScale(System.Double,System.Double,System.Double)">
            <summary>
            Set scaling applied for this viewport projection. For reflected
            projections, call with values 1,1,-1
            </summary>
            <param name="scaleX"></param>
            <param name="scaleY"></param>
            <param name="scaleZ"></param>
            <since>8.0</since>
        </member>
        <member name="M:Rhino.DocObjects.ViewportInfo.GetViewScale">
            <summary>
            Get scaling applied to this viewport projection. Reflected ceiling projections
            will return the values 1,1,-1
            </summary>
            <returns></returns>
            <since>8.0</since>
        </member>
        <member name="M:Rhino.DocObjects.ViewportInfo.FrustumCenterPoint(System.Double)">
            <summary>
            Return a point on the central axis of the view frustum.
            This point is a good choice for a general purpose target point.
            </summary>
            <param name="targetDistance">If targetDistance > 0.0, then the distance from the returned
            point to the camera plane will be targetDistance. Note that
            if the frustum is not symmetric, the distance from the
            returned point to the camera location will be larger than
            targetDistance.
            If targetDistance == ON_UNSET_VALUE and the frustum
            is valid with near > 0.0, then 0.5*(near + far) will be used
            as the targetDistance.</param>
            <returns>A point on the frustum's central axis.  If the viewport or input
            is not valid, then ON_3dPoint::UnsetPoint is returned.</returns>
            <since>5.0</since>
        </member>
        <member name="P:Rhino.DocObjects.ViewportInfo.TargetPoint">
            <summary>
            The current value of the target point.  This point does not play
            a role in the view projection calculations.  It can be used as a 
            fixed point when changing the camera so the visible regions of the
            before and after frustums both contain the region of interest.
            The default constructor sets this point on ON_3dPoint::UnsetPoint.
            You must explicitly call one SetTargetPoint() functions to set
            the target point.
            </summary>
            <since>5.0</since>
        </member>
        <member name="M:Rhino.DocObjects.ViewportInfo.TargetDistance(System.Boolean)">
            <summary>
            Gets the distance from the target point to the camera plane.
            Note that if the frustum is not symmetric, then this distance
            is shorter than the distance from the target to the camera location.
            </summary>
            <param name="useFrustumCenterFallback">If bUseFrustumCenterFallback is false and the target point is
            not valid, then ON_UNSET_VALUE is returned.
            If bUseFrustumCenterFallback is true and the frustum is valid
            and current target point is not valid or is behind the camera,
            then 0.5*(near + far) is returned.</param>
            <returns>Shortest signed distance from camera plane to target point.
            If the target point is on the visible side of the camera,
            a positive value is returned.  ON_UNSET_VALUE is returned
            when the input of view is not valid.</returns>
            <since>5.0</since>
        </member>
        <member name="P:Rhino.DocObjects.ViewportInfo.PerspectiveMinNearOverFar">
            <summary>
            Expert user function to control the minimum
            ratio of near/far when perspective projections
            are begin used.
            </summary>
            <since>7.0</since>
        </member>
        <member name="P:Rhino.DocObjects.ViewportInfo.PerspectiveMinNearDist">
            <summary>
            Expert user function to control the minimum
            value of near when perspective projections
            are being used.
            </summary>
            <since>7.0</since>
        </member>
        <member name="P:Rhino.DocObjects.ViewportInfo.Id">
            <summary>
            Sets the viewport's id to the value used to 
            uniquely identify this viewport.
            There is no approved way to change the viewport 
            id once it is set in order to maintain consistency
            across multiple viewports and those routines that 
            manage them.
            </summary>
            <since>5.0</since>
        </member>
        <member name="M:Rhino.DocObjects.ViewportInfo.TransformCamera(Rhino.Geometry.Transform)">
            <summary>
            Transforms the view camera location, direction, and up.
            </summary>
            <param name="xform">Transformation to apply to camera.</param>
            <returns>True if a valid camera was transformed, false if
            invalid camera, frustum, or transformation.</returns>
            <since>7.0</since>
        </member>
        <member name="M:Rhino.DocObjects.ViewportInfo.RotateCamera(System.Double,Rhino.Geometry.Vector3d,Rhino.Geometry.Point3d)">
            <summary>
            Rotates the view camera.
            </summary>
            <param name="rotationAngleRadians">The amount to rotate expressed in radians.</param>
            <param name="rotationAxis">The axis to rotate around.</param>
            <param name="rotationCenter">The point to rotate around.</param>
            <returns>True if rotation is successful, false otherwise.</returns>
            <since>7.0</since>
        </member>
        <member name="T:Rhino.DocObjects.BitmapEntry">
            <summary>
            Rhino.DocObjects.Tables.BitmapTable entry
            </summary>
        </member>
        <member name="M:Rhino.DocObjects.BitmapEntry.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            serialization constructor
            </summary>
            <param name="info"></param>
            <param name="context"></param>
        </member>
        <member name="P:Rhino.DocObjects.BitmapEntry.ComponentType">
            <summary>
            Returns <see cref="F:Rhino.DocObjects.ModelComponentType.Image"/>.
            </summary>
            <since>6.0</since>
        </member>
        <member name="P:Rhino.DocObjects.BitmapEntry.IsReference">
            <summary>
            Gets a value indicting whether this bitmap is a referenced bitmap. 
            Referenced bitmaps are part of referenced documents.
            </summary>
            <since>5.1</since>
        </member>
        <member name="P:Rhino.DocObjects.BitmapEntry.FileName">
            <summary>The name of this bitmap.</summary>
            <since>5.1</since>
        </member>
        <member name="M:Rhino.DocObjects.BitmapEntry.Save(System.String)">
            <summary>
            
            </summary>
            <param name="fileName"></param>
            <returns></returns>
            <since>5.1</since>
        </member>
        <member name="M:Rhino.DocObjects.FontQuartet.#ctor(System.String,System.Boolean,System.Boolean,System.Boolean,System.Boolean)">
            <since>6.26</since>
        </member>
        <member name="P:Rhino.DocObjects.FontQuartet.QuartetName">
            <since>6.7</since>
        </member>
        <member name="P:Rhino.DocObjects.FontQuartet.HasRegularFont">
            <since>6.7</since>
        </member>
        <member name="P:Rhino.DocObjects.FontQuartet.HasBoldFont">
            <since>6.7</since>
        </member>
        <member name="P:Rhino.DocObjects.FontQuartet.HasItalicFont">
            <since>6.7</since>
        </member>
        <member name="P:Rhino.DocObjects.FontQuartet.HasBoldItalicFont">
            <since>6.7</since>
        </member>
        <member name="M:Rhino.DocObjects.Group.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Serialization constructor
            </summary>
            <param name="info">Info.</param>
            <param name="context">The context.</param>
        </member>
        <member name="P:Rhino.DocObjects.Group.ComponentType">
            <summary>
            Returns <see cref="F:Rhino.DocObjects.ModelComponentType.Group"/>.
            </summary>
            <since>6.0</since>
        </member>
        <member name="M:Rhino.DocObjects.Group.SetUserString(System.String,System.String)">
            <summary>
            Attach a user string (key,value combination) to this geometry.
            </summary>
            <param name="key">id used to retrieve this string.</param>
            <param name="value">string associated with key.</param>
            <returns>true on success.</returns>
            <since>6.4</since>
        </member>
        <member name="M:Rhino.DocObjects.Group.GetUserString(System.String)">
            <summary>
            Gets user string from this geometry.
            </summary>
            <param name="key">id used to retrieve the string.</param>
            <returns>string associated with the key if successful. null if no key was found.</returns>
            <since>6.4</since>
        </member>
        <member name="P:Rhino.DocObjects.Group.UserStringCount">
            <summary>
            Gets the amount of user strings.
            </summary>
            <since>6.4</since>
        </member>
        <member name="M:Rhino.DocObjects.Group.GetUserStrings">
            <summary>
            Gets a copy of all (user key string, user value string) pairs attached to this geometry.
            </summary>
            <returns>A new collection.</returns>
            <since>6.4</since>
        </member>
        <member name="T:Rhino.DocObjects.HatchPatternFillType">
            <since>5.0</since>
        </member>
        <member name="T:Rhino.DocObjects.HatchLine">
            <summary>
            Hatch lines are used by hatch pattern to specify
            the dashes and offset patterns of the lines.
            </summary>
            <remarks>
            Each line has the following information:
            Angle is the direction of the line counter-clockwise from the x-axis.
            The first line origin is at the base point.
            Each line repetition is offset from the previous line.
            Offset.X is parallel to the line and Offset.Y is perpendicular to the line.
            The base and offset values are rotated by the line's angle to 
            produce a location in the hatch pattern's coordinate system.
            There can be gaps and dashes specified for drawing the line.
            If there are no dashes, the line is solid.
            Negative length dashes are gaps.
            Positive length dashes are drawn as line segments.
            </remarks>
            <since>8.0</since>
        </member>
        <member name="M:Rhino.DocObjects.HatchLine.#ctor">
            <summary>
            Construts a new hatch line.
            </summary>
            <since>8.0</since>
        </member>
        <member name="M:Rhino.DocObjects.HatchLine.#ctor(Rhino.DocObjects.HatchLine)">
            <summary>
            Construts a new hatch line.
            </summary>
            <param name="hatchLine">The hatch line to copy.</param>
            <since>8.0</since>
        </member>
        <member name="P:Rhino.DocObjects.HatchLine.IsValid">
            <summary>
            Verifies a hatch line is valid.
            </summary>
            <since>8.0</since>
        </member>
        <member name="P:Rhino.DocObjects.HatchLine.Angle">
            <summary>
            Gets and sets the angle, in radians, of the hatch line.
            The angle is measured counter-clockwise from the x-axis.
            </summary>
            <since>8.0</since>
        </member>
        <member name="P:Rhino.DocObjects.HatchLine.BasePoint">
            <summary>
            Get and sets this line's 2d base point.
            </summary>
            <since>8.0</since>
        </member>
        <member name="P:Rhino.DocObjects.HatchLine.Offset">
            <summary>
            Get and sets this line's 2d offset for line repetitions.
            Offset.X is shift parallel to line.
            Offset.Y is spacing perpendicular to line.
            </summary>
            <since>8.0</since>
        </member>
        <member name="P:Rhino.DocObjects.HatchLine.DashCount">
            <summary>
            Gets the number of dashes + gaps in this line.
            </summary>
            <since>8.0</since>
        </member>
        <member name="P:Rhino.DocObjects.HatchLine.GetDashes">
            <summary>
            Gets all of the dashes.
            </summary>
            <since>8.0</since>
        </member>
        <member name="P:Rhino.DocObjects.HatchLine.PatternLength">
            <summary>
            Get the total length of a pattern repeat.
            </summary>
            <since>8.0</since>
        </member>
        <member name="M:Rhino.DocObjects.HatchLine.DashAt(System.Int32)">
            <summary>
            Get the dash length at the specified index.
            </summary>
            <param name="dashIndex">Index of the dash to get.</param>
            <returns>The length of the dash. or gap if negative.</returns>
            <since>8.0</since>
        </member>
        <member name="M:Rhino.DocObjects.HatchLine.AppendDash(System.Double)">
            <summary>
            Add a dash to the pattern.
            </summary>
            <param name="dash">Length to append, &lt; 0 for a gap.</param>
            <since>8.0</since>
        </member>
        <member name="M:Rhino.DocObjects.HatchLine.SetDashes(System.Collections.Generic.IEnumerable{System.Double})">
            <summary>
            Sets a new dash array.
            </summary>
            <param name="dashes">The dash enumeration.</param>
            <since>8.0</since>
        </member>
        <member name="F:Rhino.DocObjects.HatchLine.m_ptr">
            <summary>
            ON_HatchLine*
            </summary>
        </member>
        <member name="M:Rhino.DocObjects.HatchLine.ConstPointer">
            <summary>
            Gets the constant (immutable) pointer of this object.
            </summary>
        </member>
        <member name="M:Rhino.DocObjects.HatchLine.NonConstPointer">
            <summary>
            Gets the non-constant pointer (for modification) of this object.
            </summary>
        </member>
        <member name="M:Rhino.DocObjects.HatchLine.Finalize">
            <summary>
            Passively releases the unmanaged object.
            </summary>
        </member>
        <member name="M:Rhino.DocObjects.HatchLine.Dispose">
            <summary>
            Actively releases the unmanaged object.
            </summary>
            <since>8.0</since>
        </member>
        <member name="M:Rhino.DocObjects.HatchLine.Dispose(System.Boolean)">
            <summary>
            Releases the unmanaged object.
            </summary>
        </member>
        <member name="M:Rhino.DocObjects.HatchPattern.#ctor">
            <since>5.0</since>
        </member>
        <member name="P:Rhino.DocObjects.HatchPattern.ComponentType">
            <summary>
            Returns <see cref="F:Rhino.DocObjects.ModelComponentType.HatchPattern"/>.
            </summary>
            <since>6.0</since>
        </member>
        <member name="P:Rhino.DocObjects.HatchPattern.Index">
            <summary>
            Index in the hatch pattern table for this pattern. -1 if not in the table.
            </summary>
            <since>5.0</since>
        </member>
        <member name="P:Rhino.DocObjects.HatchPattern.Description">
            <summary>
            Gets and sets a short description of the pattern.
            </summary>
            <since>5.0</since>
        </member>
        <member name="P:Rhino.DocObjects.HatchPattern.FillType">
            <summary>
            Gets the pattern's fill type.
            </summary>
            <since>5.0</since>
        </member>
        <member name="P:Rhino.DocObjects.HatchPattern.HatchLineCount">
            <summary>
            Get the number of HatchLines in the pattern.
            </summary>
            <since>8.0</since>
        </member>
        <member name="M:Rhino.DocObjects.HatchPattern.AddHatchLine(Rhino.DocObjects.HatchLine)">
            <summary>
            Add a HatchLine to the pattern.
            </summary>
            <param name="hatchLine">The hatch line to add.</param>
            <returns>The index of newly added hatch line, or -1 on failure.</returns>
            <since>8.0</since>
        </member>
        <member name="M:Rhino.DocObjects.HatchPattern.HatchLineAt(System.Int32)">
            <summary>
            Gets a HatchLine at an index.
            </summary>
            <param name="hatchLineIndex">The index of the hatch line.</param>
            <returns>The hatch line, or null on failure.</returns>
            <since>8.0</since>
        </member>
        <member name="M:Rhino.DocObjects.HatchPattern.RemoveHatchLine(System.Int32)">
            <summary>
            Remove a hatch line from the pattern.
            </summary>
            <param name="hatchLineIndex">The index of the hatch line to remove.</param>
            <returns>True if successful, false if index is out of range.</returns>
            <since>8.0</since>
        </member>
        <member name="M:Rhino.DocObjects.HatchPattern.RemoveAllHatchLines">
            <summary>
            Remove all of the hatch line from the pattern.
            </summary>
            <since>8.0</since>
        </member>
        <member name="P:Rhino.DocObjects.HatchPattern.HatchLines">
            <summary>
            Gets all the hatch lines.
            </summary>
            <since>8.0</since>
        </member>
        <member name="M:Rhino.DocObjects.HatchPattern.SetHatchLines(System.Collections.Generic.IEnumerable{Rhino.DocObjects.HatchLine})">
            <summary>
            Set all of the hatch lines at once. Existing hatch lines are deleted.
            </summary>
            <param name="hatchLines">An enumeration of hatch lines.</param>
            <returns>The number of hatch lines added.</returns>
            <since>8.0</since>
        </member>
        <member name="P:Rhino.DocObjects.HatchPattern.Defaults.Solid">
            <since>6.0</since>
        </member>
        <member name="P:Rhino.DocObjects.HatchPattern.Defaults.Hatch1">
            <since>6.0</since>
        </member>
        <member name="P:Rhino.DocObjects.HatchPattern.Defaults.Hatch2">
            <since>6.0</since>
        </member>
        <member name="P:Rhino.DocObjects.HatchPattern.Defaults.Hatch3">
            <since>6.0</since>
        </member>
        <member name="P:Rhino.DocObjects.HatchPattern.Defaults.Dash">
            <since>6.0</since>
        </member>
        <member name="P:Rhino.DocObjects.HatchPattern.Defaults.Grid">
            <since>6.0</since>
        </member>
        <member name="P:Rhino.DocObjects.HatchPattern.Defaults.Grid60">
            <since>6.0</since>
        </member>
        <member name="P:Rhino.DocObjects.HatchPattern.Defaults.Plus">
            <since>6.0</since>
        </member>
        <member name="P:Rhino.DocObjects.HatchPattern.Defaults.Squares">
            <since>6.0</since>
        </member>
        <member name="T:Rhino.DocObjects.InstanceDefinitionUpdateType">
            <summary>
            The possible relationships between the instance definition geometry
            and the archive containing the original definition.
            </summary>
            <since>5.0</since>
        </member>
        <member name="F:Rhino.DocObjects.InstanceDefinitionUpdateType.Static">
            <summary>
            The Rhino user interface uses the term "Embedded" for Static update types.
            This instance definition is never updated. If m_source_archive is set,
            it records the origin of the instance definition geometry, but
            m_source_archive is never used to update the instance definition.
            </summary>
        </member>
        <member name="F:Rhino.DocObjects.InstanceDefinitionUpdateType.Embedded">
            <summary>
            This instance definition geometry was imported from another archive and is embedded. 
            If the source archive changes, the user is asked if they want to update the instance definition.
            </summary>
        </member>
        <member name="F:Rhino.DocObjects.InstanceDefinitionUpdateType.LinkedAndEmbedded">
            <summary>
            This instance definition geometry was imported from another archive and is embedded. 
            If the source archive changes, the instance definition is automatically updated. 
            If the soruce archive is not available, the instance definition is still valid.
            </summary>
        </member>
        <member name="F:Rhino.DocObjects.InstanceDefinitionUpdateType.Linked">
            <summary>
            This instance definition geometry was imported from another archive and is not embedded. 
            If the source archive changes, the instance definition is automatically updated. 
            If the source archive is not available, the instance definition is not valid.
            </summary>
        </member>
        <member name="T:Rhino.DocObjects.InstanceDefinitionLayerStyle">
            <summary>
            InstanceDefinition.LayerStyle specifies how model components
            (layers, materials, dimension styles, etc.) from linked instance definition files
            appear in the active model.
            </summary>
            <since>5.0</since>
        </member>
        <member name="F:Rhino.DocObjects.InstanceDefinitionLayerStyle.None">
            <summary>
            This is the only valid layer style when the instance definition type is InstanceDefinitionUpdateType.Static
            or InstanceDefinitionUpdateType.LinkedAndEmbedded. This style is not valid when the instance definition type
            is InstanceDefinitionUpdateType.Linked.
            </summary>
        </member>
        <member name="F:Rhino.DocObjects.InstanceDefinitionLayerStyle.Active">
            <summary>
            Model components (layers, materials, dimension styles, etc.) from 
            linked instance definition files are embedded as ordinary components in the active model.
            This layer style may be used when the instance definition type is InstanceDefinitionUpdateType.Linked.
            </summary>
        </member>
        <member name="F:Rhino.DocObjects.InstanceDefinitionLayerStyle.Reference">
            <summary>
            Layers from the linked instance definition are reference components in the model.
            This is the default layer style when the instance definition type is InstanceDefinitionUpdateType.Linked.
            This layer style may be used when the instance definition type is is InstanceDefinitionUpdateType.Linked.
            </summary>
        </member>
        <member name="T:Rhino.DocObjects.InstanceDefinitionArchiveFileStatus">
            <summary>
            The archive file of a linked instance definition can have the following possible states.
            Use InstanceObject.ArchiveFileStatus to query a instance definition's archive file status.
            </summary>
            <since>5.2</since>
        </member>
        <member name="F:Rhino.DocObjects.InstanceDefinitionArchiveFileStatus.NotALinkedInstanceDefinition">
            <summary>
            The instance definition is not a linked instance definition.
            </summary>
        </member>
        <member name="F:Rhino.DocObjects.InstanceDefinitionArchiveFileStatus.LinkedFileNotReadable">
            <summary>
            The instance definition's archive file is not readable.
            </summary>
        </member>
        <member name="F:Rhino.DocObjects.InstanceDefinitionArchiveFileStatus.LinkedFileNotFound">
            <summary>
            The instance definition's archive file cannot be found.
            </summary>
        </member>
        <member name="F:Rhino.DocObjects.InstanceDefinitionArchiveFileStatus.LinkedFileIsUpToDate">
            <summary>
            The instance definition's archive file is up-to-date.
            </summary>
        </member>
        <member name="F:Rhino.DocObjects.InstanceDefinitionArchiveFileStatus.LinkedFileIsNewer">
            <summary>
            The instance definition's archive file is newer.
            </summary>
        </member>
        <member name="F:Rhino.DocObjects.InstanceDefinitionArchiveFileStatus.LinkedFileIsOlder">
            <summary>
            The instance definition's archive file is older.
            </summary>
        </member>
        <member name="F:Rhino.DocObjects.InstanceDefinitionArchiveFileStatus.LinkedFileIsDifferent">
            <summary>
            The instance definition's archive file is different.
            </summary>
        </member>
        <member name="M:Rhino.DocObjects.Layer.#ctor">
            <since>5.0</since>
        </member>
        <member name="M:Rhino.DocObjects.Layer.CommitChanges">
            <example>
            <code source='examples\vbnet\ex_locklayer.vb' lang='vbnet'/>
            <code source='examples\cs\ex_locklayer.cs' lang='cs'/>
            <code source='examples\py\ex_locklayer.py' lang='py'/>
            </example>
            <since>5.0</since>
            <deprecated>6.0</deprecated>
        </member>
        <member name="P:Rhino.DocObjects.Layer.ComponentType">
            <summary>
            Returns <see cref="F:Rhino.DocObjects.ModelComponentType.Layer"/>.
            </summary>
            <since>6.0</since>
        </member>
        <member name="P:Rhino.DocObjects.Layer.ComponentStatus">
            <summary>
            Gets or sets the status of the layer.
            </summary>
            <since>6.0</since>
        </member>
        <member name="P:Rhino.DocObjects.Layer.IsDeleted">
            <summary>
            Gets a value indicating whether this layer has been deleted and is 
            currently in the Undo buffer.
            </summary>
            <since>5.0</since>
        </member>
        <member name="P:Rhino.DocObjects.Layer.IsReference">
            <summary>
            Gets a value indicting whether this layer is a referenced layer. 
            Referenced layers are part of referenced documents.
            </summary>
            <since>5.0</since>
        </member>
        <member name="P:Rhino.DocObjects.Layer.Name">
            <summary>Gets or sets the name of this layer.</summary>
            <example>
            <code source='examples\vbnet\ex_sellayer.vb' lang='vbnet'/>
            <code source='examples\cs\ex_sellayer.cs' lang='cs'/>
            <code source='examples\py\ex_sellayer.py' lang='py'/>
            </example>
            <example>
            <code source='examples\vbnet\ex_renamelayer.vb' lang='vbnet'/>
            <code source='examples\cs\ex_renamelayer.cs' lang='cs'/>
            <code source='examples\py\ex_renamelayer.py' lang='py'/>
            </example>
            <since>5.0</since>
        </member>
        <member name="P:Rhino.DocObjects.Layer.FullPath">
            <summary>
            Gets the full path to this layer. The full path includes nesting information.
            </summary>
            <example>
            <code source='examples\vbnet\ex_locklayer.vb' lang='vbnet'/>
            <code source='examples\cs\ex_locklayer.cs' lang='cs'/>
            <code source='examples\py\ex_locklayer.py' lang='py'/>
            </example>
            <since>5.0</since>
        </member>
        <member name="P:Rhino.DocObjects.Layer.LayerIndex">
            <summary>
            Gets or sets the index of this layer.
            </summary>
            <since>5.0</since>
        </member>
        <member name="P:Rhino.DocObjects.Layer.Id">
            <summary>
            Gets or sets the ID of this layer object. 
            You typically do not need to assign a custom ID.
            </summary>
            <since>5.0</since>
        </member>
        <member name="P:Rhino.DocObjects.Layer.ParentLayerId">
            <summary>
            Gets the ID of the parent layer. Layers can be organized in a hierarchical structure, 
            in which case this returns the parent layer ID. If the layer has no parent, 
            Guid.Empty will be returned.
            </summary>
            <example>
            <code source='examples\vbnet\ex_addchildlayer.vb' lang='vbnet'/>
            <code source='examples\cs\ex_addchildlayer.cs' lang='cs'/>
            <code source='examples\py\ex_addchildlayer.py' lang='py'/>
            </example>
            <since>5.0</since>
        </member>
        <member name="P:Rhino.DocObjects.Layer.IgesLevel">
            <summary>
            Gets or sets the IGES level for this layer.
            </summary>
            <since>5.0</since>
        </member>
        <member name="M:Rhino.DocObjects.Layer.HasPerViewportSettings(System.Guid)">
            <summary>
            Verifies that a layer has per viewport settings.
            </summary>
            <param name="viewportId">
            If not Guid.Empty, then checks for settings for that specific viewport. 
            If Guid.Empty, then checks for any viewport settings.
            </param>
            <returns>True if the layer has per viewport settings, false otherwise.</returns>
            <since>6.0</since>
        </member>
        <member name="M:Rhino.DocObjects.Layer.DeletePerViewportSettings(System.Guid)">
            <summary>
            Deletes per viewport layer settings.
            </summary>
            <param name="viewportId">
            If not Guid.Empty, then the settings for that viewport are deleted.
            If Guid.Empty, then all per viewport settings are deleted.
            </param>
            <since>6.0</since>
        </member>
        <member name="P:Rhino.DocObjects.Layer.Color">
            <summary>
            Gets or sets the display color for this layer.
            </summary>
            <since>5.0</since>
        </member>
        <member name="M:Rhino.DocObjects.Layer.PerViewportColor(System.Guid)">
            <summary>
            Gets the display color for this layer.
            </summary>
            <param name="viewportId">If not Guid.Empty, then the setting applies only to the viewport with the specified id.</param>
            <returns>The display color.</returns>
            <since>6.0</since>
        </member>
        <member name="M:Rhino.DocObjects.Layer.SetPerViewportColor(System.Guid,System.Drawing.Color)">
            <summary>
            Sets the display color for this layer.
            </summary>
            <param name="viewportId">If not Guid.Empty, then the setting applies only to the viewport with the specified id.</param>
            <param name="color">The display color.</param>
            <since>6.0</since>
        </member>
        <member name="M:Rhino.DocObjects.Layer.DeletePerViewportColor(System.Guid)">
            <summary>
            Remove any per viewport layer color setting so the layer's overall setting will be used for all viewports.
            </summary>
            <param name="viewportId">
            If not Guid.Empty, then the setting for this viewport will be deleted.
            If Guid.Empty, the all per viewport layer color settings will be removed.
            </param>
            <since>6.0</since>
        </member>
        <member name="P:Rhino.DocObjects.Layer.PlotColor">
            <summary>
            Gets or sets the plot color for this layer.
            </summary>
            <since>5.0</since>
        </member>
        <member name="M:Rhino.DocObjects.Layer.PerViewportPlotColor(System.Guid)">
            <summary>
            Gets the plot color for this layer.
            </summary>
            <param name="viewportId">If not Guid.Empty, then the setting applies only to the viewport with the specified id.</param>
            <returns>The plot color.</returns>
            <since>6.0</since>
        </member>
        <member name="M:Rhino.DocObjects.Layer.SetPerViewportPlotColor(System.Guid,System.Drawing.Color)">
            <summary>
            Sets the plot color for this layer.
            </summary>
            <param name="viewportId">If not Guid.Empty, then the setting applies only to the viewport with the specified id.</param>
            <param name="color">The plot color.</param>
            <since>6.0</since>
        </member>
        <member name="M:Rhino.DocObjects.Layer.DeletePerViewportPlotColor(System.Guid)">
            <summary>
            Remove any per viewport layer plot color setting so the layer's overall setting will be used for all viewports.
            </summary>
            <param name="viewportId">
            If not Guid.Empty, then the setting for this viewport will be deleted.
            If Guid.Empty, the all per viewport layer color settings will be removed.
            </param>
            <since>6.0</since>
        </member>
        <member name="P:Rhino.DocObjects.Layer.PlotWeight">
            <summary>
            Gets or sets the weight of the plotting pen in millimeters. 
            A weight of 0.0 indicates the "default" pen weight should be used.
            A weight of -1.0 indicates the layer should not be printed.
            </summary>
            <since>5.0</since>
        </member>
        <member name="M:Rhino.DocObjects.Layer.PerViewportPlotWeight(System.Guid)">
            <summary>
            Gets the plot weight, in millimeters, for this layer.
            </summary>
            <param name="viewportId">If not Guid.Empty, then the setting applies only to the viewport with the specified id.</param>
            <returns>The plot color.</returns>
            <since>6.0</since>
        </member>
        <member name="M:Rhino.DocObjects.Layer.SetPerViewportPlotWeight(System.Guid,System.Double)">
            <summary>
            Sets the plot weight, in millimeters, for this layer.
            </summary>
            <param name="viewportId">If not Guid.Empty, then the setting applies only to the viewport with the specified id.</param>
            <param name="plotWeight">
            The plot weight in millimeters. 
            A weight of  0.0 indicates the "default" pen weight should be used. 
            A weight of -1.0 indicates the layer should not be printed.
            </param>
            <since>6.0</since>
        </member>
        <member name="M:Rhino.DocObjects.Layer.DeletePerViewportPlotWeight(System.Guid)">
            <summary>
            Remove any per viewport layer plot weight setting so the layer's overall setting will be used for all viewports.
            </summary>
            <param name="viewportId">
            If not Guid.Empty, then the setting for this viewport will be deleted.
            If Guid.Empty, the all per viewport layer color settings will be removed.
            </param>
            <since>6.0</since>
        </member>
        <member name="P:Rhino.DocObjects.Layer.LinetypeIndex">
            <summary>
            Gets or sets the line-type index for this layer.
            </summary>
            <since>5.0</since>
        </member>
        <member name="P:Rhino.DocObjects.Layer.RenderMaterialIndex">
            <summary>
            Gets or sets the index of render material for objects on this layer that have
            MaterialSource() == MaterialFromLayer. 
            A material index of -1 indicates no material has been assigned 
            and the material created by the default Material constructor 
            should be used.
            </summary>
            <since>5.0</since>
        </member>
        <member name="P:Rhino.DocObjects.Layer.IsVisible">
            <summary>
            Gets or sets the global visibility of this layer.
            </summary>
            <since>5.0</since>
        </member>
        <member name="M:Rhino.DocObjects.Layer.PerViewportIsVisible(System.Guid)">
            <summary>
            Gets the per viewport visibility of this layer.
            </summary>
            <param name="viewportId">
            If not Guid.Empty, then the visibility setting for that viewport is returned.
            If Guid.Empty, the IsVisible property is returned.
            </param>
            <returns>Returns true if objects on layer are visible.</returns>
            <since>6.0</since>
        </member>
        <member name="M:Rhino.DocObjects.Layer.SetPerViewportVisible(System.Guid,System.Boolean)">
            <summary>
            Controls layer visibility in specific viewports.
            </summary>
            <param name="viewportId">
            If not Guid.Empty, then the setting applies only to the viewport with the specified id.
            If Guid.Empty, then the setting applies to all viewports with per viewport layer settings.
            </param>
            <param name="visible">true to make layer visible, false to make layer invisible.</param>
            <since>6.0</since>
        </member>
        <member name="M:Rhino.DocObjects.Layer.DeletePerViewportVisible(System.Guid)">
            <summary>
            Remove any per viewport visibility setting so the layer's overall setting will be used for all viewports.
            </summary>
            <param name="viewportId">
            If not Guid.Empty, then the setting for this viewport will be deleted.
            If Guid.Empty, the all per viewport visibility settings will be removed.
            </param>
            <since>6.0</since>
        </member>
        <member name="M:Rhino.DocObjects.Layer.PerViewportPersistentVisibility(System.Guid)">
            <summary>
            Gets the per layer persistent visibility. The persistent viability setting is used for layers whose visibility can be changed by a parent layer. 
            In this case, when a parent layer is turned off, then child layers are also turned off.
            The persistent visibility setting determines what happens when the parent is turned on again.
            </summary>
            <param name="viewportId"></param>
            <returns>
            Return true if this layer's visibility in the specified viewport is controlled by a parent object and the parent is turned on (after being off), 
            then this layer will also be turned on in the specified viewport.
            Returns false if this layer's visibility in the specified viewport is controlled by a parent object and the parent layer is turned on(after being off),
            then this layer will continue to be off in the specified viewport.
            </returns>
            <since>6.0</since>
        </member>
        <member name="M:Rhino.DocObjects.Layer.SetPerViewportPersistentVisibility(System.Guid,System.Boolean)">
            <summary>
            Sets the per layer persistent visibility. The persistent viability setting is used for layers whose visibility can be changed by a parent layer. 
            In this case, when a parent layer is turned off, then child layers are also turned off.
            The persistent visibility setting determines what happens when the parent is turned on again.
            </summary>
            <param name="viewportId">
            If not Guid.Empty, then the setting applies only to the viewport with the specified id.
            If Guid.Empty, then the setting applies to all viewports with per viewport layer settings.
            </param>
            <param name="persistentVisibility">
            If true, this layer's visibility in the specified viewport is controlled by a parent object and the parent is turned on (after being off), 
            then this layer will also be turned on in the specified viewport.
            If false, this layer's visibility in the specified viewport is controlled by a parent object and the parent layer is turned on (after being off),
            then this layer will continue to be off in the specified viewport.
            </param>
            <since>6.0</since>
        </member>
        <member name="M:Rhino.DocObjects.Layer.UnsetPerViewportPersistentVisibility(System.Guid)">
            <summary>
            Remove any per viewport persistent visibility setting so the layer's overall setting will be used for all viewports.
            </summary>
            <param name="viewportId">
            If not Guid.Empty, then the setting for this viewport will be deleted.
            If Guid.Empty, the all per viewport visibility settings will be removed.
            </param>
            <since>6.0</since>
        </member>
        <member name="P:Rhino.DocObjects.Layer.IsLocked">
            <summary>
            Gets or sets a value indicating the locked state of this layer.
            </summary>
            <example>
            <code source='examples\vbnet\ex_locklayer.vb' lang='vbnet'/>
            <code source='examples\cs\ex_locklayer.cs' lang='cs'/>
            <code source='examples\py\ex_locklayer.py' lang='py'/>
            </example>
            <since>5.0</since>
        </member>
        <member name="M:Rhino.DocObjects.Layer.GetPersistentVisibility">
            <summary>
            The global persistent visibility setting is used for layers whose visibility can
            be changed by a "parent" object. A common case is when a layer is a
            child layer (ParentId is not nil). In this case, when a parent layer is
            turned off, then child layers are also turned off. The persistent
            visibility setting determines what happens when the parent is turned on
            again.
            </summary>
            <remarks>
            Returns true if this layer's visibility is controlled by a parent
            object and the parent is turned on (after being off), then this
            layer will also be turned on.
            Returns false if this layer's visibility is controlled by a parent
            object and the parent layer is turned on (after being off), then
            this layer will continue to be off.
            
            When the persistent viability is not explicitly set, this
            property returns the current value of IsVisible
            </remarks>
            <since>5.5</since>
        </member>
        <member name="M:Rhino.DocObjects.Layer.SetPersistentVisibility(System.Boolean)">
            <summary>
            Set the global persistent visibility setting for this layer.
            </summary>
            <param name="persistentVisibility"></param>
            <since>5.5</since>
        </member>
        <member name="P:Rhino.DocObjects.Layer.PersistentVisibility">
            <summary>
            Gets or sets the global persistent visibility setting for this layer.
            </summary>
            <since>8.0</since>
        </member>
        <member name="P:Rhino.DocObjects.Layer.ModelIsVisible">
            <summary>
            Gets or sets the model visiblity of this layer.
            </summary>
            <since>8.0</since>
        </member>
        <member name="P:Rhino.DocObjects.Layer.ModelPersistentVisibility">
            <summary>
            Gets or sets the model persistent visibility of this layer.
            The persistent viability setting is used for layers whose visibility can be changed by a parent layer. 
            In this case, when a parent layer is turned off, then child layers are also turned off. 
            The persistent visibility setting determines what happens when the parent is turned on again.
            </summary>
            <since>8.0</since>
        </member>
        <member name="M:Rhino.DocObjects.Layer.UnsetModelPersistentVisibility">
            <summary>
            Remove any model persistent visibility setting from this layer.
            </summary>
            <since>8.0</since>
        </member>
        <member name="M:Rhino.DocObjects.Layer.DeleteModelVisible">
            <summary>
            Remove any model visibility setting so the layer's global setting will be used for all viewports.
            </summary>
            <since>8.0</since>
        </member>
        <member name="M:Rhino.DocObjects.Layer.UnsetPersistentVisibility">
            <summary>
            Remove any explicit persistent visibility setting from this layer
            </summary>
            <since>5.5</since>
        </member>
        <member name="M:Rhino.DocObjects.Layer.GetPersistentLocking">
            <summary>
            The persistent locking setting is used for layers that can be locked by
            a "parent" object. A common case is when a layer is a child layer
            (Layer.ParentI is not nil). In this case, when a parent layer is locked,
            then child layers are also locked. The persistent locking setting
            determines what happens when the parent is unlocked again.
            </summary>
            <returns></returns>
            <since>5.5</since>
        </member>
        <member name="M:Rhino.DocObjects.Layer.SetPersistentLocking(System.Boolean)">
            <summary>
            Set the persistent locking setting for this layer
            </summary>
            <param name="persistentLocking"></param>
            <since>5.5</since>
        </member>
        <member name="M:Rhino.DocObjects.Layer.UnsetPersistentLocking">
            <summary>
            Remove any explicitly persistent locking settings from this layer
            </summary>
            <since>5.5</since>
        </member>
        <member name="P:Rhino.DocObjects.Layer.IsExpanded">
            <summary>
            Gets or sets a value indicating whether this layer is expanded in the Rhino Layer dialog.
            </summary>
            <since>5.0</since>
        </member>
        <member name="P:Rhino.DocObjects.Layer.SortIndex">
            <summary>
            Runtime index used to sort layers in layer dialog.
            </summary>
            <since>5.0</since>
        </member>
        <member name="M:Rhino.DocObjects.Layer.Default">
            <summary>
            Sets layer to default settings.
            </summary>
            <since>5.0</since>
        </member>
        <member name="M:Rhino.DocObjects.Layer.CopyAttributesFrom(Rhino.DocObjects.Layer)">
            <summary>
            Copy typical attributes from another layer
            </summary>
            <param name="otherLayer"></param>
            <since>6.0</since>
        </member>
        <member name="P:Rhino.DocObjects.Layer.PerViewportIsVisibleInNewDetails">
            <summary>
            Gets and sets the initial per viewport visibility of this layer in newly created detail views.
            </summary>
            <since>8.0</since>
        </member>
        <member name="M:Rhino.DocObjects.Layer.GetCustomSectionStyle">
            <summary>
             Get an optional custom section style associated with these attributes.
            </summary>
             <since>8.0</since>
        </member>
        <member name="M:Rhino.DocObjects.Layer.SetCustomSectionStyle(Rhino.DocObjects.SectionStyle)">
            <since>8.0</since>
        </member>
        <member name="M:Rhino.DocObjects.Layer.RemoveCustomSectionStyle">
            <since>8.0</since>
        </member>
        <member name="M:Rhino.DocObjects.Layer.SetUserString(System.String,System.String)">
            <summary>
            Attach a user string (key,value combination) to this geometry.
            </summary>
            <param name="key">id used to retrieve this string.</param>
            <param name="value">string associated with key.</param>
            <returns>true on success.</returns>
            <since>5.0</since>
        </member>
        <member name="M:Rhino.DocObjects.Layer.GetUserString(System.String)">
            <summary>
            Gets user string from this geometry.
            </summary>
            <param name="key">id used to retrieve the string.</param>
            <returns>string associated with the key if successful. null if no key was found.</returns>
            <since>5.0</since>
        </member>
        <member name="P:Rhino.DocObjects.Layer.UserStringCount">
            <summary>
            Gets the amount of user strings.
            </summary>
            <since>5.0</since>
        </member>
        <member name="M:Rhino.DocObjects.Layer.GetUserStrings">
            <summary>
            Gets a copy of all (user key string, user value string) pairs attached to this geometry.
            </summary>
            <returns>A new collection.</returns>
            <since>5.0</since>
        </member>
        <member name="M:Rhino.DocObjects.Layer.Equals(Rhino.DocObjects.Layer)">
            <since>6.0</since>
        </member>
        <member name="M:Rhino.DocObjects.Layer.op_Equality(Rhino.DocObjects.Layer,Rhino.DocObjects.Layer)">
            <since>6.0</since>
        </member>
        <member name="M:Rhino.DocObjects.Layer.op_Inequality(Rhino.DocObjects.Layer,Rhino.DocObjects.Layer)">
            <since>6.0</since>
        </member>
        <member name="M:Rhino.DocObjects.Linetype.#ctor">
            <since>5.0</since>
        </member>
        <member name="M:Rhino.DocObjects.Linetype.#ctor(Rhino.DocObjects.Linetype)">
            <since>8.0</since>
        </member>
        <member name="M:Rhino.DocObjects.Linetype.DuplicateLinetype">
            <summary>
            Duplicates a linetype, clears the name, id, and locked bits.
            </summary>
            <returns>The duplicated linetype if successful, null otherwise.</returns>
            <since>8.0</since>
        </member>
        <member name="M:Rhino.DocObjects.Linetype.CommitChanges">
            <since>5.0</since>
        </member>
        <member name="P:Rhino.DocObjects.Linetype.ComponentType">
            <summary>
            Returns <see cref="F:Rhino.DocObjects.ModelComponentType.LinePattern"/>.
            </summary>
            <since>6.0</since>
        </member>
        <member name="P:Rhino.DocObjects.Linetype.IsDeleted">
            <summary>
            Gets a value indicating whether this linetype has been deleted and is 
            currently in the Undo buffer.
            </summary>
            <since>5.0</since>
        </member>
        <member name="P:Rhino.DocObjects.Linetype.IsReference">
            <summary>
            Gets a value indicting whether this linetype is a referenced linetype. 
            Referenced linetypes are part of referenced documents.
            </summary>
            <since>5.0</since>
        </member>
        <member name="P:Rhino.DocObjects.Linetype.Name">
            <summary>The name of this linetype.</summary>
            <since>5.0</since>
        </member>
        <member name="P:Rhino.DocObjects.Linetype.LinetypeIndex">
            <summary>The index of this linetype.</summary>
            <since>5.0</since>
        </member>
        <member name="P:Rhino.DocObjects.Linetype.PatternLength">
            <summary>Total length of one repeat of the pattern.</summary>
            <since>5.0</since>
        </member>
        <member name="P:Rhino.DocObjects.Linetype.SegmentCount">
            <summary>Number of segments in the pattern.</summary>
            <since>5.0</since>
        </member>
        <member name="P:Rhino.DocObjects.Linetype.IsModified">
            <summary>
            true if this linetype has been modified by LinetypeTable.ModifyLinetype()
            and the modifications can be undone.
            </summary>
            <since>5.0</since>
        </member>
        <member name="P:Rhino.DocObjects.Linetype.LineCapStyle">
            <summary>
            Defines how the ends of open curves should be drawn
            </summary>
            <since>8.0</since>
        </member>
        <member name="P:Rhino.DocObjects.Linetype.LineJoinStyle">
            <summary>
            Defines how the corners of curves should be drawn
            </summary>
            <since>8.0</since>
        </member>
        <member name="P:Rhino.DocObjects.Linetype.Width">
            <summary> Base width for this linetype </summary>
            <since>8.0</since>
        </member>
        <member name="P:Rhino.DocObjects.Linetype.WidthUnits">
            <summary>
            Unit system that widths are defined in. UnitSystem.None is default
            and means that the width is defined in pixels.
            </summary>
            <since>8.0</since>
        </member>
        <member name="M:Rhino.DocObjects.Linetype.GetTaperPoints">
            <summary>
            Taper points are positions/width combinations along the length of a curve
            </summary>
            <returns></returns>
            <since>8.0</since>
        </member>
        <member name="M:Rhino.DocObjects.Linetype.SetTaper(System.Double,System.Double)">
            <summary>
            Set taper to a simple start width / end width
            </summary>
            <param name="startWidth"></param>
            <param name="endWidth"></param>
            <since>8.0</since>
        </member>
        <member name="M:Rhino.DocObjects.Linetype.SetTaper(System.Double,Rhino.Geometry.Point2d,System.Double)">
            <summary>
            Set taper for this linetype width a single internal taper point
            </summary>
            <param name="startWidth"></param>
            <param name="taperPoint"></param>
            <param name="endWidth"></param>
            <since>8.0</since>
        </member>
        <member name="M:Rhino.DocObjects.Linetype.RemoveTaper">
            <summary>
            Remove taper information for stroke
            </summary>
            <since>8.0</since>
        </member>
        <member name="P:Rhino.DocObjects.Linetype.IsPatternLocked">
            <summary>
            Returns true if the pattern is locked and cannot be modified.
            </summary>
            <since>8.0</since>
        </member>
        <member name="M:Rhino.DocObjects.Linetype.Default">
            <summary>
            Set linetype to default settings.
            </summary>
            <since>5.0</since>
        </member>
        <member name="M:Rhino.DocObjects.Linetype.AppendSegment(System.Double,System.Boolean)">
            <summary>Adds a segment to the pattern.</summary>
            <param name="length">The length of the segment to be added.</param>
            <param name="isSolid">
            If true, the length is interpreted as a line. If false,
            then the length is interpreted as a space.
            </param>
            <returns>Index of the added segment.</returns>
            <since>5.0</since>
        </member>
        <member name="M:Rhino.DocObjects.Linetype.RemoveSegment(System.Int32)">
            <summary>Removes a segment in the linetype.</summary>
            <param name="index">Zero based index of the segment to remove.</param>
            <returns>true if the segment index was removed.</returns>
            <since>5.0</since>
        </member>
        <member name="M:Rhino.DocObjects.Linetype.SetSegments(System.Collections.Generic.IEnumerable{System.Double})">
            <summary>Set all segments.</summary>
            <param name="segments">
            An array of segments lengths. 
            Lengths &gt;= 0 are interpreted as a line. 
            Lengths &lt; 0 are interpreted as a space.
            </param>
            <returns>true if the segments were replaced</returns>
            <since>6.8</since>
        </member>
        <member name="M:Rhino.DocObjects.Linetype.SetSegment(System.Int32,System.Double,System.Boolean)">
            <summary>Sets the length and type of the segment at index.</summary>
            <param name="index">Zero based index of the segment.</param>
            <param name="length">The length of the segment to be added in millimeters.</param>
            <param name="isSolid">
            If true, the length is interpreted as a line. If false,
            then the length is interpreted as a space.
            </param>
            <returns>true if the operation was successful; otherwise false.</returns>
            <since>5.0</since>
        </member>
        <member name="M:Rhino.DocObjects.Linetype.GetSegment(System.Int32,System.Double@,System.Boolean@)">
            <summary>
            Gets the segment information at a index.
            </summary>
            <param name="index">Zero based index of the segment.</param>
            <param name="length">The length of the segment in millimeters.</param>
            <param name="isSolid">
            If the length is interpreted as a line, true is assigned during the call to this out parameter.
            <para>If the length is interpreted as a space, then false is assigned during the call to this out parameter.</para>
            </param>
            <exception cref="T:System.IndexOutOfRangeException">If the index is unacceptable.</exception>
            <since>5.0</since>
        </member>
        <member name="P:Rhino.DocObjects.MaterialRef.MaterialSource">
            <summary>
            Determines if the simple material should come from the object or from
            it's layer.
            </summary>
            <since>5.10</since>
        </member>
        <member name="P:Rhino.DocObjects.MaterialRef.PlugInId">
            <summary>
            Identifies a rendering plug-in
            </summary>
            <since>5.10</since>
        </member>
        <member name="P:Rhino.DocObjects.MaterialRef.FrontFaceMaterialId">
            <summary>
            The Id of the Material used to render the front of an object.
            </summary>
            <since>5.10</since>
        </member>
        <member name="P:Rhino.DocObjects.MaterialRef.BackFaceMaterialId">
            <summary>
            The Id of the Material used to render the back of an object.
            </summary>
            <since>5.10</since>
        </member>
        <member name="P:Rhino.DocObjects.MaterialRef.FrontFaceMaterialIndex">
            <summary>
            The index of the material used to render the front of an object
            </summary>
            <since>5.10</since>
        </member>
        <member name="P:Rhino.DocObjects.MaterialRef.BackFaceMaterialIndex">
            <summary>
            The index of the material used to render the back of an object
            </summary>
            <since>5.10</since>
        </member>
        <member name="M:Rhino.DocObjects.MaterialRef.Dispose">
            <since>5.10</since>
        </member>
        <member name="T:Rhino.DocObjects.MaterialRefCreateParams">
            <summary>
            Options passed to MaterialRefs.Create
            </summary>
        </member>
        <member name="P:Rhino.DocObjects.MaterialRefCreateParams.PlugInId">
            <summary>
            Identifies a rendering plug-in
            </summary>
            <since>5.10</since>
        </member>
        <member name="P:Rhino.DocObjects.MaterialRefCreateParams.MaterialSource">
            <summary>
            Determines if the simple material should come from the object or from
            it's layer.
            </summary>
            <since>5.10</since>
        </member>
        <member name="P:Rhino.DocObjects.MaterialRefCreateParams.FrontFaceMaterialId">
            <summary>
            The Id of the Material used to render the front of an object.
            </summary>
            <since>5.10</since>
        </member>
        <member name="P:Rhino.DocObjects.MaterialRefCreateParams.FrontFaceMaterialIndex">
            <summary>
            The index of the material used to render the front of an object
            </summary>
            <since>5.10</since>
        </member>
        <member name="P:Rhino.DocObjects.MaterialRefCreateParams.BackFaceMaterialId">
            <summary>
            The Id of the Material used to render the back of an object.
            </summary>
            <since>5.10</since>
        </member>
        <member name="P:Rhino.DocObjects.MaterialRefCreateParams.BackFaceMaterialIndex">
            <summary>
            The index of the material used to render the back of an object
            </summary>
            <since>5.10</since>
        </member>
        <member name="T:Rhino.DocObjects.MaterialRefs">
            <summary>
            If you are developing a high quality plug-in renderer, and a user is
            assigning a custom render material to this object, then add rendering
            material information to the MaterialRefs dictionary.
            
            Note to developers:
             As soon as the MaterialRefs dictionary contains items rendering
             material queries slow down.  Do not populate the MaterialRefs
            dictionary when setting the MaterialIndex will take care of your needs.
            </summary>
        </member>
        <member name="M:Rhino.DocObjects.MaterialRefs.Create(Rhino.DocObjects.MaterialRefCreateParams)">
            <summary>
            Call this method to create a MaterialRef which can be used when calling
            one of the Add methods.
            </summary>
            <param name="createParams">
            Values used to initialize the MaterialRef
            </param>
            <returns>
            A temporary MaterialRef object, the caller is responsible for disposing
            of this object.
            </returns>
            <since>5.10</since>
        </member>
        <member name="M:Rhino.DocObjects.MaterialRefs.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through this dictionary.
            </summary>
            <returns>
            A IEnumerator that can be used to iterate this dictionary.
            </returns>
            <since>5.10</since>
        </member>
        <member name="M:Rhino.DocObjects.MaterialRefs.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Returns an enumerator that iterates through this dictionary.
            </summary>
            <returns>
            An System.Collections.IEnumerator object that can be used to iterate
            through this dictionary.
            </returns>
            <since>5.10</since>
        </member>
        <member name="M:Rhino.DocObjects.MaterialRefs.Add(System.Collections.Generic.KeyValuePair{System.Guid,Rhino.DocObjects.MaterialRef})">
            <summary>
            Adds an item to this dictionary.
            </summary>
            <param name="item">
            The object to add to this dictionary
            </param>
            <exception cref="T:System.ArgumentNullException">
            value is null.
            </exception>
            <exception cref="T:System.ArgumentException">
            key is empty.
            </exception>
        </member>
        <member name="M:Rhino.DocObjects.MaterialRefs.Add(System.Guid,Rhino.DocObjects.MaterialRef)">
            <summary>
            Add or replace an element with the provided key and value to this dictionary.
            </summary>
            <param name="key">
            The plug-in associated with this MaterialRef
            </param>
            <param name="value">
            MaterialRef to add to this dictionary
            </param>
            <exception cref="T:System.ArgumentNullException">
            value is null.
            </exception>
            <exception cref="T:System.ArgumentException">
            key is empty.
            </exception>
            <since>5.10</since>
        </member>
        <member name="M:Rhino.DocObjects.MaterialRefs.Clear">
            <summary>
            Removes all items from this dictionary.
            </summary>
            <since>5.10</since>
        </member>
        <member name="M:Rhino.DocObjects.MaterialRefs.Contains(System.Collections.Generic.KeyValuePair{System.Guid,Rhino.DocObjects.MaterialRef})">
            <summary>
            Determines whether this dictionary contains a specific value.
            </summary>
            <param name="item">
            The object to locate in this dictionary.
            </param>
            <returns>
            true if item is found in this dictionary; otherwise, false.
            </returns>
        </member>
        <member name="M:Rhino.DocObjects.MaterialRefs.CopyTo(System.Collections.Generic.KeyValuePair{System.Guid,Rhino.DocObjects.MaterialRef}[],System.Int32)">
            <summary>
            Copies the elements of this dictionary to an System.Array, starting at
            a particular System.Array index.
            </summary>
            <param name="array">
            The one-dimensional System.Array that is the destination of the
            elements copied from this dictionary. The System.Array must have
            zero-based indexing.
            </param>
            <param name="arrayIndex">
            The zero-based index in array at which copying begins.
            </param>
            <exception cref="T:System.ArgumentNullException">
            array is null
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            arrayIndex is less than 0.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            The number of elements in the source dictionary is greater than the
            available space from arrayIndex to the end of the destination array.
            </exception>
        </member>
        <member name="M:Rhino.DocObjects.MaterialRefs.Remove(System.Collections.Generic.KeyValuePair{System.Guid,Rhino.DocObjects.MaterialRef})">
            <summary>
            Removes the element with the specified plug-in id from the this dictionary.
            </summary>
            <param name="item">
            The object to remove from this dictionary
            </param>
            <returns></returns>
        </member>
        <member name="P:Rhino.DocObjects.MaterialRefs.Count">
            <summary>
            Gets the number of elements contained in this dictionary
            </summary>
            <since>5.10</since>
        </member>
        <member name="P:Rhino.DocObjects.MaterialRefs.IsReadOnly">
            <summary>
            IDictionary required property, always returns false for this dictionary.
            </summary>
            <since>5.10</since>
        </member>
        <member name="M:Rhino.DocObjects.MaterialRefs.ContainsKey(System.Guid)">
            <summary>
            Determines whether this dictionary contains an MaterialRef with the
            specified plug-in id.
            </summary>
            <param name="key">
            The plug-in Id used to locate a MaterialRef in this dictionary.
            </param>
            <returns>
            true if this dictionary contains an element with the specified plug-in
            Id; otherwise, false.
            </returns>
            <since>5.10</since>
        </member>
        <member name="M:Rhino.DocObjects.MaterialRefs.Remove(System.Guid)">
            <summary>
            Removes the MaterialRef with the specified plug-in Id from this
            dictionary.
            </summary>
            <param name="key">
            The plug-in Id for the MaterialRef to remove.
            </param>
            <returns>
            true if the MaterialRef is successfully removed; otherwise, false. This
            method also returns false if key was not found in the original dictionary.
            </returns>
            <since>5.10</since>
        </member>
        <member name="M:Rhino.DocObjects.MaterialRefs.TryGetValue(System.Guid,Rhino.DocObjects.MaterialRef@)">
            <summary>
            Gets the value associated with the specified key.
            </summary>
            <param name="key">
            The plug-in Id whose MaterialRef to get.
            </param>
            <param name="value">
            When this method returns, the MaterialRef associated with the specified
            key, if the key is found; otherwise, null. This parameter is passed
            uninitialized.
            </param>
            <returns>
            true if this dictionary contains a MaterialRef with the specified key;
            otherwise, false.
            </returns>
            <since>5.10</since>
        </member>
        <member name="P:Rhino.DocObjects.MaterialRefs.Item(System.Guid)">
            <summary>
            Gets or sets the element with the specified plug-in Id.
            </summary>
            <param name="key">
            The plug-in Id of the MaterialRef to get or set.
            </param>
            <returns>
            The MaterialRef with the specified key.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            value is null.
            </exception>
            <exception cref="T:System.ArgumentException">
            key is empty.
            </exception>
        </member>
        <member name="P:Rhino.DocObjects.MaterialRefs.Keys">
            <summary>
            Gets an ICollection containing the plug-in Id's in this dictionary.
            </summary>
            <since>5.10</since>
        </member>
        <member name="P:Rhino.DocObjects.MaterialRefs.Values">
            <summary>
            Gets an ICollection containing the MaterialRef objects in this
            dictionary.
            </summary>
            <since>5.10</since>
        </member>
        <member name="M:Rhino.DocObjects.Material.#ctor">
            <since>5.0</since>
        </member>
        <member name="M:Rhino.DocObjects.Material.#ctor(Rhino.DocObjects.Material)">
            <since>6.0</since>
        </member>
        <member name="M:Rhino.DocObjects.Material.CopyFrom(Rhino.DocObjects.Material)">
            <since>6.0</since>
        </member>
        <member name="P:Rhino.DocObjects.Material.ComponentType">
            <summary>
            Returns <see cref="F:Rhino.DocObjects.ModelComponentType.RenderMaterial"/>.
            </summary>
            <since>6.0</since>
        </member>
        <member name="P:Rhino.DocObjects.Material.IsDeleted">
            <summary>
            Deleted materials are kept in the runtime material table so that undo
            will work with materials.  Call IsDeleted to determine to determine if
            a material is deleted.
            </summary>
            <since>5.0</since>
        </member>
        <member name="P:Rhino.DocObjects.Material.IsReference">
            <summary>
            Rhino allows multiple files to be viewed simultaneously. Materials in the
            document are "normal" or "reference". Reference materials are not saved.
            </summary>
            <since>5.0</since>
        </member>
        <member name="P:Rhino.DocObjects.Material.RenderPlugInId">
            <summary>
            The Id of the RenderPlugIn that is associated with this material.
            </summary>
            <since>5.0</since>
        </member>
        <member name="P:Rhino.DocObjects.Material.IsDefaultMaterial">
            <summary>
            By default Rhino layers and objects are assigned the default rendering material.
            </summary>
            <since>5.0</since>
        </member>
        <member name="P:Rhino.DocObjects.Material.MaterialIndex">
            <summary>
            
            </summary>
            <since>5.6</since>
        </member>
        <member name="P:Rhino.DocObjects.Material.Name">
            <since>5.0</since>
        </member>
        <member name="P:Rhino.DocObjects.Material.MaxShine">
            <since>5.0</since>
        </member>
        <member name="P:Rhino.DocObjects.Material.Shine">
            <summary>
            Gets or sets the shine factor of the material.
            </summary>
            <since>5.0</since>
        </member>
        <member name="P:Rhino.DocObjects.Material.Transparency">
            <summary>
            Gets or sets the transparency of the material (0.0 = opaque to 1.0 = transparent)
            </summary>
            <since>5.0</since>
        </member>
        <member name="P:Rhino.DocObjects.Material.IndexOfRefraction">
            <summary>
            Gets or sets the index of refraction of the material, generally
            >= 1.0 (speed of light in vacuum)/(speed of light in material)
            </summary>
            <since>5.1</since>
        </member>
        <member name="P:Rhino.DocObjects.Material.FresnelIndexOfRefraction">
            <summary>
            Gets or sets the Fresnel index of refraction of the material,
            default is 1.56
            </summary>
            <since>6.0</since>
        </member>
        <member name="P:Rhino.DocObjects.Material.RefractionGlossiness">
            <summary>
            Gets or sets the refraction glossiness.
            </summary>
            <since>6.0</since>
        </member>
        <member name="P:Rhino.DocObjects.Material.ReflectionGlossiness">
            <summary>
            Gets or sets the reflection glossiness.
            </summary>
            <since>6.0</since>
        </member>
        <member name="P:Rhino.DocObjects.Material.FresnelReflections">
            <summary>
            Gets or sets if Fresnel reflections are used.
            </summary>
            <since>6.0</since>
        </member>
        <member name="P:Rhino.DocObjects.Material.DisableLighting">
            <since>6.0</since>
        </member>
        <member name="P:Rhino.DocObjects.Material.AlphaTransparency">
            <since>6.0</since>
        </member>
        <member name="P:Rhino.DocObjects.Material.IsPhysicallyBased">
            <since>7.0</since>
        </member>
        <member name="P:Rhino.DocObjects.Material.PhysicallyBased">
            <since>7.0</since>
        </member>
        <member name="M:Rhino.DocObjects.Material.ToPhysicallyBased">
            <since>7.0</since>
        </member>
        <member name="P:Rhino.DocObjects.Material.Reflectivity">
            <summary>
            Gets or sets how reflective a material is, 0f is no reflection
            1f is 100% reflective.
            </summary>
            <since>5.7</since>
        </member>
        <member name="P:Rhino.DocObjects.Material.PreviewColor">
            <summary>
             Very simple preview color function for GUIs.
            </summary>
            <since>6.6</since>
        </member>
        <member name="P:Rhino.DocObjects.Material.DiffuseColor">
            <since>5.0</since>
        </member>
        <member name="P:Rhino.DocObjects.Material.AmbientColor">
            <since>5.0</since>
        </member>
        <member name="P:Rhino.DocObjects.Material.EmissionColor">
            <since>5.0</since>
        </member>
        <member name="P:Rhino.DocObjects.Material.SpecularColor">
            <since>5.0</since>
        </member>
        <member name="P:Rhino.DocObjects.Material.ReflectionColor">
            <since>5.0</since>
        </member>
        <member name="P:Rhino.DocObjects.Material.TransparentColor">
            <since>5.0</since>
        </member>
        <member name="M:Rhino.DocObjects.Material.Default">
            <summary>
            Set material to default settings.
            </summary>
            <since>5.0</since>
        </member>
        <member name="M:Rhino.DocObjects.Material.SetTexture(Rhino.DocObjects.Texture,Rhino.DocObjects.TextureType)">
            <summary>
            Set the texture that corresponds with the specified texture type for this material.
            </summary>
            <param name="texture">An instance of Rhino.DocObjects.Texture</param>
            <param name="which">Use Rhino.DocObjects.TextureType</param>
            <returns></returns>
            <since>7.0</since>
        </member>
        <member name="M:Rhino.DocObjects.Material.GetTexture(Rhino.DocObjects.TextureType)">
            <summary>
            Get the texture that corresponds with the specified texture type for this material.
            </summary>
            <param name="which"></param>
            <returns></returns>
            <since>7.0</since>
        </member>
        <member name="M:Rhino.DocObjects.Material.GetTextures">
            <summary>
            Get array of textures that this material uses
            </summary>
            <returns></returns>
            <since>5.7</since>
        </member>
        <member name="M:Rhino.DocObjects.Material.GetBitmapTexture">
            <since>5.0</since>
            <seealso cref="M:Rhino.DocObjects.Material.GetTexture(Rhino.DocObjects.TextureType)"/>
        </member>
        <member name="M:Rhino.DocObjects.Material.SetBitmapTexture(System.String)">
            <since>5.0</since>
            <seealso cref="M:Rhino.DocObjects.Material.SetTexture(Rhino.DocObjects.Texture,Rhino.DocObjects.TextureType)"/>
        </member>
        <member name="M:Rhino.DocObjects.Material.SetBitmapTexture(Rhino.DocObjects.Texture)">
            <since>5.0</since>
            <seealso cref="M:Rhino.DocObjects.Material.SetTexture(Rhino.DocObjects.Texture,Rhino.DocObjects.TextureType)"/>
        </member>
        <member name="M:Rhino.DocObjects.Material.GetBumpTexture">
            <summary>
            Gets the bump texture of this material.
            </summary>
            <returns>A texture; or null if no bump texture has been added to this material.</returns>
            <since>5.0</since>
            <seealso cref="M:Rhino.DocObjects.Material.GetTexture(Rhino.DocObjects.TextureType)"/>
        </member>
        <member name="M:Rhino.DocObjects.Material.SetBumpTexture(System.String)">
            <since>5.0</since>
            <seealso cref="M:Rhino.DocObjects.Material.SetTexture(Rhino.DocObjects.Texture,Rhino.DocObjects.TextureType)"/>
        </member>
        <member name="M:Rhino.DocObjects.Material.SetBumpTexture(Rhino.DocObjects.Texture)">
            <since>5.0</since>
            <seealso cref="M:Rhino.DocObjects.Material.SetTexture(Rhino.DocObjects.Texture,Rhino.DocObjects.TextureType)"/>
        </member>
        <member name="M:Rhino.DocObjects.Material.GetEnvironmentTexture">
            <since>5.0</since>
            <seealso cref="M:Rhino.DocObjects.Material.GetTexture(Rhino.DocObjects.TextureType)"/>
        </member>
        <member name="M:Rhino.DocObjects.Material.SetEnvironmentTexture(System.String)">
            <since>5.0</since>
            <seealso cref="M:Rhino.DocObjects.Material.SetTexture(Rhino.DocObjects.Texture,Rhino.DocObjects.TextureType)"/>
        </member>
        <member name="M:Rhino.DocObjects.Material.SetEnvironmentTexture(Rhino.DocObjects.Texture)">
            <since>5.0</since>
            <seealso cref="M:Rhino.DocObjects.Material.SetTexture(Rhino.DocObjects.Texture,Rhino.DocObjects.TextureType)"/>
        </member>
        <member name="M:Rhino.DocObjects.Material.GetTransparencyTexture">
            <since>5.0</since>
            <seealso cref="M:Rhino.DocObjects.Material.GetTexture(Rhino.DocObjects.TextureType)"/>
        </member>
        <member name="M:Rhino.DocObjects.Material.SetTransparencyTexture(System.String)">
            <since>5.0</since>
            <seealso cref="M:Rhino.DocObjects.Material.SetTexture(Rhino.DocObjects.Texture,Rhino.DocObjects.TextureType)"/>
        </member>
        <member name="M:Rhino.DocObjects.Material.SetTransparencyTexture(Rhino.DocObjects.Texture)">
            <since>5.0</since>
            <seealso cref="M:Rhino.DocObjects.Material.SetTexture(Rhino.DocObjects.Texture,Rhino.DocObjects.TextureType)"/>
        </member>
        <member name="M:Rhino.DocObjects.Material.CommitChanges">
            <since>5.0</since>
        </member>
        <member name="M:Rhino.DocObjects.Material.SetUserString(System.String,System.String)">
            <summary>
            Attach a user string (key,value combination) to this geometry.
            </summary>
            <param name="key">id used to retrieve this string.</param>
            <param name="value">string associated with key.</param>
            <returns>true on success.</returns>
            <since>5.0</since>
        </member>
        <member name="M:Rhino.DocObjects.Material.GetUserString(System.String)">
            <summary>
            Gets a user string.
            </summary>
            <param name="key">id used to retrieve the string.</param>
            <returns>string associated with the key if successful. null if no key was found.</returns>
            <since>5.0</since>
        </member>
        <member name="P:Rhino.DocObjects.Material.UserStringCount">
            <since>5.0</since>
        </member>
        <member name="M:Rhino.DocObjects.Material.GetUserStrings">
            <summary>
            Gets an independent copy of the collection of (user text key, user text value) pairs attached to this object.
            </summary>
            <returns>A collection of key strings and values strings. This </returns>
            <since>5.0</since>
        </member>
        <member name="T:Rhino.DocObjects.SelectionMethod">
            <summary>
            Defines enumerated values for several kinds of selection methods.
            </summary>
            <since>5.0</since>
        </member>
        <member name="F:Rhino.DocObjects.SelectionMethod.Other">
            <summary>
            Selected by non-mouse method (SelAll, etc.)
            </summary>
        </member>
        <member name="F:Rhino.DocObjects.SelectionMethod.MousePick">
            <summary>
            Selected by a mouse click on the object.
            </summary>
        </member>
        <member name="F:Rhino.DocObjects.SelectionMethod.WindowBox">
            <summary>
            Selected by a mouse selection window box. 
            Window selection indicates the object is completely contained by the selection rectangle.
            </summary>
        </member>
        <member name="F:Rhino.DocObjects.SelectionMethod.CrossingBox">
            <summary>
            Selected by a mouse selection crossing box. 
            A crossing selection indicates the object intersects with the selection rectangle.
            </summary>
        </member>
        <member name="T:Rhino.DocObjects.ObjectAttributes">
            <summary>
            Attributes (color, material, layer,...) associated with a rhino object
            </summary>
        </member>
        <member name="M:Rhino.DocObjects.ObjectAttributes.#ctor">
            <since>5.0</since>
        </member>
        <member name="M:Rhino.DocObjects.ObjectAttributes.Duplicate">
            <summary>
            Constructs a copy of this <see cref="T:Rhino.DocObjects.ObjectAttributes"/> instance.
            </summary>
            <returns>A new instance on success, or null on failure.</returns>
            <since>5.0</since>
        </member>
        <member name="P:Rhino.DocObjects.ObjectAttributes.Mode">
            <summary>
            An object must be in one of three modes: normal, locked or hidden.
            If an object is in normal mode, then the object's layer controls visibility
            and selectability. If an object is locked, then the object's layer controls
            visibility by the object cannot be selected. If the object is hidden, it is
            not visible and it cannot be selected.
            </summary>
            <since>5.0</since>
        </member>
        <member name="M:Rhino.DocObjects.ObjectAttributes.Transform(Rhino.Geometry.Transform)">
            <summary>
            Apply a transformation.
            </summary>
            <param name="xform">The transformation.</param>
            <returns>true if successful, false otherwise.</returns>
            <since>6.0</since>
        </member>
        <member name="P:Rhino.DocObjects.ObjectAttributes.IsInstanceDefinitionObject">
            <summary>
            Use this query to determine if an object is part of an instance definition.
            </summary>
            <since>5.0</since>
        </member>
        <member name="P:Rhino.DocObjects.ObjectAttributes.Visible">
            <summary>Gets or sets an object's visibility.</summary>
            <since>5.0</since>
        </member>
        <member name="P:Rhino.DocObjects.ObjectAttributes.CastsShadows">
            <summary>
            Gets or sets an object's casts shadows property, or whether or not an object casts shadows on other objects and a ground plane.
            </summary>
            <since>6.0</since>
        </member>
        <member name="P:Rhino.DocObjects.ObjectAttributes.ReceivesShadows">
            <summary>
            Gets or sets an object's receives shadows property, or whether or not an object receives shadows from other objects.
            </summary>
            <since>6.0</since>
        </member>
        <member name="P:Rhino.DocObjects.ObjectAttributes.LinetypeSource">
            <summary>
            The Linetype used to display an object is specified in one of two ways.
            If LinetypeSource is ON::linetype_from_layer, then the object's layer ON_Layer::Linetype() is used.
            If LinetypeSource is ON::linetype_from_object, then value of m_linetype is used.
            </summary>
            <since>5.0</since>
        </member>
        <member name="P:Rhino.DocObjects.ObjectAttributes.ColorSource">
            <summary>
            The color used to display an object is specified in one of three ways.
            If ColorSource is ON::color_from_layer, then the object's layer ON_Layer::Color() is used.
            If ColorSource is ON::color_from_object, then value of m_color is used.
            If ColorSource is ON::color_from_material, then the diffuse color of the object's
            render material is used.  See ON_3dmObjectAttributes::MaterialSource() to
            determine where to get the definition of the object's render material.
            </summary>
            <example>
            <code source='examples\vbnet\ex_modifyobjectcolor.vb' lang='vbnet'/>
            <code source='examples\cs\ex_modifyobjectcolor.cs' lang='cs'/>
            <code source='examples\py\ex_modifyobjectcolor.py' lang='py'/>
            </example>
            <since>5.0</since>
        </member>
        <member name="P:Rhino.DocObjects.ObjectAttributes.PlotColorSource">
            <summary>
            The color used to plot an object on paper is specified in one of three ways.
            If PlotColorSource is ON::plot_color_from_layer, then the object's layer ON_Layer::PlotColor() is used.
            If PlotColorSource is ON::plot_color_from_object, then value of PlotColor() is used.
            </summary>
            <since>5.0</since>
        </member>
        <member name="P:Rhino.DocObjects.ObjectAttributes.PlotWeightSource">
            <since>5.0</since>
        </member>
        <member name="M:Rhino.DocObjects.ObjectAttributes.GetCustomSectionStyle">
            <summary>
             Get an optional custom section style associated with these attributes.
            </summary>
             <since>8.0</since>
        </member>
        <member name="M:Rhino.DocObjects.ObjectAttributes.SetCustomSectionStyle(Rhino.DocObjects.SectionStyle)">
            <since>8.0</since>
        </member>
        <member name="M:Rhino.DocObjects.ObjectAttributes.RemoveCustomSectionStyle">
            <since>8.0</since>
        </member>
        <member name="P:Rhino.DocObjects.ObjectAttributes.SectionAttributesSource">
            <summary>
            Where section attributes are read from
            </summary>
            <since>8.0</since>
        </member>
        <member name="P:Rhino.DocObjects.ObjectAttributes.LinetypePatternScale">
            <summary>
            Per object linetype scale
            </summary>
            <since>8.0</since>
        </member>
        <member name="P:Rhino.DocObjects.ObjectAttributes.HatchBackgroundFillColor">
            <summary>
            Fill color for hatches (default is Color.Empty)
            </summary>
            <since>8.0</since>
        </member>
        <member name="P:Rhino.DocObjects.ObjectAttributes.HatchBoundaryVisible">
            <summary>
            Draw the bounrdaries for a hatch (default is false)
            </summary>
            <since>8.0</since>
        </member>
        <member name="P:Rhino.DocObjects.ObjectAttributes.ClippingPlaneLabelStyle">
            <summary>
            Defines how a label for a clipping plane object should be shown
            </summary>
            <since>8.0</since>
        </member>
        <member name="M:Rhino.DocObjects.ObjectAttributes.GetCustomLinetype">
            <summary>
             Get an optional custom linetype associated with these attributes. If null,
             then the attributes use the linetype index to determine it's linetype
            </summary>
             <since>8.0</since>
        </member>
        <member name="M:Rhino.DocObjects.ObjectAttributes.SetCustomLinetype(Rhino.DocObjects.Linetype)">
            <since>8.0</since>
        </member>
        <member name="M:Rhino.DocObjects.ObjectAttributes.RemoveCustomLinetype">
            <since>8.0</since>
        </member>
        <member name="M:Rhino.DocObjects.ObjectAttributes.HasDisplayModeOverride(System.Guid)">
            <summary>
            Determines if an object has a display mode override for a given viewport.
            </summary>
            <param name="viewportId">Id of a Rhino Viewport.</param>
            <returns>true if the object has a display mode override for the viewport; otherwise, false.</returns>
            <example>
            <code source='examples\vbnet\ex_objectdisplaymode.vb' lang='vbnet'/>
            <code source='examples\cs\ex_objectdisplaymode.cs' lang='cs'/>
            <code source='examples\py\ex_objectdisplaymode.py' lang='py'/>
            </example>
            <since>5.0</since>
        </member>
        <member name="M:Rhino.DocObjects.ObjectAttributes.GetDisplayModeOverride(System.Guid)">
            <summary>
            Returns the id of the display mode of an objects. Object display modes are view based. Thus, it is possible to have an object display different in different views.
            </summary>
            <param name="viewportId">Id of a Rhino Viewport.</param>
            <returns>A display node id if the object has a display mode override for the viewport; otherwise Guid.Empty is returned.</returns>
            <since>6.18</since>
        </member>
        <member name="M:Rhino.DocObjects.ObjectAttributes.RemoveDisplayModeOverride">
            <summary>
            By default, objects are drawn using the display mode of the viewport that
            the object is being drawn in. Setting a specific display mode, instructs
            Rhino to always use that display mode, regardless of the viewport's mode.
            This function resets an object to use the viewport's display mode for all
            viewports.
            </summary>
            <since>5.0</since>
        </member>
        <member name="M:Rhino.DocObjects.ObjectAttributes.RemoveDisplayModeOverride(System.Guid)">
            <summary>
            By default, objects are drawn using the display mode of the viewport that
            the object is being drawn in. Setting a specific display mode, instructs
            Rhino to always use that display mode, regardless of the viewport's mode.
            This function resets an object to use the viewport's display mode.
            </summary>
            <param name="rhinoViewportId">viewport that display mode overrides should be cleared from.</param>
            <example>
            <code source='examples\vbnet\ex_objectdisplaymode.vb' lang='vbnet'/>
            <code source='examples\cs\ex_objectdisplaymode.cs' lang='cs'/>
            <code source='examples\py\ex_objectdisplaymode.py' lang='py'/>
            </example>
            <since>5.0</since>
        </member>
        <member name="M:Rhino.DocObjects.ObjectAttributes.AddHideInDetailOverride(System.Guid)">
            <summary> Make this object hidden in a given detail </summary>
            <param name="detailId"></param>
            <returns></returns>
            <since>6.1</since>
        </member>
        <member name="M:Rhino.DocObjects.ObjectAttributes.RemoveHideInDetailOverride(System.Guid)">
            <summary> Remove hidden in detail flag for a specific detail </summary>
            <param name="detailId"></param>
            <returns></returns>
            <since>6.1</since>
        </member>
        <member name="M:Rhino.DocObjects.ObjectAttributes.HasHideInDetailOverrideSet(System.Guid)">
            <summary>Is this object supposed to be hidden in a given detail</summary>
            <param name="detailId"></param>
            <returns></returns>
            <since>6.1</since>
        </member>
        <member name="M:Rhino.DocObjects.ObjectAttributes.GetHideInDetailOverrides">
            <summary>
            Get list of details that this object is supposed to be hidden in
            </summary>
            <returns></returns>
            <since>6.1</since>
        </member>
        <member name="P:Rhino.DocObjects.ObjectAttributes.CustomMeshingParameters">
            <summary>
            Returns or sets the per-object render meshing parameters, which controls the object's render mesh density.
            If this property is null, then the object uses the document's render meshing parameters.
            To remove the per-object render meshing parameters, set this property to null.
            </summary>
            <since>7.6</since>
        </member>
        <member name="P:Rhino.DocObjects.ObjectAttributes.ObjectId">
            <summary>
            Every object has a Guid (globally unique identifier, also known as UUID, or universally
            unique identifier). The default value is Guid.Empty.
            <para>
            When an object is added to a model, the value is checked.  If the value is Guid.Empty, a
            new Guid is created. If the value is not null but it is already used by another object
            in the model, a new Guid is created. If the value is not Guid.Empty and it is not used by
            another object in the model, then that value persists. When an object is updated, by
            a move for example, the value of ObjectId persists.
            </para>
            <para>This value is the same as the one returned by object.Id.</para>
            </summary>
            <since>5.0</since>
        </member>
        <member name="P:Rhino.DocObjects.ObjectAttributes.Name">
            <summary>
            Gets or sets an object optional text name.
            <para>More than one object in a model can have the same name and
            some objects may have no name.</para>
            </summary>
            <since>5.0</since>
        </member>
        <member name="P:Rhino.DocObjects.ObjectAttributes.Url">
            <summary>
            Objects may have an URL. There are no restrictions on what value this
            URL may have. As an example, if the object came from a commercial part
            library, the URL might point to the definition of that part.
            </summary>
            <since>6.8</since>
        </member>
        <member name="P:Rhino.DocObjects.ObjectAttributes.LayerIndex">
            <summary>
            Gets or sets an associated layer index.
            <para>Layer definitions in an OpenNURBS model are stored in a layer table.
            The layer table is conceptually an array of ON_Layer classes.  Every
            OpenNURBS object in a model is on some layer.  The object's layer
            is specified by zero based indices into the ON_Layer array.</para>
            </summary>
            <example>
            <code source='examples\vbnet\ex_moveobjectstocurrentlayer.vb' lang='vbnet'/>
            <code source='examples\cs\ex_moveobjectstocurrentlayer.cs' lang='cs'/>
            <code source='examples\py\ex_moveobjectstocurrentlayer.py' lang='py'/>
            </example>
            <since>5.0</since>
        </member>
        <member name="P:Rhino.DocObjects.ObjectAttributes.LinetypeIndex">
            <summary>
            Gets or sets the linetype index.
            <para>Linetype definitions in an OpenNURBS model are stored in a linetype table.
            The linetype table is conceptually an array of ON_Linetype classes. Every
            OpenNURBS object in a model references some linetype.  The object's linetype
            is specified by zero based indices into the ON_Linetype array.</para>
            <para>Index 0 is reserved for continuous linetype (no pattern).</para>
            </summary>
            <since>5.0</since>
        </member>
        <member name="P:Rhino.DocObjects.ObjectAttributes.MaterialIndex">
            <summary>
            Gets or sets the material index.
            <para>If you want something simple and fast, set the index of
            the rendering material.</para>
            </summary>
            <since>5.0</since>
            <seealso cref="!:RenderMaterial"/>
        </member>
        <member name="P:Rhino.DocObjects.ObjectAttributes.MaterialSource">
            <summary>
            Determines if the simple material should come from the object or from it's layer.
            High quality rendering plug-ins should use m_rendering_attributes.
            </summary>
            <since>5.0</since>
            <seealso cref="!:RenderMaterial"/>
        </member>
        <member name="P:Rhino.DocObjects.ObjectAttributes.Decals">
            <summary>
            Gets all object decals associated with this object.
            </summary>
            <since>5.10</since>
        </member>
        <member name="P:Rhino.DocObjects.ObjectAttributes.OCSMappingChannelId">
            <summary>
            The mapping channel id to use when calling MappingChannel to retrieve the OCS mapping if there is one.
            </summary>
            <returns>The mapping channel id to use when calling MappingChannel to retrieve the OCS mapping if there is one.</returns>
            <since>7.17</since>
        </member>
        <member name="T:Rhino.DocObjects.ObjectAttributes.ObjectFrameFlags">
            <summary>
            
            </summary>
            <since>8.0</since>
        </member>
        <member name="F:Rhino.DocObjects.ObjectAttributes.ObjectFrameFlags.Standard">
            <summary>
            Never returns unset plane.  Will always calculate the plane even if nothing is stored.
            </summary>
        </member>
        <member name="F:Rhino.DocObjects.ObjectAttributes.ObjectFrameFlags.IncludeScaleTransforms">
            <summary>
            By default, the plane is orientation and rotation only.  But scale transforms are stored if you need them.
            </summary>
        </member>
        <member name="F:Rhino.DocObjects.ObjectAttributes.ObjectFrameFlags.ReturnUnset">
            <summary>
            The object frame may be stored unset by default.  If this is the case, and you want to know if it really is unset, this will tell you.
            </summary>
        </member>
        <member name="M:Rhino.DocObjects.ObjectAttributes.ObjectFrame">
            <since>8.0</since>
        </member>
        <member name="M:Rhino.DocObjects.ObjectAttributes.SetObjectFrame(Rhino.Geometry.Transform)">
            <since>8.0</since>
        </member>
        <member name="M:Rhino.DocObjects.ObjectAttributes.SetObjectFrame(Rhino.Geometry.Plane)">
            <since>8.0</since>
        </member>
        <member name="P:Rhino.DocObjects.ObjectAttributes.File3dmMeshModifiers">
            <summary>
            Get an object that provides access to mesh modifiers when the attributes is for a File3dmObject.
            </summary>
            <since>8.0</since>
        </member>
        <member name="P:Rhino.DocObjects.ObjectAttributes.MaterialRefs">
            <summary>
            If you are developing a high quality plug-in renderer, and a user is
            assigning a custom render material to this object, then add rendering
            material information to the MaterialRefs dictionary.
            
            Note to developers:
             As soon as the MaterialRefs dictionary contains items rendering
             material queries slow down.  Do not populate the MaterialRefs
            dictionary when setting the MaterialIndex will take care of your needs.
            </summary>
            <since>5.10</since>
        </member>
        <member name="P:Rhino.DocObjects.ObjectAttributes.ObjectColor">
            <summary>
            If ON::color_from_object == ColorSource, then color is the object's display color.
            </summary>
            <example>
            <code source='examples\vbnet\ex_modifyobjectcolor.vb' lang='vbnet'/>
            <code source='examples\cs\ex_modifyobjectcolor.cs' lang='cs'/>
            <code source='examples\py\ex_modifyobjectcolor.py' lang='py'/>
            </example>
            <since>5.0</since>
        </member>
        <member name="P:Rhino.DocObjects.ObjectAttributes.PlotColor">
            <summary>
            If plot_color_from_object == PlotColorSource, then PlotColor is the object's plotting color.
            </summary>
            <since>5.0</since>
        </member>
        <member name="P:Rhino.DocObjects.ObjectAttributes.HasMapping">
            <summary>
            A mapping from any plug-in source is associated with these attributes
            Need to do this here to respond correctly to ModifyObjectAttributes event
            </summary>
            <since>5.10</since>
        </member>
        <member name="P:Rhino.DocObjects.ObjectAttributes.DisplayOrder">
            <summary>
            Display order used to force objects to be drawn on top or behind each other.
            Larger numbers draw on top of smaller numbers.
            <para>0  = draw object in standard depth buffered order</para>
            <para>&lt;0 = draw object behind "normal" draw order objects</para>
            <para>&gt;0 = draw object on top of "normal" draw order objects</para>
            </summary>
            <example>
            <code source='examples\vbnet\ex_displayorder.vb' lang='vbnet'/>
            <code source='examples\cs\ex_displayorder.cs' lang='cs'/>
            <code source='examples\py\ex_displayorder.py' lang='py'/>
            </example>
            <since>5.10</since>
        </member>
        <member name="P:Rhino.DocObjects.ObjectAttributes.PlotWeight">
            <summary>
            Plot weight in millimeters.
            =0.0 means use the default width
            &lt;0.0 means don't plot (visible for screen display, but does not show on plot)
            </summary>
            <since>5.0</since>
        </member>
        <member name="P:Rhino.DocObjects.ObjectAttributes.ObjectDecoration">
            <summary>
            Used to indicate an object has a decoration (like an arrowhead on a curve)
            </summary>
            <since>5.0</since>
        </member>
        <member name="P:Rhino.DocObjects.ObjectAttributes.WireDensity">
            <summary>
            When a surface object is displayed in wireframe, this controls
            how many isoparametric wires are used.
            value    number of isoparametric wires
            -1       boundary wires (off)
            0        boundary and knot wires 
            1        boundary and knot wires and, if there are no interior knots, a single interior wire.
            N>=2     boundary and knot wires and (N+1) interior wires.
            </summary>
            <example>
            <code source='examples\vbnet\ex_isocurvedensity.vb' lang='vbnet'/>
            <code source='examples\cs\ex_isocurvedensity.cs' lang='cs'/>
            <code source='examples\py\ex_isocurvedensity.py' lang='py'/>
            </example>
            <since>5.0</since>
        </member>
        <member name="P:Rhino.DocObjects.ObjectAttributes.ViewportId">
            <summary>
            If ViewportId is nil, the object is active in all viewports. If ViewportId is not nil, then 
            this object is only active in a specific view. This field is primarily used to assign page
            space objects to a specific page, but it can also be used to restrict model space to a
            specific view.
            </summary>
            <since>5.0</since>
        </member>
        <member name="P:Rhino.DocObjects.ObjectAttributes.Space">
            <summary>
            Starting with V4, objects can be in either model space or page space.
            If an object is in page space, then ViewportId is not nil and
            identifies the page it is on.
            </summary>
            <since>5.0</since>
        </member>
        <member name="P:Rhino.DocObjects.ObjectAttributes.GroupCount">
            <summary>number of groups object belongs to.</summary>
            <since>5.0</since>
        </member>
        <member name="M:Rhino.DocObjects.ObjectAttributes.GetGroupList">
            <summary>
            Returns an array of GroupCount group indices.  If GroupCount is zero, then GetGroupList() returns null.
            </summary>
            <returns>An array of group indices. null might be returned in place of an empty array.</returns>
            <since>5.0</since>
        </member>
        <member name="M:Rhino.DocObjects.ObjectAttributes.AddToGroup(System.Int32)">
            <summary>
            Adds object to the group with specified index by appending index to
            group list.
            <para>If the object is already in group, nothing is changed.</para>
            </summary>
            <param name="groupIndex">The index that will be added.</param>
            <since>5.0</since>
        </member>
        <member name="M:Rhino.DocObjects.ObjectAttributes.RemoveFromGroup(System.Int32)">
            <summary>
            removes object from the group with specified index.
            <para>If the object is not in the group, nothing is changed.</para>
            </summary>
            <param name="groupIndex">The index that will be removed.</param>
            <since>5.0</since>
        </member>
        <member name="M:Rhino.DocObjects.ObjectAttributes.RemoveFromAllGroups">
            <summary>Removes object from all groups.</summary>
            <since>5.0</since>
        </member>
        <member name="M:Rhino.DocObjects.ObjectAttributes.SetUserString(System.String,System.String)">
            <summary>
            Attach a user string (key,value combination) to this geometry.
            </summary>
            <param name="key">id used to retrieve this string.</param>
            <param name="value">string associated with key. If null, the key will be removed</param>
            <returns>true on success.</returns>
            <since>5.0</since>
        </member>
        <member name="M:Rhino.DocObjects.ObjectAttributes.GetUserString(System.String)">
            <summary>
            Gets a user string.
            </summary>
            <param name="key">id used to retrieve the string.</param>
            <returns>string associated with the key if successful. null if no key was found.</returns>
            <since>5.0</since>
        </member>
        <member name="P:Rhino.DocObjects.ObjectAttributes.UserStringCount">
            <since>5.0</since>
        </member>
        <member name="M:Rhino.DocObjects.ObjectAttributes.GetUserStrings">
            <summary>
            Gets an independent copy of the collection of (user text key, user text value) pairs attached to this object.
            </summary>
            <returns>A collection of key strings and values strings. This </returns>
            <since>5.0</since>
        </member>
        <member name="M:Rhino.DocObjects.ObjectAttributes.DeleteUserString(System.String)">
            <since>6.0</since>
        </member>
        <member name="M:Rhino.DocObjects.ObjectAttributes.DeleteAllUserStrings">
            <since>6.0</since>
        </member>
        <member name="T:Rhino.RuntimeEnvironment">
            <summary>
            ON::RuntimeEnvironment identifies a runtime environment (operating system).
            This value is saved in binary archives so appropriate adjustments
            to resources provided by runtime environments, like fonts, can be made
            when an archive created in one runtime environment is used in another.
            </summary>
        </member>
        <member name="F:Rhino.RuntimeEnvironment.Unset">
            <summary>
             ON::RuntimeEnvironment::Unset indicates no runtime is set.
            </summary>
        </member>
        <member name="F:Rhino.RuntimeEnvironment.None">
            <summary>
             ON::RuntimeEnvironment::None indicates no runtime.
             This is a different condition from ON::Runtime::Unset. 
            </summary>
        </member>
        <member name="F:Rhino.RuntimeEnvironment.Windows">
            <summary>
             ON::RuntimeEnvironment::Windows indicates some version of Microsoft Windows.
            </summary>
        </member>
        <member name="F:Rhino.RuntimeEnvironment.Apple">
            <summary>
             ON::RuntimeEnvironment::Apple indicates some version of Apple OS X or iOS.
            </summary>
        </member>
        <member name="F:Rhino.RuntimeEnvironment.Android">
            <summary>
             ON::RuntimeEnvironment::Android indicates some version of Google Android.
            </summary>
        </member>
        <member name="F:Rhino.RuntimeEnvironment.Linux">
            <summary>
             ON::RuntimeEnvironment::Linux indicates some version of Linux.
            </summary>
        </member>
        <member name="T:Rhino.ReadFileResult">
            <summary>
            ON::ReadFileResult reports what happened when a file read was attempted.
            </summary>
        </member>
        <member name="F:Rhino.ReadFileResult.Unset">
            <summary>
             No result is available.
            </summary>
        </member>
        <member name="F:Rhino.ReadFileResult.Completed">
            <summary>
             Read completed with no errors.
            </summary>
        </member>
        <member name="F:Rhino.ReadFileResult.CompletedWithErrors">
            <summary>
             Read completed with non fatal errors.
            </summary>
        </member>
        <member name="F:Rhino.ReadFileResult.Failed">
            <summary>
             Read failed.
            </summary>
        </member>
        <member name="T:Rhino.UnitSystem">
            <summary>
            ON::LengthUnitSystem identifies a length unit system
            United States customary length units references:
              http://www.nist.gov/pml/wmd/metric/upload/frn-59-5442-1959.pdf
              http://en.wikipedia.org/wiki/United_States_customary_units
              http://en.wikipedia.org/wiki/International_yard_and_pound
            </summary>
        </member>
        <member name="F:Rhino.UnitSystem.None">
            <summary>
             ON::LengthUnitSystem::None indicates no length unit system. The scale factor
             when converting between a specified unit system and None is always 1.0.
             ON::LengthUnitSystem::None is used as a unit system for models and
             instance definitions that should be imported or referenced with no
             scaling applied.
            </summary>
        </member>
        <member name="F:Rhino.UnitSystem.Angstroms">
            <summary>
             1 angstroms = 1.0e-10 meters
            </summary>
        </member>
        <member name="F:Rhino.UnitSystem.Nanometers">
            <summary>
             1 nanometer = 1.0e-9 meters
            </summary>
        </member>
        <member name="F:Rhino.UnitSystem.Microns">
            <summary>
             1 micron = 1.0e-6 meters
            </summary>
        </member>
        <member name="F:Rhino.UnitSystem.Millimeters">
            <summary>
             1 millimeter = 1.0e-3 meters
            </summary>
        </member>
        <member name="F:Rhino.UnitSystem.Centimeters">
            <summary>
             1 centimeter = 1.0e-2 meters
            </summary>
        </member>
        <member name="F:Rhino.UnitSystem.Decimeters">
            <summary>
             1 decimeter = 1.0e-1 meters
            </summary>
        </member>
        <member name="F:Rhino.UnitSystem.Meters">
            <summary>
             SI meter length unit
            </summary>
        </member>
        <member name="F:Rhino.UnitSystem.Dekameters">
            <summary>
             1 dekameter = 1.0e+1 meters
            </summary>
        </member>
        <member name="F:Rhino.UnitSystem.Hectometers">
            <summary>
             1 hectometer = 1.0e+2 meters
            </summary>
        </member>
        <member name="F:Rhino.UnitSystem.Kilometers">
            <summary>
             1 kilometer = 1.0e+3 meters
            </summary>
        </member>
        <member name="F:Rhino.UnitSystem.Megameters">
            <summary>
             1 megameter = 1.0e+6 meters
            </summary>
        </member>
        <member name="F:Rhino.UnitSystem.Gigameters">
            <summary>
             1 gigameter = 1.0e+9 meters
            </summary>
        </member>
        <member name="F:Rhino.UnitSystem.Microinches">
            <summary>
             1 microinches = 2.54e-8 meters = 1.0e-6 inches
            </summary>
        </member>
        <member name="F:Rhino.UnitSystem.Mils">
            <summary>
             1 mil = 2.54e-5 meters = 0.001 inches
            </summary>
        </member>
        <member name="F:Rhino.UnitSystem.Inches">
            <summary>
             1 inch = 0.0254 meters = 1/12 foot
            </summary>
        </member>
        <member name="F:Rhino.UnitSystem.Feet">
            <summary>
             1 foot = 0.3048  meters (12 inches)
            </summary>
        </member>
        <member name="F:Rhino.UnitSystem.Yards">
            <summary>
             1 foot = 0.3048 meters = 12 inches
            </summary>
        </member>
        <member name="F:Rhino.UnitSystem.Miles">
            <summary>
             1 US statute mile = 1609.344 meters = 5280 feet
            </summary>
        </member>
        <member name="F:Rhino.UnitSystem.PrinterPoints">
            <summary>
             1 printer point = 1/72 inch
            </summary>
        </member>
        <member name="F:Rhino.UnitSystem.PrinterPicas">
            <summary>
             1 printer pica = 1/6 inch
            </summary>
        </member>
        <member name="F:Rhino.UnitSystem.NauticalMiles">
            <summary>
             1 nautical mile = 1852 meters
             Approximately 1 minute of arc on a terrestrial great circle.
             Reference: http://en.wikipedia.org/wiki/Nautical_mile
            </summary>
        </member>
        <member name="F:Rhino.UnitSystem.AstronomicalUnits">
            <summary>
             1 astronomical unit = 1.4959787e+11 meters
             An astronomical unit (au) is the mean distance from the 
             center of the earth to the center of the sun.
             References:
               http://en.wikipedia.org/wiki/Astronomical_unit (1.4959787e+11 meters)
               http://units.nist.gov/Pubs/SP811/appenB9.htm (1.495979e+11 meters)
            </summary>
        </member>
        <member name="F:Rhino.UnitSystem.LightYears">
            <summary>
             1 light year = 9.4607304725808e+15 meters
             A light year is the distance light travels in one Julian year.
                The speed of light is exactly 299792458 meters/second.
                A Julian year is exactly 365.25 * 86400 seconds and is 
                approximately the time it takes for one earth orbit.
             References: 
               http://en.wikipedia.org/wiki/Light_year (9.4607304725808e+15 meters)
               http://units.nist.gov/Pubs/SP811/appenB9.htm (9.46073e+15 meters)
            </summary>
        </member>
        <member name="F:Rhino.UnitSystem.Parsecs">
            <summary>
             1 parsec = 3.08567758e+16 meters
             References: 
               http://en.wikipedia.org/wiki/Parsec (3.08567758e+16 meters)
               http://units.nist.gov/Pubs/SP811/appenB9.htm (3.085678e+16)
            </summary>
        </member>
        <member name="F:Rhino.UnitSystem.CustomUnits">
            <summary>
             The name of a custom unit and the conversion to meters
             are saved in the ON_UnitSystem class.
            </summary>
        </member>
        <member name="F:Rhino.UnitSystem.Unset">
            <summary>
             The ON::LengthUnitSystem::Unset is used to indicate no unit system is set.
             This is a different condition from ON::LengthUnitSystem::None. 
            </summary>
        </member>
        <member name="T:Rhino.AngleUnitSystem">
            <summary>
            ON::AngleUnitSystem identifies an angle unit system
            </summary>
        </member>
        <member name="F:Rhino.AngleUnitSystem.None">
            <summary>
             ON::AngleUnitSystem::None indicates no angle unit system
             is specified and model angle unit system should be used.
            </summary>
        </member>
        <member name="F:Rhino.AngleUnitSystem.Turns">
            <summary>
             1 turn = 2pi radians. 
            </summary>
        </member>
        <member name="F:Rhino.AngleUnitSystem.Radians">
            <summary>
             1 turn = 2pi radians. 
            </summary>
        </member>
        <member name="F:Rhino.AngleUnitSystem.Degrees">
            <summary>
             360 arc degrees  = 1 turn = 2pi radians 
            </summary>
        </member>
        <member name="F:Rhino.AngleUnitSystem.Minutes">
            <summary>
             60 arc minutes = 1 arc degree
            </summary>
        </member>
        <member name="F:Rhino.AngleUnitSystem.Seconds">
            <summary>
             60 arc seconds = 1 arc minute
            </summary>
        </member>
        <member name="F:Rhino.AngleUnitSystem.Gradians">
            <summary>
             400 gradians = 2pi radians. 
            </summary>
        </member>
        <member name="F:Rhino.AngleUnitSystem.Unset">
            <summary>
             The ON::AngleUnitSystem::Unset is used to indicates no angle unit system 
             has been specified in user interface code.
            </summary>
        </member>
        <member name="T:Rhino.Runtime.NotLicensedException">
            <summary>
            Exception thrown when calling functions in RhinoCommon and the
            application is executing without a license
            </summary>
        </member>
        <member name="M:Rhino.Runtime.NotLicensedException.#ctor">
            <summary> Default constructor </summary>
            <since>7.0</since>
        </member>
        <member name="M:Rhino.Runtime.NotLicensedException.#ctor(System.String)">
            <summary>
            Create a new instance with a custom message
            </summary>
            <param name="message"></param>
            <since>7.0</since>
        </member>
        <member name="M:Rhino.Runtime.NotLicensedException.#ctor(System.String,System.Exception)">
            <summary>
            Create a new instance with a custom message and an inner exception
            </summary>
            <param name="message"></param>
            <param name="inner"></param>
            <since>7.0</since>
        </member>
        <member name="T:Rhino.Runtime.ConstOperationAttribute">
            <summary>
            Marks a method as const. This attribute is purely informative to help the
            developer know that a method on a class does not alter the class itself.
            </summary>
        </member>
        <member name="M:Rhino.Runtime.ConstOperationAttribute.#ctor">
            <summary>Basic constructor to mark a method as const</summary>
        </member>
        <member name="T:Rhino.Runtime.IPlatformServiceLocator">
            <summary>
            Get platform specific services that are used internally for
            general cross platform funtions in RhinoCommon. This includes
            services like localization and GUI components that have concrete
            implementations in the RhinoWindows or RhinoMac assemblies
            </summary>
        </member>
        <member name="M:Rhino.Runtime.IPlatformServiceLocator.GetService``1">
            <summary>Used to get service of a specific type</summary>
            <typeparam name="T"></typeparam>
            <returns></returns>
            <since>6.0</since>
        </member>
        <member name="T:Rhino.Runtime.IOperatingSystemInformation">
            <summary>
            Interface for querying information about the operating system Rhino is running on.
            </summary>
        </member>
        <member name="P:Rhino.Runtime.IOperatingSystemInformation.InstallationType">
            <summary>
            Returns Operating System Installation Type: "Client" | "Server" | "Unknown"
            </summary>
        </member>
        <member name="P:Rhino.Runtime.IOperatingSystemInformation.Edition">
            <summary>
            Returns Operating System Edition: "Professional" | "ServerDatacenter" | ... | "Unknown"
            </summary>
        </member>
        <member name="P:Rhino.Runtime.IOperatingSystemInformation.ProductName">
            <summary>
            Returns Operating System Product Name "Windows 10 Pro" | "Windows Server 2008 R2 Datacenter" | ... | "Unknown"
            </summary>
        </member>
        <member name="P:Rhino.Runtime.IOperatingSystemInformation.Version">
            <summary>
            Returns Operating System Version "6.1" | "6.3" | ... | "Unknown"
            </summary>
        </member>
        <member name="P:Rhino.Runtime.IOperatingSystemInformation.BuildNumber">
            <summary>
            Returns Operating System Build Number "11763" | "7601" | ... | "Unknown"
            </summary>
        </member>
        <member name="P:Rhino.Runtime.IOperatingSystemInformation.IsRunningInWindowsContainer">
            <summary>
            Checks if Operating System is running in a Windows Container
            </summary>
        </member>
        <member name="T:Rhino.Runtime.HostUtils">
            <summary>
            Contains static methods to deal with the runtime environment.
            </summary>
        </member>
        <member name="P:Rhino.Runtime.HostUtils.OperatingSystemEdition">
            <summary>
            Returns Operating System Edition: "Professional" | "ServerDatacenter" | ... | "Unknown"
            </summary>
            <since>6.15</since>
        </member>
        <member name="P:Rhino.Runtime.HostUtils.OperatingSystemInstallationType">
            <summary>
            Returns Operating System Installation Type: "Client" | "Server" | "Unknown"
            </summary>
            <since>6.15</since>
        </member>
        <member name="P:Rhino.Runtime.HostUtils.OperatingSystemProductName">
            <summary>
            Returns Operating System Edition: "Professional" | "ServerDatacenter" | ... | "Unknown"
            </summary>
            <since>6.15</since>
        </member>
        <member name="P:Rhino.Runtime.HostUtils.OperatingSystemVersion">
            <summary>
            Returns Operating System Version "6.1" | "6.3" | ... | "Unknown"
            </summary>
            <since>6.15</since>
        </member>
        <member name="P:Rhino.Runtime.HostUtils.OperatingSystemBuildNumber">
            <summary>
            Returns Operating System Build Number "11763" | "7601" | ... | "Unknown"
            </summary>
            <since>6.15</since>
        </member>
        <member name="M:Rhino.Runtime.HostUtils.GetPlatformService``1(System.String,System.String)">
            <summary>For internal use only. Loads an assembly for dependency injection via IPlatformServiceLocator.</summary>
            <param name="assemblyPath">The relative path of the assembly, relative to the position of RhinoCommon.dll</param>
            <param name="typeFullName">The full name of the type that is IPlatformServiceLocator. This is optional.</param>
            <typeparam name="T">The type of the service to be instantiated.</typeparam>
            <returns>An instance, or null.</returns>
            <since>6.0</since>
        </member>
        <member name="M:Rhino.Runtime.HostUtils.GetAssemblySearchPaths">
            <summary>
            Returns list of directory names where additional assemblies (plug-ins, DLLs, Grasshopper components)
            may be located
            </summary>
            <returns></returns>
            <since>5.0</since>
        </member>
        <member name="M:Rhino.Runtime.HostUtils.InPlaceConstCast(Rhino.Geometry.GeometryBase,System.Boolean)">
             <summary>
             DO NOT USE UNLESS YOU ARE CERTAIN ABOUT THE IMPLICATIONS.
             <para>This is an expert user function which should not be needed in most
             cases. This function is similar to a const_cast in C++ to allow an object
             to be made temporarily modifiable without causing RhinoCommon to convert
             the class from const to non-const by creating a duplicate.</para>
            
             <para>You must call this function with a true parameter, make your
             modifications, and then restore the const flag by calling this function
             again with a false parameter. If you have any questions, please
             contact McNeel developer support before using!</para>
             </summary>
             <param name="geometry">Some geometry.</param>
             <param name="makeNonConst">A boolean value.</param>
             <since>5.0</since>
        </member>
        <member name="P:Rhino.Runtime.HostUtils.RunningOnWindows">
            <summary>
            Tests if this process is currently executing on the Windows platform.
            </summary>
            <since>5.0</since>
        </member>
        <member name="P:Rhino.Runtime.HostUtils.RunningOnOSX">
            <summary>
            Tests if this process is currently executing on the Mac OSX platform.
            </summary>
            <since>5.0</since>
        </member>
        <member name="P:Rhino.Runtime.HostUtils.RunningInMono">
            <summary>
            Tests if this process is currently executing under the Mono runtime.
            </summary>
            <since>5.0</since>
        </member>
        <member name="P:Rhino.Runtime.HostUtils.RunningInRhino">
            <summary>
            Tests if RhinoCommon is currently executing inside of the Rhino.exe process.
            There are other cases where RhinoCommon could be running; specifically inside
            of Visual Studio when something like a windows form is being worked on in the
            resource editor or running stand-alone when compiled to be used as a version
            of OpenNURBS.
            </summary>
            <since>5.0</since>
        </member>
        <member name="M:Rhino.Runtime.HostUtils.DebugString(System.String)">
            <summary>
            Prints a debug message to the Rhino Command Line.
            The message will only appear if the SendDebugToCommandLine property is set to true.
            </summary>
            <param name="msg">Message to print.</param>
            <since>5.0</since>
        </member>
        <member name="M:Rhino.Runtime.HostUtils.DebugString(System.String,System.Object[])">
            <summary>
            Prints a debug message to the Rhino Command Line.
            The message will only appear if the SendDebugToCommandLine property is set to true.
            </summary>
            <param name="format">Message to format and print.</param>
            <param name="args">An Object array containing zero or more objects to format.</param>
            <since>5.0</since>
        </member>
        <member name="P:Rhino.Runtime.HostUtils.SendDebugToCommandLine">
            <summary>
            Gets or sets whether debug messages are printed to the command line.
            </summary>
            <since>5.0</since>
        </member>
        <member name="M:Rhino.Runtime.HostUtils.ExceptionReport(System.Exception)">
            <summary>
            Informs RhinoCommon of an exception that has been handled but that the developer wants to screen.
            </summary>
            <param name="ex">An exception.</param>
            <since>5.0</since>
        </member>
        <member name="M:Rhino.Runtime.HostUtils.ExceptionReport(System.String,System.Exception)">
            <summary>
            Informs RhinoCommon of an exception that has been handled but that the developer wants to screen.
            </summary>
            <param name="source">An exception source text.</param>
            <param name="ex">An exception.</param>
            <since>5.0</since>
        </member>
        <member name="T:Rhino.Runtime.HostUtils.ExceptionReportDelegate">
            <summary>
            Represents a reference to a method that will be called when an exception occurs.
            </summary>
            <param name="source">An exception source text.</param>
            <param name="ex">An exception.</param>
        </member>
        <member name="E:Rhino.Runtime.HostUtils.OnExceptionReport">
            <summary>
            Is raised when an exception is reported with one of the <see cref="M:Rhino.Runtime.HostUtils.ExceptionReport(System.Exception)"/> method.
            </summary>
            <since>5.0</since>
        </member>
        <member name="T:Rhino.Runtime.HostUtils.LogMessageType">
             <summary>
             Represents the type of message that is being sent to the OnSendLogMessageToCloud event
             </summary>
            
             <since>6.4</since>
        </member>
        <member name="F:Rhino.Runtime.HostUtils.LogMessageType.unknown">
            <summary>
            Unknown message type
            </summary>
        </member>
        <member name="F:Rhino.Runtime.HostUtils.LogMessageType.information">
            <summary>
            Message is informational only
            </summary>
        </member>
        <member name="F:Rhino.Runtime.HostUtils.LogMessageType.warning">
            <summary>
            Message is a warning
            </summary>
        </member>
        <member name="F:Rhino.Runtime.HostUtils.LogMessageType.error">
            <summary>
            Message is an error
            </summary>
        </member>
        <member name="F:Rhino.Runtime.HostUtils.LogMessageType.assert">
            <summary>
            Message is a debug ASSERT
            </summary>
        </member>
        <member name="M:Rhino.Runtime.HostUtils.SendLogMessageToCloudCallbackProc(Rhino.Runtime.HostUtils.LogMessageType,System.IntPtr,System.IntPtr,System.IntPtr)">
            <summary>
            Informs RhinoCommon of an message that has been handled but that the developer wants to screen.
            </summary>
            <param name="pwStringClass">The top level message type.</param>
            <param name="pwStringDesc">Finer grained description of the message.</param>
            <param name="pwStringMessage">The message.</param>
            <param name="msg_type">The messag type</param>
            <since>6.4</since>
        </member>
        <member name="T:Rhino.Runtime.HostUtils.SendLogMessageToCloudDelegate">
            <summary>
            Represents a reference to a method that will be called when an exception occurs.
            </summary>
            <param name="sClass">The top level message type</param>
            <param name="sDesc">Finer grained description of the message.</param>
            <param name="sMessage">The message.</param>
            <param name="msg_type">The messag type</param>
        </member>
        <member name="E:Rhino.Runtime.HostUtils.OnSendLogMessageToCloud">
            <summary>
            Is raised when an exception is reported with one of the  method.
            </summary>
            <since>6.4</since>
        </member>
        <member name="M:Rhino.Runtime.HostUtils.DebugDumpToString(Rhino.Geometry.GeometryBase)">
            <summary>
            Gets the debug dumps. This is a text description of the geometric contents.
            DebugDump() is intended for debugging and is not suitable for creating high
            quality text descriptions of an object.
            </summary>
            <param name="geometry">Some geometry.</param>
            <returns>A debug dump text.</returns>
            <since>5.0</since>
        </member>
        <member name="M:Rhino.Runtime.HostUtils.DebugDumpToString(Rhino.Geometry.BezierCurve)">
            <summary>
            Gets the debug dumps. This is a text description of the geometric contents.
            DebugDump() is intended for debugging and is not suitable for creating high
            quality text descriptions of an object.
            </summary>
            <param name="bezierCurve">curve to evaluate</param>
            <returns>A debug dump text.</returns>
            <since>5.0</since>
        </member>
        <member name="M:Rhino.Runtime.HostUtils.EvaluateTextFieldHelper(System.IntPtr,System.IntPtr,System.IntPtr,System.IntPtr,System.IntPtr)">
            <summary>
            This function is called from the C++ textfield evaluator
            </summary>
            <param name="ptrFormula"></param>
            <param name="pRhinoObject"></param>
            <param name="ptrParseResult"></param>
            <param name="pTopParent"></param>
            <param name="pImmediateParent">pointer to immediate instance object parent</param>
            <returns></returns>
        </member>
        <member name="M:Rhino.Runtime.HostUtils.InitializeRhinoCommon">
            <summary>
            Makes sure all static RhinoCommon components is set up correctly.
            This happens automatically when a plug-in is loaded, so you probably won't
            have to call this method.
            </summary>
            <remarks>Subsequent calls to this method will be ignored.</remarks>
            <since>5.0</since>
        </member>
        <member name="M:Rhino.Runtime.HostUtils.RhinoCommonExceptionHandler(System.String,System.Object,System.Exception)">
            <summary>
            For internal use only!!!
            Unhanded exception handler, writes stack trace to RhinoDotNet.txt file
            </summary>
            <param name="title">
            Exception title to write to text file
            </param>
            <param name="sender"></param>
            <param name="ex"></param>
            <since>6.0</since>
        </member>
        <member name="M:Rhino.Runtime.HostUtils.UnhandledThreadException(System.Object,System.Threading.ThreadExceptionEventArgs)">
            <summary>
            Exception handler for exceptions occurring on the UI thread
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
            <since>6.0</since>
        </member>
        <member name="M:Rhino.Runtime.HostUtils.InitializeZooClient">
            <summary>
            Initializes the ZooClient and Rhino license manager, this should get
            called automatically when RhinoCommon is loaded so you probably won't
            have to call this method.
            </summary>
            <since>5.6</since>
        </member>
        <member name="M:Rhino.Runtime.HostUtils.GetRhinoDotNetAssembly">
            <summary>
            Only works on Windows. Returns null on Mac.
            </summary>
            <returns>An assembly.</returns>
            <since>5.0</since>
        </member>
        <member name="M:Rhino.Runtime.HostUtils.SetInShutDown">
            <summary>
            Informs the runtime that the application is shutting down.
            </summary>
            <since>5.0</since>
        </member>
        <member name="T:Rhino.Runtime.RdkNotLoadedException">
            <summary>
            Is thrown when the RDK is not loaded.
            </summary>
        </member>
        <member name="M:Rhino.Runtime.RdkNotLoadedException.#ctor">
            <summary>
            Initializes a new instance of the RDK not loaded exception with a standard message.
            </summary>
            <since>5.0</since>
        </member>
        <member name="T:Rhino.Runtime.Interop">
            <summary>
            Contains static methods to marshal objects between RhinoCommon and legacy Rhino_DotNet or C++.
            </summary>
        </member>
        <member name="M:Rhino.Runtime.Interop.ColorToABGR(System.Drawing.Color)">
            <summary>
            Convert to internal color format used in Rhino
            </summary>
            <param name="c"></param>
            <returns></returns>
        </member>
        <member name="M:Rhino.Runtime.Interop.NativeGeometryConstPointer(Rhino.Geometry.GeometryBase)">
            <summary>
            Returns the underlying const ON_Geometry* for a RhinoCommon class. You should only
            be interested in using this function if you are writing C++ code.
            </summary>
            <param name="geometry">A geometry object. This can be null and in such a case <see cref="F:System.IntPtr.Zero"/> is returned.</param>
            <returns>A pointer to the const geometry.</returns>
            <since>5.0</since>
        </member>
        <member name="M:Rhino.Runtime.Interop.NativeGeometryNonConstPointer(Rhino.Geometry.GeometryBase)">
            <summary>
            Returns the underlying non-const ON_Geometry* for a RhinoCommon class. You should
            only be interested in using this function if you are writing C++ code.
            </summary>
            <param name="geometry">A geometry object. This can be null and in such a case <see cref="F:System.IntPtr.Zero"/> is returned.</param>
            <returns>A pointer to the non-const geometry.</returns>
            <since>5.0</since>
        </member>
        <member name="M:Rhino.Runtime.Interop.MarshalProgressAndCancelToken(System.Threading.CancellationToken,System.IProgress{System.Double},System.IntPtr@,System.Int32@,Rhino.ProgressReporter@,Rhino.ThreadTerminator@)">
            <summary>You must call Disable on the reporter output if it's not null when you are done with it. It will NOT clean itself.
            You should call Dispose on the terminator if it's not null, because that will keep it alive for the time of the computation.</summary>
        </member>
        <member name="M:Rhino.Runtime.Interop.CreateFromNativePointer(System.IntPtr)">
            <summary>
            Constructs a RhinoCommon Geometry class from a given ON_Geomety*. The ON_Geometry*
            must be declared on the heap and its lifetime becomes controlled by RhinoCommon.
            </summary>
            <param name="pGeometry">ON_Geometry*</param>
            <returns>The appropriate geometry class in RhinoCommon on success.</returns>
            <since>5.0</since>
        </member>
        <member name="M:Rhino.Runtime.Interop.TryCopyFromOnArc(System.Object,Rhino.Geometry.Arc@)">
            <summary>
            Attempts to copy the contents of a RMA.OpenNURBS.OnArc to a Rhino.Geometry.Arc.
            </summary>
            <param name="source">A source OnArc.</param>
            <param name="destination">A destination arc.</param>
            <returns>true if the operation succeeded; false otherwise.</returns>
            <since>5.0</since>
        </member>
        <member name="M:Rhino.Runtime.Interop.TryCopyToOnArc(Rhino.Geometry.Arc,System.Object)">
            <summary>
            Attempts to copy the contents of a Rhino.Geometry.Arc to a RMA.OpenNURBS.OnArc.
            </summary>
            <param name="source">A source arc.</param>
            <param name="destination">A destination OnArc.</param>
            <returns>true if the operation succeeded; false otherwise.</returns>
            <since>5.0</since>
        </member>
        <member name="M:Rhino.Runtime.Interop.FromOnBrep(System.Object)">
            <summary>
            Copies a Rhino_DotNet brep to a RhinoCommon brep class.
            </summary>
            <param name="source">
            RMA.OpenNURBS.IOnBrep or RMA.OpenNURBS.OnBrep.
            </param>
            <returns>
            RhinoCommon object on success. This will be an independent copy.
            </returns>
            <since>5.0</since>
        </member>
        <member name="M:Rhino.Runtime.Interop.FromOnSurface(System.Object)">
            <summary>
            Copies a Rhino_DotNet surface to a RhinoCommon Surface class.
            </summary>
            <param name="source">
            Any of the following in the RMA.OpenNURBS namespace are acceptable.
            IOnSurface, OnSurface, IOnPlaneSurface, OnPlaneSurface, IOnClippingPlaneSurface,
            OnClippingPlaneSurface, IOnNurbsSurface, OnNurbsSurfac, IOnRevSurface, OnRevSurface,
            IOnSumSurface, OnSumSurface.
            </param>
            <returns>
            RhinoCommon object on success. This will be an independent copy.
            </returns>
            <since>5.0</since>
        </member>
        <member name="M:Rhino.Runtime.Interop.FromOnMesh(System.Object)">
            <summary>
            Copies a Rhino_DotNet mesh to a RhinoCommon mesh class.
            </summary>
            <param name="source">
            RMA.OpenNURBS.IOnMesh or RMA.OpenNURBS.OnMesh.
            </param>
            <returns>
            RhinoCommon object on success. This will be an independent copy.
            </returns>
            <since>5.0</since>
        </member>
        <member name="M:Rhino.Runtime.Interop.FromOnCurve(System.Object)">
            <summary>
            Copies a Rhino_DotNet curve to a RhinoCommon curve class.
            </summary>
            <param name="source">
            RMA.OpenNURBS.IOnCurve or RMA.OpenNURBS.OnCurve.
            </param>
            <returns>
            RhinoCommon object on success. This will be an independent copy.
            </returns>
            <since>5.0</since>
        </member>
        <member name="M:Rhino.Runtime.Interop.ToOnBrep(Rhino.Geometry.Brep)">
            <summary>
            Constructs a Rhino_DotNet OnBrep that is a copy of a given brep.
            </summary>
            <param name="source">A source brep.</param>
            <returns>
            Rhino_DotNet object on success. This will be an independent copy.
            </returns>
            <since>5.0</since>
        </member>
        <member name="M:Rhino.Runtime.Interop.ToOnSurface(Rhino.Geometry.Surface)">
            <summary>
            Constructs a Rhino_DotNet OnSurface that is a copy of a given curve.
            </summary>
            <param name="source">A source brep.</param>
            <returns>
            Rhino_DotNet object on success. This will be an independent copy.
            </returns>
            <since>5.0</since>
        </member>
        <member name="M:Rhino.Runtime.Interop.ToOnMesh(Rhino.Geometry.Mesh)">
            <summary>
            Constructs a Rhino_DotNet OnMesh that is a copy of a given mesh.
            </summary>
            <param name="source">A source brep.</param>
            <returns>
            Rhino_DotNet object on success. This will be an independent copy.
            </returns>
            <since>5.0</since>
        </member>
        <member name="M:Rhino.Runtime.Interop.ToOnCurve(Rhino.Geometry.Curve)">
            <summary>
            Constructs a Rhino_DotNet OnCurve that is a copy of a given curve.
            </summary>
            <param name="source">A RhinoCommon source curve.</param>
            <returns>
            Rhino_DotNet object on success. This will be an independent copy.
            </returns>
            <since>5.0</since>
        </member>
        <member name="M:Rhino.Runtime.Interop.ToOnXform(Rhino.Geometry.Transform)">
            <summary>
            Constructs a Rhino_DotNet OnXform from a given RhinoCommon Transform.
            </summary>
            <param name="source">A RhinoCommon source transform.</param>
            <returns>
            Rhino_DotNet object on success. This will be an independent copy.
            </returns>
            <since>5.0</since>
        </member>
        <member name="T:Rhino.Runtime.InteropWrappers.IntPtrSafeHandle">
            <summary>
            Maintains a pointer created with the C++ new keyword
            and takes care to delete it even if the developers forgets or cannot call
            Dispose(). This class must be inherited and a meaningful constructor
            should set UnsafePointer. Only the first call of Dispose() triggers
            ReleaseUnsafePointer().
            </summary>
        </member>
        <member name="M:Rhino.Runtime.InteropWrappers.IntPtrSafeHandle.CreateFromMethods(System.Func{System.IntPtr},System.Action{System.IntPtr})">
            <summary>
            Creates on object responsible of creating and disposing an unsafe pointer.
            </summary>
            <param name="creator">The creation method.</param>
            <param name="disposer">The disposing method.</param>
            <returns></returns>
        </member>
        <member name="T:Rhino.Runtime.InteropWrappers.StringHolder">
            <summary>
            This class is used to pass strings back and forth between managed
            and unmanaged code.  This should not be needed by plug-ins.
            <para>If you are just dealing with an ON_wString*,
            use <see cref="T:Rhino.Runtime.InteropWrappers.StringWrapper"/></para>
            </summary>
        </member>
        <member name="M:Rhino.Runtime.InteropWrappers.StringHolder.ConstPointer">
            <summary>
            C++ pointer used to access the ON_wString, managed plug-ins should
            never need this.
            </summary>
            <returns></returns>
            <since>5.8</since>
        </member>
        <member name="M:Rhino.Runtime.InteropWrappers.StringHolder.NonConstPointer">
            <summary>
            C++ pointer used to access the ON_wString, managed plug-ins should
            never need this.
            </summary>
            <returns></returns>
            <since>5.8</since>
        </member>
        <member name="M:Rhino.Runtime.InteropWrappers.StringHolder.#ctor">
            <summary>
            Constructor
            </summary>
            <since>5.8</since>
        </member>
        <member name="M:Rhino.Runtime.InteropWrappers.StringHolder.Finalize">
            <summary>
            Destructor
            </summary>
        </member>
        <member name="M:Rhino.Runtime.InteropWrappers.StringHolder.Dispose">
            <summary>
            IDispose implementation
            </summary>
            <since>5.8</since>
        </member>
        <member name="M:Rhino.Runtime.InteropWrappers.StringHolder.Dispose(System.Boolean)">
            <summary>
            Called by Dispose and finalizer
            </summary>
            <param name="disposing"></param>
        </member>
        <member name="M:Rhino.Runtime.InteropWrappers.StringHolder.ToString">
            <summary>
            Marshals unmanaged ON_wString to a managed .NET string
            </summary>
            <returns></returns>
        </member>
        <member name="M:Rhino.Runtime.InteropWrappers.StringHolder.ToStringSafe">
            <summary>
            Marshals unmanaged ON_wString to a managed .NET string and never returns null.
            </summary>
            <returns></returns>
            <since>8.0</since>
        </member>
        <member name="M:Rhino.Runtime.InteropWrappers.StringHolder.GetString(System.IntPtr)">
            <summary>
            Gets managed string from unmanaged ON_wString pointer.
            </summary>
            <param name="pStringHolder"></param>
            <returns>Null if pStringHolder has no reference, otherwise, the string. This may be an empty string, if setting an empty string is possible.</returns>
            <since>5.8</since>
        </member>
        <member name="T:Rhino.Runtime.InteropWrappers.SimpleArrayInt">
            <summary>
            Wrapper for ON_SimpleArray&lt;int&gt;. If you are not writing C++ code
            then this class is not for you.
            </summary>
        </member>
        <member name="M:Rhino.Runtime.InteropWrappers.SimpleArrayInt.ConstPointer">
            <summary>
            Gets the constant (immutable) pointer of this array.
            </summary>
            <returns>The constant pointer.</returns>
            <since>5.0</since>
        </member>
        <member name="M:Rhino.Runtime.InteropWrappers.SimpleArrayInt.NonConstPointer">
            <summary>
            Gets the non-constant pointer (for modification) of this array.
            </summary>
            <returns>The non-constant pointer.</returns>
            <since>5.0</since>
        </member>
        <member name="M:Rhino.Runtime.InteropWrappers.SimpleArrayInt.#ctor">
            <summary>
            Initializes a new <see cref="T:Rhino.Runtime.InteropWrappers.SimpleArrayInt"/> class.
            </summary>
            <since>5.0</since>
        </member>
        <member name="M:Rhino.Runtime.InteropWrappers.SimpleArrayInt.#ctor(System.Collections.Generic.IEnumerable{System.Int32})">
            <summary>
            Initializes a new <see cref="T:Rhino.Runtime.InteropWrappers.SimpleArrayInt"/> class
            </summary>
            <param name="values">initial set of integers to add to the array</param>
            <since>5.9</since>
        </member>
        <member name="P:Rhino.Runtime.InteropWrappers.SimpleArrayInt.Count">
            <summary>
            Gets the amount of elements in this array.
            </summary>
            <since>5.0</since>
        </member>
        <member name="M:Rhino.Runtime.InteropWrappers.SimpleArrayInt.ToArray">
            <summary>
            Returns the managed counterpart of the unmanaged array.
            </summary>
            <returns>The managed array.</returns>
            <since>5.0</since>
        </member>
        <member name="M:Rhino.Runtime.InteropWrappers.SimpleArrayInt.Finalize">
            <summary>
            Passively reclaims unmanaged resources when the class user did not explicitly call Dispose().
            </summary>
        </member>
        <member name="M:Rhino.Runtime.InteropWrappers.SimpleArrayInt.Dispose">
            <summary>
            Actively reclaims unmanaged resources that this instance uses.
            </summary>
            <since>5.0</since>
        </member>
        <member name="T:Rhino.Runtime.InteropWrappers.SimpleArrayUint">
            <summary>
            Wrapper for ON_SimpleArray&lt;unsigned int&gt;. If you are not writing C++ code
            then this class is not for you.
            </summary>
        </member>
        <member name="M:Rhino.Runtime.InteropWrappers.SimpleArrayUint.ConstPointer">
            <summary>
            Gets the constant (immutable) pointer of this array.
            </summary>
            <returns>The constant pointer.</returns>
            <since>6.0</since>
        </member>
        <member name="M:Rhino.Runtime.InteropWrappers.SimpleArrayUint.NonConstPointer">
            <summary>
            Gets the non-constant pointer (for modification) of this array.
            </summary>
            <returns>The non-constant pointer.</returns>
            <since>6.0</since>
        </member>
        <member name="M:Rhino.Runtime.InteropWrappers.SimpleArrayUint.#ctor">
            <summary>
            Initializes a new <see cref="T:Rhino.Runtime.InteropWrappers.SimpleArrayInt"/> class.
            </summary>
            <since>6.0</since>
        </member>
        <member name="M:Rhino.Runtime.InteropWrappers.SimpleArrayUint.#ctor(System.Collections.Generic.IEnumerable{System.UInt32})">
            <summary>
            Initializes a new <see cref="T:Rhino.Runtime.InteropWrappers.SimpleArrayInt"/> class.
            </summary>
            <param name="values">A list, an array or any collection of unsigned integers that implements the enumerable interface.</param>
            <since>6.0</since>
        </member>
        <member name="P:Rhino.Runtime.InteropWrappers.SimpleArrayUint.Count">
            <summary>
            Gets the number of elements in this array.
            </summary>
            <since>6.0</since>
        </member>
        <member name="P:Rhino.Runtime.InteropWrappers.SimpleArrayUint.UnsignedCount">
            <summary>
            Gets the number of elements in this array.
            </summary>
            <since>6.0</since>
        </member>
        <member name="M:Rhino.Runtime.InteropWrappers.SimpleArrayUint.ToArray">
            <summary>
            Returns the managed counterpart of the unmanaged array.
            </summary>
            <returns>The managed array.</returns>
            <since>6.0</since>
        </member>
        <member name="M:Rhino.Runtime.InteropWrappers.SimpleArrayUint.Finalize">
            <summary>
            Passively reclaims unmanaged resources when the class user did not explicitly call Dispose().
            </summary>
        </member>
        <member name="M:Rhino.Runtime.InteropWrappers.SimpleArrayUint.Dispose">
            <summary>
            Actively reclaims unmanaged resources that this instance uses.
            </summary>
            <since>6.0</since>
        </member>
        <member name="T:Rhino.Runtime.InteropWrappers.SimpleArrayIntPtr">
            <summary>
            Wrapper for ON_SimpleArray&lt;IntPtr&gt;. If you are not writing C++ code
            then this class is not for you.
            </summary>
        </member>
        <member name="M:Rhino.Runtime.InteropWrappers.SimpleArrayIntPtr.ConstPointer">
            <summary>
            Gets the constant (immutable) pointer of this array.
            </summary>
            <returns>The constant pointer.</returns>
            <since>8.0</since>
        </member>
        <member name="M:Rhino.Runtime.InteropWrappers.SimpleArrayIntPtr.NonConstPointer">
            <summary>
            Gets the non-constant pointer (for modification) of this array.
            </summary>
            <returns>The non-constant pointer.</returns>
            <since>8.0</since>
        </member>
        <member name="M:Rhino.Runtime.InteropWrappers.SimpleArrayIntPtr.#ctor">
            <summary>
            Initializes a new <see cref="T:Rhino.Runtime.InteropWrappers.SimpleArrayIntPtr"/> class.
            </summary>
            <since>8.0</since>
        </member>
        <member name="P:Rhino.Runtime.InteropWrappers.SimpleArrayIntPtr.Count">
            <summary>
            Gets the number of elements in this array.
            </summary>
            <since>8.0</since>
        </member>
        <member name="M:Rhino.Runtime.InteropWrappers.SimpleArrayIntPtr.ToArray">
            <summary>
            Returns the managed counterpart of the unmanaged array.
            </summary>
            <returns>The managed array.</returns>
            <since>8.0</since>
        </member>
        <member name="M:Rhino.Runtime.InteropWrappers.SimpleArrayIntPtr.Finalize">
            <summary>
            Passively reclaims unmanaged resources when the class user did not explicitly call Dispose().
            </summary>
        </member>
        <member name="M:Rhino.Runtime.InteropWrappers.SimpleArrayIntPtr.Dispose">
            <summary>
            Actively reclaims unmanaged resources that this instance uses.
            </summary>
            <since>8.0</since>
        </member>
        <member name="T:Rhino.Runtime.InteropWrappers.SimpleArrayByte">
            <summary>
            Wrapper for ON_SimpleArray&lt;unsigned char&gt;. If you are not writing C++ code
            then this class is not for you.
            </summary>
        </member>
        <member name="M:Rhino.Runtime.InteropWrappers.SimpleArrayByte.ConstPointer">
            <summary>
            Gets the constant (immutable) pointer of this array.
            </summary>
            <returns>The constant pointer.</returns>
            <since>7.0</since>
        </member>
        <member name="M:Rhino.Runtime.InteropWrappers.SimpleArrayByte.NonConstPointer">
            <summary>
            Gets the non-constant pointer (for modification) of this array.
            </summary>
            <returns>The non-constant pointer.</returns>
            <since>7.0</since>
        </member>
        <member name="M:Rhino.Runtime.InteropWrappers.SimpleArrayByte.#ctor">
            <summary>
            Initializes a new <see cref="T:Rhino.Runtime.InteropWrappers.SimpleArrayByte"/> class.
            </summary>
            <since>7.0</since>
        </member>
        <member name="M:Rhino.Runtime.InteropWrappers.SimpleArrayByte.#ctor(System.Int32)">
            <summary>
            Initializes a new <see cref="T:Rhino.Runtime.InteropWrappers.SimpleArrayByte"/> class.
            <param name="initialSize">Initial size of the array - all values are set to zero.</param>
            
            </summary>
            <since>7.0</since>
        </member>
        <member name="M:Rhino.Runtime.InteropWrappers.SimpleArrayByte.#ctor(Rhino.Runtime.InteropWrappers.SimpleArrayByte)">
            <summary>
            Initializes a new <see cref="T:Rhino.Runtime.InteropWrappers.SimpleArrayByte"/> with the contents of another SimpleArrayByte.
            </summary>
            <since>7.0</since>
        </member>
        <member name="M:Rhino.Runtime.InteropWrappers.SimpleArrayByte.CopyTo(Rhino.Runtime.InteropWrappers.SimpleArrayByte)">
            <summary>
            Copies the contents of a <see cref="T:Rhino.Runtime.InteropWrappers.SimpleArrayByte"/> into another SimpleArrayByte.
            </summary>
            <since>7.0</since>
        </member>
        <member name="M:Rhino.Runtime.InteropWrappers.SimpleArrayByte.#ctor(System.Collections.Generic.IEnumerable{System.Byte})">
            <summary>
            Initializes a new <see cref="T:Rhino.Runtime.InteropWrappers.SimpleArrayByte"/> class
            </summary>
            <param name="values">initial set of integers to add to the array</param>
            <since>7.0</since>
        </member>
        <member name="P:Rhino.Runtime.InteropWrappers.SimpleArrayByte.Count">
            <summary>
            Gets the amount of elements in this array.
            </summary>
            <since>7.0</since>
        </member>
        <member name="M:Rhino.Runtime.InteropWrappers.SimpleArrayByte.Array">
            <summary>
            Return the raw data.
            </summary>
            <since>7.0</since>
        </member>
        <member name="M:Rhino.Runtime.InteropWrappers.SimpleArrayByte.ToArray">
            <summary>
            Returns the managed counterpart of the unmanaged array.
            </summary>
            <returns>The managed array.</returns>
            <since>7.0</since>
        </member>
        <member name="M:Rhino.Runtime.InteropWrappers.SimpleArrayByte.Finalize">
            <summary>
            Passively reclaims unmanaged resources when the class user did not explicitly call Dispose().
            </summary>
        </member>
        <member name="M:Rhino.Runtime.InteropWrappers.SimpleArrayByte.Dispose">
            <summary>
            Actively reclaims unmanaged resources that this instance uses.
            </summary>
            <since>7.0</since>
        </member>
        <member name="T:Rhino.Runtime.InteropWrappers.StdVectorByte">
            <summary>
            Wrapper for std::vector&lt;unsigned char&gt;. If you are not writing C++ code
            then this class is not for you.
            </summary>
        </member>
        <member name="M:Rhino.Runtime.InteropWrappers.StdVectorByte.ConstPointer">
            <summary>
            Gets the constant (immutable) pointer of this vector.
            </summary>
            <returns>The constant pointer.</returns>
            <since>7.26</since>
        </member>
        <member name="M:Rhino.Runtime.InteropWrappers.StdVectorByte.NonConstPointer">
            <summary>
            Gets the non-constant pointer (for modification) of this vector.
            </summary>
            <returns>The non-constant pointer.</returns>
            <since>7.26</since>
        </member>
        <member name="M:Rhino.Runtime.InteropWrappers.StdVectorByte.#ctor">
            <summary>
            Initializes a new <see cref="T:Rhino.Runtime.InteropWrappers.SimpleArrayByte"/> class.
            </summary>
            <since>7.26</since>
        </member>
        <member name="M:Rhino.Runtime.InteropWrappers.StdVectorByte.#ctor(System.UInt64)">
            <summary>
            Initializes a new <see cref="T:Rhino.Runtime.InteropWrappers.SimpleArrayByte"/> class.
            <param name="initialSize">Initial size of the array - all values are set to zero.</param>
            
            </summary>
        </member>
        <member name="M:Rhino.Runtime.InteropWrappers.StdVectorByte.#ctor(Rhino.Runtime.InteropWrappers.StdVectorByte)">
            <summary>
            Initializes a new <see cref="T:Rhino.Runtime.InteropWrappers.SimpleArrayByte"/> with the contents of another SimpleArrayByte.
            </summary>
            <since>7.26</since>
        </member>
        <member name="M:Rhino.Runtime.InteropWrappers.StdVectorByte.CopyTo(Rhino.Runtime.InteropWrappers.StdVectorByte)">
            <summary>
            Copies the contents of a <see cref="T:Rhino.Runtime.InteropWrappers.StdVectorByte"/> into another StdVectorByte.
            </summary>
            <since>7.26</since>
        </member>
        <member name="M:Rhino.Runtime.InteropWrappers.StdVectorByte.#ctor(System.Collections.Generic.IEnumerable{System.Byte})">
            <summary>
            Initializes a new <see cref="T:Rhino.Runtime.InteropWrappers.StdVectorByte"/> class
            </summary>
            <param name="values">initial set of integers to add to the array</param>
            <since>7.26</since>
        </member>
        <member name="P:Rhino.Runtime.InteropWrappers.StdVectorByte.Count">
            <summary>
            Gets the amount of elements in this array.
            </summary>
            <since>7.26</since>
        </member>
        <member name="M:Rhino.Runtime.InteropWrappers.StdVectorByte.Memory">
            <summary>
            Return the raw data.
            </summary>
            <since>7.26</since>
        </member>
        <member name="M:Rhino.Runtime.InteropWrappers.StdVectorByte.ToArray">
            <summary>
            Returns the managed counterpart of the unmanaged array.
            </summary>
            <returns>The managed array.</returns>
            <since>7.26</since>
        </member>
        <member name="M:Rhino.Runtime.InteropWrappers.StdVectorByte.Finalize">
            <summary>
            Passively reclaims unmanaged resources when the class user did not explicitly call Dispose().
            </summary>
        </member>
        <member name="M:Rhino.Runtime.InteropWrappers.StdVectorByte.Dispose">
            <summary>
            Actively reclaims unmanaged resources that this instance uses.
            </summary>
            <since>7.0</since>
        </member>
        <member name="T:Rhino.Runtime.InteropWrappers.SimpleArrayFloat">
            <summary>
            Wrapper for ON_SimpleArray&lt;float&gt;. If you are not writing C++ code
            then this class is not for you.
            </summary>
        </member>
        <member name="M:Rhino.Runtime.InteropWrappers.SimpleArrayFloat.ConstPointer">
            <summary>
            Gets the constant (immutable) pointer of this array.
            </summary>
            <returns>The constant pointer.</returns>
            <since>7.0</since>
        </member>
        <member name="M:Rhino.Runtime.InteropWrappers.SimpleArrayFloat.NonConstPointer">
            <summary>
            Gets the non-constant pointer (for modification) of this array.
            </summary>
            <returns>The non-constant pointer.</returns>
            <since>7.0</since>
        </member>
        <member name="M:Rhino.Runtime.InteropWrappers.SimpleArrayFloat.#ctor">
            <summary>
            Initializes a new <see cref="T:Rhino.Runtime.InteropWrappers.SimpleArrayFloat"/> class.
            </summary>
            <since>7.0</since>
        </member>
        <member name="M:Rhino.Runtime.InteropWrappers.SimpleArrayFloat.#ctor(System.Int32)">
            <summary>
            Initializes a new <see cref="T:Rhino.Runtime.InteropWrappers.SimpleArrayFloat"/> class.
            <param name="initialSize">Initial size of the array - all values are set to zero.</param>
            
            </summary>
            <since>7.0</since>
        </member>
        <member name="M:Rhino.Runtime.InteropWrappers.SimpleArrayFloat.#ctor(Rhino.Runtime.InteropWrappers.SimpleArrayFloat)">
            <summary>
            Initializes a new <see cref="T:Rhino.Runtime.InteropWrappers.SimpleArrayFloat"/> with the contents of another SimpleArrayFloat.
            </summary>
            <since>7.0</since>
        </member>
        <member name="M:Rhino.Runtime.InteropWrappers.SimpleArrayFloat.CopyTo(Rhino.Runtime.InteropWrappers.SimpleArrayFloat)">
            <summary>
            Copies the contents of a <see cref="T:Rhino.Runtime.InteropWrappers.SimpleArrayFloat"/> into another SimpleArrayFloat.
            </summary>
            <since>7.0</since>
        </member>
        <member name="M:Rhino.Runtime.InteropWrappers.SimpleArrayFloat.#ctor(System.Collections.Generic.IEnumerable{System.Single})">
            <summary>
            Initializes a new <see cref="T:Rhino.Runtime.InteropWrappers.SimpleArrayFloat"/> class
            </summary>
            <param name="values">initial set of integers to add to the array</param>
            <since>7.0</since>
        </member>
        <member name="P:Rhino.Runtime.InteropWrappers.SimpleArrayFloat.Count">
            <summary>
            Gets the amount of elements in this array.
            </summary>
            <since>7.0</since>
        </member>
        <member name="M:Rhino.Runtime.InteropWrappers.SimpleArrayFloat.Array">
            <summary>
            Return the raw data.
            </summary>
            <since>7.0</since>
        </member>
        <member name="M:Rhino.Runtime.InteropWrappers.SimpleArrayFloat.ToArray">
            <summary>
            Returns the managed counterpart of the unmanaged array.
            </summary>
            <returns>The managed array.</returns>
            <since>7.0</since>
        </member>
        <member name="M:Rhino.Runtime.InteropWrappers.SimpleArrayFloat.Finalize">
            <summary>
            Passively reclaims unmanaged resources when the class user did not explicitly call Dispose().
            </summary>
        </member>
        <member name="M:Rhino.Runtime.InteropWrappers.SimpleArrayFloat.Dispose">
            <summary>
            Actively reclaims unmanaged resources that this instance uses.
            </summary>
            <since>7.0</since>
        </member>
        <member name="T:Rhino.Runtime.InteropWrappers.StdVectorFloat">
            <summary>
            Wrapper for ON_SimpleArray&lt;float&gt;. If you are not writing C++ code
            then this class is not for you.
            </summary>
        </member>
        <member name="M:Rhino.Runtime.InteropWrappers.StdVectorFloat.ConstPointer">
            <summary>
            Gets the constant (immutable) pointer of this array.
            </summary>
            <returns>The constant pointer.</returns>
            <since>7.26</since>
        </member>
        <member name="M:Rhino.Runtime.InteropWrappers.StdVectorFloat.NonConstPointer">
            <summary>
            Gets the non-constant pointer (for modification) of this array.
            </summary>
            <returns>The non-constant pointer.</returns>
            <since>7.26</since>
        </member>
        <member name="M:Rhino.Runtime.InteropWrappers.StdVectorFloat.#ctor">
            <summary>
            Initializes a new <see cref="T:Rhino.Runtime.InteropWrappers.StdVectorFloat"/> class.
            </summary>
            <since>7.26</since>
        </member>
        <member name="M:Rhino.Runtime.InteropWrappers.StdVectorFloat.#ctor(System.UInt64)">
            <summary>
            Initializes a new <see cref="T:Rhino.Runtime.InteropWrappers.StdVectorFloat"/> class.
            <param name="initialSize">Initial size of the array - all values are set to zero.</param>
            
            </summary>
        </member>
        <member name="M:Rhino.Runtime.InteropWrappers.StdVectorFloat.#ctor(Rhino.Runtime.InteropWrappers.StdVectorFloat)">
            <summary>
            Initializes a new <see cref="T:Rhino.Runtime.InteropWrappers.StdVectorFloat"/> with the contents of another SimpleArrayFloat.
            </summary>
            <since>7.26</since>
        </member>
        <member name="M:Rhino.Runtime.InteropWrappers.StdVectorFloat.CopyTo(Rhino.Runtime.InteropWrappers.StdVectorFloat)">
            <summary>
            Copies the contents of a <see cref="T:Rhino.Runtime.InteropWrappers.StdVectorFloat"/> into another SimpleArrayFloat.
            </summary>
            <since>7.26</since>
        </member>
        <member name="M:Rhino.Runtime.InteropWrappers.StdVectorFloat.#ctor(System.Collections.Generic.IEnumerable{System.Single})">
            <summary>
            Initializes a new <see cref="T:Rhino.Runtime.InteropWrappers.SimpleArrayFloat"/> class
            </summary>
            <param name="values">initial set of integers to add to the array</param>
            <since>7.26</since>
        </member>
        <member name="P:Rhino.Runtime.InteropWrappers.StdVectorFloat.Count">
            <summary>
            Gets the amount of elements in this array.
            </summary>
            <since>7.26</since>
        </member>
        <member name="M:Rhino.Runtime.InteropWrappers.StdVectorFloat.Memory">
            <summary>
            Return the raw data.
            </summary>
            <since>7.26</since>
        </member>
        <member name="M:Rhino.Runtime.InteropWrappers.StdVectorFloat.ToArray">
            <summary>
            Returns the managed counterpart of the unmanaged array.
            </summary>
            <returns>The managed array.</returns>
            <since>7.26</since>
        </member>
        <member name="M:Rhino.Runtime.InteropWrappers.StdVectorFloat.Finalize">
            <summary>
            Passively reclaims unmanaged resources when the class user did not explicitly call Dispose().
            </summary>
        </member>
        <member name="M:Rhino.Runtime.InteropWrappers.StdVectorFloat.Dispose">
            <summary>
            Actively reclaims unmanaged resources that this instance uses.
            </summary>
            <since>7.26</since>
        </member>
        <member name="T:Rhino.Runtime.InteropWrappers.SimpleArrayGuidPointer">
            <summary>
            Wrapper for ON_SimpleArray&lt;ON_UUID&gt;. If you are not writing C++ code
            then this class is not for you.
            </summary>
        </member>
        <member name="M:Rhino.Runtime.InteropWrappers.SimpleArrayGuidPointer.ConstPointer">
            <summary>
            Gets the constant (immutable) pointer of this array.
            </summary>
            <returns>The constant pointer.</returns>
            <since>6.0</since>
        </member>
        <member name="M:Rhino.Runtime.InteropWrappers.SimpleArrayGuidPointer.NonConstPointer">
            <summary>
            Gets the non-constant pointer (for modification) of this array.
            </summary>
            <returns>The non-constant pointer.</returns>
            <since>6.0</since>
        </member>
        <member name="M:Rhino.Runtime.InteropWrappers.SimpleArrayGuidPointer.#ctor">
            <summary>
            Initializes a new <see cref="T:Rhino.Runtime.InteropWrappers.SimpleArrayGuidPointer"/> class.
            </summary>
            <since>6.0</since>
        </member>
        <member name="P:Rhino.Runtime.InteropWrappers.SimpleArrayGuidPointer.Item(System.Int32)">
            <summary>
            Get the Guid at index
            </summary>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="P:Rhino.Runtime.InteropWrappers.SimpleArrayGuidPointer.Count">
            <summary>
            Gets the amount of elements in this array.
            </summary>
            <since>6.0</since>
        </member>
        <member name="M:Rhino.Runtime.InteropWrappers.SimpleArrayGuidPointer.ToArray">
            <summary>
            Returns the managed counterpart of the unmanaged array.
            </summary>
            <returns>The managed array.</returns>
            <since>6.0</since>
        </member>
        <member name="M:Rhino.Runtime.InteropWrappers.SimpleArrayGuidPointer.Finalize">
            <summary>
            Passively reclaims unmanaged resources when the class user did not explicitly call Dispose().
            </summary>
        </member>
        <member name="M:Rhino.Runtime.InteropWrappers.SimpleArrayGuidPointer.Dispose">
            <summary>
            Actively reclaims unmanaged resources that this instance uses.
            </summary>
            <since>6.0</since>
        </member>
        <member name="T:Rhino.Runtime.InteropWrappers.SimpleArrayGuid">
            <summary>
            Wrapper for ON_SimpleArray&lt;ON_UUID&gt;. If you are not writing C++ code
            then this class is not for you.
            </summary>
        </member>
        <member name="M:Rhino.Runtime.InteropWrappers.SimpleArrayGuid.ConstPointer">
            <summary>
            Gets the constant (immutable) pointer of this array.
            </summary>
            <returns>The constant pointer.</returns>
            <since>5.0</since>
        </member>
        <member name="M:Rhino.Runtime.InteropWrappers.SimpleArrayGuid.NonConstPointer">
            <summary>
            Gets the non-constant pointer (for modification) of this array.
            </summary>
            <returns>The non-constant pointer.</returns>
            <since>5.0</since>
        </member>
        <member name="M:Rhino.Runtime.InteropWrappers.SimpleArrayGuid.#ctor">
            <summary>
            Initializes a new <see cref="T:Rhino.Runtime.InteropWrappers.SimpleArrayGuid"/> class.
            </summary>
            <since>5.0</since>
        </member>
        <member name="M:Rhino.Runtime.InteropWrappers.SimpleArrayGuid.#ctor(System.Collections.Generic.IEnumerable{System.Guid})">
            <summary>
            Initializes a new <see cref="T:Rhino.Runtime.InteropWrappers.SimpleArrayGuid"/> class
            </summary>
            <param name="values">initial set of Guids to add to the array</param>
            <since>7.0</since>
        </member>
        <member name="P:Rhino.Runtime.InteropWrappers.SimpleArrayGuid.Item(System.Int32)">
            <summary>
            Get the Guid at index
            </summary>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="M:Rhino.Runtime.InteropWrappers.SimpleArrayGuid.Append(System.Guid)">
            <summary>
            Appends a new <see cref="T:System.Guid"/> at the end of this array.
            </summary>
            <since>6.0</since>
        </member>
        <member name="P:Rhino.Runtime.InteropWrappers.SimpleArrayGuid.Count">
            <summary>
            Gets the amount of elements in this array.
            </summary>
            <since>5.0</since>
        </member>
        <member name="M:Rhino.Runtime.InteropWrappers.SimpleArrayGuid.ToArray">
            <summary>
            Returns the managed counterpart of the unmanaged array.
            </summary>
            <returns>The managed array.</returns>
            <since>5.0</since>
        </member>
        <member name="M:Rhino.Runtime.InteropWrappers.SimpleArrayGuid.Finalize">
            <summary>
            Passively reclaims unmanaged resources when the class user did not explicitly call Dispose().
            </summary>
        </member>
        <member name="M:Rhino.Runtime.InteropWrappers.SimpleArrayGuid.Dispose">
            <summary>
            Actively reclaims unmanaged resources that this instance uses.
            </summary>
            <since>5.0</since>
        </member>
        <member name="T:Rhino.Runtime.InteropWrappers.SimpleArrayInterval">
            <summary>
            Wrapper for ON_SimpleArray&lt;ON_Interval&gt;. If you are not writing C++ code
            then this class is not for you.
            </summary>
        </member>
        <member name="M:Rhino.Runtime.InteropWrappers.SimpleArrayInterval.ConstPointer">
            <summary>
            Gets the constant (immutable) pointer of this array.
            </summary>
            <returns>The constant pointer.</returns>
            <since>5.0</since>
        </member>
        <member name="M:Rhino.Runtime.InteropWrappers.SimpleArrayInterval.NonConstPointer">
            <summary>
            Gets the non-constant pointer (for modification) of this array.
            </summary>
            <returns>The non-constant pointer.</returns>
            <since>5.0</since>
        </member>
        <member name="M:Rhino.Runtime.InteropWrappers.SimpleArrayInterval.#ctor">
            <summary>
            Initializes a new <see cref="T:Rhino.Runtime.InteropWrappers.SimpleArrayInterval"/> class.
            </summary>
            <since>5.0</since>
        </member>
        <member name="M:Rhino.Runtime.InteropWrappers.SimpleArrayInterval.Add(Rhino.Geometry.Interval)">
            <summary>
            Adds a new <see cref="T:Rhino.Geometry.Interval"/> at the end of this array.
            </summary>
            <since>6.0</since>
        </member>
        <member name="P:Rhino.Runtime.InteropWrappers.SimpleArrayInterval.Count">
            <summary>
            Gets the amount of elements in this array.
            </summary>
            <since>5.0</since>
        </member>
        <member name="M:Rhino.Runtime.InteropWrappers.SimpleArrayInterval.ToArray">
            <summary>
            Returns the managed counterpart of the unmanaged array.
            </summary>
            <returns>The managed array.</returns>
            <since>5.0</since>
        </member>
        <member name="M:Rhino.Runtime.InteropWrappers.SimpleArrayInterval.Finalize">
            <summary>
            Passively reclaims unmanaged resources when the class user did not explicitly call Dispose().
            </summary>
        </member>
        <member name="M:Rhino.Runtime.InteropWrappers.SimpleArrayInterval.Dispose">
            <summary>
            Actively reclaims unmanaged resources that this instance uses.
            </summary>
            <since>5.0</since>
        </member>
        <member name="T:Rhino.Runtime.InteropWrappers.SimpleArrayDouble">
            <summary>
            Wrapper for ON_SimpleArray&lt;double&gt;. If you are not writing C++ code,
            then this class is not for you.
            </summary>
        </member>
        <member name="M:Rhino.Runtime.InteropWrappers.SimpleArrayDouble.ConstPointer">
            <summary>
            Gets the constant (immutable) pointer of this array.
            </summary>
            <returns>The constant pointer.</returns>
            <since>5.0</since>
        </member>
        <member name="M:Rhino.Runtime.InteropWrappers.SimpleArrayDouble.NonConstPointer">
            <summary>
            Gets the non-constant pointer (for modification) of this array.
            </summary>
            <returns>The non-constant pointer.</returns>
            <since>5.0</since>
        </member>
        <member name="M:Rhino.Runtime.InteropWrappers.SimpleArrayDouble.#ctor">
            <summary>
            Initializes a new <see cref="T:Rhino.Runtime.InteropWrappers.SimpleArrayDouble"/> instance.
            </summary>
            <since>5.0</since>
        </member>
        <member name="M:Rhino.Runtime.InteropWrappers.SimpleArrayDouble.#ctor(System.Collections.Generic.IEnumerable{System.Double})">
            <summary>
            Initializes a new <see cref="T:Rhino.Runtime.InteropWrappers.SimpleArrayDouble"/> instance, with items.
            </summary>
            <since>5.0</since>
        </member>
        <member name="P:Rhino.Runtime.InteropWrappers.SimpleArrayDouble.Count">
            <summary>
            Gets the amount of elements in this array.
            </summary>
            <since>5.0</since>
        </member>
        <member name="M:Rhino.Runtime.InteropWrappers.SimpleArrayDouble.ToArray">
            <summary>
            Returns the managed counterpart of the unmanaged array.
            </summary>
            <returns>The managed array.</returns>
            <since>5.0</since>
        </member>
        <member name="M:Rhino.Runtime.InteropWrappers.SimpleArrayDouble.Finalize">
            <summary>
            Passively reclaims unmanaged resources when the class user did not explicitly call Dispose().
            </summary>
        </member>
        <member name="M:Rhino.Runtime.InteropWrappers.SimpleArrayDouble.Dispose">
            <summary>
            Actively reclaims unmanaged resources that this instance uses.
            </summary>
            <since>5.0</since>
        </member>
        <member name="T:Rhino.Runtime.InteropWrappers.SimpleArrayPoint2d">
            <summary>
            ON_SimpleArray&lt;ON_2dPoint&gt; class wrapper.  If you are not writing
            C++ code then this class is not for you.
            </summary>
        </member>
        <member name="M:Rhino.Runtime.InteropWrappers.SimpleArrayPoint2d.ConstPointer">
            <summary>
            Gets the constant (immutable) pointer of this array.
            </summary>
            <returns>The constant pointer.</returns>
            <since>5.6</since>
        </member>
        <member name="M:Rhino.Runtime.InteropWrappers.SimpleArrayPoint2d.NonConstPointer">
            <summary>
            Gets the non-constant pointer (for modification) of this array.
            </summary>
            <returns>The non-constant pointer.</returns>
            <since>5.6</since>
        </member>
        <member name="M:Rhino.Runtime.InteropWrappers.SimpleArrayPoint2d.#ctor">
            <summary>
            Initializes a new empty <see cref="T:Rhino.Runtime.InteropWrappers.SimpleArrayPoint3d"/> instance.
            </summary>
            <since>5.6</since>
        </member>
        <member name="P:Rhino.Runtime.InteropWrappers.SimpleArrayPoint2d.Count">
            <summary>
            Gets the amount of points in this array.
            </summary>
            <since>5.6</since>
        </member>
        <member name="M:Rhino.Runtime.InteropWrappers.SimpleArrayPoint2d.ToArray">
            <summary>
            Copies the unmanaged array to a managed counterpart.
            </summary>
            <returns>The managed array.</returns>
            <since>5.6</since>
        </member>
        <member name="M:Rhino.Runtime.InteropWrappers.SimpleArrayPoint2d.Finalize">
            <summary>
            Passively reclaims unmanaged resources when the class user did not explicitly call Dispose().
            </summary>
        </member>
        <member name="M:Rhino.Runtime.InteropWrappers.SimpleArrayPoint2d.Dispose">
            <summary>
            Actively reclaims unmanaged resources that this instance uses.
            </summary>
            <since>5.6</since>
        </member>
        <member name="M:Rhino.Runtime.InteropWrappers.SimpleArrayPoint2d.Dispose(System.Boolean)">
            <summary>
            For derived class implementers.
            <para>This method is called with argument true when class user calls Dispose(), while with argument false when
            the Garbage Collector invokes the finalizer, or Finalize() method.</para>
            <para>You must reclaim all used unmanaged resources in both cases, and can use this chance to call Dispose on disposable fields if the argument is true.</para>
            <para>Also, you must call the base virtual method within your overriding method.</para>
            </summary>
            <param name="disposing">true if the call comes from the Dispose() method; false if it comes from the Garbage Collector finalizer.</param>
        </member>
        <member name="T:Rhino.Runtime.InteropWrappers.SimpleArrayPoint3d">
            <summary>
            ON_SimpleArray&lt;ON_3dPoint&gt;, ON_3dPointArray, ON_PolyLine all have the same size
            This class wraps all of these C++ versions.  If you are not writing C++ code then this
            class is not for you.
            </summary>
        </member>
        <member name="M:Rhino.Runtime.InteropWrappers.SimpleArrayPoint3d.ConstPointer">
            <summary>
            Gets the constant (immutable) pointer of this array.
            </summary>
            <returns>The constant pointer.</returns>
            <since>5.0</since>
        </member>
        <member name="M:Rhino.Runtime.InteropWrappers.SimpleArrayPoint3d.NonConstPointer">
            <summary>
            Gets the non-constant pointer (for modification) of this array.
            </summary>
            <returns>The non-constant pointer.</returns>
            <since>5.0</since>
        </member>
        <member name="M:Rhino.Runtime.InteropWrappers.SimpleArrayPoint3d.#ctor">
            <summary>
            Initializes a new empty <see cref="T:Rhino.Runtime.InteropWrappers.SimpleArrayPoint3d"/> instance.
            </summary>
            <since>5.0</since>
        </member>
        <member name="M:Rhino.Runtime.InteropWrappers.SimpleArrayPoint3d.#ctor(System.Collections.Generic.IEnumerable{Rhino.Geometry.Point3d})">
            <summary>
            Initializes a new <see cref="T:Rhino.Runtime.InteropWrappers.SimpleArrayPoint3d"/> instance from a set of points
            </summary>
            <param name="pts"></param>
            <since>7.18</since>
        </member>
        <member name="P:Rhino.Runtime.InteropWrappers.SimpleArrayPoint3d.Count">
            <summary>
            Gets the amount of points in this array.
            </summary>
            <since>5.0</since>
        </member>
        <member name="M:Rhino.Runtime.InteropWrappers.SimpleArrayPoint3d.Add(Rhino.Geometry.Point3d)">
            <summary>
            Adds a point to the list
            </summary>
            <param name="pt"></param>
            <since>8.0</since>
        </member>
        <member name="M:Rhino.Runtime.InteropWrappers.SimpleArrayPoint3d.ToArray">
            <summary>
            Copies the unmanaged array to a managed counterpart.
            </summary>
            <returns>The managed array.</returns>
            <since>5.0</since>
        </member>
        <member name="M:Rhino.Runtime.InteropWrappers.SimpleArrayPoint3d.Finalize">
            <summary>
            Passively reclaims unmanaged resources when the class user did not explicitly call Dispose().
            </summary>
        </member>
        <member name="M:Rhino.Runtime.InteropWrappers.SimpleArrayPoint3d.Dispose">
            <summary>
            Actively reclaims unmanaged resources that this instance uses.
            </summary>
            <since>5.0</since>
        </member>
        <member name="M:Rhino.Runtime.InteropWrappers.SimpleArrayPoint3d.Dispose(System.Boolean)">
            <summary>
            For derived class implementers.
            <para>This method is called with argument true when class user calls Dispose(), while with argument false when
            the Garbage Collector invokes the finalizer, or Finalize() method.</para>
            <para>You must reclaim all used unmanaged resources in both cases, and can use this chance to call Dispose on disposable fields if the argument is true.</para>
            <para>Also, you must call the base virtual method within your overriding method.</para>
            </summary>
            <param name="disposing">true if the call comes from the Dispose() method; false if it comes from the Garbage Collector finalizer.</param>
        </member>
        <member name="T:Rhino.Runtime.InteropWrappers.SimpleArrayArrayPoint3d">
            <summary>
            Wrapper for ON_SimpleArray&lt;ON_PolyLine*&gt;, ON_SimpleArray&lt;ON_3dPointArray*&gt;
            If you are not writing C++ code then this class is not for you.
            </summary>
        </member>
        <member name="M:Rhino.Runtime.InteropWrappers.SimpleArrayArrayPoint3d.ConstPointer">
            <summary>
            Gets the constant (immutable) pointer of this array.
            </summary>
            <returns>The constant pointer.</returns>
            <since>7.0</since>
        </member>
        <member name="M:Rhino.Runtime.InteropWrappers.SimpleArrayArrayPoint3d.NonConstPointer">
            <summary>
            Gets the non-constant pointer (for modification) of this array.
            </summary>
            <returns>The non-constant pointer.</returns>
            <since>7.0</since>
        </member>
        <member name="M:Rhino.Runtime.InteropWrappers.SimpleArrayArrayPoint3d.#ctor">
            <summary>
            Initializes a new empty <see cref="T:Rhino.Runtime.InteropWrappers.SimpleArrayArrayPoint3d"/> instance.
            </summary>
            <since>7.0</since>
        </member>
        <member name="P:Rhino.Runtime.InteropWrappers.SimpleArrayArrayPoint3d.Count">
            <summary>
            Gets the amount of polylines in this array.
            </summary>
            <since>7.0</since>
        </member>
        <member name="M:Rhino.Runtime.InteropWrappers.SimpleArrayArrayPoint3d.PointCountAt(System.Int32)">
            <summary>
            Gets the amount of points in a polyline.
            </summary>
            <since>7.0</since>
        </member>
        <member name="P:Rhino.Runtime.InteropWrappers.SimpleArrayArrayPoint3d.Item(System.Int32,System.Int32)">
            <summary>
            Gets a point in a polyline.
            </summary>
        </member>
        <member name="M:Rhino.Runtime.InteropWrappers.SimpleArrayArrayPoint3d.PolylineAt(System.Int32)">
            <summary>
            Gets a polyline at an index.
            </summary>
            <param name="index">The index.</param>
            <returns>The polyline if successful, null otherwise.</returns>
            <since>8.0</since>
        </member>
        <member name="M:Rhino.Runtime.InteropWrappers.SimpleArrayArrayPoint3d.Finalize">
            <summary>
            Passively reclaims unmanaged resources when the class user did not explicitly call Dispose().
            </summary>
        </member>
        <member name="M:Rhino.Runtime.InteropWrappers.SimpleArrayArrayPoint3d.Dispose">
            <summary>
            Actively reclaims unmanaged resources that this instance uses.
            </summary>
            <since>7.0</since>
        </member>
        <member name="M:Rhino.Runtime.InteropWrappers.SimpleArrayArrayPoint3d.Dispose(System.Boolean)">
            <summary>
            For derived class implementers.
            <para>This method is called with argument true when class user calls Dispose(), while with argument false when
            the Garbage Collector invokes the finalizer, or Finalize() method.</para>
            <para>You must reclaim all used unmanaged resources in both cases, and can use this chance to call Dispose on disposable fields if the argument is true.</para>
            <para>Also, you must call the base virtual method within your overriding method.</para>
            </summary>
            <param name="disposing">true if the call comes from the Dispose() method; false if it comes from the Garbage Collector finalizer.</param>
        </member>
        <member name="T:Rhino.Runtime.InteropWrappers.SimpleArrayPlane">
            <summary>
            Wrapper for ON_SimpleArray&lt;ON_Plane&gt;. If you are not writing C++ code
            then this class is not for you.
            </summary>
        </member>
        <member name="M:Rhino.Runtime.InteropWrappers.SimpleArrayPlane.ConstPointer">
            <summary>
            Gets the constant (immutable) pointer of this array.
            </summary>
            <returns>The constant pointer.</returns>
            <since>6.0</since>
        </member>
        <member name="M:Rhino.Runtime.InteropWrappers.SimpleArrayPlane.NonConstPointer">
            <summary>
            Gets the non-constant pointer (for modification) of this array.
            </summary>
            <returns>The non-constant pointer.</returns>
            <since>6.0</since>
        </member>
        <member name="M:Rhino.Runtime.InteropWrappers.SimpleArrayPlane.#ctor">
            <summary>
            Initializes a new <see cref="T:Rhino.Runtime.InteropWrappers.SimpleArrayLine"/> instance.
            </summary>
            <since>6.0</since>
        </member>
        <member name="P:Rhino.Runtime.InteropWrappers.SimpleArrayPlane.Count">
            <summary>
            Gets the amount of lines in this array.
            </summary>
            <since>6.0</since>
        </member>
        <member name="M:Rhino.Runtime.InteropWrappers.SimpleArrayPlane.ToArray">
            <summary>
            Copies the unmanaged array to a managed counterpart.
            </summary>
            <returns>The managed array.</returns>
            <since>6.0</since>
        </member>
        <member name="M:Rhino.Runtime.InteropWrappers.SimpleArrayPlane.Finalize">
            <summary>
            Passively reclaims unmanaged resources when the class user did not explicitly call Dispose().
            </summary>
        </member>
        <member name="M:Rhino.Runtime.InteropWrappers.SimpleArrayPlane.Dispose">
            <summary>
            Actively reclaims unmanaged resources that this instance uses.
            </summary>
            <since>6.0</since>
        </member>
        <member name="T:Rhino.Runtime.InteropWrappers.SimpleArrayLine">
            <summary>
            Wrapper for ON_SimpleArray&lt;ON_Line&gt;. If you are not writing C++ code
            then this class is not for you.
            </summary>
        </member>
        <member name="M:Rhino.Runtime.InteropWrappers.SimpleArrayLine.ConstPointer">
            <summary>
            Gets the constant (immutable) pointer of this array.
            </summary>
            <returns>The constant pointer.</returns>
            <since>5.0</since>
        </member>
        <member name="M:Rhino.Runtime.InteropWrappers.SimpleArrayLine.NonConstPointer">
            <summary>
            Gets the non-constant pointer (for modification) of this array.
            </summary>
            <returns>The non-constant pointer.</returns>
            <since>5.0</since>
        </member>
        <member name="M:Rhino.Runtime.InteropWrappers.SimpleArrayLine.#ctor">
            <summary>
            Initializes a new <see cref="T:Rhino.Runtime.InteropWrappers.SimpleArrayLine"/> instance.
            </summary>
            <since>5.0</since>
        </member>
        <member name="P:Rhino.Runtime.InteropWrappers.SimpleArrayLine.Count">
            <summary>
            Gets the amount of lines in this array.
            </summary>
            <since>5.0</since>
        </member>
        <member name="M:Rhino.Runtime.InteropWrappers.SimpleArrayLine.ToArray">
            <summary>
            Copies the unmanaged array to a managed counterpart.
            </summary>
            <returns>The managed array.</returns>
            <since>5.0</since>
        </member>
        <member name="M:Rhino.Runtime.InteropWrappers.SimpleArrayLine.Finalize">
            <summary>
            Passively reclaims unmanaged resources when the class user did not explicitly call Dispose().
            </summary>
        </member>
        <member name="M:Rhino.Runtime.InteropWrappers.SimpleArrayLine.Dispose">
            <summary>
            Actively reclaims unmanaged resources that this instance uses.
            </summary>
            <since>5.0</since>
        </member>
        <member name="T:Rhino.Runtime.InteropWrappers.SimpleArray2dex">
            <summary>
            Wrapper for ON_SimpleArray&lt;ON_2dex&gt;. If you are not writing C++ code
            then this class is not for you.
            </summary>
        </member>
        <member name="M:Rhino.Runtime.InteropWrappers.SimpleArray2dex.ConstPointer">
            <summary>
            Gets the constant (immutable) pointer of this array.
            </summary>
            <returns>The constant pointer.</returns>
            <since>6.0</since>
        </member>
        <member name="M:Rhino.Runtime.InteropWrappers.SimpleArray2dex.NonConstPointer">
            <summary>
            Gets the non-constant pointer (for modification) of this array.
            </summary>
            <returns>The non-constant pointer.</returns>
            <since>6.0</since>
        </member>
        <member name="M:Rhino.Runtime.InteropWrappers.SimpleArray2dex.#ctor">
            <summary>
            Initializes a new <see cref="T:Rhino.Runtime.InteropWrappers.SimpleArray2dex"/> class.
            </summary>
            <since>6.0</since>
        </member>
        <member name="M:Rhino.Runtime.InteropWrappers.SimpleArray2dex.#ctor(System.Collections.Generic.IEnumerable{Rhino.IndexPair})">
            <summary>
            Initializes a new <see cref="T:Rhino.Runtime.InteropWrappers.SimpleArray2dex"/> class
            </summary>
            <param name="values">initial set of integer pairs to add to the array</param>
            <since>6.0</since>
        </member>
        <member name="P:Rhino.Runtime.InteropWrappers.SimpleArray2dex.Count">
            <summary>
            Gets the amount of elements in this array.
            </summary>
            <since>6.0</since>
        </member>
        <member name="M:Rhino.Runtime.InteropWrappers.SimpleArray2dex.ToArray">
            <summary>
            Returns the managed counterpart of the unmanaged array.
            </summary>
            <returns>The managed array.</returns>
            <since>6.0</since>
        </member>
        <member name="M:Rhino.Runtime.InteropWrappers.SimpleArray2dex.Finalize">
            <summary>
            Passively reclaims unmanaged resources when the class user did not explicitly call Dispose().
            </summary>
        </member>
        <member name="M:Rhino.Runtime.InteropWrappers.SimpleArray2dex.Dispose">
            <summary>
            Actively reclaims unmanaged resources that this instance uses.
            </summary>
            <since>6.0</since>
        </member>
        <member name="T:Rhino.Runtime.InteropWrappers.SimpleArraySurfacePointer">
            <summary>
            Wrapper for a C++ ON_SimpleArray of ON_Surface* or constant ON_Surface*.  If
            you are not writing C++ code then this class is not for you.
            </summary>
        </member>
        <member name="M:Rhino.Runtime.InteropWrappers.SimpleArraySurfacePointer.ConstPointer">
            <summary>
            Gets the constant (immutable) pointer of this array.
            </summary>
            <returns>The constant pointer.</returns>
            <since>5.0</since>
        </member>
        <member name="M:Rhino.Runtime.InteropWrappers.SimpleArraySurfacePointer.NonConstPointer">
            <summary>
            Gets the non-constant pointer (for modification) of this array.
            </summary>
            <returns>The non-constant pointer.</returns>
            <since>5.0</since>
        </member>
        <member name="M:Rhino.Runtime.InteropWrappers.SimpleArraySurfacePointer.#ctor">
            <summary>
            Initializes a new <see cref="T:Rhino.Runtime.InteropWrappers.SimpleArraySurfacePointer"/> instance.
            </summary>
            <since>5.0</since>
        </member>
        <member name="M:Rhino.Runtime.InteropWrappers.SimpleArraySurfacePointer.ToNonConstArray">
            <summary>
            Copies the unmanaged array to a managed counterpart.
            Elements are made non-constant.
            </summary>
            <returns>The managed array.</returns>
            <since>5.0</since>
        </member>
        <member name="M:Rhino.Runtime.InteropWrappers.SimpleArraySurfacePointer.Finalize">
            <summary>
            Passively reclaims unmanaged resources when the class user did not explicitly call Dispose().
            </summary>
        </member>
        <member name="M:Rhino.Runtime.InteropWrappers.SimpleArraySurfacePointer.Dispose">
            <summary>
            Actively reclaims unmanaged resources that this instance uses.
            </summary>
            <since>5.0</since>
        </member>
        <member name="M:Rhino.Runtime.InteropWrappers.SimpleArraySurfacePointer.Dispose(System.Boolean)">
            <summary>
            For derived class implementers.
            <para>This method is called with argument true when class user calls Dispose(), while with argument false when
            the Garbage Collector invokes the finalizer, or Finalize() method.</para>
            <para>You must reclaim all used unmanaged resources in both cases, and can use this chance to call Dispose on disposable fields if the argument is true.</para>
            <para>Also, you must call the base virtual method within your overriding method.</para>
            </summary>
            <param name="disposing">true if the call comes from the Dispose() method; false if it comes from the Garbage Collector finalizer.</param>
        </member>
        <member name="T:Rhino.Runtime.InteropWrappers.SimpleArrayCurvePointer">
            <summary>
            Wrapper for a C++ ON_SimpleArray of ON_Curve* or constant ON_Curve*.  If you are not
            writing C++ code, then you can ignore this class.
            </summary>
        </member>
        <member name="M:Rhino.Runtime.InteropWrappers.SimpleArrayCurvePointer.ConstPointer">
            <summary>
            Gets the constant (immutable) pointer of this array.
            </summary>
            <returns>The constant pointer.</returns>
            <since>5.0</since>
        </member>
        <member name="M:Rhino.Runtime.InteropWrappers.SimpleArrayCurvePointer.NonConstPointer">
            <summary>
            Gets the non-constant pointer (for modification) of this array.
            </summary>
            <returns>The non-constant pointer.</returns>
            <since>5.0</since>
        </member>
        <member name="M:Rhino.Runtime.InteropWrappers.SimpleArrayCurvePointer.#ctor">
            <summary>
            Initializes a new <see cref="T:Rhino.Runtime.InteropWrappers.SimpleArrayCurvePointer"/> instance.
            </summary>
            <since>5.0</since>
        </member>
        <member name="M:Rhino.Runtime.InteropWrappers.SimpleArrayCurvePointer.#ctor(System.Collections.Generic.IEnumerable{Rhino.Geometry.Curve})">
            <summary>
            Initializes a new <see cref="T:Rhino.Runtime.InteropWrappers.SimpleArrayCurvePointer"/> instance, from a set of input curves.
            </summary>
            <param name="curves">A list, an array or any collection of curves that implements the enumerable interface.</param>
            <since>5.0</since>
        </member>
        <member name="M:Rhino.Runtime.InteropWrappers.SimpleArrayCurvePointer.ToNonConstArray">
            <summary>
            Copies the unmanaged array to a managed counterpart.
            </summary>
            <returns>The managed array.</returns>
            <since>5.0</since>
        </member>
        <member name="M:Rhino.Runtime.InteropWrappers.SimpleArrayCurvePointer.Finalize">
            <summary>
            Passively reclaims unmanaged resources when the class user did not explicitly call Dispose().
            </summary>
        </member>
        <member name="M:Rhino.Runtime.InteropWrappers.SimpleArrayCurvePointer.Dispose">
            <summary>
            Actively reclaims unmanaged resources that this instance uses.
            </summary>
            <since>5.0</since>
        </member>
        <member name="M:Rhino.Runtime.InteropWrappers.SimpleArrayCurvePointer.Dispose(System.Boolean)">
            <summary>
            For derived class implementers.
            <para>This method is called with argument true when class user calls Dispose(), while with argument false when
            the Garbage Collector invokes the finalizer, or Finalize() method.</para>
            <para>You must reclaim all used unmanaged resources in both cases, and can use this chance to call Dispose on disposable fields if the argument is true.</para>
            <para>Also, you must call the base virtual method within your overriding method.</para>
            </summary>
            <param name="disposing">true if the call comes from the Dispose() method; false if it comes from the Garbage Collector finalizer.</param>
        </member>
        <member name="T:Rhino.Runtime.InteropWrappers.SimpleArrayGeometryPointer">
            <summary>
            Wrapper for a C++ ON_SimpleArray&lt;ON_Geometry*&gt;* or ON_SimpleArray&lt;constant ON_Geometry*&gt;.
            If you are not writing C++ code, then this class is not for you.
            </summary>
        </member>
        <member name="M:Rhino.Runtime.InteropWrappers.SimpleArrayGeometryPointer.ConstPointer">
            <summary>
            Gets the constant (immutable) pointer of this array.
            </summary>
            <returns>The constant pointer.</returns>
            <since>5.0</since>
        </member>
        <member name="M:Rhino.Runtime.InteropWrappers.SimpleArrayGeometryPointer.NonConstPointer">
            <summary>
            Gets the non-constant pointer (for modification) of this array.
            </summary>
            <returns>The non-constant pointer.</returns>
            <since>5.0</since>
        </member>
        <member name="M:Rhino.Runtime.InteropWrappers.SimpleArrayGeometryPointer.#ctor">
            <summary>
            Initializes a new <see cref="T:Rhino.Runtime.InteropWrappers.SimpleArrayGeometryPointer"/> instance.
            </summary>
            <since>5.0</since>
        </member>
        <member name="M:Rhino.Runtime.InteropWrappers.SimpleArrayGeometryPointer.#ctor(System.Collections.Generic.IEnumerable{Rhino.Geometry.GeometryBase})">
            <summary>
            Create an ON_SimpleArray&lt;ON_Geometry*&gt; filled with items in geometry
            </summary>
            <param name="geometry"></param>
            <since>5.0</since>
        </member>
        <member name="M:Rhino.Runtime.InteropWrappers.SimpleArrayGeometryPointer.#ctor(System.Collections.IEnumerable)">
            <summary>
            Expects all of the items in the IEnumerable to be GeometryBase types
            </summary>
            <param name="geometry"></param>
            <since>5.0</since>
        </member>
        <member name="M:Rhino.Runtime.InteropWrappers.SimpleArrayGeometryPointer.ToNonConstArray">
            <summary>
            Copies the unmanaged array to a managed counterpart.
            </summary>
            <returns>The managed array.</returns>
            <since>5.0</since>
        </member>
        <member name="M:Rhino.Runtime.InteropWrappers.SimpleArrayGeometryPointer.Finalize">
            <summary>
            Passively reclaims unmanaged resources when the class user did not explicitly call Dispose().
            </summary>
        </member>
        <member name="M:Rhino.Runtime.InteropWrappers.SimpleArrayGeometryPointer.Dispose">
            <summary>
            Actively reclaims unmanaged resources that this instance uses.
            </summary>
            <since>5.0</since>
        </member>
        <member name="M:Rhino.Runtime.InteropWrappers.SimpleArrayGeometryPointer.Dispose(System.Boolean)">
            <summary>
            For derived class implementers.
            <para>This method is called with argument true when class user calls Dispose(), while with argument false when
            the Garbage Collector invokes the finalizer, or Finalize() method.</para>
            <para>You must reclaim all used unmanaged resources in both cases, and can use this chance to call Dispose on disposable fields if the argument is true.</para>
            <para>Also, you must call the base virtual method within your overriding method.</para>
            </summary>
            <param name="disposing">true if the call comes from the Dispose() method; false if it comes from the Garbage Collector finalizer.</param>
        </member>
        <member name="T:Rhino.Runtime.InteropWrappers.SimpleArrayMeshPointer">
            <summary>
            Represents a wrapper to an unmanaged array of mesh pointers.
            <para>Wrapper for a C++ ON_SimpleArray of ON_Mesh* or constant ON_Mesh*. If you are not
            writing C++ code then this class is not for you.</para>
            </summary>
        </member>
        <member name="M:Rhino.Runtime.InteropWrappers.SimpleArrayMeshPointer.ConstPointer">
            <summary>
            Gets the constant (immutable) pointer of this array.
            </summary>
            <returns>The constant pointer.</returns>
            <since>5.0</since>
        </member>
        <member name="M:Rhino.Runtime.InteropWrappers.SimpleArrayMeshPointer.NonConstPointer">
            <summary>
            Gets the non-constant pointer (for modification) of this array.
            </summary>
            <returns>The non-constant pointer.</returns>
            <since>5.0</since>
        </member>
        <member name="M:Rhino.Runtime.InteropWrappers.SimpleArrayMeshPointer.#ctor">
            <summary>
            Initializes a new <see cref="T:Rhino.Runtime.InteropWrappers.SimpleArrayMeshPointer"/> instance.
            </summary>
            <since>5.0</since>
        </member>
        <member name="P:Rhino.Runtime.InteropWrappers.SimpleArrayMeshPointer.Count">
            <summary>
            Gets the amount of meshes in this array.
            </summary>
            <since>5.0</since>
        </member>
        <member name="M:Rhino.Runtime.InteropWrappers.SimpleArrayMeshPointer.Add(Rhino.Geometry.Mesh,System.Boolean)">
            <summary>
            Adds a mesh to the list.
            </summary>
            <param name="mesh">A mesh to add.</param>
            <param name="asConst">Whether this mesh should be treated as non-modifiable.</param>
            <since>5.0</since>
        </member>
        <member name="M:Rhino.Runtime.InteropWrappers.SimpleArrayMeshPointer.Finalize">
            <summary>
            Passively reclaims unmanaged resources when the class user did not explicitly call Dispose().
            </summary>
        </member>
        <member name="M:Rhino.Runtime.InteropWrappers.SimpleArrayMeshPointer.Dispose">
            <summary>
            Actively reclaims unmanaged resources that this instance uses.
            </summary>
            <since>5.0</since>
        </member>
        <member name="M:Rhino.Runtime.InteropWrappers.SimpleArrayMeshPointer.Dispose(System.Boolean)">
            <summary>
            
            </summary>
            <param name="disposing"></param>
        </member>
        <member name="M:Rhino.Runtime.InteropWrappers.SimpleArrayMeshPointer.ToNonConstArray">
            <summary>
            Copies the unmanaged array to a managed counterpart.
            </summary>
            <returns>The managed array.</returns>
            <since>5.0</since>
        </member>
        <member name="T:Rhino.Runtime.InteropWrappers.StdVectorGuid">
            <summary>
            Wrapper for std::vector&lt;ON_UUID&gt;. If you are not writing C++ code
            then this class is not for you.
            </summary>
        </member>
        <member name="M:Rhino.Runtime.InteropWrappers.StdVectorGuid.ConstPointer">
            <summary>
            Gets the constant (immutable) pointer of this vector.
            </summary>
            <returns>The constant pointer.</returns>
            <since>5.0</since>
        </member>
        <member name="M:Rhino.Runtime.InteropWrappers.StdVectorGuid.NonConstPointer">
            <summary>
            Gets the non-constant pointer (for modification) of this vector.
            </summary>
            <returns>The non-constant pointer.</returns>
            <since>5.0</since>
        </member>
        <member name="M:Rhino.Runtime.InteropWrappers.StdVectorGuid.#ctor">
            <summary>
            Initializes a new <see cref="T:Rhino.Runtime.InteropWrappers.StdVectorGuid"/> class.
            </summary>
            <since>5.0</since>
        </member>
        <member name="M:Rhino.Runtime.InteropWrappers.StdVectorGuid.#ctor(System.Collections.Generic.IEnumerable{System.Guid})">
            <summary>
            Initializes a new <see cref="T:Rhino.Runtime.InteropWrappers.StdVectorGuid"/> class
            </summary>
            <param name="values">initial set of Guids to add to the array</param>
            <since>7.0</since>
        </member>
        <member name="P:Rhino.Runtime.InteropWrappers.StdVectorGuid.Item(System.UInt64)">
            <summary>
            Get the Guid at index
            </summary>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="M:Rhino.Runtime.InteropWrappers.StdVectorGuid.Append(System.Guid)">
            <summary>
            Appends a new <see cref="T:System.Guid"/> at the end of this vector.
            </summary>
            <since>6.0</since>
        </member>
        <member name="P:Rhino.Runtime.InteropWrappers.StdVectorGuid.Count">
            <summary>
            Gets the amount of elements in this vector.
            </summary>
            <since>5.0</since>
        </member>
        <member name="M:Rhino.Runtime.InteropWrappers.StdVectorGuid.ToArray">
            <summary>
            Returns the managed counterpart of the unmanaged vector.
            </summary>
            <returns>The managed array.</returns>
            <since>5.0</since>
        </member>
        <member name="M:Rhino.Runtime.InteropWrappers.StdVectorGuid.Finalize">
            <summary>
            Passively reclaims unmanaged resources when the class user did not explicitly call Dispose().
            </summary>
        </member>
        <member name="M:Rhino.Runtime.InteropWrappers.StdVectorGuid.Dispose">
            <summary>
            Actively reclaims unmanaged resources that this instance uses.
            </summary>
            <since>5.0</since>
        </member>
        <member name="T:Rhino.Runtime.InteropWrappers.StdVectorOfSharedPtrToMesh">
            <summary>
            Represents a wrapper to an unmanaged array of mesh pointers.
            <para>Wrapper for a C++ ON_SimpleArray of ON_Mesh* or constant ON_Mesh*. If you are not
            writing C++ code then this class is not for you.</para>
            </summary>
        </member>
        <member name="M:Rhino.Runtime.InteropWrappers.StdVectorOfSharedPtrToMesh.ConstPointer">
            <summary>
            Gets the constant (immutable) pointer of this array.
            </summary>
            <returns>The constant pointer.</returns>
            <since>5.0</since>
        </member>
        <member name="M:Rhino.Runtime.InteropWrappers.StdVectorOfSharedPtrToMesh.NonConstPointer">
            <summary>
            Gets the non-constant pointer (for modification) of this array.
            </summary>
            <returns>The non-constant pointer.</returns>
            <since>5.0</since>
        </member>
        <member name="M:Rhino.Runtime.InteropWrappers.StdVectorOfSharedPtrToMesh.#ctor">
            <summary>
            Initializes a new <see cref="T:Rhino.Runtime.InteropWrappers.StdVectorOfSharedPtrToMesh"/> instance.
            </summary>
            <since>5.0</since>
        </member>
        <member name="P:Rhino.Runtime.InteropWrappers.StdVectorOfSharedPtrToMesh.Count">
            <summary>
            Gets the amount of meshes in this array.
            </summary>
            <since>5.0</since>
        </member>
        <member name="M:Rhino.Runtime.InteropWrappers.StdVectorOfSharedPtrToMesh.Add(Rhino.Geometry.Mesh,System.Boolean)">
            <summary>
            Adds a mesh to the list.
            </summary>
            <param name="mesh">A mesh to add.</param>
            <param name="asConst">Whether this mesh should be treated as non-modifiable.</param>
            <since>5.0</since>
        </member>
        <member name="M:Rhino.Runtime.InteropWrappers.StdVectorOfSharedPtrToMesh.Finalize">
            <summary>
            Passively reclaims unmanaged resources when the class user did not explicitly call Dispose().
            </summary>
        </member>
        <member name="M:Rhino.Runtime.InteropWrappers.StdVectorOfSharedPtrToMesh.Dispose">
            <summary>
            Actively reclaims unmanaged resources that this instance uses.
            </summary>
            <since>5.0</since>
        </member>
        <member name="M:Rhino.Runtime.InteropWrappers.StdVectorOfSharedPtrToMesh.Dispose(System.Boolean)">
            <summary>
            
            </summary>
            <param name="disposing"></param>
        </member>
        <member name="M:Rhino.Runtime.InteropWrappers.StdVectorOfSharedPtrToMesh.ToNonConstArray">
            <summary>
            Copies the unmanaged array to a managed counterpart.
            </summary>
            <returns>The managed array.</returns>
            <since>5.0</since>
        </member>
        <member name="T:Rhino.Runtime.InteropWrappers.SimpleArrayMeshFace">
            <summary>
            Wrapper for ON_SimpleArray&lt;ON_MeshFace&gt;. If you are not writing C++ code
            then this class is not for you.
            </summary>
        </member>
        <member name="M:Rhino.Runtime.InteropWrappers.SimpleArrayMeshFace.ConstPointer">
            <summary>
            Gets the constant (immutable) pointer of this array.
            </summary>
            <returns>The constant pointer.</returns>
            <since>8.0</since>
        </member>
        <member name="M:Rhino.Runtime.InteropWrappers.SimpleArrayMeshFace.NonConstPointer">
            <summary>
            Gets the non-constant pointer (for modification) of this array.
            </summary>
            <returns>The non-constant pointer.</returns>
            <since>8.0</since>
        </member>
        <member name="M:Rhino.Runtime.InteropWrappers.SimpleArrayMeshFace.#ctor">
            <summary>
            Initializes a new <see cref="T:Rhino.Runtime.InteropWrappers.SimpleArrayMeshFace"/> instance.
            </summary>
            <since>8.0</since>
        </member>
        <member name="P:Rhino.Runtime.InteropWrappers.SimpleArrayMeshFace.Count">
            <summary>
            Gets the amount of mesh faces in this array.
            </summary>
            <since>8.0</since>
        </member>
        <member name="M:Rhino.Runtime.InteropWrappers.SimpleArrayMeshFace.ToArray">
            <summary>
            Copies the unmanaged array to a managed counterpart.
            </summary>
            <returns>The managed array.</returns>
            <since>8.0</since>
        </member>
        <member name="M:Rhino.Runtime.InteropWrappers.SimpleArrayMeshFace.Finalize">
            <summary>
            Passively reclaims unmanaged resources when the class user did not explicitly call Dispose().
            </summary>
        </member>
        <member name="M:Rhino.Runtime.InteropWrappers.SimpleArrayMeshFace.Dispose">
            <summary>
            Actively reclaims unmanaged resources that this instance uses.
            </summary>
            <since>8.0</since>
        </member>
        <member name="T:Rhino.Runtime.InteropWrappers.SimpleArraySubDPointer">
            <summary>
            Wrapper for a C++ ON_SimpleArray&lt;ON_SubD*&gt; or ON_SimpleArray&lt;constant ON_SubD*&gt;
            If you are not writing C++ code then this class is not for you.
            </summary>
        </member>
        <member name="M:Rhino.Runtime.InteropWrappers.SimpleArraySubDPointer.ConstPointer">
            <summary>
            Gets the constant (immutable) pointer of this array.
            </summary>
            <returns>The constant pointer.</returns>
            <since>7.14</since>
        </member>
        <member name="M:Rhino.Runtime.InteropWrappers.SimpleArraySubDPointer.NonConstPointer">
            <summary>
            Gets the non-constant pointer (for modification) of this array.
            </summary>
            <returns>The non-constant pointer.</returns>
            <since>7.14</since>
        </member>
        <member name="M:Rhino.Runtime.InteropWrappers.SimpleArraySubDPointer.#ctor">
            <summary>
            Initializes a new <see cref="T:Rhino.Runtime.InteropWrappers.SimpleArraySubDPointer"/> instance.
            </summary>
            <since>7.14</since>
        </member>
        <member name="P:Rhino.Runtime.InteropWrappers.SimpleArraySubDPointer.Count">
            <summary>
            Gets the amount of subds in this array.
            </summary>
            <since>7.14</since>
        </member>
        <member name="M:Rhino.Runtime.InteropWrappers.SimpleArraySubDPointer.Add(Rhino.Geometry.SubD,System.Boolean)">
            <summary>
            Adds a subd to the list.
            </summary>
            <param name="subd">A subd to add.</param>
            <param name="asConst">Whether this subd should be treated as non-modifiable.</param>
            <since>7.14</since>
        </member>
        <member name="M:Rhino.Runtime.InteropWrappers.SimpleArraySubDPointer.Finalize">
            <summary>
            Passively reclaims unmanaged resources when the class user did not explicitly call Dispose().
            </summary>
        </member>
        <member name="M:Rhino.Runtime.InteropWrappers.SimpleArraySubDPointer.Dispose">
            <summary>
            Actively reclaims unmanaged resources that this instance uses.
            </summary>
            <since>7.14</since>
        </member>
        <member name="M:Rhino.Runtime.InteropWrappers.SimpleArraySubDPointer.Dispose(System.Boolean)">
            <summary>
            
            </summary>
            <param name="disposing"></param>
        </member>
        <member name="M:Rhino.Runtime.InteropWrappers.SimpleArraySubDPointer.ToNonConstArray">
            <summary>
            Copies the unmanaged array to a managed counterpart.
            </summary>
            <returns>The managed array.</returns>
            <since>7.14</since>
        </member>
        <member name="T:Rhino.Runtime.InteropWrappers.SimpleArrayBrepPointer">
            <summary>
            Wrapper for a C++ ON_SimpleArray&lt;ON_Brep*&gt; or ON_SimpleArray&lt;constant ON_Brep*&gt;
            If you are not writing C++ code then this class is not for you.
            </summary>
        </member>
        <member name="M:Rhino.Runtime.InteropWrappers.SimpleArrayBrepPointer.ConstPointer">
            <summary>
            Gets the constant (immutable) pointer of this array.
            </summary>
            <returns>The constant pointer.</returns>
            <since>5.0</since>
        </member>
        <member name="M:Rhino.Runtime.InteropWrappers.SimpleArrayBrepPointer.NonConstPointer">
            <summary>
            Gets the non-constant pointer (for modification) of this array.
            </summary>
            <returns>The non-constant pointer.</returns>
            <since>5.0</since>
        </member>
        <member name="M:Rhino.Runtime.InteropWrappers.SimpleArrayBrepPointer.#ctor">
            <summary>
            Initializes a new <see cref="T:Rhino.Runtime.InteropWrappers.SimpleArrayBrepPointer"/> instance.
            </summary>
            <since>5.0</since>
        </member>
        <member name="P:Rhino.Runtime.InteropWrappers.SimpleArrayBrepPointer.Count">
            <summary>
            Gets the amount of breps in this array.
            </summary>
            <since>5.0</since>
        </member>
        <member name="M:Rhino.Runtime.InteropWrappers.SimpleArrayBrepPointer.Add(Rhino.Geometry.Brep,System.Boolean)">
            <summary>
            Adds a brep to the list.
            </summary>
            <param name="brep">A brep to add.</param>
            <param name="asConst">Whether this brep should be treated as non-modifiable.</param>
            <since>5.0</since>
        </member>
        <member name="M:Rhino.Runtime.InteropWrappers.SimpleArrayBrepPointer.Finalize">
            <summary>
            Passively reclaims unmanaged resources when the class user did not explicitly call Dispose().
            </summary>
        </member>
        <member name="M:Rhino.Runtime.InteropWrappers.SimpleArrayBrepPointer.Dispose">
            <summary>
            Actively reclaims unmanaged resources that this instance uses.
            </summary>
            <since>5.0</since>
        </member>
        <member name="M:Rhino.Runtime.InteropWrappers.SimpleArrayBrepPointer.Dispose(System.Boolean)">
            <summary>
            
            </summary>
            <param name="disposing"></param>
        </member>
        <member name="M:Rhino.Runtime.InteropWrappers.SimpleArrayBrepPointer.ToNonConstArray">
            <summary>
            Copies the unmanaged array to a managed counterpart.
            </summary>
            <returns>The managed array.</returns>
            <since>5.0</since>
        </member>
        <member name="T:Rhino.Runtime.InteropWrappers.SimpleArrayLinetypePointer">
            <summary>
            Wrapper for a C++ ON_SimpleArray&lt;ON_Linetype*&gt;
            If you are not writing C++ code then this class is not for you.
            </summary>
        </member>
        <member name="M:Rhino.Runtime.InteropWrappers.SimpleArrayLinetypePointer.ConstPointer">
            <summary>
            Gets the constant (immutable) pointer of this array.
            </summary>
            <returns>The constant pointer.</returns>
            <since>6.6</since>
        </member>
        <member name="M:Rhino.Runtime.InteropWrappers.SimpleArrayLinetypePointer.NonConstPointer">
            <summary>
            Gets the non-constant pointer (for modification) of this array.
            </summary>
            <returns>The non-constant pointer.</returns>
            <since>6.6</since>
        </member>
        <member name="M:Rhino.Runtime.InteropWrappers.SimpleArrayLinetypePointer.#ctor">
            <summary>
            Initializes a new <see cref="T:Rhino.Runtime.InteropWrappers.SimpleArrayLinetypePointer"/> instance.
            </summary>
            <since>6.6</since>
        </member>
        <member name="P:Rhino.Runtime.InteropWrappers.SimpleArrayLinetypePointer.Count">
            <summary>
            Gets the amount of linetypes in this array.
            </summary>
            <since>6.6</since>
        </member>
        <member name="M:Rhino.Runtime.InteropWrappers.SimpleArrayLinetypePointer.Finalize">
            <summary>
            Passively reclaims unmanaged resources when the class user did not explicitly call Dispose().
            </summary>
        </member>
        <member name="M:Rhino.Runtime.InteropWrappers.SimpleArrayLinetypePointer.Dispose">
            <summary>
            Actively reclaims unmanaged resources that this instance uses.
            </summary>
            <since>6.6</since>
        </member>
        <member name="M:Rhino.Runtime.InteropWrappers.SimpleArrayLinetypePointer.Dispose(System.Boolean)">
            <summary>
            Dispose
            </summary>
            <param name="disposing"></param>
        </member>
        <member name="M:Rhino.Runtime.InteropWrappers.SimpleArrayLinetypePointer.ToNonConstArray">
            <summary>
            Copies the unmanaged array to a managed counterpart.
            </summary>
            <returns>The managed array.</returns>
            <since>6.6</since>
        </member>
        <member name="T:Rhino.Runtime.InteropWrappers.SimpleArrayExtrusionPointer">
            <summary>
            Wrapper for a C++ ON_SimpleArray&lt;ON_Extrusion*&gt; or ON_SimpleArray&lt;constant ON_Extrusion*&gt;
            If you are not writing C++ code then this class is not for you.
            </summary>
        </member>
        <member name="M:Rhino.Runtime.InteropWrappers.SimpleArrayExtrusionPointer.ConstPointer">
            <summary>
            Gets the constant (immutable) pointer of this array.
            </summary>
            <returns>The constant pointer.</returns>
            <since>6.0</since>
        </member>
        <member name="M:Rhino.Runtime.InteropWrappers.SimpleArrayExtrusionPointer.NonConstPointer">
            <summary>
            Gets the non-constant pointer (for modification) of this array.
            </summary>
            <returns>The non-constant pointer.</returns>
            <since>6.0</since>
        </member>
        <member name="M:Rhino.Runtime.InteropWrappers.SimpleArrayExtrusionPointer.#ctor">
            <summary>
            Initializes a new <see cref="T:Rhino.Runtime.InteropWrappers.SimpleArrayExtrusionPointer"/> instance.
            </summary>
            <since>6.0</since>
        </member>
        <member name="P:Rhino.Runtime.InteropWrappers.SimpleArrayExtrusionPointer.Count">
            <summary>
            Gets the amount of Extrusions in this array.
            </summary>
            <since>6.0</since>
        </member>
        <member name="M:Rhino.Runtime.InteropWrappers.SimpleArrayExtrusionPointer.Add(Rhino.Geometry.Extrusion,System.Boolean)">
            <summary>
            Adds a extrusion to the list.
            </summary>
            <param name="extrusion">A extrusion to add.</param>
            <param name="asConst">Whether this extrusion should be treated as non-modifiable.</param>
            <since>6.0</since>
        </member>
        <member name="M:Rhino.Runtime.InteropWrappers.SimpleArrayExtrusionPointer.Finalize">
            <summary>
            Passively reclaims unmanaged resources when the class user did not explicitly call Dispose().
            </summary>
        </member>
        <member name="M:Rhino.Runtime.InteropWrappers.SimpleArrayExtrusionPointer.Dispose">
            <summary>
            Actively reclaims unmanaged resources that this instance uses.
            </summary>
            <since>6.0</since>
        </member>
        <member name="M:Rhino.Runtime.InteropWrappers.SimpleArrayExtrusionPointer.Dispose(System.Boolean)">
            <summary>
            
            </summary>
            <param name="disposing"></param>
        </member>
        <member name="M:Rhino.Runtime.InteropWrappers.SimpleArrayExtrusionPointer.ToNonConstArray">
            <summary>
            Copies the unmanaged array to a managed counterpart.
            </summary>
            <returns>The managed array.</returns>
            <since>6.0</since>
        </member>
        <member name="T:Rhino.Runtime.InteropWrappers.SimpleArrayBinaryArchiveReader">
            <summary>
            Wrapper for ON_SimpleArray&lt;ON_BinaryArchive&gt;. If you are not writing C++ code
            then this class is not for you.
            </summary>
        </member>
        <member name="M:Rhino.Runtime.InteropWrappers.SimpleArrayBinaryArchiveReader.ConstPointer">
            <summary>
            Gets the constant (immutable) pointer of this array.
            </summary>
            <returns>The constant pointer.</returns>
            <since>6.0</since>
        </member>
        <member name="M:Rhino.Runtime.InteropWrappers.SimpleArrayBinaryArchiveReader.NonConstPointer">
            <summary>
            Gets the non-constant pointer (for modification) of this array.
            </summary>
            <returns>The non-constant pointer.</returns>
            <since>6.0</since>
        </member>
        <member name="M:Rhino.Runtime.InteropWrappers.SimpleArrayBinaryArchiveReader.#ctor">
            <summary>
            Initializes a new <see cref="T:Rhino.Runtime.InteropWrappers.SimpleArrayBinaryArchiveReader"/> class.
            </summary>
            <since>6.0</since>
        </member>
        <member name="M:Rhino.Runtime.InteropWrappers.SimpleArrayBinaryArchiveReader.#ctor(System.IntPtr)">
            <summary>
            Initializes a new <see cref="T:Rhino.Runtime.InteropWrappers.SimpleArrayBinaryArchiveReader"/> class.
            </summary>
            <since>6.0</since>
        </member>
        <member name="M:Rhino.Runtime.InteropWrappers.SimpleArrayBinaryArchiveReader.Add(Rhino.FileIO.BinaryArchiveReader)">
            <summary>
            Adds a new <see cref="T:Rhino.Geometry.Interval"/> at the end of this array.
            </summary>
            <since>6.0</since>
        </member>
        <member name="P:Rhino.Runtime.InteropWrappers.SimpleArrayBinaryArchiveReader.Count">
            <summary>
            Gets the amount of elements in this array.
            </summary>
            <since>6.0</since>
        </member>
        <member name="M:Rhino.Runtime.InteropWrappers.SimpleArrayBinaryArchiveReader.Get(System.Int32)">
            <summary>
            Get the Guid at index
            </summary>
            <param name="index"></param>
            <returns></returns>
            <since>6.0</since>
        </member>
        <member name="M:Rhino.Runtime.InteropWrappers.SimpleArrayBinaryArchiveReader.Finalize">
            <summary>
            Passively reclaims unmanaged resources when the class user did not explicitly call Dispose().
            </summary>
        </member>
        <member name="M:Rhino.Runtime.InteropWrappers.SimpleArrayBinaryArchiveReader.Dispose">
            <summary>
            Actively reclaims unmanaged resources that this instance uses.
            </summary>
            <since>6.0</since>
        </member>
        <member name="T:Rhino.Runtime.InteropWrappers.ClassArrayString">
            <summary>
            Wrapper for a C++ ON_ClassArray&lt;ON_wString&gt;
            If you are not writing C++ code then this class is not for you.
            </summary>
        </member>
        <member name="M:Rhino.Runtime.InteropWrappers.ClassArrayString.ConstPointer">
            <summary>Gets the constant (immutable) pointer of this array.</summary>
            <returns>The constant pointer.</returns>
            <since>6.0</since>
        </member>
        <member name="M:Rhino.Runtime.InteropWrappers.ClassArrayString.NonConstPointer">
            <summary>Gets the non-constant pointer (for modification) of this array.</summary>
            <returns>The non-constant pointer.</returns>
            <since>6.0</since>
        </member>
        <member name="M:Rhino.Runtime.InteropWrappers.ClassArrayString.#ctor">
            <summary>
            Initializes a new <see cref="T:Rhino.Runtime.InteropWrappers.ClassArrayString"/> instance.
            </summary>
            <since>6.0</since>
        </member>
        <member name="P:Rhino.Runtime.InteropWrappers.ClassArrayString.Count">
            <summary>
            Gets the number of strings in this array.
            </summary>
            <since>6.0</since>
        </member>
        <member name="M:Rhino.Runtime.InteropWrappers.ClassArrayString.Add(System.String)">
            <summary>
            Adds a string to the list.
            </summary>
            <param name="s">A string to add.</param>
            <since>6.0</since>
        </member>
        <member name="M:Rhino.Runtime.InteropWrappers.ClassArrayString.Finalize">
            <summary>
            Passively reclaims unmanaged resources when the class user did not explicitly call Dispose().
            </summary>
        </member>
        <member name="M:Rhino.Runtime.InteropWrappers.ClassArrayString.Dispose">
            <summary>
            Actively reclaims unmanaged resources that this instance uses.
            </summary>
            <since>6.0</since>
        </member>
        <member name="M:Rhino.Runtime.InteropWrappers.ClassArrayString.Dispose(System.Boolean)">
            <summary></summary>
            <param name="disposing"></param>
        </member>
        <member name="M:Rhino.Runtime.InteropWrappers.ClassArrayString.ToArray">
            <summary>
            Copies the unmanaged array to a managed counterpart.
            </summary>
            <returns>The managed array.</returns>
            <since>6.0</since>
        </member>
        <member name="M:Rhino.Runtime.InteropWrappers.ArrayOfTArrayMarshal.Create``1(System.Collections.Generic.IEnumerable{System.Collections.Generic.IEnumerable{``0}},Rhino.Runtime.InteropWrappers.NullItemsResponse)">
            <summary>
            Helper method to construct the marshal.
            </summary>
            <param name="arrayOfArray">This parameter can be null. Then, the marshaler will act accordingly.</param>
            <param name="nestedFirstLevelNulls">Behavior for null nested items.</param>
        </member>
        <member name="T:Rhino.Runtime.InteropWrappers.ArrayOfTArrayMarshal`1">
            <summary>
            Allows to marshal an array of arrays without copying the nested arrays to unmanaged memory and without additional calls.
            </summary>
            <typeparam name="T">The type to be marshaled.</typeparam>
        </member>
        <member name="M:Rhino.Runtime.InteropWrappers.ArrayOfTArrayMarshal`1.#ctor(System.Collections.Generic.IEnumerable{System.Collections.Generic.IEnumerable{`0}},Rhino.Runtime.InteropWrappers.NullItemsResponse)">
            <summary>
            Constructs.
            </summary>
            <param name="arrayOfArray">This parameter can be null. Then, the marshaler will act accordingly.</param>
            <param name="nestedFirstLevelNulls">Behavior for null nested items.</param>
        </member>
        <member name="T:Rhino.Runtime.InteropWrappers.SimpleArrayHatchLinePointer">
            <summary>
            Wrapper for a C++ ON_SimpleArray of ON_HatchLine*.
            If you are not writing C++ code, then you can ignore this class.
            </summary>
            <since>8.0</since>
        </member>
        <member name="M:Rhino.Runtime.InteropWrappers.SimpleArrayHatchLinePointer.ConstPointer">
            <summary>
            Gets the constant (immutable) pointer of this array.
            </summary>
            <returns>The constant pointer.</returns>
            <since>8.0</since>
        </member>
        <member name="M:Rhino.Runtime.InteropWrappers.SimpleArrayHatchLinePointer.NonConstPointer">
            <summary>
            Gets the non-constant pointer (for modification) of this array.
            </summary>
            <returns>The non-constant pointer.</returns>
            <since>8.0</since>
        </member>
        <member name="M:Rhino.Runtime.InteropWrappers.SimpleArrayHatchLinePointer.#ctor">
            <summary>
            Initializes a new <see cref="T:Rhino.Runtime.InteropWrappers.SimpleArrayHatchLinePointer"/> instance.
            </summary>
            <since>8.0</since>
        </member>
        <member name="M:Rhino.Runtime.InteropWrappers.SimpleArrayHatchLinePointer.#ctor(System.Collections.Generic.IEnumerable{Rhino.DocObjects.HatchLine})">
            <summary>
            Initializes a new <see cref="T:Rhino.Runtime.InteropWrappers.SimpleArrayHatchLinePointer"/> instance, from a set of input hatch lines.
            </summary>
            <param name="hatchLines">A list, an array or any collection of curves that implements the enumerable interface.</param>
            <since>8.0</since>
        </member>
        <member name="M:Rhino.Runtime.InteropWrappers.SimpleArrayHatchLinePointer.Finalize">
            <summary>
            Passively reclaims unmanaged resources when the class user did not explicitly call Dispose().
            </summary>
        </member>
        <member name="M:Rhino.Runtime.InteropWrappers.SimpleArrayHatchLinePointer.Dispose">
            <summary>
            Actively reclaims unmanaged resources that this instance uses.
            </summary>
            <since>8.0</since>
        </member>
        <member name="M:Rhino.Runtime.InteropWrappers.SimpleArrayHatchLinePointer.Dispose(System.Boolean)">
            <summary>
            For derived class implementers.
            <para>This method is called with argument true when class user calls Dispose(), while with argument false when
            the Garbage Collector invokes the finalizer, or Finalize() method.</para>
            <para>You must reclaim all used unmanaged resources in both cases, and can use this chance to call Dispose on disposable fields if the argument is true.</para>
            <para>Also, you must call the base virtual method within your overriding method.</para>
            </summary>
            <param name="disposing">true if the call comes from the Dispose() method; false if it comes from the Garbage Collector finalizer.</param>
        </member>
        <member name="T:Rhino.Runtime.InteropWrappers.MeshPointDataStruct">
            <summary>
            This is only needed when passing values to the Rhino C++ core, ignore
            for .NET plug-ins.
            </summary>
        </member>
        <member name="F:Rhino.Runtime.InteropWrappers.MeshPointDataStruct.m_et">
            <summary>
            This is only needed when passing values to the Rhino C++ core, ignore
            for .NET plug-ins.
            </summary>
        </member>
        <member name="F:Rhino.Runtime.InteropWrappers.MeshPointDataStruct.m_ci_type">
            <summary>
            This is only needed when passing values to the Rhino C++ core, ignore
            for .NET plug-ins.
            </summary>
        </member>
        <member name="F:Rhino.Runtime.InteropWrappers.MeshPointDataStruct.m_ci_index">
            <summary>
            This is only needed when passing values to the Rhino C++ core, ignore
            for .NET plug-ins.
            </summary>
        </member>
        <member name="F:Rhino.Runtime.InteropWrappers.MeshPointDataStruct.m_edge_index">
            <summary>
            This is only needed when passing values to the Rhino C++ core, ignore
            for .NET plug-ins.
            </summary>
        </member>
        <member name="F:Rhino.Runtime.InteropWrappers.MeshPointDataStruct.m_face_index">
            <summary>
            This is only needed when passing values to the Rhino C++ core, ignore
            for .NET plug-ins.
            </summary>
        </member>
        <member name="F:Rhino.Runtime.InteropWrappers.MeshPointDataStruct.m_Triangle">
            <summary>
            This is only needed when passing values to the Rhino C++ core, ignore
            for .NET plug-ins.
            </summary>
        </member>
        <member name="F:Rhino.Runtime.InteropWrappers.MeshPointDataStruct.m_t0">
            <summary>
            This is only needed when passing values to the Rhino C++ core, ignore
            for .NET plug-ins.
            </summary>
        </member>
        <member name="F:Rhino.Runtime.InteropWrappers.MeshPointDataStruct.m_t1">
            <summary>
            This is only needed when passing values to the Rhino C++ core, ignore
            for .NET plug-ins.
            </summary>
        </member>
        <member name="F:Rhino.Runtime.InteropWrappers.MeshPointDataStruct.m_t2">
            <summary>
            This is only needed when passing values to the Rhino C++ core, ignore
            for .NET plug-ins.
            </summary>
        </member>
        <member name="F:Rhino.Runtime.InteropWrappers.MeshPointDataStruct.m_t3">
            <summary>
            This is only needed when passing values to the Rhino C++ core, ignore
            for .NET plug-ins.
            </summary>
        </member>
        <member name="F:Rhino.Runtime.InteropWrappers.MeshPointDataStruct.m_Px">
            <summary>
            This is only needed when passing values to the Rhino C++ core, ignore
            for .NET plug-ins.
            </summary>
        </member>
        <member name="F:Rhino.Runtime.InteropWrappers.MeshPointDataStruct.m_Py">
            <summary>
            This is only needed when passing values to the Rhino C++ core, ignore
            for .NET plug-ins.
            </summary>
        </member>
        <member name="F:Rhino.Runtime.InteropWrappers.MeshPointDataStruct.m_Pz">
            <summary>
            This is only needed when passing values to the Rhino C++ core, ignore
            for .NET plug-ins.
            </summary>
        </member>
        <member name="T:Rhino.Runtime.InteropWrappers.StringWrapper">
            <summary>
            Represents a wrapper to an unmanaged OpenNurbs string.
            <para>Wraps a C++ ON_wString*.</para>
            </summary>
        </member>
        <member name="M:Rhino.Runtime.InteropWrappers.StringWrapper.#ctor">
            <summary>
            Initializes a new empty unmanaged string (ON_wString*).
            </summary>
            <since>5.0</since>
        </member>
        <member name="M:Rhino.Runtime.InteropWrappers.StringWrapper.#ctor(System.String)">
            <summary>
            Initializes a new unmanaged string with an initial value.
            The string s can be null.
            </summary>
            <param name="s">The initial value, or null.</param>
            <since>5.0</since>
        </member>
        <member name="P:Rhino.Runtime.InteropWrappers.StringWrapper.ConstPointer">
            <summary>
            Gets the constant pointer (constant ON_wString*).
            </summary>
            <returns>The constant pointer.</returns>
            <since>5.0</since>
        </member>
        <member name="P:Rhino.Runtime.InteropWrappers.StringWrapper.NonConstPointer">
            <summary>
            Gets the non-constant pointer (ON_wString*).
            </summary>
            <returns>The non-constant pointer.</returns>
            <since>5.0</since>
        </member>
        <member name="M:Rhino.Runtime.InteropWrappers.StringWrapper.Finalize">
            <summary>
            Passively reclaims unmanaged resources when the class user did not explicitly call Dispose().
            </summary>
        </member>
        <member name="M:Rhino.Runtime.InteropWrappers.StringWrapper.Dispose">
            <summary>
            Actively reclaims unmanaged resources that this instance uses.
            </summary>
            <since>5.0</since>
        </member>
        <member name="M:Rhino.Runtime.InteropWrappers.StringWrapper.ToString">
            <summary>
            Returns the string contents of this wrapper.
            </summary>
            <returns>A managed string.</returns>
        </member>
        <member name="M:Rhino.Runtime.InteropWrappers.StringWrapper.SetString(System.String)">
            <summary>
            Set contents of this string.
            </summary>
            <param name="s">The new string.</param>
            <since>5.0</since>
        </member>
        <member name="M:Rhino.Runtime.InteropWrappers.StringWrapper.SetStringOnPointer(System.IntPtr,System.String)">
            <summary>
            Set contents of an ON_wString*
            </summary>
            <param name="pON_wString"></param>
            <param name="s"></param>
            <since>5.0</since>
        </member>
        <member name="M:Rhino.Runtime.InteropWrappers.StringWrapper.GetStringFromPointer(System.IntPtr)">
            <summary>
            Get string from an ON_wString*
            </summary>
            <param name="pConstON_wString"></param>
            <returns></returns>
            <since>5.0</since>
        </member>
        <member name="T:Rhino.Runtime.MonoHost">
            <summary>
            This class should only ever be called from the MonoManager.rhp. Luckily
            when embedding mono, you can call private classes with no problem so we
            don't need to expose this to the SDK.
            </summary>
        </member>
        <member name="T:Rhino.Runtime.IShrinkWrapService">
            <summary>
            Internal interface used by ShrinkWrap functions
            </summary>
        </member>
        <member name="M:Rhino.Runtime.IShrinkWrapService.ShrinkWrap(Rhino.Geometry.Mesh,Rhino.Geometry.ShrinkWrapParameters)">
            <summary>
            Create a shrinkwrap from a single mesh
            Null on error or incompatible settings
            </summary>
            <param name="mesh"></param>
            <param name="parameters"></param>
            <returns></returns>
            <since>8.0</since>
        </member>
        <member name="M:Rhino.Runtime.IShrinkWrapService.ShrinkWrap(System.Collections.Generic.IEnumerable{Rhino.Geometry.Mesh},Rhino.Geometry.ShrinkWrapParameters)">
            <summary>
            Create mesh from input meshes.
            Null on error or incompatible settings
            </summary>
            <param name="meshes"></param>
            <param name="parameters"></param>
            <returns></returns>
            <since>8.0</since>
        </member>
        <member name="M:Rhino.Runtime.IShrinkWrapService.ShrinkWrap(Rhino.Geometry.PointCloud,Rhino.Geometry.ShrinkWrapParameters)">
            <summary>
            Create mesh from point cloud input.
            Null on error or incompatible settings
            </summary>
            <param name="pointCloud"></param>
            <param name="parameters"></param>
            <returns></returns>
            <since>8.0</since>
        </member>
        <member name="M:Rhino.Runtime.IShrinkWrapService.ShrinkWrap(System.Collections.Generic.IEnumerable{Rhino.Geometry.GeometryBase},Rhino.Geometry.ShrinkWrapParameters,Rhino.Geometry.MeshingParameters)">
            <summary>
            Create a mesh from a collection of geometry base objects
            Null on error or incompatible settings
            </summary>
            <param name="geometryBases"></param>
            <param name="parameters"></param>
            <param name="meshingParameters"></param>
            <returns></returns>
        </member>
        <member name="T:Rhino.Runtime.DocumentCollectedException">
            <summary>
            Represents the error that happen when a class user attempts to execute a modifying operation
            on an object that has been added to a document.
            </summary>
        </member>
        <member name="M:Rhino.Runtime.DocumentCollectedException.#ctor">
            <summary>
            Initializes a new instance of the document controlled exception class.
            </summary>
            <since>5.0</since>
        </member>
        <member name="M:Rhino.Runtime.DocumentCollectedException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the document collected exception class.
            </summary>
            <param name="message">A more specific message.</param>
            <since>6.0</since>
        </member>
        <member name="T:Rhino.Runtime.CorruptGeometryException">
            <summary>
            Thrown when Rhino finds a brep or mesh that will cause a crash if used for calculations.
            </summary>
        </member>
        <member name="M:Rhino.Runtime.CorruptGeometryException.#ctor(System.IntPtr,Rhino.Runtime.CommonObject)">
            <summary>
            Intentionally internal so only the IsCorrupt test can throw this exception.
            </summary>
            <param name="ptrGeometry">pointer to base geometry (ON_Object*)</param>
            <param name="obj">Corrupt geometry .NET class</param>
        </member>
        <member name="P:Rhino.Runtime.CorruptGeometryException.Pointer">
            <summary>
            pointer to base geometry (ON_Object*)
            </summary>
            <since>6.10</since>
        </member>
        <member name="P:Rhino.Runtime.CorruptGeometryException.CommonObject">
            <summary>
            Corrupt geometry .NET class
            </summary>
            <since>6.10</since>
        </member>
        <member name="T:Rhino.Runtime.CommonObject">
            <summary>
            Base class for .NET classes that wrap C++ unmanaged Rhino classes.
            </summary>
        </member>
        <member name="P:Rhino.Runtime.CommonObject.PerformCorruptionTesting">
            <summary>
            Used to test ON_Object* pointers to see if they are a brep or mesh that is corrupt enough to crash Rhino.
            </summary>
            <since>6.10</since>
        </member>
        <member name="M:Rhino.Runtime.CommonObject.NonConstOperation">
            <summary>
            For derived classes implementers.
            <para>Defines the necessary implementation to free the instance from being constant.</para>
            </summary>
        </member>
        <member name="M:Rhino.Runtime.CommonObject.OnSwitchToNonConst">
            <summary>
            Is called when a non-constant operation first occurs.
            </summary>
        </member>
        <member name="M:Rhino.Runtime.CommonObject.EnsurePrivateCopy">
            <summary>
            If you want to keep a copy of this class around by holding onto it in a variable after a command
            completes, call EnsurePrivateCopy to make sure that this class is not tied to the document. You can
            call this function as many times as you want.
            </summary>
            <since>5.0</since>
        </member>
        <member name="P:Rhino.Runtime.CommonObject.IsDocumentControlled">
            <summary>
            If true this object may not be modified. Any properties or functions that attempt
            to modify this object when it is set to "IsReadOnly" will throw a NotSupportedException.
            </summary>
            <since>5.0</since>
        </member>
        <member name="M:Rhino.Runtime.CommonObject.ReleaseNonConstPointer">
            <summary>
            Used for "temporary" wrapping of objects that we don't want .NET to destruct
            on disposal.
            </summary>
        </member>
        <member name="M:Rhino.Runtime.CommonObject.ConstructConstObject(System.Object,System.Int32)">
            <summary>
            Assigns a parent object and a sub-object index to this.
            </summary>
            <param name="parentObject">The parent object.</param>
            <param name="subobjectIndex">The sub-object index.</param>
        </member>
        <member name="P:Rhino.Runtime.CommonObject.IsValid">
            <summary>Tests an object to see if it is valid.</summary>
            <since>5.0</since>
        </member>
        <member name="M:Rhino.Runtime.CommonObject.IsValidWithLog(System.String@)">
            <summary>
            Determines if an object is valid. Also provides a report on errors if this
            object happens not to be valid.
            </summary>
            <param name="log">A textual log. This out parameter is assigned during this call.</param>
            <returns>true if this object is valid; false otherwise.</returns>
            <since>5.0</since>
        </member>
        <member name="M:Rhino.Runtime.CommonObject.Finalize">
            <summary>
            Passively reclaims unmanaged resources when the class user did not explicitly call Dispose().
            </summary>
        </member>
        <member name="M:Rhino.Runtime.CommonObject.Dispose">
            <summary>
            Actively reclaims unmanaged resources that this instance uses.
            </summary>
            <since>5.0</since>
        </member>
        <member name="M:Rhino.Runtime.CommonObject.Dispose(System.Boolean)">
            <summary>
            For derived class implementers.
            <para>This method is called with argument true when class user calls Dispose(), while with argument false when
            the Garbage Collector invokes the finalizer, or Finalize() method.</para>
            <para>You must reclaim all used unmanaged resources in both cases, and can use this chance to call Dispose on disposable fields if the argument is true.</para>
            <para>Also, you must call the base virtual method within your overriding method.</para>
            </summary>
            <param name="disposing">true if the call comes from the Dispose() method; false if it comes from the Garbage Collector finalizer.</param>
        </member>
        <member name="P:Rhino.Runtime.CommonObject.Disposed">
            <summary>
            Indicates if this object has been disposed or the
            document it originally belonged to has been disposed.
            </summary>
            <since>6.0</since>
        </member>
        <member name="M:Rhino.Runtime.CommonObject.#ctor">
            <summary>
            Allows construction from inheriting classes.
            </summary>
        </member>
        <member name="P:Rhino.Runtime.CommonObject.HasUserData">
            <summary>
            Gets true if this class has any custom information attached to it through UserData.
            </summary>
            <since>5.0</since>
        </member>
        <member name="P:Rhino.Runtime.CommonObject.UserData">
            <summary>
            List of custom information that is attached to this class.
            </summary>
            <since>5.0</since>
        </member>
        <member name="P:Rhino.Runtime.CommonObject.EmptyUserString">
            <summary>
            Returns the string " ". This is the string Rhino uses to empty out a user string entry.
            </summary>
        </member>
        <member name="M:Rhino.Runtime.CommonObject._SetUserString(System.String,System.String)">
            <summary>
            Attach a user string (key,value combination) to this geometry.
            </summary>
            <param name="key">id used to retrieve this string.</param>
            <param name="value">string associated with key.</param>
            <returns>true on success.</returns>
        </member>
        <member name="M:Rhino.Runtime.CommonObject._GetUserString(System.String)">
            <summary>
            Gets user string from this geometry.
            </summary>
            <param name="key">id used to retrieve the string.</param>
            <returns>string associated with the key if successful. null if no key was found.</returns>
        </member>
        <member name="P:Rhino.Runtime.CommonObject._UserStringCount">
            <summary>
            Gets the amount of user strings.
            </summary>
        </member>
        <member name="M:Rhino.Runtime.CommonObject._GetUserStrings">
            <summary>
            Gets a copy of all (user key string, user value string) pairs attached to this geometry.
            </summary>
            <returns>A new collection.</returns>
        </member>
        <member name="M:Rhino.Runtime.CommonObject.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Protected constructor for internal use.
            </summary>
            <param name="info">Serialization data.</param>
            <param name="context">Serialization stream.</param>
        </member>
        <member name="M:Rhino.Runtime.CommonObject.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Populates a System.Runtime.Serialization.SerializationInfo with the data needed to serialize the target object.
            </summary>
            <param name="info">The System.Runtime.Serialization.SerializationInfo to populate with data.</param>
            <param name="context">The destination (see System.Runtime.Serialization.StreamingContext) for this serialization.</param>
            <since>5.0</since>
        </member>
        <member name="M:Rhino.Runtime.CommonObject.FromBase64String(System.Int32,System.Int32,System.String)">
            <summary>
            Create a CommonObject instance from a Base64 encoded string. This is typically the values
            used when passing common objects around as JSON data
            </summary>
            <param name="archive3dm"></param>
            <param name="opennurbs"></param>
            <param name="base64Data"></param>
            <returns></returns>
            <since>7.0</since>
        </member>
        <member name="M:Rhino.Runtime.CommonObject.FromJSON(System.String)">
            <summary>
            Create a CommonObject instance from a JSON string
            </summary>
            <param name="json"></param>
            <returns></returns>
            <since>7.5</since>
        </member>
        <member name="M:Rhino.Runtime.CommonObject.FromJSON(System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
            Create a CommonObject instance from a JSON dictionary
            </summary>
            <param name="jsonDictionary"></param>
            <returns></returns>
            <since>7.0</since>
        </member>
        <member name="M:Rhino.Runtime.CommonObject.ToJSON(Rhino.FileIO.SerializationOptions)">
            <summary>
            Create a JSON string representation of this object
            </summary>
            <param name="options"></param>
            <returns></returns>
            <since>7.0</since>
        </member>
        <member name="M:Rhino.Runtime.SharedPtrCommonObject.ConstPointerToOnObject">
            <summary> The real const ON_Object*</summary>
            <returns></returns>
        </member>
        <member name="T:Rhino.NamespaceDoc">
            <summary>Contains commonly-used value types and classes used in Rhino.</summary>
        </member>
        <member name="T:Rhino.ApplicationSettings.NamespaceDoc">
            <summary>Static settings global to the entire Rhino application</summary>
        </member>
        <member name="T:Rhino.Input.NamespaceDoc">
            <summary>Classes related to getting user input for things like points, objects, and numbers</summary>
        </member>
        <member name="T:Rhino.Input.StringParser">
            <summary> Parse strings to numbers, distances and angles </summary>
        </member>
        <member name="M:Rhino.Input.StringParser.ParseLengthExpession(System.String,Rhino.Input.StringParserSettings,Rhino.UnitSystem,System.Double@)">
            <summary>
            Parse a string for a length value.
            Expression can include complex expressions
            Simplest version of Length parsing
            </summary>
            <param name="expression">
             [In] The string to parse   
            </param>
            <param name="parse_settings_in">
             [In] Determines what input will be parsed 
            </param>
            <param name="output_unit_system">
             [In] Output value is in this unit system 
            </param>
            <param name="value_out">
             [Out] The length value result 
            </param>
            <returns> 
            Count of characters parsed or 0 for failure
            </returns>
            <since>6.0</since>
        </member>
        <member name="M:Rhino.Input.StringParser.ParseLengthExpession(System.String,System.Int32,System.Int32,Rhino.Input.StringParserSettings,Rhino.UnitSystem,System.Double@,Rhino.Input.StringParserSettings@,Rhino.UnitSystem@)">
            <summary>
            Parse a string for a length value.
            Expression can include complex expressions
            Most complex version of length parsing
            </summary>
            <param name="expression">
             [In] The string to parse   </param>
            <param name="start_offset">
             [In] Offset position in string to start parsing  </param>
            <param name="expression_length"> 
             [In] Maximum length of string to parse.
             -1 means parse to a terminating character or end of string 
            </param>
            <param name="parse_settings_in">
             [In] Determines what input will be parsed </param>
             If trig functions are included in the expression, 
             the angle unit system must be set correctly
            <param name="output_unit_system">
             [In] Output value is returned in this unit system </param>
            <param name="value_out">
             [Out] The length value result </param>
            <param name="parse_results">
             [Out] Describes the results of the parse operation </param>
            <param name="parsed_unit_system">
             [Out] If a unit system name was found in the string, it is returned here.
             The output value is in the unit system specified in output_unit_system
            </param>
            <returns>
             Returns the count of characters that were parsed or 0 if the operation was unsuccessful
            </returns>
            <since>6.0</since>
        </member>
        <member name="M:Rhino.Input.StringParser.ParseAngleExpressionDegrees(System.String,System.Double@)">
            <since>6.0</since>
        </member>
        <member name="M:Rhino.Input.StringParser.ParseAngleExpressionRadians(System.String,System.Double@)">
            <since>6.0</since>
        </member>
        <member name="M:Rhino.Input.StringParser.ParseAngleExpession(System.String,System.Int32,System.Int32,Rhino.Input.StringParserSettings,Rhino.AngleUnitSystem,System.Double@,Rhino.Input.StringParserSettings@,Rhino.AngleUnitSystem@)">
            <since>6.0</since>
        </member>
        <member name="M:Rhino.Input.StringParser.ParseNumber(System.String,System.Int32,Rhino.Input.StringParserSettings,Rhino.Input.StringParserSettings@,System.Double@)">
            <summary>
            Parse a string expression to get a number
            </summary>
            <param name="expression">
             String to parse
            </param>
            <param name="max_count">
             Maximum number of characters to parse 
            </param>
            <param name="settings_in">
             Determines what input will be parsed 
            </param>
            <param name="settings_out">
             Reports the results of the parse operation 
            </param>
            <param name="answer">
             The number result of the parse operation 
            </param>
            <returns>
            Count of characters in expression parsed
            if ParseNumber() returns 0, parse was unsuccessful
            </returns>
            <since>6.0</since>
        </member>
        <member name="T:Rhino.Input.StringParserSettings">
            <summary> Parameters for parsing strings </summary>
        </member>
        <member name="M:Rhino.Input.StringParserSettings.#ctor">
            <since>6.0</since>
        </member>
        <member name="M:Rhino.Input.StringParserSettings.Dispose">
            <since>6.0</since>
        </member>
        <member name="P:Rhino.Input.StringParserSettings.DefaultParseSettings">
            <summary>
            - The default settings parse just about everything in
              a reasonable way.  
            - Any angle values with unspecified units will be
              treated as radians. Angles without units can be
              encountered while parsing formulas, lengths and 
              points and need to be thoughtfully considered in
              most parsing situations.
            </summary>
            <since>6.0</since>
        </member>
        <member name="P:Rhino.Input.StringParserSettings.ParseSettingsRadians">
            <summary>
            - The default settings parse just about everything in
              a reasonable way.
            - Any angle values with unspecified units will be
              treated as radians.Angles without units can be
              encountered while parsing formulas, lengths and
              points and need to be thoughtfully considered in
              most parsing situations.
            </summary>
            <since>6.0</since>
        </member>
        <member name="P:Rhino.Input.StringParserSettings.ParseSettingsDegrees">
            <summary>
            - The default settings parse just about everything in
              a reasonable way.
            - Any angle values with unspecified units will be
              treated as degrees.Angles without units can be
             encountered while parsing formulas, lengths and
             points and need to be thoughtfully considered in
              most parsing situations.
            </summary>
            <since>6.0</since>
        </member>
        <member name="P:Rhino.Input.StringParserSettings.ParseSettingsIntegerNumber">
            <summary>
            - The integer settings parse and optional unary + or unary - and
              then parses one or more digits.Parsing stops after the last digit.
            </summary>
            <since>6.0</since>
        </member>
        <member name="P:Rhino.Input.StringParserSettings.ParseSettingsRationalNumber">
            <summary>
            - The rational number settings parse and optional unary + or unary -
              and then parse one or more digits.If a rational number fraction
              bar follows the last digit in the numerator, then it is parsed
              and an integer denominator is parsed.The denominator cannot
              have a unary + or - preceding the digits.Parsing stops after
              the last digit in the denominator.
            </summary>
            <since>6.0</since>
        </member>
        <member name="P:Rhino.Input.StringParserSettings.ParseSettingsDoubleNumber">
            <summary>
            - The double number settings parse and optional unary + or unary -
              and then parse a number that can be integer, decimal, or
              scientific e notation.
            </summary>
            <since>6.0</since>
        </member>
        <member name="P:Rhino.Input.StringParserSettings.ParseSettingsRealNumber">
            <summary>
            - The real number settings parse and optional unary + or unary -
              and then parse a number that can be integer, decimal, 
              scientific e notation or pi.
            </summary>
            <since>6.0</since>
        </member>
        <member name="P:Rhino.Input.StringParserSettings.ParseSettingsEmpty">
            <summary>
            - ON_ParseSetting::FalseSettings has all parsing options
              set to false.
            - A common use of ON_ParseSettings FalseSettings is to initialize
              ON_ParseSettings classes that are used to report what happened
              during parsing.Any parsing results value set to true after
              parsing indicates that type of parsing occurred.
            </summary>
            <since>6.0</since>
        </member>
        <member name="P:Rhino.Input.StringParserSettings.DefaultAngleUnitSystem">
            <since>6.0</since>
        </member>
        <member name="P:Rhino.Input.StringParserSettings.DefaultLengthUnitSystem">
            <since>6.0</since>
        </member>
        <member name="M:Rhino.Input.StringParserSettings.SetAllFieldsToFalse">
            <since>6.0</since>
        </member>
        <member name="M:Rhino.Input.StringParserSettings.SetAllExpressionSettingsToFalse">
            <since>6.0</since>
        </member>
        <member name="P:Rhino.Input.StringParserSettings.ParseLeadingWhiteSpace">
            <since>6.0</since>
        </member>
        <member name="P:Rhino.Input.StringParserSettings.ParseArithmeticExpression">
            <since>6.0</since>
        </member>
        <member name="P:Rhino.Input.StringParserSettings.ParseMathFunctions">
            <since>6.0</since>
        </member>
        <member name="P:Rhino.Input.StringParserSettings.ParseExplicitFormulaExpression">
            <since>6.0</since>
        </member>
        <member name="P:Rhino.Input.StringParserSettings.ParseUnaryMinus">
            <since>6.0</since>
        </member>
        <member name="P:Rhino.Input.StringParserSettings.ParseUnaryPlus">
            <since>6.0</since>
        </member>
        <member name="P:Rhino.Input.StringParserSettings.ParseSignificandIntegerPart">
            <since>6.0</since>
        </member>
        <member name="P:Rhino.Input.StringParserSettings.ParseSignificandFractionalPart">
            <since>6.0</since>
        </member>
        <member name="P:Rhino.Input.StringParserSettings.ParseSignificandDigitSeparators">
            <since>6.0</since>
        </member>
        <member name="P:Rhino.Input.StringParserSettings.ParseScientificENotation">
            <since>6.0</since>
        </member>
        <member name="P:Rhino.Input.StringParserSettings.ParseDAsExponentInScientificENotation">
            <since>6.0</since>
        </member>
        <member name="P:Rhino.Input.StringParserSettings.ParseFullStopAsDecimalPoint">
            <since>6.0</since>
        </member>
        <member name="P:Rhino.Input.StringParserSettings.ParseFullStopAsDigitSeparator">
            <since>6.0</since>
        </member>
        <member name="P:Rhino.Input.StringParserSettings.ParseCommaAsDecimalPoint">
            <since>6.0</since>
        </member>
        <member name="P:Rhino.Input.StringParserSettings.ParseCommaAsDigitSeparator">
            <since>6.0</since>
        </member>
        <member name="P:Rhino.Input.StringParserSettings.ParseSpaceAsDigitSeparator">
            <since>6.0</since>
        </member>
        <member name="P:Rhino.Input.StringParserSettings.ParseHyphenMinusAsNumberDash">
            <since>6.0</since>
        </member>
        <member name="P:Rhino.Input.StringParserSettings.ParseHyphenAsNumberDash">
            <since>6.0</since>
        </member>
        <member name="P:Rhino.Input.StringParserSettings.ParseRationalNumber">
            <since>6.0</since>
        </member>
        <member name="P:Rhino.Input.StringParserSettings.ParsePi">
            <since>6.0</since>
        </member>
        <member name="P:Rhino.Input.StringParserSettings.ParseMultiplication">
            <since>6.0</since>
        </member>
        <member name="P:Rhino.Input.StringParserSettings.ParseDivision">
            <since>6.0</since>
        </member>
        <member name="P:Rhino.Input.StringParserSettings.ParseAddition">
            <since>6.0</since>
        </member>
        <member name="P:Rhino.Input.StringParserSettings.ParseSubtraction">
            <since>6.0</since>
        </member>
        <member name="P:Rhino.Input.StringParserSettings.ParsePairedParentheses">
            <since>6.0</since>
        </member>
        <member name="P:Rhino.Input.StringParserSettings.ParseIntegerDashFraction">
            <since>6.0</since>
        </member>
        <member name="P:Rhino.Input.StringParserSettings.ParseFeetInches">
            <since>6.0</since>
        </member>
        <member name="P:Rhino.Input.StringParserSettings.ParseArcDegreesMinutesSeconds">
            <since>6.0</since>
        </member>
        <member name="P:Rhino.Input.StringParserSettings.ParseSurveyorsNotation">
            <since>6.0</since>
        </member>
        <member name="P:Rhino.Input.StringParserSettings.PreferedLocaleId">
            <since>6.0</since>
        </member>
        <member name="T:Rhino.Render.RenderSettings">
            <summary> Contains settings used in rendering. </summary>
        </member>
        <member name="T:Rhino.Render.RenderSettings.RenderingSources">
            <summary>
            Rendering source (render directly from a NamedView or Snapshot)
            </summary>
            <since>6.1</since>
        </member>
        <member name="F:Rhino.Render.RenderSettings.RenderingSources.ActiveViewport">
            <summary>
            Get the rendering view from the currently active viewport (as in all previous versions of Rhino)
            </summary>
        </member>
        <member name="F:Rhino.Render.RenderSettings.RenderingSources.SpecificViewport">
            <summary>
             Get the rendering view from the named viewport (see NamedViewport below)
            </summary>
        </member>
        <member name="F:Rhino.Render.RenderSettings.RenderingSources.NamedView">
            <summary>
            Get the rendering view from a specific named view (see NamedView below)
            </summary>
        </member>
        <member name="F:Rhino.Render.RenderSettings.RenderingSources.SnapShot">
            <summary>
            Before rendering, restore the Snapshot specified in Snapshot below, then render.
            </summary>
        </member>
        <member name="M:Rhino.Render.RenderSettings.#ctor(Rhino.Render.RenderSettings)">
            <summary> Initialize new instance of the RenderSettings class. </summary>
            <param name="source">If not null, settings are copied from source.</param>
            <since>6.0</since>
        </member>
        <member name="M:Rhino.Render.RenderSettings.#ctor">
            <summary> Initialize a new instance of the RenderSettings class.</summary>
            <since>5.0</since>
        </member>
        <member name="M:Rhino.Render.RenderSettings.Duplicate">
            <summary>
            Makes a free-floating copy of the object.
            </summary>
            <since>8.0</since>
        </member>
        <member name="P:Rhino.Render.RenderSettings.AmbientLight">
            <summary>
            Gets or sets the ambient light color used in rendering.
            </summary>
            <since>5.0</since>
        </member>
        <member name="P:Rhino.Render.RenderSettings.BackgroundColorTop">
            <summary>
            Gets or sets the background top color used in rendering.
            <para>Sets also the background color if a solid background color is set.</para>
            </summary>
            <since>5.0</since>
        </member>
        <member name="P:Rhino.Render.RenderSettings.BackgroundColorBottom">
            <summary>
            Gets or sets the background bottom color used in rendering.
            </summary>
            <since>5.0</since>
        </member>
        <member name="P:Rhino.Render.RenderSettings.UseHiddenLights">
            <summary>
            Gets or sets a value indicating whether to render using lights that are on layers that are off.
            </summary>
            <since>5.0</since>
        </member>
        <member name="P:Rhino.Render.RenderSettings.DepthCue">
            <summary>
            Gets or sets a value indicating whether to render using depth cues.
            <para>These are clues to help the perception of position and orientation of objects in the image.</para>
            </summary>
            <since>5.0</since>
        </member>
        <member name="P:Rhino.Render.RenderSettings.FlatShade">
            <summary>
            Gets or sets a value indicating whether to render using flat shading.
            </summary>
            <since>5.0</since>
        </member>
        <member name="P:Rhino.Render.RenderSettings.RenderBackfaces">
            <summary>
            Gets or sets a value indicating whether to render back faces.
            </summary>
            <since>5.0</since>
        </member>
        <member name="P:Rhino.Render.RenderSettings.RenderPoints">
            <summary>
            Gets or sets a value indicating whether to instruct the rendering engine to show points.
            </summary>
            <since>5.0</since>
        </member>
        <member name="P:Rhino.Render.RenderSettings.RenderCurves">
            <summary>
            Gets or sets a value indicating whether to instruct the rendering engine to show curves.
            </summary>
            <since>5.0</since>
        </member>
        <member name="P:Rhino.Render.RenderSettings.RenderIsoparams">
            <summary>
            Gets or sets a value indicating whether to instruct the rendering engine to show isocurves.
            </summary>
            <since>5.0</since>
        </member>
        <member name="P:Rhino.Render.RenderSettings.RenderMeshEdges">
            <summary>
            Gets or sets a value indicating whether to instruct the rendering engine to show mesh edges.
            </summary>
            <since>5.0</since>
        </member>
        <member name="P:Rhino.Render.RenderSettings.RenderAnnotations">
            <summary>
            Gets or sets a value indicating whether to instruct the rendering engine to show annotations,
            such as linear dimensions or angular dimensions.
            </summary>
            <since>5.0</since>
        </member>
        <member name="P:Rhino.Render.RenderSettings.AntialiasLevel">
            <summary>
            Gets or sets anti-alias level, used for render quality
            </summary>
            <since>5.0</since>
        </member>
        <member name="P:Rhino.Render.RenderSettings.UseViewportSize">
            <summary>
            Gets or sets a value indicating whether to use the resolution of the
            viewport being rendered or ImageSize when rendering
            </summary>
            <since>5.0</since>
        </member>
        <member name="P:Rhino.Render.RenderSettings.ScaleBackgroundToFit">
            <summary>
            Gets or sets a value indicating whether to scale the wallpaper in the
            background or not. This is meaningful only if the viewport has a wallpaper
            and render settings are set to render Wallpaper into the background.
            </summary>
            <since>6.0</since>
        </member>
        <member name="P:Rhino.Render.RenderSettings.TransparentBackground">
            <summary>
            Gets or sets whether rendering should be done with transparent background.
            </summary>
            <since>6.0</since>
        </member>
        <member name="P:Rhino.Render.RenderSettings.ImageUnitSystem">
            <summary>
            unit system to use when converting image pixel size and DPI information
            into a print size.  Default = inches
            </summary>
            <since>5.11</since>
        </member>
        <member name="P:Rhino.Render.RenderSettings.ImageDpi">
            <summary>
            Number of dots/inch (dots=pixels) to use when printing and saving
            bitmaps. The default is 72.0 dots/inch.
            </summary>
            <since>5.11</since>
        </member>
        <member name="P:Rhino.Render.RenderSettings.ImageSize">
            <summary>
            Gets or sets a value indicating the size of the rendering result if
            UseViewportSize is set to false.  If UseViewportSize is set to true,
            then this value is ignored.
            </summary>
            <since>5.0</since>
        </member>
        <member name="P:Rhino.Render.RenderSettings.ShadowmapLevel">
            <summary>
            0=none, 1=normal, 2=best.
            </summary>
            <since>5.0</since>
        </member>
        <member name="P:Rhino.Render.RenderSettings.BackgroundStyle">
            <summary>
            How the viewport's background should be filled.
            </summary>
            <since>5.0</since>
        </member>
        <member name="P:Rhino.Render.RenderSettings.LinearWorkflow">
            <summary>
            If this object is associated with a document, this gets the document linear workflow.
            If this object is associated with a File3dm, this gets the File3dm's linear workflow.
            Otherwise it gets a 'free-floating' linear workflow object.
            </summary>
            <since>6.0</since>
        </member>
        <member name="P:Rhino.Render.RenderSettings.Dithering">
            <summary>
            If this object is associated with a document, this gets the document dithering.
            If this object is associated with a File3dm, this gets the File3dm's dithering.
            Otherwise it gets a 'free-floating' dithering object.
            </summary>
            <since>6.0</since>
        </member>
        <member name="P:Rhino.Render.RenderSettings.RenderChannels">
            <summary>
            If this object is associated with a document, this gets the document render channels.
            Otherwise it gets a 'free-floating' render channels object.
            </summary>
            <since>7.0</since>
        </member>
        <member name="P:Rhino.Render.RenderSettings.GroundPlane">
            <summary>
            If this object is associated with a document, this gets the document ground plane.
            If this object is associated with a File3dm, this gets the File3dm's ground plane.
            Otherwise it gets a 'free-floating' ground plane object.
            </summary>
            <since>8.0</since>
        </member>
        <member name="P:Rhino.Render.RenderSettings.SafeFrame">
            <summary>
            If this object is associated with a document, this gets the document safe-frame.
            If this object is associated with a File3dm, this gets the File3dm's safe-frame.
            Otherwise it gets a 'free-floating' safe-frame object.
            </summary>
            <since>8.0</since>
        </member>
        <member name="P:Rhino.Render.RenderSettings.Skylight">
            <summary>
            If this object is associated with a document, this gets the document skylight.
            If this object is associated with a File3dm, this gets the File3dm's skylight.
            Otherwise it gets a 'free-floating' skylight object.
            </summary>
            <since>8.0</since>
        </member>
        <member name="P:Rhino.Render.RenderSettings.Sun">
            <summary>
            If this object is associated with a document, this gets the document sun.
            If this object is associated with a File3dm, this gets the File3dm's sun.
            Otherwise it gets a 'free-floating' sun object.
            </summary>
            <since>8.0</since>
        </member>
        <member name="T:Rhino.Render.RenderSettings.EnvironmentUsage">
            <summary>
            The usage of a render environment.
            </summary>
            <since>8.0</since>
        </member>
        <member name="F:Rhino.Render.RenderSettings.EnvironmentUsage.Background">
            <summary>
            Specifies the 360 background environment.
            </summary>
        </member>
        <member name="F:Rhino.Render.RenderSettings.EnvironmentUsage.Reflection">
            <summary>
            Specifies the custom reflective environment. Also used for refraction.
            </summary>
        </member>
        <member name="F:Rhino.Render.RenderSettings.EnvironmentUsage.Skylighting">
            <summary>
            Specifies the custom skylighting environment.
            </summary>
        </member>
        <member name="T:Rhino.Render.RenderSettings.EnvironmentPurpose">
            <summary>
            The purpose a render environment is being used for.
            </summary>
            <since>8.0</since>
        </member>
        <member name="F:Rhino.Render.RenderSettings.EnvironmentPurpose.Standard">
            <summary>
            Used to directly get and set the environment instance id.
            </summary>
        </member>
        <member name="F:Rhino.Render.RenderSettings.EnvironmentPurpose.ForRendering">
            <summary>
            Used to get the environment instance id to be used for actual rendering.
            </summary>
        </member>
        <member name="M:Rhino.Render.RenderSettings.RenderEnvironmentOverride(Rhino.Render.RenderSettings.EnvironmentUsage)">
            <summary>
            For usage background, this checks if the background style is set to 'Environment'.
            For reflection and skylighting, it checks if the relevant custom override is enabled. 
            </summary>
            <since>8.0</since>
        </member>
        <member name="M:Rhino.Render.RenderSettings.SetRenderEnvironmentOverride(Rhino.Render.RenderSettings.EnvironmentUsage,System.Boolean)">
            <summary>
            Set the given environment override on/off. Only works for usage Reflection and Skylighting.
            </summary>
            <since>8.0</since>
        </member>
        <member name="M:Rhino.Render.RenderSettings.RenderEnvironmentId(Rhino.Render.RenderSettings.EnvironmentUsage,Rhino.Render.RenderSettings.EnvironmentPurpose)">
            <summary>
            Get the id of the render environment for a particular usage.
            If usage is Background and the background mode is set to 'Solid Color' or 'Gradient'
            (i.e., not 'Environment'), then Guid.Empty will be returned.
            </summary>
            <since>8.0</since>
        </member>
        <member name="M:Rhino.Render.RenderSettings.SetRenderEnvironmentId(Rhino.Render.RenderSettings.EnvironmentUsage,System.Guid)">
            <summary>
            Set the id of the render environment for a particular usage.
            Passing Guid.Empty for usage Skylighting or Reflection will turn the override for that usage off.
            </summary>
            <since>8.0</since>
        </member>
        <member name="P:Rhino.Render.RenderSettings.PostEffects">
            <summary>
            If this object is associated with a document, this gets the document post effect data collection.
            If this object is associated with a File3dm, this gets the File3dm's post effect data collection.
            Otherwise it gets a 'free-floating' post effect data collection object.
            </summary>
            <since>8.0</since>
        </member>
        <member name="P:Rhino.Render.RenderSettings.NamedView">
            <summary>
            Get or set the given named view
            </summary>
            <since>6.1</since>
        </member>
        <member name="P:Rhino.Render.RenderSettings.Snapshot">
            <summary>
            Set or get the given snapshot view
            </summary>
            <since>6.1</since>
        </member>
        <member name="P:Rhino.Render.RenderSettings.SpecificViewport">
            <summary>
            Set or get the given specific viewport
            </summary>
            <since>6.1</since>
        </member>
        <member name="P:Rhino.Render.RenderSettings.RenderSource">
            <summary>
            Gets or sets the render source <see cref="T:Rhino.Render.RenderSettings.RenderingSources"/> enumeration.
            </summary>
            <since>6.1</since>
        </member>
        <member name="T:Rhino.Render.CachedTextureCoordinates">
            <summary>
            Used for cached texture coordinates
            </summary>
        </member>
        <member name="M:Rhino.Render.CachedTextureCoordinates.#ctor(System.IntPtr)">
            <summary>
            Internal constructor used to wrap ON_TextureCoordinates* retrieved from
            a Rhino mesh.
            </summary>
            <param name="pTextureCoordinates"></param>
        </member>
        <member name="M:Rhino.Render.CachedTextureCoordinates.GetCachedTextureCoordinates(Rhino.Geometry.Mesh,System.Guid)">
            <summary>
            Call this method to get the cached texture coordinates from a Rhino
            mesh.
            </summary>
            <param name="mesh">
            Mesh to query for cached coordinates.
            </param>
            <param name="textureMappingId">
            The texture mapping ID to look for.
            </param>
            <returns>
            Returns the cached coordinates if found or null if not.
            </returns>
        </member>
        <member name="M:Rhino.Render.CachedTextureCoordinates.TryGetAt(System.Int32,System.Double@,System.Double@,System.Double@)">
            <summary>
            Use this method to iterate the cached texture coordinate array.
            </summary>
            <param name="index">
            Index for the vertex to fetch.
            </param>
            <param name="u">
            Output parameter which will receive the U value.
            </param>
            <param name="v">
            Output parameter which will receive the V value.
            </param>
            <param name="w">
            Output parameter which will receive the W value, this is only
            meaningful if <see cref="P:Rhino.Render.CachedTextureCoordinates.Dim"/> is 3.
            </param>
            <returns>
            Returns true if index is valid; otherwise returns false.
            </returns>
            <since>5.10</since>
        </member>
        <member name="P:Rhino.Render.CachedTextureCoordinates.Dim">
            <summary>
            Coordinate dimension: 2 = UV, 3 = UVW
            </summary>
            <since>5.10</since>
        </member>
        <member name="P:Rhino.Render.CachedTextureCoordinates.MappingId">
            <summary>
            The texture mapping Id.
            </summary>
            <since>5.10</since>
        </member>
        <member name="M:Rhino.Render.CachedTextureCoordinates.System#Collections#Generic#ICollection{Rhino#Geometry#Point3d}#Add(Rhino.Geometry.Point3d)">
            <since>5.10</since>
        </member>
        <member name="M:Rhino.Render.CachedTextureCoordinates.System#Collections#Generic#ICollection{Rhino#Geometry#Point3d}#Clear">
            <summary>
            IList implementation, this list is always read-only so calling this
            will cause a NotSupportedException to be thrown.
            </summary>
            <since>5.10</since>
        </member>
        <member name="M:Rhino.Render.CachedTextureCoordinates.Contains(Rhino.Geometry.Point3d)">
            <summary>
            Determines whether this collection contains a specific value.
            </summary>
            <param name="item"></param>
            <returns></returns>
            <since>5.10</since>
        </member>
        <member name="M:Rhino.Render.CachedTextureCoordinates.CopyTo(Rhino.Geometry.Point3d[],System.Int32)">
            <summary>
            Copies the elements of the this collection to an System.Array,
            starting at a particular System.Array index.
            </summary>
            <param name="array">
            The one-dimensional System.Array that is the destination of the
            elements copied from this collection. The System.Array must have
            zero-based indexing.
            </param>
            <param name="arrayIndex">
            The zero-based index in array at which copying begins.
            </param>
            <exception cref="T:System.ArgumentNullException">
            array is null
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            arrayIndex is less than 0.
            </exception>
            <exception cref="T:System.ArgumentException">
            The number of elements in this collection is greater than the available
            space from arrayIndex to the end of the destination array.
            </exception>
            <since>5.10</since>
        </member>
        <member name="M:Rhino.Render.CachedTextureCoordinates.System#Collections#Generic#ICollection{Rhino#Geometry#Point3d}#Remove(Rhino.Geometry.Point3d)">
            <summary>
            IList implementation, this list is always read-only so calling this
            will cause a NotSupportedException to be thrown.
            </summary>
            <since>5.10</since>
        </member>
        <member name="P:Rhino.Render.CachedTextureCoordinates.Count">
            <summary>
            Number of cached coordinates.
            </summary>
            <since>5.10</since>
        </member>
        <member name="P:Rhino.Render.CachedTextureCoordinates.IsReadOnly">
            <summary>
            This collection is always read-only
            </summary>
            <since>5.10</since>
        </member>
        <member name="M:Rhino.Render.CachedTextureCoordinates.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through this collection.
            </summary>
            <returns>
            A enumerator that can be used to iterate through this collection.
            </returns>
            <since>5.10</since>
        </member>
        <member name="M:Rhino.Render.CachedTextureCoordinates.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Returns an enumerator that iterates through this collection.
            </summary>
            <returns>
            A enumerator that can be used to iterate through this collection.
            </returns>
            <since>5.10</since>
        </member>
        <member name="M:Rhino.Render.CachedTextureCoordinates.IndexOf(Rhino.Geometry.Point3d)">
            <summary>
            Determines the index of a specific point in this collection.
            </summary>
            <param name="item">
            The point (UV or UVW) to locate in this collection.
            </param>
            <returns>
            The index of item if found in the list; otherwise, -1.
            </returns>
            <since>5.10</since>
        </member>
        <member name="M:Rhino.Render.CachedTextureCoordinates.System#Collections#Generic#IList{Rhino#Geometry#Point3d}#Insert(System.Int32,Rhino.Geometry.Point3d)">
            <since>5.10</since>
        </member>
        <member name="M:Rhino.Render.CachedTextureCoordinates.System#Collections#Generic#IList{Rhino#Geometry#Point3d}#RemoveAt(System.Int32)">
            <since>5.10</since>
        </member>
        <member name="P:Rhino.Render.CachedTextureCoordinates.Item(System.Int32)">
            <summary>
            Gets the element at the specified index. Never call the set method, it
            will always throw a NotSupportedException because this list is
            read-only.
            </summary>
            <param name="index">
            The zero-based index of the element to get.
            </param>
            <returns>
            The element at the specified index.
            </returns>
            <exception cref="T:System.NotSupportedException">
            IList implementation, this list is always read-only so calling the set
            method will always cause a NotSupportedException to be thrown.
            </exception>
        </member>
        <member name="T:Rhino.Render.CachedTextureCoordinatesEnumerator">
            <summary>
            Internal class used to enumerate a list of CachedTextureCoordinates
            </summary>
        </member>
        <member name="T:Rhino.Render.MappingTag">
            <summary>
            Holds texture mapping information.
            </summary>
        </member>
        <member name="P:Rhino.Render.MappingTag.Id">
            <summary>
             Gets or sets a map globally unique identifier.
            </summary>
            <since>5.0</since>
        </member>
        <member name="P:Rhino.Render.MappingTag.MappingType">
            <summary>
             Gets or sets a texture mapping type: linear, cylinder, etc...
            </summary>
            <since>5.0</since>
        </member>
        <member name="P:Rhino.Render.MappingTag.MappingCRC">
            <summary>
            Gets or sets the cyclic redundancy check on the mapping.
            See also <see cref="M:Rhino.RhinoMath.CRC32(System.UInt32,System.Byte[])" />.
            </summary>
            <since>5.0</since>
        </member>
        <member name="P:Rhino.Render.MappingTag.MeshTransform">
            <summary>
            Gets or sets a 4x4 matrix transform.
            </summary>
            <since>5.0</since>
        </member>
        <member name="T:Rhino.Render.TextureMappingType">
            <summary>
            Defines enumerated constants for mapping types such as planar, cylindrical or spherical.
            </summary>
            <since>5.0</since>
        </member>
        <member name="F:Rhino.Render.TextureMappingType.None">
            <summary>No mapping is selected.</summary>
        </member>
        <member name="F:Rhino.Render.TextureMappingType.SurfaceParameters">
            <summary>(u, v) = linear transform of surface params, w = 0.</summary>
        </member>
        <member name="F:Rhino.Render.TextureMappingType.PlaneMapping">
            <summary>(u, v, w) = 3d coordinates wrt frame.</summary>
        </member>
        <member name="F:Rhino.Render.TextureMappingType.CylinderMapping">
            <summary>(u, v, w) = longitude, height, radius.</summary>
        </member>
        <member name="F:Rhino.Render.TextureMappingType.SphereMapping">
            <summary>(u, v, w) = longitude,latitude,radius.</summary>
        </member>
        <member name="F:Rhino.Render.TextureMappingType.BoxMapping">
            <summary>Box mapping type.</summary>
        </member>
        <member name="F:Rhino.Render.TextureMappingType.MeshMappingPrimitive">
            <summary>Mapping primitive is a mesh.</summary>
        </member>
        <member name="F:Rhino.Render.TextureMappingType.SurfaceMappingPrimitive">
            <summary>Mapping primitive is a surface.</summary>
        </member>
        <member name="F:Rhino.Render.TextureMappingType.BrepMappingPrimitive">
            <summary>Mapping primitive is a brep.</summary>
        </member>
        <member name="F:Rhino.Render.TextureMappingType.OcsMapping">
            <summary>OCS mapping type (WCS/WCS Box with object frame).</summary>
        </member>
        <member name="F:Rhino.Render.TextureMappingType.FalseColors">
            <summary>Some sort of false color mapping used to set per vertex colors</summary>
        </member>
        <member name="T:Rhino.Render.TextureMapping">
            <summary>
            Represents a texture mapping.
            </summary>
        </member>
        <member name="P:Rhino.Render.TextureMapping.MappingType">
            <summary>
            Texture mapping type associated with this Mapping object.
            </summary>
            <since>5.10</since>
        </member>
        <member name="P:Rhino.Render.TextureMapping.Id">
            <summary>
            The unique Id for this texture mapping object.
            </summary>
            <since>5.10</since>
        </member>
        <member name="P:Rhino.Render.TextureMapping.UvwTransform">
            <summary>
            Transform applied to mapping coordinate (u,v,w) to convert it into a
            texture coordinate.
            </summary>
            <since>5.10</since>
        </member>
        <member name="P:Rhino.Render.TextureMapping.PrimativeTransform">
            <summary>
            For primitive based mappings, these transformations are used to map
            the world coordinate (x,y,z) point P and  surface normal N before it is
            projected to the normalized mapping primitive. The surface normal
            transformation, m_Nxyz, is always calculated from m_Pxyz.  It is a
            runtime setting that is not saved in 3dm files. If m_type is
            srfp_mapping, then m_Pxyz and m_Nxyz are ignored.
            </summary>
            <since>5.10</since>
        </member>
        <member name="P:Rhino.Render.TextureMapping.PrimitiveTransform">
            <summary>
            For primitive based mappings, these transformations are used to map
            the world coordinate (x,y,z) point P and  surface normal N before it is
            projected to the normalized mapping primitive. The surface normal
            transformation, m_Nxyz, is always calculated from m_Pxyz.  It is a
            runtime setting that is not saved in 3dm files. If m_type is
            srfp_mapping, then m_Pxyz and m_Nxyz are ignored.
            </summary>
            <since>7.5</since>
        </member>
        <member name="P:Rhino.Render.TextureMapping.NormalTransform">
            <summary>
            For primitive based mappings, these transformations are used to map
            the world coordinate (x,y,z) point P and  surface normal N before it is
            projected to the normalized mapping primitive. The surface normal
            transformation, m_Nxyz, is always calculated from m_Pxyz.  It is a
            runtime setting that is not saved in 3dm files. If m_type is
            srfp_mapping, then m_Pxyz and m_Nxyz are ignored.
            </summary>
            <since>5.10</since>
        </member>
        <member name="P:Rhino.Render.TextureMapping.ComponentType">
            <summary>
            Returns <see cref="F:Rhino.DocObjects.ModelComponentType.TextureMapping"/>.
            </summary>
            <since>6.0</since>
        </member>
        <member name="M:Rhino.Render.TextureMapping.Evaluate(Rhino.Geometry.Point3d,Rhino.Geometry.Vector3d,Rhino.Geometry.Point3d@)">
            <summary>
            Evaluate the mapping to get a texture coordinate
            </summary>
            <param name="p">Vertex location</param>
            <param name="n">If the mapping projection is ray_projection, then this
            is the vertex unit normal.  Otherwise n is ignored.</param>
            <param name="t">Texture coordinate (u,v,w)</param>
            <returns>
            Nonzero if evaluation is successful.  When the mapping is a box or
            capped cylinder mapping, the value indicates which side was evaluated.
            Cylinder mapping: 1 = cylinder wall, 2 = bottom cap, 3 = top cap
            Box mapping: 1 = front, 2 = right, 3 = back, 4 = left, 5 = bottom, 6 = top
            </returns>
            <since>6.17</since>
        </member>
        <member name="M:Rhino.Render.TextureMapping.Evaluate(Rhino.Geometry.Point3d,Rhino.Geometry.Vector3d,Rhino.Geometry.Point3d@,Rhino.Geometry.Transform,Rhino.Geometry.Transform)">
            <summary>
            Evaluate the mapping to get a texture coordinate
            </summary>
            <param name="p">Vertex location</param>
            <param name="n">If the mapping projection is ray_projection, then this
            is the vertex unit normal.  Otherwise n is ignored.</param>
            <param name="t">Texture coordinate (u,v,w)</param>
            <param name="pXform">
            Transformation to be applied to P before performing the mapping calculation.
            </param>
            <param name="nXform">
            Transformation to be applied to N before performing the mapping
            calculation. One way to calculate nXxform is to use the call
            pXform::GetVectorTransform(nXform).
            </param>
            <returns>
            Nonzero if evaluation is successful.  When the mapping is a box or
            capped cylinder mapping, the value indicates which side was evaluated.
            Cylinder mapping: 1 = cylinder wall, 2 = bottom cap, 3 = top cap
            Box mapping: 1 = front, 2 = right, 3 = back, 4 = left, 5 = bottom, 6 = top
            </returns>
            <since>6.17</since>
        </member>
        <member name="M:Rhino.Render.TextureMapping.TryGetMappingBox(Rhino.Geometry.Plane@,Rhino.Geometry.Interval@,Rhino.Geometry.Interval@,Rhino.Geometry.Interval@)">
            <summary>
            Get a box projection from the texture mapping.
            </summary>
            <param name="plane">
            The center of the box is at plane.origin and the sides of the box are
            parallel to the plane's coordinate planes.
            </param>
            <param name="dx">
            The "front" and "back" sides of the box are in spanned by the vectors
            plane.yaxis and plane.zaxis.  The back plane contains the point
            plane.PointAt(dx[0],0,0) and the front plane contains the point
            plane.PointAt(dx[1],0,0).
            </param>
            <param name="dy">
            The "left" and "right" sides of the box are in spanned by the vectors
            plane.zaxis and plane.xaxis.  The left plane contains the point
            plane.PointAt(0,dx[0],0) and the back plane contains the point
            plane.PointAt(0,dy[1],0).
            </param>
            <param name="dz">
            The "top" and "bottom" sides of the box are in spanned by the vectors
            plane.xaxis and plane.yaxis.  The bottom plane contains the point
            plane.PointAt(0,0,dz[0]) and the top plane contains the point
            plane.PointAt(0,0,dz[1]).
            </param>
            <returns>
            Returns true if a valid box is returned.
            </returns>
            <remarks>
            Generally, GetMappingBox will not return the same parameters passed to
            SetBoxMapping.  However, the location of the box will be the same.
            </remarks>
            <since>5.10</since>
        </member>
        <member name="M:Rhino.Render.TextureMapping.TryGetMappingBox(Rhino.Geometry.Plane@,Rhino.Geometry.Interval@,Rhino.Geometry.Interval@,Rhino.Geometry.Interval@,System.Boolean@)">
            <summary>
            Get a box projection from the texture mapping, including capped information
            </summary>
            <param name="plane">
            The center of the box is at plane.origin and the sides of the box are
            parallel to the plane's coordinate planes.
            </param>
            <param name="dx">
            The "front" and "back" sides of the box are in spanned by the vectors
            plane.yaxis and plane.zaxis.  The back plane contains the point
            plane.PointAt(dx[0],0,0) and the front plane contains the point
            plane.PointAt(dx[1],0,0).
            </param>
            <param name="dy">
            The "left" and "right" sides of the box are in spanned by the vectors
            plane.zaxis and plane.xaxis.  The left plane contains the point
            plane.PointAt(0,dx[0],0) and the back plane contains the point
            plane.PointAt(0,dy[1],0).
            </param>
            <param name="dz">
            The "top" and "bottom" sides of the box are in spanned by the vectors
            plane.xaxis and plane.yaxis.  The bottom plane contains the point
            plane.PointAt(0,0,dz[0]) and the top plane contains the point
            plane.PointAt(0,0,dz[1]).
            </param>
            <param name="capped">true if box mapping is capped.
            </param>
            <returns>
            Returns true if a valid box is returned.
            </returns>
            <remarks>
            Generally, GetMappingBox will not return the same parameters passed to
            SetBoxMapping.  However, the location of the box will be the same.
            </remarks>
            <since>6.7</since>
        </member>
        <member name="M:Rhino.Render.TextureMapping.TryGetMappingSphere(Rhino.Geometry.Sphere@)">
            <summary>
            Get a spherical projection parameters from this texture mapping.
            </summary>
            <param name="sphere">/// </param>
            <returns>
            Returns true if a valid sphere is returned.
            </returns>
            <remarks>
            Generally, GetMappingShere will not return the same parameters passed
            to SetSphereMapping.  However, the location of the sphere will be the
            same.  If this mapping is not cylindrical, the cylinder will
            approximate the actual mapping primitive.
            </remarks>
            <since>5.10</since>
        </member>
        <member name="M:Rhino.Render.TextureMapping.TryGetMappingCylinder(Rhino.Geometry.Cylinder@)">
            <summary>
            Get a cylindrical projection parameters from this texture mapping.
            </summary>
            <param name="cylinder"></param>
            <returns>
            Returns true if a valid cylinder is returned.
            </returns>
            <remarks>
            Generally, GetMappingCylinder will not return the same parameters passed
            to SetCylinderMapping.  However, the location of the cylinder will be
            the same.  If this mapping is not cylindrical, the cylinder will
            approximate the actual mapping primitive.
            </remarks>
            <since>5.10</since>
        </member>
        <member name="M:Rhino.Render.TextureMapping.TryGetMappingCylinder(Rhino.Geometry.Cylinder@,System.Boolean@)">
            <summary>
            Get a cylindrical projection parameters from this texture mapping.
            </summary>
            <param name="cylinder"></param>
            <param name="capped">will be true if capped</param>
            <returns>
            Returns true if a valid cylinder is returned.
            </returns>
            <remarks>
            Generally, GetMappingCylinder will not return the same parameters passed
            to SetCylinderMapping.  However, the location of the cylinder will be
            the same.  If this mapping is not cylindrical, the cylinder will
            approximate the actual mapping primitive.
            </remarks>
            <since>6.7</since>
        </member>
        <member name="M:Rhino.Render.TextureMapping.TryGetMappingPlane(Rhino.Geometry.Plane@,Rhino.Geometry.Interval@,Rhino.Geometry.Interval@,Rhino.Geometry.Interval@)">
            <summary>
            Get plane mapping parameters from this texture mapping.
            </summary>
            <param name="plane"></param>
            <param name="dx">
            Portion of the plane's x axis that is mapped to [0,1]
            </param>
            <param name="dy">
            Portion of the plane's y axis that is mapped to [0,1]
            </param>
            <param name="dz">
            Portion of the plane's z axis that is mapped to [0,1]
            </param>
            <returns>
            Return true if valid plane mapping parameters were returned.
            </returns>
            <remarks>
            NOTE WELL:
             Generally, GetMappingPlane will not return the same parameters passed
             to SetPlaneMapping.  However, the location of the plane will be the
             same.
            </remarks>
            <since>5.10</since>
        </member>
        <member name="M:Rhino.Render.TextureMapping.TryGetMappingPlane(Rhino.Geometry.Plane@,Rhino.Geometry.Interval@,Rhino.Geometry.Interval@,Rhino.Geometry.Interval@,System.Boolean@)">
            <summary>
            Get plane mapping parameters from this texture mapping, including capping information
            </summary>
            <param name="plane"></param>
            <param name="dx">
            Portion of the plane's x axis that is mapped to [0,1]
            </param>
            <param name="dy">
            Portion of the plane's y axis that is mapped to [0,1]
            </param>
            <param name="dz">
            Portion of the plane's z axis that is mapped to [0,1]
            </param>
            <param name="capped">
            </param>
            
            <returns>
            Return true if valid plane mapping parameters were returned.
            </returns>
            <remarks>
            NOTE WELL:
             Generally, GetMappingPlane will not return the same parameters passed
             to SetPlaneMapping.  However, the location of the plane will be the
             same.
            </remarks>
            <since>6.7</since>
        </member>
        <member name="M:Rhino.Render.TextureMapping.TryGetMappingMesh(Rhino.Geometry.Mesh@)">
            <summary>
            Get custom mapping mesh from this texture mapping.
            </summary>
            <param name="mesh"></param>
            <returns>True if custom mapping mesh was returned.</returns>
            <since>6.18</since>
        </member>
        <member name="M:Rhino.Render.TextureMapping.CreateSurfaceParameterMapping">
            <summary>Create a mapping that will convert surface parameters into normalized(0,1)x(0,1) texture coordinates.</summary>
            <returns>TextureMapping instance or null if failed.</returns>
            <since>7.5</since>
        </member>
        <member name="M:Rhino.Render.TextureMapping.CreatePlaneMapping(Rhino.Geometry.Plane,Rhino.Geometry.Interval,Rhino.Geometry.Interval,Rhino.Geometry.Interval)">
            <summary>Create a planar UV projection texture mapping</summary>
            <param name="plane">A plane to use for mapping.</param>
            <param name="dx">portion of the plane's x axis that is mapped to [0,1] (can be a decreasing interval)</param>
            <param name="dy">portion of the plane's y axis that is mapped to [0,1] (can be a decreasing interval)</param>
            <param name="dz">portion of the plane's z axis that is mapped to [0,1] (can be a decreasing interval)</param>
            <returns>TextureMapping instance if input is valid</returns>
            <since>5.0</since>
        </member>
        <member name="M:Rhino.Render.TextureMapping.CreatePlaneMapping(Rhino.Geometry.Plane,Rhino.Geometry.Interval,Rhino.Geometry.Interval,Rhino.Geometry.Interval,System.Boolean)">
            <summary>Create a planar projection texture mapping</summary>
            <param name="plane">A plane to use for mapping.</param>
            <param name="dx">portion of the plane's x axis that is mapped to [0,1] (can be a decreasing interval)</param>
            <param name="dy">portion of the plane's y axis that is mapped to [0,1] (can be a decreasing interval)</param>
            <param name="dz">portion of the plane's z axis that is mapped to [0,1] (can be a decreasing interval)</param>
            <param name="capped">set to true if planar UVW is meant, false for planar UV</param>
            <returns>TextureMapping instance if input is valid</returns>
            <since>6.7</since>
        </member>
        <member name="M:Rhino.Render.TextureMapping.CreateOcsMapping(Rhino.Geometry.Plane)">
            <summary>
            Create a Ocs texture mapping.  Note that OCS mappings must be placed on mapping channel ON_ObjectRenderingAttributes::OCSMappingChannelId()
            otherwise they will not work.
            </summary>
            <param name="plane">A plane to use for mapping.</param>
            <returns></returns>
            <since>7.17</since>
        </member>
        <member name="M:Rhino.Render.TextureMapping.CreateCylinderMapping(Rhino.Geometry.Cylinder,System.Boolean)">
            <summary>Create a cylindrical projection texture mapping.</summary>
            <param name="cylinder">
            cylinder in world space used to define a cylindrical coordinate system.
            The angular parameter maps (0,2pi) to texture "u" (0,1), The height
            parameter maps (height[0],height[1]) to texture "v" (0,1), and the
            radial parameter maps (0,r) to texture "w" (0,1).
            </param>
            <param name="capped">
            If true, the cylinder is treated as a finite capped cylinder
            </param>
            <remarks>
            When the cylinder is capped and m_texture_space = divided, the
            cylinder is mapped to texture space as follows:
            The side is mapped to 0 &lt;= "u" &lt;= 2/3.
            The bottom is mapped to 2/3 &lt;= "u" &lt;= 5/6.
            The top is mapped to 5/6 &lt;= "u" &lt;= 5/6.
            This is the same convention box mapping uses.
            </remarks>
            <returns>TextureMapping instance if input is valid</returns>
            <since>5.0</since>
        </member>
        <member name="M:Rhino.Render.TextureMapping.CreateSphereMapping(Rhino.Geometry.Sphere)">
            <summary>
            Create a spherical projection texture mapping.
            </summary>
            <param name="sphere">
            sphere in world space used to define a spherical coordinate system.
            The longitude parameter maps (0,2pi) to texture "u" (0,1).
            The latitude parameter maps (-pi/2,+pi/2) to texture "v" (0,1).
            The radial parameter maps (0,r) to texture "w" (0,1).
            </param>
            <returns>TextureMapping instance if input is valid</returns>
            <since>5.0</since>
        </member>
        <member name="M:Rhino.Render.TextureMapping.CreateBoxMapping(Rhino.Geometry.Plane,Rhino.Geometry.Interval,Rhino.Geometry.Interval,Rhino.Geometry.Interval,System.Boolean)">
            <summary>Create a box projection texture mapping.</summary>
            <param name="plane">
            The sides of the box the box are parallel to the plane's coordinate
            planes.  The dx, dy, dz intervals determine the location of the sides.
            </param>
            <param name="dx">
            Determines the location of the front and back planes. The vector
            plane.xaxis is perpendicular to these planes and they pass through
            plane.PointAt(dx[0],0,0) and plane.PointAt(dx[1],0,0), respectively.
            </param>
            <param name="dy">
            Determines the location of the left and right planes. The vector
            plane.yaxis is perpendicular to these planes and they pass through
            plane.PointAt(0,dy[0],0) and plane.PointAt(0,dy[1],0), respectively.
            </param>
            <param name="dz">
            Determines the location of the top and bottom planes. The vector
            plane.zaxis is perpendicular to these planes and they pass through
            plane.PointAt(0,0,dz[0]) and plane.PointAt(0,0,dz[1]), respectively.
            </param>
            <param name="capped">
            If true, the box is treated as a finite capped box.
            </param>
            <remarks>
            When m_texture_space = divided, the box is mapped to texture space as follows:
            If the box is not capped, then each side maps to 1/4 of the texture map.
            v=1+---------+---------+---------+---------+
              | x=dx[1] | y=dy[1] | x=dx[0] | y=dy[0] |
              | Front   | Right   | Back    | Left    |
              | --y-&gt;   | &lt;-x--   | &lt;-y--   | --x-&gt;   |
            v=0+---------+---------+---------+---------+
            0/4 &lt;=u&lt;= 1/4 &lt;=u&lt;= 2/4 &lt;=u&lt;= 3/4 &lt;=u&lt;= 4/4
            If the box is capped, then each side and cap gets 1/6 of the texture map.
            v=1+---------+---------+---------+---------+---------+---------+
              | x=dx[1] | y=dy[1] | x=dx[0] | y=dy[0] | z=dx[1] | z=dz[0] |
              | Front   | Right   | Back    | Left    | Top     |  Bottom |
              | --y-&gt;   | &lt;x--   | &lt;-y--   | --x-&gt;   | --x-&gt;   | --x-&gt;   |
            v=0+---------+---------+---------+---------+---------+---------+
            0/6 &lt;=u&lt;= 1/6 &lt;=u&lt;= 2/6 &lt;=u&lt;= 3/6 &lt;=u&lt;= 4/6 &lt;=u&lt;= 5/6 &lt;=u&lt;= 6/6 
            </remarks>
            <returns>TextureMapping instance if input is valid</returns>
            <since>5.0</since>
        </member>
        <member name="M:Rhino.Render.TextureMapping.CreateCustomMeshMapping(Rhino.Geometry.Mesh)">
            <summary>
            Create custom mesh mapping
            </summary>
            <param name="mesh">Mesh with texture coordinates</param>
            <returns>TextureMapping instance</returns>
            <since>6.15</since>
        </member>
        <member name="T:Rhino.Render.GroundPlane">
            <summary>
            Represents an infinite plane for implementation by renderers.
            See <see cref="!:Rhino.PlugIns.RenderPlugIn.SupportsFeature">SupportsFeature</see>.
            </summary>
        </member>
        <member name="M:Rhino.Render.GroundPlane.#ctor">
            <summary>
            Create a utility object not associated with any document
            </summary>
            <since>6.0</since>
        </member>
        <member name="M:Rhino.Render.GroundPlane.#ctor(Rhino.Render.GroundPlane)">
            <summary>
            Create a utility object not associated with any document from another object
            </summary>
            <param name="g"></param>
            <since>6.0</since>
        </member>
        <member name="M:Rhino.Render.GroundPlane.CopyFrom(Rhino.Render.FreeFloatingBase)">
            <since>6.0</since>
        </member>
        <member name="M:Rhino.Render.GroundPlane.Dispose">
            <since>8.0</since>
        </member>
        <member name="P:Rhino.Render.GroundPlane.Enabled">
            <summary>
            Determines whether the document ground plane is enabled.
            </summary>
            <since>5.0</since>
        </member>
        <member name="P:Rhino.Render.GroundPlane.ShadowOnly">
            <summary>
            Determines whether the ground plane shows the material assigned, or whether it is transparent, but captures shadows.
            </summary>
            <since>6.0</since>
        </member>
        <member name="P:Rhino.Render.GroundPlane.AutoAltitude">
            <summary>
            Determines whether the ground plane is fixed by the Altitude property, or whether it is automatically placed at the lowest point in the model.
            </summary>
            <since>6.0</since>
        </member>
        <member name="P:Rhino.Render.GroundPlane.ShowUnderside">
            <summary>
            If this is off, the ground plane will not be visible when seen from below.
            </summary>
            <since>6.0</since>
        </member>
        <member name="P:Rhino.Render.GroundPlane.Altitude">
            <summary>
            Height above world XY plane in model units. Auto-altitude is computed if enabled.
            </summary>
            <since>5.0</since>
        </member>
        <member name="P:Rhino.Render.GroundPlane.MaterialInstanceId">
            <summary>
            Id of material in material table for this ground plane.
            </summary>
            <since>5.0</since>
        </member>
        <member name="P:Rhino.Render.GroundPlane.TextureOffset">
            <summary>
            Texture mapping offset in world units.
            </summary>
            <since>5.0</since>
        </member>
        <member name="P:Rhino.Render.GroundPlane.TextureSize">
            <summary>
            Texture mapping single UV span size in world units.
            </summary>
            <since>5.0</since>
        </member>
        <member name="P:Rhino.Render.GroundPlane.TextureRotation">
            <summary>
            Texture mapping rotation around world origin + offset in degrees.
            </summary>
            <since>5.0</since>
        </member>
        <member name="P:Rhino.Render.GroundPlane.TextureSizeLocked">
            <summary>
            Texture size locked.
            </summary>
            <since>6.0</since>
        </member>
        <member name="P:Rhino.Render.GroundPlane.TextureOffsetLocked">
            <summary>
            Texture offset locked.
            </summary>
            <since>6.0</since>
        </member>
        <member name="T:Rhino.Render.RenderChannels">
            <summary>
            Render Channels. This corresponds to the user's settings in the Rendering panel.
            </summary>
        </member>
        <member name="T:Rhino.Render.RenderChannels.Modes">
            <summary>
            Mode.
            </summary>
        </member>
        <member name="F:Rhino.Render.RenderChannels.Modes.Automatic">
            <summary>Render-channels are managed automatically</summary>
        </member>
        <member name="F:Rhino.Render.RenderChannels.Modes.Custom">
            <summary>Render-channels are specified by the user</summary>
        </member>
        <member name="M:Rhino.Render.RenderChannels.#ctor">
            <summary>
            Create a utility object not associated with any document.
            </summary>
            <since>8.0</since>
        </member>
        <member name="M:Rhino.Render.RenderChannels.CopyFrom(Rhino.Render.FreeFloatingBase)">
            <since>7.0</since>
        </member>
        <member name="M:Rhino.Render.RenderChannels.Dispose">
            <since>8.0</since>
        </member>
        <member name="P:Rhino.Render.RenderChannels.Mode">
            <since>7.0</since>
        </member>
        <member name="P:Rhino.Render.RenderChannels.CustomList">
            <since>7.0</since>
        </member>
        <member name="T:Rhino.Render.DecalMapping">
            <since>5.10</since>
        </member>
        <member name="F:Rhino.Render.DecalMapping.Planar">
            <summary>
            Planar mapping. Uses projection, origin, up and across vectors (not unitized).
            </summary>
        </member>
        <member name="F:Rhino.Render.DecalMapping.Cylindrical">
            <summary>
            Cylindrical mapping. Uses origin, up, across, height, radius, latitude start and stop.
            </summary>
        </member>
        <member name="F:Rhino.Render.DecalMapping.Spherical">
            <summary>
            Spherical mapping. Uses origin, up, across, radius, latitude/longitude start and stop.
            </summary>
        </member>
        <member name="F:Rhino.Render.DecalMapping.UV">
            <summary>
            UV mapping.
            </summary>
        </member>
        <member name="T:Rhino.Render.DecalProjection">
            <since>5.10</since>
        </member>
        <member name="F:Rhino.Render.DecalProjection.None">
            <summary>No projection</summary>
        </member>
        <member name="F:Rhino.Render.DecalProjection.Forward">
            <summary>Project forward</summary>
        </member>
        <member name="F:Rhino.Render.DecalProjection.Backward">
            <summary>Project backward</summary>
        </member>
        <member name="F:Rhino.Render.DecalProjection.Both">
            <summary>Project forward and backward</summary>
        </member>
        <member name="T:Rhino.Render.Decal">
            <summary>
            Represents a decal, or a picture that can be moved on an object.
            </summary>
        </member>
        <member name="M:Rhino.Render.Decal.Dispose">
            <since>5.10</since>
        </member>
        <member name="M:Rhino.Render.Decal.Dispose(System.Boolean)">
            <since>5.10</since>
        </member>
        <member name="M:Rhino.Render.Decal.Create(Rhino.Render.DecalCreateParams)">
            <since>5.10</since>
        </member>
        <member name="P:Rhino.Render.Decal.CRC">
            <summary>
            The decal CRC identifies a decal by its state. Multiple decals which would be
            exactly the same would have the same CRC and are culled from the system.
            If you store this value with the intention of using it to find the decal again
            later, you must update your stored value whenever the decal state changes.
            You can detect when a decal changes by watching for the OnUserDataTransformed event.
            </summary>
            <since>6.0</since>
        </member>
        <member name="P:Rhino.Render.Decal.TextureInstanceId">
            <summary>
            Gets the texture ID for this decal.
            </summary>
            <since>5.10</since>
        </member>
        <member name="P:Rhino.Render.Decal.DecalMapping">
            <summary>
            Gets the decal's mapping.
            </summary>
            <since>5.10</since>
            <deprecated>8.0</deprecated>
        </member>
        <member name="P:Rhino.Render.Decal.Mapping">
            <summary>
            Gets the decal's mapping.
            </summary>
            <since>8.0</since>
        </member>
        <member name="P:Rhino.Render.Decal.DecalProjection">
            <summary>
            Gets the decal's projection. Used only when mapping is planar.
            </summary>
            <since>5.10</since>
            <deprecated>8.0</deprecated>
        </member>
        <member name="P:Rhino.Render.Decal.Projection">
            <summary>
            Gets the decal's projection. Used only when mapping is planar.
            </summary>
            <since>8.0</since>
        </member>
        <member name="P:Rhino.Render.Decal.MapToInside">
            <summary>
            Used only when mapping is cylindrical or spherical.
            </summary>
            <value>true if texture is mapped to inside of sphere or cylinder, else \e false.</value>
            <since>5.10</since>
        </member>
        <member name="P:Rhino.Render.Decal.Transparency">
            <summary>
            Gets the decal's transparency in the range 0 to 1.
            </summary>
            <since>5.10</since>
        </member>
        <member name="P:Rhino.Render.Decal.Origin">
            <summary>
            Gets the origin of the decal in world space.
            </summary>
            <since>5.10</since>
        </member>
        <member name="P:Rhino.Render.Decal.VectorUp">
            <summary>
            For cylindrical and spherical mapping, the vector is unitized.
            </summary>
            <returns>The 'up' vector of the decal. For planar mapping the length of the vector is relevant.</returns>
            <since>5.10</since>
        </member>
        <member name="P:Rhino.Render.Decal.VectorAcross">
            <summary>
            Gets the vector across. For cylindrical and spherical mapping, the vector is unitized.
            </summary>
            <value>The 'across' vector of the decal. For planar mapping the length of the vector is relevant.</value>
            <since>5.10</since>
        </member>
        <member name="P:Rhino.Render.Decal.Height">
            <summary>
            Gets the height of the decal. Only used when mapping is cylindrical.
            </summary>
            <since>5.10</since>
        </member>
        <member name="P:Rhino.Render.Decal.Radius">
            <summary>
            Gets the radius of the decal. Only used when mapping is cylindrical or spherical.
            </summary>
            <since>5.10</since>
        </member>
        <member name="P:Rhino.Render.Decal.StartLatitude">
            <summary>
            Gets the start angle of the decal's arc of latitude or 'horizontal sweep'. This is actually a LONGITUDINAL angle. Only used when mapping is cylindrical or spherical.
            This is deprecated in favor of HorzSweep().
            </summary>
            <since>5.10</since>
        </member>
        <member name="P:Rhino.Render.Decal.EndLatitude">
            <summary>
            Gets the end angle of the decal's arc of latitude or 'horizontal sweep'. This is actually a LONGITUDINAL angle. Only used when mapping is cylindrical or spherical.
            This is deprecated in favor of HorzSweep().
            </summary>
            <since>5.10</since>
        </member>
        <member name="P:Rhino.Render.Decal.StartLongitude">
            <summary>
            Gets the start angle of the decal's arc of longitude or 'vertical sweep'. This is actually a LATITUDINAL angle. Only used when mapping is spherical.
            This is deprecated in favor of VertSweep().
            </summary>
            <since>5.10</since>
        </member>
        <member name="P:Rhino.Render.Decal.EndLongitude">
            <summary>
            Gets the end angle of the decal's arc of longitude or 'vertical sweep'. This is actually a LATITUDINAL angle. Only used when mapping is spherical.
            This is deprecated in favor of VertSweep().
            </summary>
            <since>5.10</since>
        </member>
        <member name="M:Rhino.Render.Decal.HorzSweep(System.Double@,System.Double@)">
            <summary>
            Gets the angles of the decal's arc of 'horizontal sweep'. Replaces StartLatitude and EndLatitude.
            </summary>
            <since>8.0</since>
        </member>
        <member name="M:Rhino.Render.Decal.VertSweep(System.Double@,System.Double@)">
            <summary>
            Gets the angles of the decal's arc of 'vertical sweep'. Replaces StartLongitude and EndLongitude.
            </summary>
            <since>8.0</since>
        </member>
        <member name="M:Rhino.Render.Decal.UVBounds(System.Double@,System.Double@,System.Double@,System.Double@)">
            <summary>
            The UV bounds of the decal. Only used when mapping is UV.
            </summary>
            <since>5.10</since>
        </member>
        <member name="M:Rhino.Render.Decal.GetTextureMapping">
            <summary>
            The TextureMapping of the decal.
            </summary>
            <since>7.0</since>
        </member>
        <member name="M:Rhino.Render.Decal.CustomData(System.Guid)">
            <summary>
            Gets decal custom data for a specified renderer. See Rhino.Plugins.RenderPlugIn.ShowDecalProperties.
            </summary>
            <returns>A list of name-value pairs for the custom data properties. If there is no
            custom data on the decal for the specified renderer, the list will be empty.</returns>
            <since>8.0</since>
        </member>
        <member name="M:Rhino.Render.Decal.ConstPointer">
            <since>5.10</since>
        </member>
        <member name="M:Rhino.Render.Decal.NonConstPointer">
            <since>5.10</since>
        </member>
        <member name="T:Rhino.Render.Decals">
            <summary>Represents all the decals of an object.</summary>
        </member>
        <member name="M:Rhino.Render.Decals.Add(Rhino.Render.Decal)">
            <summary>
            Add a new Decal to the decals list, use Decal.Create to create
            a new decal instance to add.
            </summary>
            <param name="decal"></param>
            <returns></returns>
            <since>5.10</since>
        </member>
        <member name="M:Rhino.Render.Decals.Clear">
            <since>5.10</since>
            <deprecated>8.0</deprecated>
        </member>
        <member name="M:Rhino.Render.Decals.RemoveAllDecals">
            <summary>
            Remove all the decals from the collection.
            </summary>
            <since>8.0</since>
        </member>
        <member name="M:Rhino.Render.Decals.Remove(Rhino.Render.Decal)">
            <summary>
            Remove a single decal from the collection.
            </summary>
            <since>5.10</since>
        </member>
        <member name="M:Rhino.Render.Decals.GetEnumerator">
            <since>5.10</since>
        </member>
        <member name="M:Rhino.Render.Decals.System#Collections#IEnumerable#GetEnumerator">
            <since>5.10</since>
        </member>
        <member name="T:Rhino.Render.DecalEnumerator">
            <summary>Represents all the decals of an object.</summary>
        </member>
        <member name="T:Rhino.Render.DecalCreateParams">
            <summary>
            Used by RhinoObject.AddDecal() to create and add a decal
            </summary>
        </member>
        <member name="P:Rhino.Render.DecalCreateParams.TextureInstanceId">
            <since>6.0</since>
        </member>
        <member name="P:Rhino.Render.DecalCreateParams.DecalMapping">
            <since>6.0</since>
        </member>
        <member name="P:Rhino.Render.DecalCreateParams.DecalProjection">
            <since>6.0</since>
        </member>
        <member name="P:Rhino.Render.DecalCreateParams.MapToInside">
            <since>6.0</since>
        </member>
        <member name="P:Rhino.Render.DecalCreateParams.Transparency">
            <since>6.0</since>
        </member>
        <member name="P:Rhino.Render.DecalCreateParams.Origin">
            <since>6.0</since>
        </member>
        <member name="P:Rhino.Render.DecalCreateParams.VectorUp">
            <since>6.0</since>
        </member>
        <member name="P:Rhino.Render.DecalCreateParams.VectorAcross">
            <since>6.0</since>
        </member>
        <member name="P:Rhino.Render.DecalCreateParams.Height">
            <since>6.0</since>
        </member>
        <member name="P:Rhino.Render.DecalCreateParams.Radius">
            <since>6.0</since>
        </member>
        <member name="P:Rhino.Render.DecalCreateParams.StartLatitude">
            <since>6.0</since>
        </member>
        <member name="P:Rhino.Render.DecalCreateParams.EndLatitude">
            <since>6.0</since>
        </member>
        <member name="P:Rhino.Render.DecalCreateParams.StartLongitude">
            <since>6.0</since>
        </member>
        <member name="P:Rhino.Render.DecalCreateParams.EndLongitude">
            <since>6.0</since>
        </member>
        <member name="P:Rhino.Render.DecalCreateParams.MinU">
            <since>6.0</since>
        </member>
        <member name="P:Rhino.Render.DecalCreateParams.MinV">
            <since>6.0</since>
        </member>
        <member name="P:Rhino.Render.DecalCreateParams.MaxU">
            <since>6.0</since>
        </member>
        <member name="P:Rhino.Render.DecalCreateParams.MaxV">
            <since>6.0</since>
        </member>
        <member name="T:Rhino.Render.Dithering">
            <summary>
            This is the interface to dithering settings.
            </summary>
        </member>
        <member name="M:Rhino.Render.Dithering.#ctor">
            <summary>
            Create a utility object not associated with any document
            </summary>
            <since>6.0</since>
        </member>
        <member name="M:Rhino.Render.Dithering.#ctor(Rhino.Render.Dithering)">
            <summary>
            Create a utility object not associated with any document from another object
            </summary>
            <param name="d"></param>
            <since>6.0</since>
        </member>
        <member name="M:Rhino.Render.Dithering.Finalize">
            <summary></summary>
        </member>
        <member name="M:Rhino.Render.Dithering.Dispose">
            <summary></summary>
            <since>8.0</since>
        </member>
        <member name="T:Rhino.Render.Dithering.Methods">
            <summary>
            Dithering algorithm.
            </summary>
        </member>
        <member name="F:Rhino.Render.Dithering.Methods.None">
            <summary>No dithering</summary>
        </member>
        <member name="F:Rhino.Render.Dithering.Methods.FloydSteinberg">
            <summary>Floyd Steinberg algorithm</summary>
        </member>
        <member name="F:Rhino.Render.Dithering.Methods.SimpleNoise">
            <summary>Simple random noise</summary>
        </member>
        <member name="M:Rhino.Render.Dithering.CopyFrom(Rhino.Render.FreeFloatingBase)">
            <since>6.0</since>
        </member>
        <member name="P:Rhino.Render.Dithering.Method">
            <since>6.0</since>
        </member>
        <member name="P:Rhino.Render.Dithering.On">
            <since>7.0</since>
            <deprecated>8.0</deprecated>
        </member>
        <member name="P:Rhino.Render.Dithering.Enabled">
            <since>8.0</since>
        </member>
        <member name="T:Rhino.Render.FreeFloatingBase">
             <summary>
             Base class for Rhino.Render objects that are owned by the document, or can be delivered separately
             from other functions.  In general, you cannot create these objects yourself.
             </summary>
            
            
        </member>
        <member name="M:Rhino.Render.FreeFloatingBase.DefaultCppConstructor">
            <summary>
            Implementation must provide a function that calls into C++ to default construct an object of this type.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Rhino.Render.FreeFloatingBase.CopyFrom(Rhino.Render.FreeFloatingBase)">
            <summary>
            Copy from another object
            </summary>
            <param name="src"></param>
            <since>6.0</since>
        </member>
        <member name="M:Rhino.Render.FreeFloatingBase.Finalize">
            <summary>
            Handle destruction of the un-managed CPP object.
            </summary>
        </member>
        <member name="T:Rhino.Render.DocumentOrFreeFloatingBase">
            <summary>
            Base class for Rhino.Render objects that are owned by the document, or can be delivered separately
            from other functions.  In general, you cannot create these objects yourself.
            </summary>
        </member>
        <member name="T:Rhino.Render.LinearWorkflow">
            <summary>
            This is the interface to linear workflow settings.
            </summary>
        </member>
        <member name="M:Rhino.Render.LinearWorkflow.#ctor">
            <summary>
            Create a utility object not associated with any document.
            </summary>
            <since>6.0</since>
        </member>
        <member name="M:Rhino.Render.LinearWorkflow.#ctor(Rhino.Render.LinearWorkflow)">
            <summary>
            Create a utility object not associated with any document from another object.
            </summary>
            <param name="src"></param>
            <since>6.0</since>
        </member>
        <member name="M:Rhino.Render.LinearWorkflow.CopyFrom(Rhino.Render.FreeFloatingBase)">
            <summary>
            Copy from another linear workflow object.
            </summary>
            <param name="src"></param>
            <since>6.0</since>
        </member>
        <member name="M:Rhino.Render.LinearWorkflow.Finalize">
            <summary></summary>
        </member>
        <member name="M:Rhino.Render.LinearWorkflow.Dispose">
            <summary></summary>
            <since>8.0</since>
        </member>
        <member name="P:Rhino.Render.LinearWorkflow.PreProcessColors">
            <summary>
            Linear workflow pre-process colors enabled state.
            </summary>
            <since>6.0</since>
        </member>
        <member name="P:Rhino.Render.LinearWorkflow.PreProcessTextures">
            <summary>
            Linear workflow pre-process textures enabled state.
            </summary>
            <since>6.0</since>
        </member>
        <member name="P:Rhino.Render.LinearWorkflow.PostProcessFrameBuffer">
            <summary>
            Linear workflow post-process frame buffer enabled state.
            </summary>
            <since>6.0</since>
        </member>
        <member name="P:Rhino.Render.LinearWorkflow.PreProcessGamma">
            <summary>
            Linear workflow pre-process gamma value. This is currently the same as the post-process gamma value.
            </summary>
            <since>6.0</since>
        </member>
        <member name="P:Rhino.Render.LinearWorkflow.PostProcessGamma">
            <summary>
            Linear workflow post-process gamma value.
            </summary>
            <since>6.0</since>
        </member>
        <member name="P:Rhino.Render.LinearWorkflow.PostProcessGammaOn">
            <summary>
            Linear workflow post-process gamma enabled state.
            </summary>
            <since>6.0</since>
        </member>
        <member name="P:Rhino.Render.LinearWorkflow.PostProcessGammaReciprocal">
            <summary>
            Reciprocal of linear workflow post-process gamma value.
            </summary>
            <since>6.0</since>
        </member>
        <member name="P:Rhino.Render.LinearWorkflow.Hash">
            <summary>
            Linear workflow hash.
            </summary>
            <since>6.0</since>
        </member>
        <member name="M:Rhino.Render.LinearWorkflow.Equals(System.Object)">
            <summary>
            Compare two LinearWorkflow objects. They are considered equal if their hashes match.
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:Rhino.Render.LinearWorkflow.GetHashCode">
            <summary>
            Get hash code for this object. It is the Hash property cast to int.
            </summary>
            <returns></returns>
        </member>
        <member name="T:Rhino.Render.PostEffects.PostEffectType">
            <since>7.0</since>
        </member>
        <member name="T:Rhino.Render.PostEffects.PostEffectData">
            <summary>
            This is a wrapper around the data ('on', 'shown', 'state' parameters, etc.) of a post effect.
            </summary>
            <since>8.0</since>
        </member>
        <member name="P:Rhino.Render.PostEffects.PostEffectData.Collection">
            <since>8.0</since>
        </member>
        <member name="M:Rhino.Render.PostEffects.PostEffectData.Dispose">
            <since>8.0</since>
        </member>
        <member name="P:Rhino.Render.PostEffects.PostEffectData.Id">
            <summary>
            Returns the unique id of this post effect.
            </summary>
            <since>8.0</since>
        </member>
        <member name="P:Rhino.Render.PostEffects.PostEffectData.Type">
            <summary>
            Returns the type of this post effect.
            </summary>
            <since>8.0</since>
        </member>
        <member name="P:Rhino.Render.PostEffects.PostEffectData.LocalName">
            <summary>
            Returns the localized name of this post effect.
            </summary>
            <since>8.0</since>
        </member>
        <member name="P:Rhino.Render.PostEffects.PostEffectData.On">
            <summary>
            The 'on' state of this post effect.
            </summary>
            <since>8.0</since>
        </member>
        <member name="P:Rhino.Render.PostEffects.PostEffectData.Shown">
            <summary>
            The 'shown' state of this post effect.
            </summary>
            <since>8.0</since>
        </member>
        <member name="M:Rhino.Render.PostEffects.PostEffectData.GetParameter(System.String)">
            <summary>
            Get an arbitrary parameter from this post effect by its name.
            If the parameter is not known to the post effect, the method will fail.
            Returns a variant object if successful or null on failure.
            </summary>
            <since>8.0</since>
        </member>
        <member name="M:Rhino.Render.PostEffects.PostEffectData.SetParameter(System.String,System.Object)">
            <summary>
            Set an arbitrary parameter to the post effect by its name.
            If the parameter is not known to the post effect, the method will fail.
            Returns true if successful or false on failure.
            </summary>
            <since>8.0</since>
        </member>
        <member name="M:Rhino.Render.PostEffects.PostEffectData.DataCRC(System.UInt32)">
            <summary>
            Get a CRC representing the state of the entire post effect.
            </summary>
            <since>8.0</since>
        </member>
        <member name="T:Rhino.Render.PostEffects.PostEffectCollection">
            <summary>
            Represents the collection of post effects in render settings.
            </summary>
        </member>
        <member name="M:Rhino.Render.PostEffects.PostEffectCollection.#ctor">
            <summary>
            Create a utility object not associated with any document
            </summary>
            <since>8.0</since>
        </member>
        <member name="M:Rhino.Render.PostEffects.PostEffectCollection.#ctor(Rhino.Render.PostEffects.PostEffectCollection)">
            <summary>
            Create a utility object not associated with any document from another object
            </summary>
            <param name="c">The other collection.</param>
            <since>8.0</since>
        </member>
        <member name="M:Rhino.Render.PostEffects.PostEffectCollection.Dispose">
            <since>8.0</since>
        </member>
        <member name="M:Rhino.Render.PostEffects.PostEffectCollection.PostEffectDataFromId(System.Guid)">
            <summary>
            Get a post effect data for an id.
            </summary>
            <since>8.0</since>
        </member>
        <member name="M:Rhino.Render.PostEffects.PostEffectCollection.MovePostEffectBefore(System.Guid,System.Guid)">
            <summary>
            Move a post effect before another post effect in the list.
            Param 'id_move' is the id of the post effect to move.
            Param 'id_before' is the id of a post effect before which the post effect should be moved.
            If this is Guid.Empty, the post effect is moved to the end of the list.
            If the post effect identified by 'id_before' is not found, the method will fail.
            Returns true if successful, else false.
            </summary>
            <since>8.0</since>
        </member>
        <member name="M:Rhino.Render.PostEffects.PostEffectCollection.GetSelectedPostEffect(Rhino.Render.PostEffects.PostEffectType,System.Guid@)">
            <summary>
            Gets the selected post effect for a certain type into 'id'.
            Returns true if successful or false if the selection information could not be found.
            </summary>
            <since>8.0</since>
        </member>
        <member name="M:Rhino.Render.PostEffects.PostEffectCollection.SetSelectedPostEffect(Rhino.Render.PostEffects.PostEffectType,System.Guid)">
            <summary>
            Sets the selected post effect for a certain type.
            </summary>
            <since>8.0</since>
        </member>
        <member name="M:Rhino.Render.PostEffects.PostEffectCollection.CopyFrom(Rhino.Render.FreeFloatingBase)">
            <since>8.0</since>
        </member>
        <member name="M:Rhino.Render.PostEffects.PostEffectCollection.GetEnumerator">
            <summary></summary>
            Get an enumerator for accessing PostEffectData.
            <since>8.0</since>
        </member>
        <member name="M:Rhino.Render.PostEffects.PostEffectCollection.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Get an enumerator for accessing PostEffectData.
            </summary>
            <since>8.0</since>
        </member>
        <member name="M:Rhino.Render.NamedValue.#ctor(System.String,System.Object)">
            <since>5.1</since>
        </member>
        <member name="P:Rhino.Render.NamedValue.Name">
            <since>5.1</since>
        </member>
        <member name="P:Rhino.Render.NamedValue.Value">
            <since>5.1</since>
        </member>
        <member name="M:Rhino.Render.Variant.#ctor">
            <summary>
            Constructs as Null type.
            </summary>
        </member>
        <member name="P:Rhino.Render.Variant.Units">
            <summary>
            Units associated with numeric values, see AsModelFloat etc.
            </summary>
        </member>
        <member name="T:Rhino.Render.SafeFrame">
            <summary>
            Safe frame
            </summary>
        </member>
        <member name="M:Rhino.Render.SafeFrame.#ctor">
            <summary>
            Create a utility object not associated with any document
            </summary>
            <since>7.12</since>
        </member>
        <member name="M:Rhino.Render.SafeFrame.#ctor(Rhino.Render.SafeFrame)">
            <summary>
            Create a utility object not associated with any document from another object
            </summary>
            <param name="sf"></param>
            <since>7.12</since>
        </member>
        <member name="M:Rhino.Render.SafeFrame.CopyFrom(Rhino.Render.FreeFloatingBase)">
            <since>7.12</since>
        </member>
        <member name="M:Rhino.Render.SafeFrame.Finalize">
            <summary></summary>
        </member>
        <member name="M:Rhino.Render.SafeFrame.Dispose">
            <summary></summary>
            <since>8.0</since>
        </member>
        <member name="P:Rhino.Render.SafeFrame.Enabled">
            <summary>
            Determines whether the safe-frame is enabled.
            </summary>
            <since>7.12</since>
        </member>
        <member name="P:Rhino.Render.SafeFrame.PerspectiveOnly">
            <summary>
             Show the safe-frame only in perspective views.
            </summary>
             <since>7.12</since>
        </member>
        <member name="P:Rhino.Render.SafeFrame.FieldsOn">
            <summary>
             Show the 4 by 3 field grid in the safe-frame.
            </summary>
             <since>7.12</since>
        </member>
        <member name="P:Rhino.Render.SafeFrame.LiveFrameOn">
            <summary>
             Turn on the live area, which shows the size of the rendered view as a yellow frame
             in the viewport.
            </summary>
             <since>7.12</since>
        </member>
        <member name="P:Rhino.Render.SafeFrame.ActionFrameOn">
            <summary>
             Turn on the user specified action area, which shown with blue frames.
            </summary>
             <since>7.12</since>
        </member>
        <member name="P:Rhino.Render.SafeFrame.ActionFrameLinked">
            <summary>
             Action Frame Linked, On = Use the same scale for X and Y. Off = use
             different scales for X and Y.
            </summary>
             <since>7.12</since>
        </member>
        <member name="P:Rhino.Render.SafeFrame.ActionFrameXScale">
            <summary>
             Action Frame X-scale.
             This value should be in the range 0..1 but it is not clamped.
             It is displayed in the UI in the range 0..100.
            </summary>
             <since>7.12</since>
        </member>
        <member name="P:Rhino.Render.SafeFrame.ActionFrameYScale">
            <summary>
             Action Frame Y-scale.
             This value should be in the range 0..1 but it is not clamped.
             It is displayed in the UI in the range 0..100.
            </summary>
             <since>7.12</since>
        </member>
        <member name="P:Rhino.Render.SafeFrame.TitleFrameOn">
            <summary>
             Show a user specified title area frame in orange.
            </summary>
             <since>7.12</since>
        </member>
        <member name="P:Rhino.Render.SafeFrame.TitleFrameLinked">
            <summary>
             Title Frame Linked, On = Use the same scale for X and Y. Off = use
             different scales for X and Y.
            </summary>
             <since>7.12</since>
        </member>
        <member name="P:Rhino.Render.SafeFrame.TitleFrameXScale">
            <summary>
             Title Frame X-scale.
             This value should be in the range 0..1 but it is not clamped.
             It is displayed in the UI in the range 0..100.
            </summary>
             <since>7.12</since>
        </member>
        <member name="P:Rhino.Render.SafeFrame.TitleFrameYScale">
            <summary>
             Title Frame Y-scale.
             This value should be in the range 0..1 but it is not clamped.
             It is displayed in the UI in the range 0..100.
            </summary>
             <since>7.12</since>
        </member>
        <member name="T:Rhino.Render.Sun">
            <summary>
            Represents the Sun on a little portion of Earth.
            </summary>
        </member>
        <member name="M:Rhino.Render.Sun.#ctor">
            <summary>
            Create a utility object not associated with any document
            </summary>
            <since>5.0</since>
        </member>
        <member name="M:Rhino.Render.Sun.Dispose">
            <since>5.0</since>
        </member>
        <member name="P:Rhino.Render.Sun.Enabled">
            <summary>Turn the sun on/off in this document.</summary>
            <since>5.0</since>
        </member>
        <member name="P:Rhino.Render.Sun.ManualControl">
            <since>5.10</since>
            <obsolete>8.0</obsolete>
        </member>
        <member name="P:Rhino.Render.Sun.ManualControlOn">
            <summary>Manual control 'on' state. When true, allows the user to set the sun
            azimuth and altitude directly. When false, the values are computed.</summary>
            <since>8.0</since>
        </member>
        <member name="T:Rhino.Render.Sun.Accuracies">
            <since>8.0</since>
        </member>
        <member name="P:Rhino.Render.Sun.Accuracy">
            <summary>Accuracy.</summary>
            <since>8.0</since>
        </member>
        <member name="P:Rhino.Render.Sun.DaylightSaving">
            <since>5.10</since>
            <obsolete>8.0</obsolete>
        </member>
        <member name="P:Rhino.Render.Sun.DaylightSavingOn">
            <summary>Daylight saving time 'on' state</summary>
            <since>5.10</since>
        </member>
        <member name="P:Rhino.Render.Sun.DaylightSavingMinutes">
            <summary>Daylight saving time in minutes</summary>
            <since>6.0</since>
        </member>
        <member name="P:Rhino.Render.Sun.TimeZone">
            <summary>
            The observer's time zone measured in hours relative to UTC.
            </summary>
            <since>5.10</since>
        </member>
        <member name="P:Rhino.Render.Sun.North">
            <summary>
            Angle in degrees on world X-Y plane that should be considered north in the model.
            The angle is measured starting at the x-axis and increases anti-clockwise. The y-axis
            corresponds to a 'north' angle of 90 degrees.
            </summary>
            <since>5.0</since>
        </member>
        <member name="P:Rhino.Render.Sun.Intensity">
            <summary>
            Sun intensity.
            </summary>
            <since>7.0</since>
        </member>
        <member name="P:Rhino.Render.Sun.Vector">
            <since>5.0</since>
        </member>
        <member name="P:Rhino.Render.Sun.Light">
            <summary>
            Get a Light which represents the sun. If manual control is in effect, no sun calculation
            is performed; the function uses the last known values of azimuth and altitude.
            If manual control is not in effect, the observer's position, date, time, time zone and
            daylight saving values are used to calculate the position of the sun.
            </summary>
            <since>6.0</since>
        </member>
        <member name="M:Rhino.Render.Sun.SetPosition(System.Double,System.Double)">
            <summary>
            </summary>
            <since>5.0</since>
            <obsolete>8.0</obsolete>
            <deprecated>8.0</deprecated>
        </member>
        <member name="M:Rhino.Render.Sun.SetPosition(System.DateTime,System.Double,System.Double)">
            <summary>
            </summary>
            <since>5.0</since>
            <obsolete>8.0</obsolete>
            <deprecated>8.0</deprecated>
        </member>
        <member name="P:Rhino.Render.Sun.Azimuth">
            <summary>
            The sun's azimuth in degrees. The value increases Eastwards with North as zero.
            Setting this value will also set the sun to manual control mode.
            Note: This value is not affected by the direction of north.
            </summary>
            <since>5.0</since>
        </member>
        <member name="P:Rhino.Render.Sun.Altitude">
            <summary>
            The sun's altitude above the horizon in degrees in the range -90 to +90.
            Setting this value will also set the sun to manual control mode.
            </summary>
            <since>5.0</since>
        </member>
        <member name="P:Rhino.Render.Sun.Latitude">
            <summary>
            The observer's latitude.
            </summary>
            <since>5.0</since>
        </member>
        <member name="P:Rhino.Render.Sun.Longitude">
            <summary>
            The observer's longitude.
            </summary>
            <since>5.0</since>
        </member>
        <member name="M:Rhino.Render.Sun.GetDateTime(System.DateTimeKind)">
             <summary>
             Get the observer's date and time as a DateTime with kind DateTimeKind.Local.
             
             Param 'kind' specifies the kind of date and time to retrieve from the sun.
             
             - If DateTimeKind.Local, the returned DateTime will contain the local sun time,
               i.e., the time you see in the UI under 'Local'.
            
             - If DateTimeKind.Utc, the returned DateTime will contain the UTC sun time,
               i.e., the time you see in the UI under 'UTC', which is the Sun's local time adjusted
               for its time zone and daylight saving (if any).
            
             **** Local sun time is to do with the Sun's time zone and not the time zone of the computer.
            
             **** The returned DateTime object always has a kind of Local even if you requested the sun's
                  UTC date and time. This is because the Sun's time zone is nothing to do with the actual
                  computer's time zone and converting the result would cause further confusion.
            
             </summary>
             <since>5.0</since>
        </member>
        <member name="M:Rhino.Render.Sun.SetDateTime(System.DateTime,System.DateTimeKind)">
             <summary>
             Set the observer's date and time.
             <param>kind specifies the kind of date and time to set to the sun. Note that this is distinct
             from the DateTimeKind of 'time' which has nothing to do with the sun's local/UTC scenario.
             
             - If 'kind' is DateTimeKind.Local, the sun's local time will be set, i.e., the time you see
               in the UI under 'Local'. This is the preferred way to use this function.
            
             - If 'kind' is DateTimeKind.Utc, the sun's UTC time will be set, i.e., the time you see
               in the UI under 'UTC'. This is only for completeness; it's not likely to be useful,
               but if you do use it, be aware that the sun will convert this time to local using its
               currently set time zone and daylight saving information (not the locale's information).
            </param>
             Caveat: Local sun time is to do with the Sun's time zone and not the time zone of the computer.
            
             Caveat: If the supplied DateTime object has a kind of Local, it will be used verbatim.
                     If, however, it has a kind of Utc, it will be converted to local time on the computer
                     using the computer's time zone and daylight saving locale information before being
                     passed to the sun. To avoid confusion, it's best to always use DateTimes with Kind
                     'Local' when setting the sun's date and time. This is because the Sun's time zone
                     is nothing to do with the actual computer's time zone.
             </summary>
             <since>6.0</since>
        </member>
        <member name="M:Rhino.Render.Sun.ColorFromAltitude(System.Double)">
            <summary>Get sun color based on altitude.</summary>
            <param name="altitudeDegrees">The altitude sun angle in degrees.</param>
            <returns>
            Returns color for altitude.
            </returns>
            <since>6.0</since>
        </member>
        <member name="M:Rhino.Render.Sun.AltitudeFromValues(System.Double,System.Double,System.Double,System.Int32,System.DateTime,System.Double,System.Boolean)">
            <since>6.0</since>
        </member>
        <member name="P:Rhino.Render.Sun.Hash">
            <summary>
            Get a hash of the sun state.
            </summary>
            <since>8.0</since>
        </member>
        <member name="M:Rhino.Render.Sun.CopyFrom(Rhino.Render.FreeFloatingBase)">
            <since>6.0</since>
        </member>
        <member name="M:Rhino.Render.Skylight.#ctor">
            <summary>
            Create a utility object not associated with any document
            </summary>
            <since>6.0</since>
        </member>
        <member name="M:Rhino.Render.Skylight.#ctor(Rhino.Render.Skylight)">
            <summary>
            Create a utility object not associated with any document from another object
            </summary>
            <param name="src"></param>
            <since>6.0</since>
        </member>
        <member name="M:Rhino.Render.Skylight.CopyFrom(Rhino.Render.FreeFloatingBase)">
            <since>6.0</since>
        </member>
        <member name="M:Rhino.Render.Skylight.Dispose">
            <since>8.0</since>
        </member>
        <member name="P:Rhino.Render.Skylight.Enabled">
            <since>6.0</since>
        </member>
        <member name="P:Rhino.Render.Skylight.ShadowIntensity">
            <summary>
            ShadowIntensity is currently unused.
            </summary>
            <since>6.0</since>
        </member>
        <member name="P:Rhino.Render.Skylight.CustomEnvironmentOn">
            <since>6.0</since>
            <obsolete>8.0</obsolete>
        </member>
        <member name="P:Rhino.Render.Skylight.CustomEnvironment">
            <since>6.0</since>
            <obsolete>8.0</obsolete>
        </member>
        <member name="T:Rhino.Display.BackgroundStyle">
            <summary>
            Constants that define how the background of a viewport should be filled.
            </summary>
            <since>5.0</since>
        </member>
        <member name="F:Rhino.Display.BackgroundStyle.SolidColor">
            <summary>Single solid color fill.</summary>
        </member>
        <member name="F:Rhino.Display.BackgroundStyle.WallpaperImage">
            <summary>Simple image background wallpaper.</summary>
        </member>
        <member name="F:Rhino.Display.BackgroundStyle.Gradient">
            <summary>Two color top/bottom color gradient.</summary>
        </member>
        <member name="F:Rhino.Display.BackgroundStyle.Environment">
            <summary>Using a Render Environment.</summary>
        </member>
        <member name="T:Rhino.Display.GradientType">
            <summary>
            Style of color gradient
            </summary>
             <since>7.0</since>
        </member>
        <member name="F:Rhino.Display.GradientType.None">
            <summary>No gradient</summary>
        </member>
        <member name="F:Rhino.Display.GradientType.Linear">
            <summary>Linear (or axial) gradient between two points</summary>
        </member>
        <member name="F:Rhino.Display.GradientType.Radial">
            <summary>Radial (or spherical) gradient using a center point and a radius</summary>
        </member>
        <member name="F:Rhino.Display.GradientType.LinearDisabled">
            <summary>Disabled linear gradient. Useful for keeping gradient information around, but not having it displayed</summary>
        </member>
        <member name="F:Rhino.Display.GradientType.RadialDisabled">
            <summary>Disabled radial gradient. Useful for keeping gradient information around, but not having it displayed</summary>
        </member>
        <member name="T:Rhino.Display.ColorStop">
            <summary>
            Combination of a color and position. Used in defining gradient fills
            </summary>
        </member>
        <member name="M:Rhino.Display.ColorStop.#ctor(System.Drawing.Color,System.Double)">
            <summary>
            Create color stop from a color and position
            </summary>
            <param name="color"></param>
            <param name="t"></param>
            <since>7.0</since>
        </member>
        <member name="P:Rhino.Display.ColorStop.Color">
            <summary>
            </summary>
            <since>7.0</since>
        </member>
        <member name="P:Rhino.Display.ColorStop.Position">
            <summary> Parameter that Color is defined at </summary>
            <since>7.0</since>
        </member>
        <member name="T:Rhino.Display.ColorGradient">
            <summary>
            </summary>
        </member>
        <member name="P:Rhino.Display.ColorGradient.GradientType">
            <summary>
            Gradient fill type associated with this hatch
            </summary>
            <since>7.0</since>
        </member>
        <member name="M:Rhino.Display.ColorGradient.GetColorStops">
            <summary>
            Get sorted list of colors / positions that a gradient is defined over
            </summary>
            <returns></returns>
            <since>7.0</since>
        </member>
        <member name="M:Rhino.Display.ColorGradient.SetColorStops(System.Collections.Generic.IEnumerable{Rhino.Display.ColorStop})">
            <summary>
            Set color stops for the gradient
            </summary>
            <param name="stops"></param>
            <since>7.0</since>
        </member>
        <member name="P:Rhino.Display.ColorGradient.Repeat">
            <summary>
            Repeat factor for gradient. Factors greater than 1 define a reflected
            repeat factor while values less than -1 define a wrapped repeat factor.
            </summary>
            <since>7.0</since>
        </member>
        <member name="P:Rhino.Display.ColorGradient.StartPoint">
            <summary>
            Start point of gradient
            </summary>
            <since>7.0</since>
        </member>
        <member name="P:Rhino.Display.ColorGradient.EndPoint">
            <summary>
            End point of gradient
            </summary>
            <since>7.0</since>
        </member>
        <member name="T:Rhino.Display.Color4f">
            <summary>
            Color defined by 4 floating point values.
            </summary>
        </member>
        <member name="M:Rhino.Display.Color4f.#ctor(System.Drawing.Color)">
            <since>5.0</since>
        </member>
        <member name="M:Rhino.Display.Color4f.#ctor(Rhino.Display.Color4f)">
            <since>5.0</since>
        </member>
        <member name="M:Rhino.Display.Color4f.#ctor(System.Single,System.Single,System.Single,System.Single)">
            <since>5.0</since>
        </member>
        <member name="M:Rhino.Display.Color4f.#ctor(System.Int32)">
            <since>7.0</since>
        </member>
        <member name="P:Rhino.Display.Color4f.Empty">
            <since>5.0</since>
        </member>
        <member name="P:Rhino.Display.Color4f.Black">
            <since>5.0</since>
        </member>
        <member name="P:Rhino.Display.Color4f.White">
            <since>5.0</since>
        </member>
        <member name="M:Rhino.Display.Color4f.FromArgb(System.Single,System.Single,System.Single,System.Single)">
            <since>5.11</since>
        </member>
        <member name="M:Rhino.Display.Color4f.FromArgb(System.Single,Rhino.Display.Color4f)">
            <since>5.11</since>
        </member>
        <member name="P:Rhino.Display.Color4f.R">
            <since>5.0</since>
        </member>
        <member name="P:Rhino.Display.Color4f.G">
            <since>5.0</since>
        </member>
        <member name="P:Rhino.Display.Color4f.B">
            <since>5.0</since>
        </member>
        <member name="P:Rhino.Display.Color4f.A">
            <since>5.0</since>
        </member>
        <member name="P:Rhino.Display.Color4f.L">
            <since>6.3</since>
        </member>
        <member name="M:Rhino.Display.Color4f.op_Equality(Rhino.Display.Color4f,Rhino.Display.Color4f)">
            <since>5.0</since>
        </member>
        <member name="M:Rhino.Display.Color4f.op_Inequality(Rhino.Display.Color4f,Rhino.Display.Color4f)">
            <since>5.0</since>
        </member>
        <member name="M:Rhino.Display.Color4f.BlendTo(System.Single,Rhino.Display.Color4f)">
            <since>5.0</since>
        </member>
        <member name="M:Rhino.Display.Color4f.ApplyGamma(Rhino.Display.Color4f,System.Single)">
            <since>6.0</since>
        </member>
        <member name="M:Rhino.Display.Color4f.AsSystemColor">
            <since>5.0</since>
        </member>
        <member name="T:Rhino.Display.ColorRGBA">
            <summary>
            Represents a sRGBA (Red, Green, Blue, Alpha) color with double precision floating point channel.
            </summary>
        </member>
        <member name="P:Rhino.Display.ColorRGBA.R">
            <summary>
            Gets or sets the red channel value. 
            Red channels are limited to a 0~1 range.
            </summary>
            <since>7.0</since>
        </member>
        <member name="P:Rhino.Display.ColorRGBA.G">
            <summary>
            Gets or sets the green channel value. 
            Green channels are limited to a 0~1 range.
            </summary>
            <since>7.0</since>
        </member>
        <member name="P:Rhino.Display.ColorRGBA.B">
            <summary>
            Gets or sets the blue channel value. 
            Blue channels are limited to a 0~1 range.
            </summary>
            <since>7.0</since>
        </member>
        <member name="P:Rhino.Display.ColorRGBA.A">
            <summary>
            Gets or sets the alpha channel value. 
            Alpha channels are limited to a 0~1 range.
            </summary>
            <since>7.0</since>
        </member>
        <member name="M:Rhino.Display.ColorRGBA.#ctor(Rhino.Display.ColorRGBA)">
            <since>7.0</since>
        </member>
        <member name="M:Rhino.Display.ColorRGBA.#ctor(Rhino.Display.ColorRGBA,System.Double)">
            <since>8.0</since>
        </member>
        <member name="M:Rhino.Display.ColorRGBA.#ctor(System.Double,System.Double,System.Double)">
            <since>7.0</since>
        </member>
        <member name="M:Rhino.Display.ColorRGBA.#ctor(System.Double,System.Double,System.Double,System.Double)">
            <since>7.0</since>
        </member>
        <member name="M:Rhino.Display.ColorRGBA.#ctor(System.Drawing.Color)">
            <summary>
            Constructs a new instance of ColorRGBA that is equivalent to an ARGB color.
            </summary>
            <param name="color">ARGB color to mimic.</param>
            <since>7.0</since>
        </member>
        <member name="M:Rhino.Display.ColorRGBA.#ctor(System.Int32)">
            <summary>
            Constructs a new instance of ColorRGBA that is equivalent to an ARGB color.
            </summary>
            <param name="argb">ARGB color to mimic.</param>
            <since>7.0</since>
        </member>
        <member name="M:Rhino.Display.ColorRGBA.ToArgb">
            <summary>
            Converts this color to a 32-bit ARGB value.
            </summary>
            <returns>The 32-bit ARGB value that corresponds to this color</returns>
            <since>7.35</since>
        </member>
        <member name="M:Rhino.Display.ColorRGBA.CreateFromArgb(System.Byte,System.Byte,System.Byte)">
            <summary>
            Constructs a RGBA color from the specified 8-bit components (red, green, and blue) values.
            The alpha value is implicitly 1.0 (fully opaque).
            </summary>
            <param name="red">The red component. Valid values are 0 through 255.</param>
            <param name="green">The green component. Valid values are 0 through 255.</param>
            <param name="blue">The blue component. Valid values are 0 through 255.</param>
            <returns>A RGBA color with the specified component values.</returns>
            <since>8.0</since>
        </member>
        <member name="M:Rhino.Display.ColorRGBA.CreateFromArgb(System.Byte,System.Byte,System.Byte,System.Byte)">
            <summary>
            Constructs a RGBA color from the four ARGB components (alpha, red, green, and blue) values.
            </summary>
            <param name="alpha">The alpha component. Valid values are 0 through 255.</param>
            <param name="red">The red component. Valid values are 0 through 255.</param>
            <param name="green">The green component. Valid values are 0 through 255.</param>
            <param name="blue">The blue component. Valid values are 0 through 255.</param>
            <returns>A RGBA color with the specified component values.</returns>
            <since>8.0</since>
        </member>
        <member name="M:Rhino.Display.ColorRGBA.CreateFromHSV(Rhino.Display.ColorHSV)">
            <summary>
            Constructs the nearest RGBA equivalent of an HSL color.
            </summary>
            <param name="hsv">Target color in HSL space.</param>
            <returns>The RGBA equivalent of the HSL color.</returns>
            <since>7.0</since>
        </member>
        <member name="M:Rhino.Display.ColorRGBA.CreateFromHSL(Rhino.Display.ColorHSL)">
            <summary>
            Constructs the nearest RGBA equivalent of an HSV color.
            </summary>
            <param name="hsl">Target color in HSL space.</param>
            <returns>The RGBA equivalent of the HSL color.</returns>
            <since>7.0</since>
        </member>
        <member name="M:Rhino.Display.ColorRGBA.CreateFromCMYK(Rhino.Display.ColorCMYK)">
            <summary>
            Create the nearest RGBA equivalent of a CMYK color.
            </summary>
            <param name="cmyk">Target color in CMYK space.</param>
            <returns>The RGBA equivalent of the CMYK color.</returns>
            <since>7.0</since>
        </member>
        <member name="M:Rhino.Display.ColorRGBA.CreateFromXYZ(Rhino.Display.ColorXYZ)">
            <summary>
            Create the nearest RGBA equivalent of an XYZ color.
            </summary>
            <param name="xyz">Target color in XYZ space.</param>
            <returns>The RGBA equivalent of the XYZ color.</returns>
            <since>7.0</since>
        </member>
        <member name="M:Rhino.Display.ColorRGBA.CreateFromLAB(Rhino.Display.ColorLAB)">
            <summary>
            Create the nearest RGBA equivalent of a LAB color.
            </summary>
            <param name="lab">Target color in LAB space.</param>
            <returns>The RGBA equivalent of the LAB color.</returns>
            <since>7.0</since>
        </member>
        <member name="M:Rhino.Display.ColorRGBA.CreateFromLCH(Rhino.Display.ColorLCH)">
            <summary>
            Create the nearest RGBA equivalent of a LCH color.
            </summary>
            <param name="lch">Target color in LCH space.</param>
            <returns>The RGBA equivalent of the LCH color.</returns>
            <since>7.0</since>
        </member>
        <member name="M:Rhino.Display.ColorRGBA.ToString">
            <since>7.0</since>
        </member>
        <member name="M:Rhino.Display.ColorRGBA.ToString(System.String,System.IFormatProvider)">
            <since>7.0</since>
        </member>
        <member name="M:Rhino.Display.ColorRGBA.CompareTo(Rhino.Display.ColorRGBA)">
            <summary>
            Compares this <see cref="T:Rhino.Display.ColorRGBA" /> with another <see cref="T:Rhino.Display.ColorRGBA" />.
            <para>Channels evaluation priority is first A, then R, then G, then B.</para>
            </summary>
            <param name="other">The other <see cref="T:Rhino.Display.ColorRGBA" /> to use in comparison.</param>
            <returns>
            <para> 0: if this is identical to other</para>
            <para>-1: if this &lt; other</para>
            <para>+1: if this &gt; other</para>
            </returns>
            <since>7.0</since>
        </member>
        <member name="M:Rhino.Display.ColorRGBA.EpsilonEquals(Rhino.Display.ColorRGBA,System.Double)">
            <summary>
            Check that all values in other are within epsilon of the values in this
            </summary>
            <param name="other"></param>
            <param name="epsilon"></param>
            <returns></returns>
            <since>7.0</since>
        </member>
        <member name="M:Rhino.Display.ColorRGBA.Equals(Rhino.Display.ColorRGBA)">
            <summary>
            Determines whether the specified ColorRGBA has the same values as the present color.
            </summary>
            <param name="other">The specified color.</param>
            <returns>true if color has the same channel values as this; otherwise false.</returns>
            <since>7.0</since>
        </member>
        <member name="M:Rhino.Display.ColorRGBA.Equals(System.Object)">
            <since>7.0</since>
        </member>
        <member name="M:Rhino.Display.ColorRGBA.GetHashCode">
            <since>7.0</since>
        </member>
        <member name="P:Rhino.Display.ColorRGBA.Black">
            <since>7.0</since>
        </member>
        <member name="P:Rhino.Display.ColorRGBA.White">
            <since>7.0</since>
        </member>
        <member name="P:Rhino.Display.ColorRGBA.Red">
            <since>7.0</since>
        </member>
        <member name="P:Rhino.Display.ColorRGBA.Green">
            <since>7.0</since>
        </member>
        <member name="P:Rhino.Display.ColorRGBA.Blue">
            <since>7.0</since>
        </member>
        <member name="M:Rhino.Display.ColorRGBA.op_Equality(Rhino.Display.ColorRGBA,Rhino.Display.ColorRGBA)">
            <since>7.0</since>
        </member>
        <member name="M:Rhino.Display.ColorRGBA.op_Inequality(Rhino.Display.ColorRGBA,Rhino.Display.ColorRGBA)">
            <since>7.0</since>
        </member>
        <member name="M:Rhino.Display.ColorRGBA.BlendTo(Rhino.Display.ColorRGBA,System.Double)">
            <since>7.0</since>
        </member>
        <member name="M:Rhino.Display.ColorRGBA.ApplyGamma(Rhino.Display.ColorRGBA,System.Double)">
            <since>7.0</since>
        </member>
        <member name="M:Rhino.Display.ColorRGBA.op_Explicit(Rhino.Display.ColorRGBA)~System.Drawing.Color">
            <summary>
            Converts a ColorRGBA in a <see cref="T:System.Drawing.Color"/>.
            </summary>
            <param name="value">A RGBA color.</param>
            <returns>An ARGB <see cref="T:System.Drawing.Color"/>.</returns>
            <since>7.0</since>
        </member>
        <member name="M:Rhino.Display.ColorRGBA.op_Implicit(System.Drawing.Color)~Rhino.Display.ColorRGBA">
            <since>7.0</since>
        </member>
        <member name="T:Rhino.Display.ColorHSL">
            <summary>
            Represents an HSL (Hue, Saturation, Luminance) color with double precision floating point channels. 
            HSL colors are used primarily in Graphical User Interface environments as they provide a 
            very natural approach to picking colors.
            </summary>
        </member>
        <member name="F:Rhino.Display.ColorHSL.m_a">
            <summary>
            Alpha values are inverted internally! 0 = opaque; 1 = transparent.
            </summary>
        </member>
        <member name="M:Rhino.Display.ColorHSL.#ctor(System.Drawing.Color)">
            <summary>
            Constructs a new instance of ColorHSL that is equivalent to an ARGB color.
            </summary>
            <param name="rgb">ARGB color to mimic.</param>
            <remarks>Exact conversions between color spaces are often not possible.</remarks>
            <since>5.0</since>
        </member>
        <member name="M:Rhino.Display.ColorHSL.#ctor(System.Double,System.Double,System.Double)">
            <summary>
            Constructs a new instance of ColorHSL with custom channel values.
            </summary>
            <param name="hue">Hue channel value. Hue channels rotate between 0.0 and 1.0.</param>
            <param name="saturation">Saturation channel value. Channel will be limited to 0~1.</param>
            <param name="luminance">Luminance channel value. Channel will be limited to 0~1.</param>
            <since>5.0</since>
        </member>
        <member name="M:Rhino.Display.ColorHSL.#ctor(System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Constructs a new instance of ColorHSL with custom channel values.
            </summary>
            <param name="alpha">Alpha channel value. Channel will be limited to 0~1.</param>
            <param name="hue">Hue channel value. Hue channels rotate between 0.0 and 1.0.</param>
            <param name="saturation">Saturation channel value. Channel will be limited to 0~1.</param>
            <param name="luminance">Luminance channel value. Channel will be limited to 0~1.</param>
            <since>5.0</since>
        </member>
        <member name="M:Rhino.Display.ColorHSL.CreateFromRGBA(Rhino.Display.ColorRGBA)">
            <summary>
            Create the nearest HSL equivalent of a RGBA color.
            </summary>
            <param name="rgba">Target color in RGBA space.</param>
            <returns>The HSL equivalent of the RGBA color.</returns>
            <since>7.0</since>
        </member>
        <member name="M:Rhino.Display.ColorHSL.CreateFromCMYK(Rhino.Display.ColorCMYK)">
            <summary>
            Create the nearest HSL equivalent of a CMYK color.
            </summary>
            <param name="cmyk">Target color in CMYK space.</param>
            <returns>The HSL equivalent of the CMYK color.</returns>
            <since>5.0</since>
        </member>
        <member name="M:Rhino.Display.ColorHSL.CreateFromXYZ(Rhino.Display.ColorXYZ)">
            <summary>
            Create the nearest HSL equivalent of an XYZ color.
            </summary>
            <param name="xyz">Target color in XYZ space.</param>
            <returns>The HSL equivalent of the XYZ color.</returns>
            <since>5.0</since>
        </member>
        <member name="M:Rhino.Display.ColorHSL.CreateFromLAB(Rhino.Display.ColorLAB)">
            <summary>
            Create the nearest HSL equivalent of a LAB color.
            </summary>
            <param name="lab">Target color in LAB space.</param>
            <returns>The HSL equivalent of the LAB color.</returns>
            <since>5.0</since>
        </member>
        <member name="M:Rhino.Display.ColorHSL.CreateFromLCH(Rhino.Display.ColorLCH)">
            <summary>
            Create the nearest HSL equivalent of a LCH color.
            </summary>
            <param name="lch">Target color in LCH space.</param>
            <returns>The HSL equivalent of the LCH color.</returns>
            <since>5.0</since>
        </member>
        <member name="M:Rhino.Display.ColorHSL.CreateFromHSV(Rhino.Display.ColorHSV)">
            <summary>
            Constructs the nearest HSL equivalent of an HSV color.
            </summary>
            <param name="hsv">Target color in HSV space.</param>
            <returns>The HSL equivalent of the HSV color.</returns>
            <since>6.0</since>
        </member>
        <member name="M:Rhino.Display.ColorHSL.op_Implicit(Rhino.Display.ColorHSL)~System.Drawing.Color">
            <summary>
            Implicitly converts a ColorHSL in a .Net library color.
            </summary>
            <param name="hsl">A HSL color.</param>
            <returns>A ARGB .Net library color.</returns>
        </member>
        <member name="P:Rhino.Display.ColorHSL.H">
            <summary>
            Gets or sets the hue channel value. 
            Hue channels rotate between 0.0 and 1.0.
            </summary>
            <since>5.0</since>
        </member>
        <member name="P:Rhino.Display.ColorHSL.S">
            <summary>
            Gets or sets the saturation channel value. 
            Saturation channels are limited to a 0~1 range.
            </summary>
            <since>5.0</since>
        </member>
        <member name="P:Rhino.Display.ColorHSL.L">
            <summary>
            Gets or sets the luminance channel value. 
            Luminance channels are limited to a 0~1 range.
            </summary>
            <since>5.0</since>
        </member>
        <member name="P:Rhino.Display.ColorHSL.A">
            <summary>
            Gets or sets the alpha channel value. 
            Alpha channels are limited to a 0~1 range.
            </summary>
            <since>5.0</since>
        </member>
        <member name="M:Rhino.Display.ColorHSL.ToArgbColor">
            <summary>
            Convert HSL color to an equivalent System.Drawing.Color.
            </summary>
            <returns>A .Net framework library color value.</returns>
            <since>5.0</since>
        </member>
        <member name="T:Rhino.Display.ColorCMYK">
            <summary>
            Represents a CMYK (Cyan, Magenta, Yellow, Key) color with double precision floating point channels. 
            CMYK colors are used primarily in printing environments as they provide a good simulation of physical ink.
            </summary>
        </member>
        <member name="F:Rhino.Display.ColorCMYK.m_a">
            <summary>
            Alpha values are inverted internally! 0 = opaque; 1 = transparent!
            </summary>
        </member>
        <member name="M:Rhino.Display.ColorCMYK.#ctor(System.Drawing.Color)">
            <summary>
            Initializes a new instance of ColorCMYK that is equivalent to an ARGB color.
            </summary>
            <param name="rgb">ARGB color to mimic.</param>
            <remarks>Exact conversions between color spaces are often not possible.</remarks>
            <since>5.0</since>
        </member>
        <member name="M:Rhino.Display.ColorCMYK.#ctor(System.Double,System.Double,System.Double)">
            <summary>
            Initializes a new instance of ColorCMYK with custom channel values. 
            The cyan, magenta and yellow values will be adjusted based on their 
            combined darkness.
            </summary>
            <param name="cyan">Cyan channel hint.</param>
            <param name="magenta">Magenta channel hint.</param>
            <param name="yellow">Yellow channel hint.</param>
            <since>5.0</since>
        </member>
        <member name="M:Rhino.Display.ColorCMYK.#ctor(System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Initializes a new instance of ColorCMYK with custom channel values. 
            </summary>
            <param name="cyan">Cyan channel value. Cyan channels are limited to the 0.0 and 1.0 range.</param>
            <param name="magenta">Magenta channel value. Magenta channels are limited to the 0.0 and 1.0 range.</param>
            <param name="yellow">Yellow channel value. Yellow channels are limited to the 0.0 and 1.0 range.</param>
            <param name="key">Key channel value. Key channels are limited to the 0.0 and 1.0 range.</param>
            <since>5.0</since>
        </member>
        <member name="M:Rhino.Display.ColorCMYK.#ctor(System.Double,System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Initializes a new instance of ColorCMYK with custom channel values. 
            </summary>
            <param name="alpha">Alpha channel value. Alpha channels are limited to the 0.0 and 1.0 range.</param>
            <param name="cyan">Cyan channel value. Cyan channels are limited to the 0.0 and 1.0 range.</param>
            <param name="magenta">Magenta channel value. Magenta channels are limited to the 0.0 and 1.0 range.</param>
            <param name="yellow">Yellow channel value. Yellow channels are limited to the 0.0 and 1.0 range.</param>
            <param name="key">Key channel value. Key channels are limited to the 0.0 and 1.0 range.</param>
            <since>5.0</since>
        </member>
        <member name="M:Rhino.Display.ColorCMYK.CreateFromRGBA(Rhino.Display.ColorRGBA)">
            <summary>
            Create the nearest CMYK equivalent of a RGBA color.
            </summary>
            <param name="rgba">Target color in RGBA space.</param>
            <returns>The CMYK equivalent of the RGBA color.</returns>
            <since>7.0</since>
        </member>
        <member name="M:Rhino.Display.ColorCMYK.CreateFromHSL(Rhino.Display.ColorHSL)">
            <summary>
            Constructs the nearest CMYK equivalent of an HSL color.
            </summary>
            <param name="hsl">Target color in HSL space.</param>
            <returns>The CMYK equivalent of the HSL color.</returns>
            <since>5.0</since>
        </member>
        <member name="M:Rhino.Display.ColorCMYK.CreateFromXYZ(Rhino.Display.ColorXYZ)">
            <summary>
            Constructs the nearest CMYK equivalent of an XYZ color.
            </summary>
            <param name="xyz">Target color in XYZ space.</param>
            <returns>The CMYK equivalent of the XYZ color.</returns>
            <since>5.0</since>
        </member>
        <member name="M:Rhino.Display.ColorCMYK.CreateFromLAB(Rhino.Display.ColorLAB)">
            <summary>
            Constructs the nearest CMYK equivalent of a LAB color.
            </summary>
            <param name="lab">Target color in LAB space.</param>
            <returns>The CMYK equivalent of the LAB color.</returns>
            <since>5.0</since>
        </member>
        <member name="M:Rhino.Display.ColorCMYK.CreateFromLCH(Rhino.Display.ColorLCH)">
            <summary>
            Constructs the nearest CMYK equivalent of a LCH color.
            </summary>
            <param name="lch">Target color in LCH space.</param>
            <returns>The CMYK equivalent of the LCH color.</returns>
            <since>5.0</since>
        </member>
        <member name="M:Rhino.Display.ColorCMYK.CreateFromHSV(Rhino.Display.ColorHSV)">
            <summary>
            Constructs the nearest CMYK equivalent of an HSV color.
            </summary>
            <param name="hsv">Target color in HSV space.</param>
            <returns>The CMYK equivalent of the HSV color.</returns>
            <since>6.0</since>
        </member>
        <member name="M:Rhino.Display.ColorCMYK.op_Implicit(Rhino.Display.ColorCMYK)~System.Drawing.Color">
            <summary>
            Implicitly converts a CMYK color into a .Net library color.
            </summary>
            <param name="cmyk">A CMYK color.</param>
            <returns>A ARGB .Net library color.</returns>
        </member>
        <member name="P:Rhino.Display.ColorCMYK.C">
            <summary>
            Gets or sets the Cyan channel value. 
            Cyan channels are limited to the 0~1 range.
            </summary>
            <since>5.0</since>
        </member>
        <member name="P:Rhino.Display.ColorCMYK.M">
            <summary>
            Gets or sets the Magenta channel value. 
            Magenta channels are limited to the 0~1 range.
            </summary>
            <since>5.0</since>
        </member>
        <member name="P:Rhino.Display.ColorCMYK.Y">
            <summary>
            Gets or sets the Yellow channel value. 
            Yellow channels are limited to the 0~1 range.
            </summary>
            <since>5.0</since>
        </member>
        <member name="P:Rhino.Display.ColorCMYK.K">
            <summary>
            Gets or sets the Key channel value. 
            Key channels are limited to the 0~1 range.
            </summary>
            <since>5.0</since>
        </member>
        <member name="P:Rhino.Display.ColorCMYK.A">
            <summary>
            Gets or sets the Alpha channel value. 
            Alpha channels are limited to the 0~1 range.
            </summary>
            <since>5.0</since>
        </member>
        <member name="T:Rhino.Display.ColorXYZ">
            <summary>
            Represents an XYZ (Hue, Saturation, Luminance) color with double precision floating point channels. 
            XYZ colors are based on the CIE 1931 XYZ color space standard and they mimic the natural 
            sensitivity of cones in the human retina.
            </summary>
        </member>
        <member name="F:Rhino.Display.ColorXYZ.m_a">
            <summary>
            Alpha values are inverted internally! 0 = opaque; 1 = transparent!
            </summary>
        </member>
        <member name="M:Rhino.Display.ColorXYZ.#ctor(System.Drawing.Color)">
            <summary>
            Constructs a new instance of ColorXYZ that is equivalent to an ARGB color.
            </summary>
            <param name="rgb">ARGB color to mimic.</param>
            <remarks>Exact conversions between color spaces are often not possible.</remarks>
            <since>5.0</since>
        </member>
        <member name="M:Rhino.Display.ColorXYZ.#ctor(System.Double,System.Double,System.Double)">
            <summary>
            Constructs a new instance of ColorXYZ with custom channel values.
            </summary>
            <param name="x">X channel value, channel will be limited to 0~1.</param>
            <param name="y">Y channel value, channel will be limited to 0~1.</param>
            <param name="z">Z channel value, channel will be limited to 0~1.</param>
            <since>5.0</since>
        </member>
        <member name="M:Rhino.Display.ColorXYZ.#ctor(System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Constructs a new instance of ColorXYZ with custom channel values.
            </summary>
            <param name="alpha">Alpha channel value, channel will be limited to 0~1.</param>
            <param name="x">X channel value, channel will be limited to 0~1.</param>
            <param name="y">Y channel value, channel will be limited to 0~1.</param>
            <param name="z">Z channel value, channel will be limited to 0~1.</param>
            <since>5.0</since>
        </member>
        <member name="M:Rhino.Display.ColorXYZ.CreateFromRGBA(Rhino.Display.ColorRGBA)">
            <summary>
            Create the nearest XYZ equivalent of a RGBA color.
            </summary>
            <param name="rgba">Target color in RGBA space.</param>
            <returns>The XYZ equivalent of the RGBA color.</returns>
            <since>7.0</since>
        </member>
        <member name="M:Rhino.Display.ColorXYZ.CreateFromHSL(Rhino.Display.ColorHSL)">
            <summary>
            Create the nearest XYZ equivalent of an HSL color.
            </summary>
            <param name="hsl">Target color in HSL space.</param>
            <returns>The XYZ equivalent of the HSL color.</returns>
            <since>5.0</since>
        </member>
        <member name="M:Rhino.Display.ColorXYZ.CreateFromCMYK(Rhino.Display.ColorCMYK)">
            <summary>
            Create the nearest XYZ equivalent of a CMYK color.
            </summary>
            <param name="cmyk">Target color in CMYK space.</param>
            <returns>The XYZ equivalent of the CMYK color.</returns>
            <since>5.0</since>
        </member>
        <member name="M:Rhino.Display.ColorXYZ.CreateFromLAB(Rhino.Display.ColorLAB)">
            <summary>
            Create the nearest XYZ equivalent of a Lab color.
            </summary>
            <param name="lab">Target color in LAB space.</param>
            <returns>The XYZ equivalent of the LAB color.</returns>
            <since>5.0</since>
        </member>
        <member name="M:Rhino.Display.ColorXYZ.CreateFromLCH(Rhino.Display.ColorLCH)">
            <summary>
            Create the nearest XYZ equivalent of an LCH color.
            </summary>
            <param name="lch">Target color in LCH space.</param>
            <returns>The XYZ equivalent of the LCH color.</returns>
            <since>5.0</since>
        </member>
        <member name="M:Rhino.Display.ColorXYZ.CreateFromHSV(Rhino.Display.ColorHSV)">
            <summary>
            Constructs the nearest XYZ equivalent of an HSV color.
            </summary>
            <param name="hsv">Target color in HSV space.</param>
            <returns>The XYZ equivalent of the HSV color.</returns>
            <since>6.0</since>
        </member>
        <member name="M:Rhino.Display.ColorXYZ.op_Implicit(Rhino.Display.ColorXYZ)~System.Drawing.Color">
            <summary>
            Implicitly converts a XYZ color into a .Net library color.
            </summary>
            <param name="xyz">A XYZ color.</param>
            <returns>A ARGB .Net library color.</returns>
        </member>
        <member name="P:Rhino.Display.ColorXYZ.X">
            <summary>
            Gets or set the X channel value. Channel will be limited to 0~1.
            </summary>
            <since>5.0</since>
        </member>
        <member name="P:Rhino.Display.ColorXYZ.Y">
            <summary>
            Gets or set the Y channel value. Channel will be limited to 0~1.
            </summary>
            <since>5.0</since>
        </member>
        <member name="P:Rhino.Display.ColorXYZ.Z">
            <summary>
            Gets or set the Z channel value. Channel will be limited to 0~1.
            </summary>
            <since>5.0</since>
        </member>
        <member name="P:Rhino.Display.ColorXYZ.A">
            <summary>
            Gets or set the Alpha channel value. Channel will be limited to 0~1.
            </summary>
            <since>5.0</since>
        </member>
        <member name="T:Rhino.Display.ColorLAB">
            <summary>
            Represents a LAB (Lightness, A, B) color with double precision floating point channels. 
            LAB colors are based on nonlinearly compressed CIE XYZ color space coordinates.  
            The A and B parameters of a LAB color represent the opponents.
            </summary>
        </member>
        <member name="F:Rhino.Display.ColorLAB.m_alpha">
            <summary>
            Alpha values are inverted internally! 0 = opaque; 1 = transparent!
            </summary>
        </member>
        <member name="M:Rhino.Display.ColorLAB.#ctor(System.Drawing.Color)">
            <summary>
            Constructs a new instance of ColorLAB that is equivalent to an ARGB color.
            </summary>
            <param name="rgb">ARGB color to mimic.</param>
            <remarks>Exact conversions between color spaces are often not possible.</remarks>
            <since>5.0</since>
        </member>
        <member name="M:Rhino.Display.ColorLAB.#ctor(System.Double,System.Double,System.Double)">
            <summary>
            Constructs a new instance of ColorLAB with custom channel values.
            </summary>
            <since>5.0</since>
        </member>
        <member name="M:Rhino.Display.ColorLAB.#ctor(System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Constructs a new instance of ColorLAB with custom channel values.
            </summary>
            <since>5.0</since>
        </member>
        <member name="M:Rhino.Display.ColorLAB.CreateFromRGBA(Rhino.Display.ColorRGBA)">
            <summary>
            Create the nearest LAB equivalent of an RGBA color.
            </summary>
            <param name="rgb">Target color in RGBA space.</param>
            <returns>The LAB equivalent of the RGBA color.</returns>
            <since>7.1</since>
        </member>
        <member name="M:Rhino.Display.ColorLAB.CreateFromHSL(Rhino.Display.ColorHSL)">
            <summary>
            Create the nearest LAB equivalent of an HSL color.
            </summary>
            <param name="hsl">Target color in HSL space.</param>
            <returns>The LAB equivalent of the HSL color.</returns>
            <since>5.0</since>
        </member>
        <member name="M:Rhino.Display.ColorLAB.CreateFromCMYK(Rhino.Display.ColorCMYK)">
            <summary>
            Create the nearest LAB equivalent of a CMYK color.
            </summary>
            <param name="cmyk">Target color in CMYK space.</param>
            <returns>The LAB equivalent of the CMYK color.</returns>
            <since>5.0</since>
        </member>
        <member name="M:Rhino.Display.ColorLAB.CreateFromXYZ(Rhino.Display.ColorXYZ)">
            <summary>
            Create the nearest LAB equivalent of an XYZ color.
            </summary>
            <param name="xyz">Target color in XYZ space.</param>
            <returns>The LAB equivalent of the XYZ color.</returns>
            <since>5.0</since>
        </member>
        <member name="M:Rhino.Display.ColorLAB.CreateFromLCH(Rhino.Display.ColorLCH)">
            <summary>
            Create the nearest LAB equivalent of an LCH color.
            </summary>
            <param name="lch">Target color in LCH space.</param>
            <returns>The LAB equivalent of the LCH color.</returns>
            <since>5.0</since>
        </member>
        <member name="M:Rhino.Display.ColorLAB.CreateFromHSV(Rhino.Display.ColorHSV)">
            <summary>
            Constructs the nearest LAB equivalent of an HSV color.
            </summary>
            <param name="hsv">Target color in HSV space.</param>
            <returns>The LAB equivalent of the HSV color.</returns>
            <since>6.0</since>
        </member>
        <member name="M:Rhino.Display.ColorLAB.op_Implicit(Rhino.Display.ColorLAB)~System.Drawing.Color">
            <summary>
            Implicitly converts a LAB color into a .Net library color.
            </summary>
            <param name="lab">A LAB color.</param>
            <returns>A ARGB .Net library color.</returns>
        </member>
        <member name="P:Rhino.Display.ColorLAB.L">
            <summary>
            Gets or sets the lightness channel. The channel is limited to 0~1.
            </summary>
            <since>5.0</since>
        </member>
        <member name="P:Rhino.Display.ColorLAB.A">
            <summary>
            Gets or sets the Base channel. The channel is limited to -1~+1.
            </summary>
            <since>5.0</since>
        </member>
        <member name="P:Rhino.Display.ColorLAB.B">
            <summary>
            Gets or sets the Opponent channel. The channel is limited to -1~+1.
            </summary>
            <since>5.0</since>
        </member>
        <member name="P:Rhino.Display.ColorLAB.Alpha">
            <summary>
            Gets or sets the Alpha channel. The channel is limited to 0~1.
            </summary>
            <since>5.0</since>
        </member>
        <member name="T:Rhino.Display.ColorLCH">
            <summary>
            Represents an LCH (Lightness, A, B) color with double precision floating point channels. 
            LCH colors (also sometimes called CIELUV) are transformation of the 1931 CIE XYZ color space, 
            in order to approach perceptual uniformity. They are primarily used in computer graphics which 
            deal with colored lights.
            </summary>
        </member>
        <member name="F:Rhino.Display.ColorLCH.m_a">
            <summary>
            Alpha values are inverted internally! 0 = opaque; 1 = transparent!
            </summary>
        </member>
        <member name="M:Rhino.Display.ColorLCH.#ctor(System.Drawing.Color)">
            <summary>
            Constructs a new instance of ColorLCH that is equivalent to an ARGB color.
            </summary>
            <param name="rgb">ARGB color to mimic.</param>
            <remarks>Exact conversions between color spaces are often not possible.</remarks>
            <since>5.0</since>
        </member>
        <member name="M:Rhino.Display.ColorLCH.#ctor(System.Double,System.Double,System.Double)">
            <summary>
            Constructs a new instance of ColorLCH with custom channel values.
            </summary>
            <param name="lightness">Value of lightness channel. This channel is limited to 0~1.</param>
            <param name="chroma">Value of chroma channel. This channel is limited to -1~1.</param>
            <param name="hue">Value of chroma channel. This channel is limited to 0~360.</param>
            <since>5.0</since>
        </member>
        <member name="M:Rhino.Display.ColorLCH.#ctor(System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Constructs a new instance of ColorLCH with custom channel values.
            </summary>
            <param name="alpha">Value of Alpha channel. This channel is limited to 0~1.</param>
            <param name="lightness">Value of Lightness channel. This channel is limited to 0~1.</param>
            <param name="chroma">Value of Chroma channel. This channel is limited to -1~1.</param>
            <param name="hue">Value of Hue channel. This channel is limited to 0~360.</param>
            <since>5.0</since>
        </member>
        <member name="M:Rhino.Display.ColorLCH.CreateFromRGBA(Rhino.Display.ColorRGBA)">
            <summary>
            Create the nearest LCH equivalent of an RGBA color.
            </summary>
            <param name="rgb">Target color in RGBA space.</param>
            <returns>The LCH equivalent of the RGBA color.</returns>
            <since>7.1</since>
        </member>
        <member name="M:Rhino.Display.ColorLCH.CreateFromHSL(Rhino.Display.ColorHSL)">
            <summary>
            Create the nearest LCH equivalent of an HSL color.
            </summary>
            <param name="hsl">Target color in HSL space.</param>
            <returns>The LCH equivalent of the HSL color.</returns>
            <since>5.0</since>
        </member>
        <member name="M:Rhino.Display.ColorLCH.CreateFromCMYK(Rhino.Display.ColorCMYK)">
            <summary>
            Create the nearest LCH equivalent of a CMYK color.
            </summary>
            <param name="cmyk">Target color in CMYK space.</param>
            <returns>The LCH equivalent of the CMYK color.</returns>
            <since>5.0</since>
        </member>
        <member name="M:Rhino.Display.ColorLCH.CreateFromXYZ(Rhino.Display.ColorXYZ)">
            <summary>
            Create the nearest LCH equivalent of an XYZ color.
            </summary>
            <param name="xyz">Target color in XYZ space.</param>
            <returns>The LCH equivalent of the XYZ color.</returns>
            <since>5.0</since>
        </member>
        <member name="M:Rhino.Display.ColorLCH.CreateFromLAB(Rhino.Display.ColorLAB)">
            <summary>
            Create the nearest LCH equivalent of a LAB color.
            </summary>
            <param name="lab">Target color in LAB space.</param>
            <returns>The LCH equivalent of the LAB color.</returns>
            <since>5.0</since>
        </member>
        <member name="M:Rhino.Display.ColorLCH.op_Implicit(Rhino.Display.ColorLCH)~System.Drawing.Color">
            <summary>
            Implicitly converts a LCH color into a .Net library color.
            </summary>
            <param name="lch">A LCH color.</param>
            <returns>A ARGB .Net library color.</returns>
        </member>
        <member name="P:Rhino.Display.ColorLCH.L">
            <summary>
            Gets or sets the Lightness channel.
            </summary>
            <since>5.0</since>
        </member>
        <member name="P:Rhino.Display.ColorLCH.C">
            <summary>
            Gets or sets the Chroma channel. Chroma is defined from -1.0 to +1.0.
            </summary>
            <since>5.0</since>
        </member>
        <member name="P:Rhino.Display.ColorLCH.H">
            <summary>
            Gets or sets the Hue channel. The hue channel is limited to the 0~360 degree range.
            </summary>
            <since>5.0</since>
        </member>
        <member name="P:Rhino.Display.ColorLCH.A">
            <summary>
            Gets or sets the Alpha channel. The Alpha channel is limited to the 0~1 range.
            </summary>
            <since>5.0</since>
        </member>
        <member name="M:Rhino.Display.ColorLCH.MakePositive">
            <summary>
            Ensure the Chromaticity of this color is positive. 
            </summary>
            <since>5.0</since>
        </member>
        <member name="T:Rhino.Display.ColorHSV">
            <summary>
            Represents an HSV (Hue, Saturation, Value) color with double precision floating point channels. 
            HSV colors (also sometimes called HSB, where B means Brightness) are similar to HSL colors in that they
            represent colors in a cylindrical color space, and are intended to provide intuitive means to edit the 
            brightness of a particular color over RGB color space where each color channel would need to be 
            modified to affect the color brightness.
            </summary>
        </member>
        <member name="F:Rhino.Display.ColorHSV.m_a">
            <summary>
            Alpha values are inverted internally! 0 = opaque; 1 = transparent!
            </summary>
        </member>
        <member name="M:Rhino.Display.ColorHSV.#ctor(System.Drawing.Color)">
            <summary>
            Constructs a new instance of ColorHSV that is equivalent to an ARGB color.
            </summary>
            <param name="rgb">ARGB color to mimic.</param>
            <remarks>Exact conversions between color spaces are often not possible.</remarks>
            <since>6.0</since>
        </member>
        <member name="M:Rhino.Display.ColorHSV.#ctor(System.Double,System.Double,System.Double)">
            <summary>
            Constructs a new instance of ColorHSV with custom channel values.
            </summary>
            <param name="hue">Hue channel value. Hue channels rotate between 0.0 and 1.0.</param>
            <param name="saturation">Saturation channel value. Channel will be limited to 0~1.</param>
            <param name="value">Value (Brightness) channel value. Channel will be limited to 0~1.</param>
            <since>6.0</since>
        </member>
        <member name="M:Rhino.Display.ColorHSV.#ctor(System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Constructs a new instance of ColorHSV with custom channel values.
            </summary>
            <param name="alpha">Alpha channel value. Channel will be limited to 0~1.</param>
            <param name="hue">Hue channel value. Hue channels rotate between 0.0 and 1.0.</param>
            <param name="saturation">Saturation channel value. Channel will be limited to 0~1.</param>
            <param name="value">Value (Brightness) channel value. Channel will be limited to 0~1.</param>
            <since>6.0</since>
        </member>
        <member name="M:Rhino.Display.ColorHSV.CreateFromRGBA(Rhino.Display.ColorRGBA)">
            <summary>
            Create the nearest HSV equivalent of a RGBA color.
            </summary>
            <param name="rgba">Target color in RGBA space.</param>
            <returns>The HSV equivalent of the RGBA color.</returns>
            <since>7.0</since>
        </member>
        <member name="M:Rhino.Display.ColorHSV.CreateFromHSL(Rhino.Display.ColorHSL)">
            <summary>
            Constructs the nearest HSV equivalent of an HSL color.
            </summary>
            <param name="hsl">Target color in HSL space.</param>
            <returns>The HSV equivalent of the HSL color.</returns>
            <since>6.0</since>
        </member>
        <member name="M:Rhino.Display.ColorHSV.CreateFromCMYK(Rhino.Display.ColorCMYK)">
            <summary>
            Create the nearest HSV equivalent of a CMYK color.
            </summary>
            <param name="cmyk">Target color in CMYK space.</param>
            <returns>The HSV equivalent of the CMYK color.</returns>
            <since>6.0</since>
        </member>
        <member name="M:Rhino.Display.ColorHSV.CreateFromXYZ(Rhino.Display.ColorXYZ)">
            <summary>
            Create the nearest HSV equivalent of an XYZ color.
            </summary>
            <param name="xyz">Target color in XYZ space.</param>
            <returns>The HSV equivalent of the XYZ color.</returns>
            <since>6.0</since>
        </member>
        <member name="M:Rhino.Display.ColorHSV.CreateFromLAB(Rhino.Display.ColorLAB)">
            <summary>
            Create the nearest HSV equivalent of a LAB color.
            </summary>
            <param name="lab">Target color in LAB space.</param>
            <returns>The HSV equivalent of the LAB color.</returns>
            <since>6.0</since>
        </member>
        <member name="M:Rhino.Display.ColorHSV.CreateFromLCH(Rhino.Display.ColorLCH)">
            <summary>
            Create the nearest HSV equivalent of a LCH color.
            </summary>
            <param name="lch">Target color in LCH space.</param>
            <returns>The HSV equivalent of the LCH color.</returns>
            <since>6.0</since>
        </member>
        <member name="M:Rhino.Display.ColorHSV.op_Implicit(Rhino.Display.ColorHSV)~System.Drawing.Color">
            <summary>
            Implicitly converts a ColorHSV in a .Net library color.
            </summary>
            <param name="hsv">A HSV color.</param>
            <returns>A ARGB .Net library color.</returns>
        </member>
        <member name="P:Rhino.Display.ColorHSV.H">
            <summary>
            Gets or sets the hue channel value. 
            Hue channels rotate between 0.0 and 1.0.
            </summary>
            <since>6.0</since>
        </member>
        <member name="P:Rhino.Display.ColorHSV.S">
            <summary>
            Gets or sets the saturation channel value. 
            Saturation channels are limited to a 0~1 range.
            </summary>
            <since>6.0</since>
        </member>
        <member name="P:Rhino.Display.ColorHSV.V">
            <summary>
            Gets or sets the value (brightness) channel value. 
            Value channels are limited to a 0~1 range.
            </summary>
            <since>6.0</since>
        </member>
        <member name="P:Rhino.Display.ColorHSV.A">
            <summary>
            Gets or sets the alpha channel value. 
            Alpha channels are limited to a 0~1 range.
            </summary>
            <since>6.0</since>
        </member>
        <member name="M:Rhino.Display.ColorHSV.ToArgbColor">
            <summary>
            Convert HSV color to an equivalent System.Drawing.Color.
            </summary>
            <returns>A .Net framework library color value.</returns>
            <since>6.0</since>
        </member>
        <member name="T:Rhino.Display.ColorConverter">
            <summary>
            Exposes static color conversion methods.
            </summary>
        </member>
        <member name="M:Rhino.Display.ColorConverter.RGB_To_HSV(System.Double,System.Double,System.Double,System.Double@,System.Double@,System.Double@)">
            <summary>
            Converts RGB space colors to HSV. 
            </summary>
            <param name="r">Red channel (0.0~1.0)</param>
            <param name="g">Green channel (0.0~1.0)</param>
            <param name="b">Blue channel (0.0~1.0)</param>
            <param name="h">Hue channel (0.0~1.0)</param>
            <param name="s">Saturation channel (0.0~1.0)</param>
            <param name="v">Value (Brightness) channel (0.0~1.0)</param>
        </member>
        <member name="M:Rhino.Display.ColorConverter.HSV_To_RGB(System.Double,System.Double,System.Double,System.Double@,System.Double@,System.Double@)">
            <summary>
            Converts HSV space colors to RGB. 
            </summary>
            <param name="h">Hue channel (0.0~1.0)</param>
            <param name="s">Saturation channel (0.0~1.0)</param>
            <param name="v">Value (Brightness) channel (0.0~1.0)</param>
            <param name="r">Red channel (0.0~1.0)</param>
            <param name="g">Green channel (0.0~1.0)</param>
            <param name="b">Blue channel (0.0~1.0)</param>
        </member>
        <member name="M:Rhino.Display.ColorConverter.XYZ_To_RGB(System.Double,System.Double,System.Double,System.Double@,System.Double@,System.Double@)">
            <summary>
            Converts XYZ space colors to RGB.
            </summary>
            <param name="x">X channel (0.0~1.0)</param>
            <param name="y">Y channel (0.0~1.0)</param>
            <param name="z">Z channel (0.0~1.0)</param>
            <param name="r">Red channel (0.0~1.0)</param>
            <param name="g">Green channel (0.0~1.0)</param>
            <param name="b">Blue channel (0.0~1.0)</param>
        </member>
        <member name="M:Rhino.Display.ColorConverter.RGB_To_XYZ(System.Double,System.Double,System.Double,System.Double@,System.Double@,System.Double@)">
            <summary>
            Converts RGB space colors to XYZ. 
            </summary>
            <param name="r">Red channel (0.0~1.0)</param>
            <param name="g">Green channel (0.0~1.0)</param>
            <param name="b">Blue channel (0.0~1.0)</param>
            <param name="x">X channel (0.0~1.0)</param>
            <param name="y">Y channel (0.0~1.0)</param>
            <param name="z">Z channel (0.0~1.0)</param>
        </member>
        <member name="M:Rhino.Display.ColorConverter.XYZ_To_CIELAB(System.Double,System.Double,System.Double,System.Double@,System.Double@,System.Double@)">
            <summary>
            Converts XYZ space colors to CIE-L*ab. 
            </summary>
            <param name="x">X channel (0.0~1.0)</param>
            <param name="y">Y channel (0.0~1.0)</param>
            <param name="z">Z channel (0.0~1.0)</param>
            <param name="l">Luminance channel (0.0~1.0)</param>
            <param name="a">A channel (0.0~1.0)</param>
            <param name="b">B channel (0.0~1.0)</param>
        </member>
        <member name="M:Rhino.Display.ColorConverter.CIELAB_To_XYZ(System.Double,System.Double,System.Double,System.Double@,System.Double@,System.Double@)">
            <summary>
            Converts CIE-L*ab space colors to XYZ. 
            </summary>
            <param name="l">Luminance channel (0.0~1.0)</param>
            <param name="a">A channel (0.0~1.0)</param>
            <param name="b">B channel (0.0~1.0)</param>
            <param name="x">X channel (0.0~1.0)</param>
            <param name="y">Y channel (0.0~1.0)</param>
            <param name="z">Z channel (0.0~1.0)</param>
        </member>
        <member name="M:Rhino.Display.ColorConverter.CIELAB_To_CIELCH(System.Double,System.Double,System.Double,System.Double@,System.Double@,System.Double@)">
            <summary>
            Converts CIE-L*ab space colors to CIE-L*CH. 
            </summary>
            <param name="l">Luminance channel (0.0~1.0)</param>
            <param name="a">A channel (0.0~1.0)</param>
            <param name="b">B channel (0.0~1.0)</param>
            <param name="lum">Luminance channel (0.0~1.0)</param>
            <param name="c">Chroma channel (0.0~1.0)</param>
            <param name="h">Hue channel (0.0~1.0)</param>
        </member>
        <member name="M:Rhino.Display.ColorConverter.CIELCH_To_CIELAB(System.Double,System.Double,System.Double,System.Double@,System.Double@,System.Double@)">
            <summary>
            Converts CIE-L*CH space colors to CIE-L*ab. 
            </summary>
            <param name="lum">Luminance channel (0.0~1.0)</param>
            <param name="c">Chroma channel (0.0~1.0)</param>
            <param name="h">Hue channel (0.0~1.0)</param>
            <param name="l">Luminance channel (0.0~1.0)</param>
            <param name="a">A channel (0.0~1.0)</param>
            <param name="b">B channel (0.0~1.0)</param>
        </member>
        <member name="M:Rhino.Display.ColorConverter.RGB_To_HSL(System.Double,System.Double,System.Double,System.Double@,System.Double@,System.Double@)">
            <summary>
            Converts RGB space colors to HSL. 
            </summary>
            <param name="r">Red channel (0.0~1.0)</param>
            <param name="g">Green channel (0.0~1.0)</param>
            <param name="b">Blue channel (0.0~1.0)</param>
            <param name="h">Hue channel (0.0~1.0)</param>
            <param name="s">Saturation channel (0.0~1.0)</param>
            <param name="l">Luminance channel (0.0~1.0)</param>
        </member>
        <member name="M:Rhino.Display.ColorConverter.HSL_To_RGB(System.Double,System.Double,System.Double,System.Double@,System.Double@,System.Double@)">
            <summary>
            Converts HSL space colors to RGB. 
            </summary>
            <param name="h">Hue channel (0.0~1.0)</param>
            <param name="s">Saturation channel (0.0~1.0)</param>
            <param name="l">Luminance channel (0.0~1.0)</param>
            <param name="r">Red channel (0.0~1.0)</param>
            <param name="g">Green channel (0.0~1.0)</param>
            <param name="b">Blue channel (0.0~1.0)</param>
        </member>
        <member name="M:Rhino.Display.ColorConverter.RGB_To_CMY(System.Byte,System.Byte,System.Byte,System.Double@,System.Double@,System.Double@)">
            <summary>
            Converts RGB space colors to CMY. 
            </summary>
            <param name="r">Red channel (0~255)</param>
            <param name="g">Green channel (0~255)</param>
            <param name="b">Blue channel (0~255)</param>
            <param name="c">Cyan channel (0.0~1.0)</param>
            <param name="m">Magenta channel (0.0~1.0)</param>
            <param name="y">Yellow channel (0.0~1.0)</param>
        </member>
        <member name="M:Rhino.Display.ColorConverter.CMY_To_RGB(System.Double,System.Double,System.Double,System.Byte@,System.Byte@,System.Byte@)">
            <summary>
            Converts CMY space colors to RGB. 
            </summary>
            <param name="c">Cyan channel (0.0~1.0)</param>
            <param name="y">Yellow channel (0.0~1.0)</param>
            <param name="m">Magenta channel (0.0~1.0)</param>
            <param name="r">Red channel (0~255)</param>
            <param name="g">Green channel (0~255)</param>
            <param name="b">Blue channel (0~255)</param>
        </member>
        <member name="M:Rhino.Display.ColorConverter.CMY_To_CMYK(System.Double,System.Double,System.Double,System.Double@,System.Double@,System.Double@,System.Double@)">
            <summary>
            Converts CMY space colors to CMYK. 
            </summary>
            <param name="c">Cyan channel (0.0~1.0)</param>
            <param name="y">Yellow channel (0.0~1.0)</param>
            <param name="m">Magenta channel (0.0~1.0)</param>
            <param name="cyan">Cyan channel (0.0~1.0)</param>
            <param name="magenta">Magenta channel (0.0~1.0)</param>
            <param name="yellow">Yellow channel (0.0~1.0)</param>
            <param name="k">Key channel (0.0~1.0)</param>
        </member>
        <member name="M:Rhino.Display.ColorConverter.CMYK_To_CMY(System.Double,System.Double,System.Double,System.Double,System.Double@,System.Double@,System.Double@)">
            <summary>
            Converts CMYK space colors to CMY. 
            </summary>
            <param name="cyan">Cyan channel (0.0~1.0)</param>
            <param name="magenta">Magenta channel (0.0~1.0)</param>
            <param name="yellow">Yellow channel (0.0~1.0)</param>
            <param name="key">Key channel (0.0~1.0)</param>
            <param name="c">Cyan channel (0.0~1.0)</param>
            <param name="y">Yellow channel (0.0~1.0)</param>
            <param name="m">Magenta channel (0.0~1.0)</param>
        </member>
        <member name="T:Rhino.Display.DefinedViewportProjection">
            <summary>Parallel and perspective projections that are "standard" in Rhino</summary>
            <since>5.0</since>
        </member>
        <member name="T:Rhino.Display.ViewportType">
            <since>5.0</since>
        </member>
        <member name="T:Rhino.Collections.ArchivableDictionary">
            <summary>
            <para>Represents a dictionary class that can be attached to objects and
            can be serialized (saved) at necessity.</para>
            <para>See remarks for layout.</para>
            </summary>
            <remarks>
            <para>This is the layout of this object:</para>
            <para>.</para>
            <para>BEGINCHUNK (TCODE_ANONYMOUS_CHUNK)</para>
            <para>|- version (int)</para>
            <para>|- entry count (int)</para>
            <para>   for entry count entries</para>
            <para>   |- BEGINCHUNK (TCODE_ANONYMOUS_CHUNK)</para>
            <para>   |- key (string)</para>
            <para>   |- entry contents</para>
            <para>   |- ENDCHUNK (TCODE_ANONYMOUS_CHUNK)</para>
            <para>ENDCHUNK (TCODE_ANONYMOUS_CHUNK)</para>
            </remarks>
        </member>
        <member name="F:Rhino.Collections.ArchivableDictionary.m_change_serial_number">
            <summary>
            Counter that gets updated each time a new item is set or an existing one is updated. Used
            to track changes to the ArchivableDictionary.
            </summary>
        </member>
        <member name="P:Rhino.Collections.ArchivableDictionary.Version">
            <summary>
            Gets or sets the version of this <see cref="T:Rhino.Collections.ArchivableDictionary"/>.
            </summary>
            <since>5.0</since>
        </member>
        <member name="P:Rhino.Collections.ArchivableDictionary.Name">
            <summary>
            Gets or sets the name string of this <see cref="T:Rhino.Collections.ArchivableDictionary"/>.
            </summary>
            <since>5.0</since>
        </member>
        <member name="P:Rhino.Collections.ArchivableDictionary.ChangeSerialNumber">
            <summary>
            Retrieve current change serial number. This is a number that
            gets increased each time a datum is set or changed.
            </summary>
            <since>7.8</since>
        </member>
        <member name="M:Rhino.Collections.ArchivableDictionary.#ctor">
            <summary>Initializes an instance of a dictionary for writing to a 3dm archive.</summary>
            <since>5.0</since>
        </member>
        <member name="M:Rhino.Collections.ArchivableDictionary.#ctor(Rhino.DocObjects.Custom.UserData)">
            <summary>Initializes an instance of a dictionary for writing to a 3dm archive</summary>
            <param name="parentUserData">
            parent user data if this dictionary is associated with user data
            </param>
            <since>5.0</since>
        </member>
        <member name="M:Rhino.Collections.ArchivableDictionary.#ctor(System.Int32)">
            <summary>Initializes an instance of a dictionary for writing to a 3dm archive.</summary>
            <param name="version">
            Custom version used to help the plug-in developer determine which version of
            a dictionary is being written. One good way to write version information is to
            use a date style integer (YYYYMMDD)
            </param>
            <since>5.0</since>
        </member>
        <member name="M:Rhino.Collections.ArchivableDictionary.#ctor(System.Int32,System.String)">
            <summary>Initializes an instance of a dictionary for writing to a 3dm archive.</summary>
            <param name="version">
             custom version used to help the plug-in developer determine which version of
             a dictionary is being written. One good way to write version information is to
             use a date style integer (YYYYMMDD)
            </param>
            <param name="name">
             Optional name to associate with this dictionary.
             NOTE: if this dictionary is set as a sub-dictionary, the name will be changed to
             the sub-dictionary key entry
            </param>
             <since>5.0</since>
        </member>
        <member name="M:Rhino.Collections.ArchivableDictionary.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Protected constructor for internal use.
            </summary>
            <param name="info">Serialization data.</param>
            <param name="context">Serialization stream.</param>
        </member>
        <member name="M:Rhino.Collections.ArchivableDictionary.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Populates a System.Runtime.Serialization.SerializationInfo with the data needed to serialize the target object.
            </summary>
            <param name="info">The System.Runtime.Serialization.SerializationInfo to populate with data.</param>
            <param name="context">The destination (see System.Runtime.Serialization.StreamingContext) for this serialization.</param>
            <since>7.0</since>
        </member>
        <member name="P:Rhino.Collections.ArchivableDictionary.ParentUserData">
            <summary>
            If this dictionary is part of user-data (or is a UserDictionary), then
            this is the parent user data. null if this dictionary is not part of
            user-data
            </summary>
            <since>5.0</since>
        </member>
        <member name="M:Rhino.Collections.ArchivableDictionary.SetParentUserData(Rhino.DocObjects.Custom.UserData)">
            <summary>
            Recursively sets the parent user data for this dictionary
            </summary>
            <param name="parent"></param>
        </member>
        <member name="M:Rhino.Collections.ArchivableDictionary.Read(Rhino.FileIO.BinaryArchiveReader,Rhino.Collections.ArchivableDictionary)">
            <summary>Reads a dictionary from an archive.</summary>
            <param name='archive'>
            The archive to read from. The archive position should be at the beginning of
            the dictionary
            </param>
            <param name="dict">optional</param>
            <returns>new filled dictionary on success. null on failure.</returns>
        </member>
        <member name="M:Rhino.Collections.ArchivableDictionary.Write(Rhino.FileIO.BinaryArchiveWriter)">
            <summary>
            Writes this dictionary to an archive.
            </summary>
            <param name="archive">The archive to write to.</param>
            <returns>true on success.</returns>
        </member>
        <member name="P:Rhino.Collections.ArchivableDictionary.Keys">
            <summary>Gets all entry names or keys.</summary>
            <since>5.0</since>
        </member>
        <member name="P:Rhino.Collections.ArchivableDictionary.Values">
            <summary>Gets all values in this dictionary.</summary>
            <since>5.0</since>
        </member>
        <member name="M:Rhino.Collections.ArchivableDictionary.ContainsKey(System.String)">
            <summary>
            Determines whether the dictionary contains the specified key.
            </summary>
            <param name="key">The key to locate.</param>
            <returns>true if the dictionary contains an element with the specified key; otherwise, false.</returns>
            <exception cref="T:System.ArgumentNullException">key is null.</exception>
            <since>5.0</since>
        </member>
        <member name="P:Rhino.Collections.ArchivableDictionary.Item(System.String)">
            <summary>
            Gets the value associated with the specified key.
            </summary>
            <param name="key">The key of the value to get or set.</param>
            <returns>
            The value associated with the specified key. If the specified key is not
            found, a get operation throws a <see cref="T:System.Collections.Generic.KeyNotFoundException"/>.
            </returns>
            <exception cref="T:System.ArgumentNullException">If the key is null.</exception>
            <exception cref="T:System.Collections.Generic.KeyNotFoundException">If the key is not found.</exception>
        </member>
        <member name="M:Rhino.Collections.ArchivableDictionary.Clear">
            <summary>
            Removes all keys and values from the dictionary.
            </summary>
            <since>5.0</since>
        </member>
        <member name="M:Rhino.Collections.ArchivableDictionary.Remove(System.String)">
            <summary>
            Removes the value with the specified key from the dictionary.
            </summary>
            <param name="key">The key of the element to remove.</param>
            <exception cref="T:System.ArgumentNullException">Key is null.</exception>
            <returns>true if the element is successfully found and removed; otherwise, false.
            This method returns false if key is not found.
            </returns>
            <since>5.0</since>
        </member>
        <member name="P:Rhino.Collections.ArchivableDictionary.Count">
            <summary>
            Gets the number of key/value pairs contained in the dictionary.
            </summary>
            <since>5.0</since>
        </member>
        <member name="M:Rhino.Collections.ArchivableDictionary.TryGetValue(System.String,System.Object@)">
            <summary>
            Gets the value associated with the specified key.
            </summary>
            <param name="key">The key of the value to get.</param>
            <param name="value">When this method returns and if the key is found,
            contains the value associated with the specified key;
            otherwise, null. This parameter is passed uninitialized.</param>
            <returns>true if the dictionary contains an element with the specified key; otherwise, false.</returns>
            <exception cref="T:System.ArgumentNullException">Key is null.</exception>
            <since>5.0</since>
        </member>
        <member name="M:Rhino.Collections.ArchivableDictionary.TryGetString(System.String,System.String@)">
            <summary>
            Get value as string, will only succeed if value was created using Set(string key, string value)
            </summary>
            <param name="key"></param>
            <param name="value"></param>
            <returns></returns>
            <since>5.0</since>
        </member>
        <member name="M:Rhino.Collections.ArchivableDictionary.GetString(System.String)">
            <summary>
            Get value as string, will only succeed if value was created using Set(string key, string value)
            </summary>
            <param name="key">The key which points to the string</param>
            <returns>The string</returns>
            <since>5.0</since>
        </member>
        <member name="M:Rhino.Collections.ArchivableDictionary.GetString(System.String,System.String)">
            <summary>
            Get value as string, will return defaultValue unless value was created using Set(string key, string value)
            </summary>
            <param name="key">The key which points to the string</param>
            <param name="defaultValue">The string</param>
            <returns></returns>
            <since>5.0</since>
        </member>
        <member name="M:Rhino.Collections.ArchivableDictionary.TryGetDictionary(System.String,Rhino.Collections.ArchivableDictionary@)">
            <summary>
            Get value as ArchivableDictionary, will only succeed if value was
            created using Set(string key, ArchivableDictionary value)
            </summary>
            <param name="key"></param>
            <param name="value"></param>
            <returns></returns>
            <since>5.9</since>
        </member>
        <member name="M:Rhino.Collections.ArchivableDictionary.GetDictionary(System.String)">
            <summary>
            Get value as ArchivableDictionary, will only succeed if value was created
            using Set(string key, ArchivableDictionary value)
            </summary>
            <param name="key"></param>
            <returns></returns>
            <since>5.9</since>
        </member>
        <member name="M:Rhino.Collections.ArchivableDictionary.GetDictionary(System.String,Rhino.Collections.ArchivableDictionary)">
            <summary>
            Get value as ArchivableDictionary, will return defaultValue unless
            value was created using Set(string key, ArchivableDictionary value)
            </summary>
            <param name="key"></param>
            <param name="defaultValue"></param>
            <returns></returns>
            <since>5.9</since>
        </member>
        <member name="M:Rhino.Collections.ArchivableDictionary.TryGetBytes(System.String,System.Byte[]@)">
            <summary>
            Get value as byte[], will only succeed if value was
            created using Set(string key, byte[] value)
            </summary>
            <param name="key"></param>
            <param name="value"></param>
            <returns></returns>
            <since>5.9</since>
        </member>
        <member name="M:Rhino.Collections.ArchivableDictionary.GetBytes(System.String)">
            <summary>
            Get value as byte[], will only succeed if value was created
            using Set(string key, byte[] value)
            </summary>
            <param name="key"></param>
            <returns></returns>
            <since>5.9</since>
        </member>
        <member name="M:Rhino.Collections.ArchivableDictionary.GetBytes(System.String,System.Byte[])">
            <summary>
            Get value as byte[], will return defaultValue unless
            value was created using Set(string key, byte[] value)
            </summary>
            <param name="key"></param>
            <param name="defaultValue"></param>
            <returns></returns>
            <since>5.9</since>
        </member>
        <member name="M:Rhino.Collections.ArchivableDictionary.TryGetBool(System.String,System.Boolean@)">
            <summary>
            Get value as Boolean, will only succeed if value was created using Set(string key, Boolean value)
            </summary>
            <param name="key"></param>
            <param name="value"></param>
            <returns></returns>
            <since>5.0</since>
        </member>
        <member name="M:Rhino.Collections.ArchivableDictionary.GetBool(System.String)">
            <summary>
            Get value as Boolean, will only succeed if value was created using Set(string key, Boolean value)
            </summary>
            <param name="key"></param>
            <returns></returns>
            <since>5.0</since>
        </member>
        <member name="M:Rhino.Collections.ArchivableDictionary.GetBool(System.String,System.Boolean)">
            <summary>
            Get value as Boolean, will return defaultValue unless value was created using Set(string key, Boolean value)
            </summary>
            <param name="key"></param>
            <param name="defaultValue"></param>
            <returns></returns>
            <since>5.0</since>
        </member>
        <member name="M:Rhino.Collections.ArchivableDictionary.TryGetFloat(System.String,System.Single@)">
            <summary>
            Get value as float, will only succeed if value was created using Set(string key, float value)
            </summary>
            <param name="key"></param>
            <param name="value"></param>
            <returns></returns>
            <since>5.0</since>
        </member>
        <member name="M:Rhino.Collections.ArchivableDictionary.GetFloat(System.String)">
            <summary>
            Get value as float, will only succeed if value was created using Set(string key, float value)
            </summary>
            <param name="key"></param>
            <returns></returns>
            <since>5.0</since>
        </member>
        <member name="M:Rhino.Collections.ArchivableDictionary.GetFloat(System.String,System.Single)">
            <summary>
            Get value as float, will return defaultValue unless value was created using Set(string key, float value)
            </summary>
            <param name="key"></param>
            <param name="defaultValue"></param>
            <returns></returns>
            <since>5.0</since>
        </member>
        <member name="M:Rhino.Collections.ArchivableDictionary.TryGetDouble(System.String,System.Double@)">
            <summary>
            Get value as double, will only succeed if value was created using Set(string key, double value)
            </summary>
            <param name="key"></param>
            <param name="value"></param>
            <returns></returns>
            <since>5.0</since>
        </member>
        <member name="M:Rhino.Collections.ArchivableDictionary.GetDouble(System.String)">
            <summary>
            Get value as double, will only succeed if value was created using Set(string key, double value)
            </summary>
            <param name="key"></param>
            <returns></returns>
            <since>5.0</since>
        </member>
        <member name="M:Rhino.Collections.ArchivableDictionary.GetDouble(System.String,System.Double)">
            <summary>
            Get value as double, will only succeed if value was created using Set(string key, double value)
            </summary>
            <param name="key"></param>
            <param name="defaultValue"></param>
            <returns></returns>
            <since>5.10</since>
        </member>
        <member name="M:Rhino.Collections.ArchivableDictionary.GetInteger(System.String,System.Int32)">
            <summary>
            Get value as int, will return defaultValue unless value was created using Set(string key, int value)
            </summary>
            <param name="key"></param>
            <param name="defaultValue"></param>
            <returns></returns>
            <since>5.0</since>
        </member>
        <member name="M:Rhino.Collections.ArchivableDictionary.TryGetInteger(System.String,System.Int32@)">
            <summary>
            Get value as int, will only succeed if value was created using Set(string key, int value)
            </summary>
            <param name="key"></param>
            <param name="value"></param>
            <returns></returns>
            <since>5.0</since>
        </member>
        <member name="M:Rhino.Collections.ArchivableDictionary.GetInteger(System.String)">
            <summary>
            Get value as int, will only succeed if value was created using Set(string key, int value)
            </summary>
            <param name="key"></param>
            <returns></returns>
            <since>5.0</since>
        </member>
        <member name="M:Rhino.Collections.ArchivableDictionary.Getint(System.String,System.Int32)">
            <summary>
            Get value as int, will return defaultValue unless value was created using Set(string key, int value)
            </summary>
            <param name="key"></param>
            <param name="defaultValue"></param>
            <returns></returns>
            <since>5.0</since>
        </member>
        <member name="M:Rhino.Collections.ArchivableDictionary.TryGetPoint3f(System.String,Rhino.Geometry.Point3f@)">
            <summary>
            Get value as Point3f, will only succeed if value was created using Set(string key, Point3f value)
            </summary>
            <param name="key"></param>
            <param name="value"></param>
            <returns></returns>
            <since>5.0</since>
        </member>
        <member name="M:Rhino.Collections.ArchivableDictionary.GetPoint3f(System.String)">
            <summary>
            Get value as Point3f, will only succeed if value was created using Set(string key, Point3f value)
            </summary>
            <param name="key"></param>
            <returns></returns>
            <since>5.0</since>
        </member>
        <member name="M:Rhino.Collections.ArchivableDictionary.GetPoint3f(System.String,Rhino.Geometry.Point3f)">
            <summary>
            Get value as Point3f, will return defaultValue unless value was created using Set(string key, Point3f value)
            </summary>
            <param name="key"></param>
            <param name="defaultValue"></param>
            <returns></returns>
            <since>5.0</since>
        </member>
        <member name="M:Rhino.Collections.ArchivableDictionary.TryGetPoint3d(System.String,Rhino.Geometry.Point3d@)">
            <summary>
            Get value as Point3d, will only succeed if value was created using Set(string key, Point3d value)
            </summary>
            <param name="key"></param>
            <param name="value"></param>
            <returns></returns>
            <since>5.0</since>
        </member>
        <member name="M:Rhino.Collections.ArchivableDictionary.GetPoint3d(System.String)">
            <summary>
            Get value as Point3d, will only succeed if value was created using Set(string key, Point3d value)
            </summary>
            <param name="key"></param>
            <returns></returns>
            <since>5.0</since>
        </member>
        <member name="M:Rhino.Collections.ArchivableDictionary.GetPoint3d(System.String,Rhino.Geometry.Point3d)">
            <summary>
            Get value as Point3d, will return defaultValue unless value was created using Set(string key, Point3d value)
            </summary>
            <param name="key"></param>
            <param name="defaultValue"></param>
            <returns></returns>
            <since>5.0</since>
        </member>
        <member name="M:Rhino.Collections.ArchivableDictionary.TryGetVector3d(System.String,Rhino.Geometry.Vector3d@)">
            <summary>
            Get value as Vector3d, will only succeed if value was created using Set(string key, Vector3d value)
            </summary>
            <param name="key"></param>
            <param name="value"></param>
            <returns></returns>
            <since>5.0</since>
        </member>
        <member name="M:Rhino.Collections.ArchivableDictionary.GetVector3d(System.String)">
            <summary>
            Get value as Vector3d, will only succeed if value was created using Set(string key, Vector3d value)
            </summary>
            <param name="key"></param>
            <returns></returns>
            <since>5.0</since>
        </member>
        <member name="M:Rhino.Collections.ArchivableDictionary.GetVector3d(System.String,Rhino.Geometry.Vector3d)">
            <summary>
            Get value as Vector3d, will return defaultValue unless value was created using Set(string key, Vector3d value)
            </summary>
            <param name="key"></param>
            <param name="defaultValue"></param>
            <returns></returns>
            <since>5.0</since>
        </member>
        <member name="M:Rhino.Collections.ArchivableDictionary.TryGetGuid(System.String,System.Guid@)">
            <summary>
            Get value as Guid, will only succeed if value was created using Set(string key, Guid value)
            </summary>
            <param name="key"></param>
            <param name="value"></param>
            <returns></returns>
            <since>5.0</since>
        </member>
        <member name="M:Rhino.Collections.ArchivableDictionary.GetGuid(System.String)">
            <summary>
            Get value as Guid, will only succeed if value was created using Set(string key, Guid value)
            </summary>
            <param name="key"></param>
            <returns></returns>
            <since>5.0</since>
        </member>
        <member name="M:Rhino.Collections.ArchivableDictionary.GetGuid(System.String,System.Guid)">
            <summary>
            Get value as Guid, will return defaultValue unless value was created using Set(string key, Guid value)
            </summary>
            <param name="key"></param>
            <param name="defaultValue"></param>
            <returns></returns>
            <since>5.0</since>
        </member>
        <member name="M:Rhino.Collections.ArchivableDictionary.TryGetPlane(System.String,Rhino.Geometry.Plane@)">
            <summary>
            Get value as Plane, will only succeed if value was created using Set(string key, Plane value)
            </summary>
            <param name="key">The key.</param>
            <param name="value">The value.</param>
            <returns>The value as Plane.</returns>
            <since>6.11</since>
        </member>
        <member name="M:Rhino.Collections.ArchivableDictionary.GetPlane(System.String)">
            <summary>
            Get value as Plane, will return defaultValue unless value was created using Set(string key, Plane value)
            </summary>
            <param name="key">The key.</param>
            <returns>The value as Plane.</returns>
            <since>6.11</since>
        </member>
        <member name="M:Rhino.Collections.ArchivableDictionary.GetPlane(System.String,Rhino.Geometry.Plane)">
            <summary>
            Get value as Plane, will return defaultValue unless value was created using Set(string key, Plane value)
            </summary>
            <param name="key">The key.</param>
            <param name="defaultValue">The default value.</param>
            <returns>The value as Plane.</returns>
            <since>6.11</since>
        </member>
        <member name="M:Rhino.Collections.ArchivableDictionary.Set(System.String,System.Boolean)">
            <summary>
            Sets a <see cref="T:System.Boolean"/>.
            </summary>
            <param name="key">The text key.</param>
            <param name="val">A <see cref="T:System.Boolean"/> value.
            <para>Because <see cref="T:System.Boolean"/> has value semantics, changes to the assigning value will leave this entry unchanged.</para>
            </param>
            <returns>true if set operation succeeded, otherwise false.</returns>
            <since>5.0</since>
        </member>
        <member name="M:Rhino.Collections.ArchivableDictionary.Set(System.String,System.Byte)">
            <summary>
            Sets a <see cref="T:System.Byte"/>.
            </summary>
            <param name="key">The text key.</param>
            <param name="val">A <see cref="T:System.Byte"/>.
            <para>Because <see cref="T:System.Byte"/> has value semantics, changes to the assigning value will leave this entry unchanged.</para></param>
            <returns>true if set operation succeeded, otherwise false.</returns>
            <since>5.0</since>
        </member>
        <member name="M:Rhino.Collections.ArchivableDictionary.Set(System.String,System.SByte)">
            <summary>
            Sets a <see cref="T:System.SByte"/>.
            </summary>
            <param name="key">The text key.</param>
            <param name="val">A <see cref="T:System.SByte"/>.
            <para>Because <see cref="T:System.SByte"/> has value semantics, changes to the assigning value will leave this entry unchanged.</para></param>
            <returns>true if set operation succeeded, otherwise false.</returns>
            <since>5.0</since>
        </member>
        <member name="M:Rhino.Collections.ArchivableDictionary.Set(System.String,System.Int16)">
            <summary>
            Sets a <see cref="T:System.Int16"/>.
            </summary>
            <param name="key">The text key.</param>
            <param name="val">A <see cref="T:System.Int16"/>.
            <para>Because <see cref="T:System.Int16"/> has value semantics, changes to the assigning value will leave this entry unchanged.</para></param>
            <returns>true if set operation succeeded, otherwise false.</returns>
            <since>5.0</since>
        </member>
        <member name="M:Rhino.Collections.ArchivableDictionary.Set(System.String,System.UInt16)">
            <summary>
            Sets a <see cref="T:System.UInt16"/>.
            </summary>
            <param name="key">The text key.</param>
            <param name="val">A <see cref="T:System.UInt16"/>.
            <para>Because <see cref="T:System.UInt16"/> has value semantics, changes to the assigning value will leave this entry unchanged.</para></param>
            <returns>true if set operation succeeded, otherwise false.</returns>
            <since>5.0</since>
        </member>
        <member name="M:Rhino.Collections.ArchivableDictionary.Set(System.String,System.Int32)">
            <summary>
            Sets a <see cref="T:System.Int32"/>.
            </summary>
            <param name="key">The text key.</param>
            <param name="val">A <see cref="T:System.Int32"/>.
            <para>Because <see cref="T:System.Int32"/> has value semantics, changes to the assigning value will leave this entry unchanged.</para></param>
            <returns>true if set operation succeeded, otherwise false.</returns>
            <since>5.0</since>
        </member>
        <member name="M:Rhino.Collections.ArchivableDictionary.Set(System.String,System.UInt32)">
            <summary>
            Sets a <see cref="T:System.UInt32"/>.
            </summary>
            <param name="key">The text key.</param>
            <param name="val">A <see cref="T:System.UInt32"/>.
            <para>Because <see cref="T:System.UInt32"/> has value semantics, changes to the assigning value will leave this entry unchanged.</para></param>
            <returns>true if set operation succeeded, otherwise false.</returns>
            <since>5.0</since>
        </member>
        <member name="M:Rhino.Collections.ArchivableDictionary.Set(System.String,System.Int64)">
            <summary>
            Sets a <see cref="T:System.Int64"/>.
            </summary>
            <param name="key">The text key.</param>
            <param name="val">A <see cref="T:System.Int64"/>.
            <para>Because <see cref="T:System.Int64"/> has value semantics, changes to the assigning value will leave this entry unchanged.</para></param>
            <returns>true if set operation succeeded, otherwise false.</returns>
            <since>5.0</since>
        </member>
        <member name="M:Rhino.Collections.ArchivableDictionary.Set(System.String,System.Single)">
            <summary>
            Sets a <see cref="T:System.Single"/>.
            </summary>
            <param name="key">The text key.</param>
            <param name="val">A <see cref="T:System.Single"/>.
            <para>Because <see cref="T:System.Single"/> has value semantics, changes to the assigning value will leave this entry unchanged.</para></param>
            <returns>true if set operation succeeded, otherwise false.</returns>
            <since>5.0</since>
        </member>
        <member name="M:Rhino.Collections.ArchivableDictionary.Set(System.String,System.Double)">
            <summary>
            Sets a <see cref="T:System.Double"/>.
            </summary>
            <param name="key">The text key.</param>
            <param name="val">A <see cref="T:System.Double"/>.
            <para>Because <see cref="T:System.Double"/> has value semantics, changes to the assigning value will leave this entry unchanged.</para></param>
            <returns>true if set operation succeeded, otherwise false.</returns>
            <since>5.0</since>
        </member>
        <member name="M:Rhino.Collections.ArchivableDictionary.Set(System.String,System.Guid)">
            <summary>
            Sets a <see cref="T:System.Guid"/>.
            </summary>
            <param name="key">The text key.</param>
            <param name="val">A <see cref="T:System.Guid"/>.
            <para>Because <see cref="T:System.Guid"/> has value semantics, changes to the assigning value will leave this entry unchanged.</para></param>
            <returns>true if set operation succeeded, otherwise false.</returns>
            <since>5.0</since>
        </member>
        <member name="M:Rhino.Collections.ArchivableDictionary.Set(System.String,System.String)">
            <summary>
            Sets a <see cref="T:System.String"/>.
            </summary>
            <param name="key">The text key.</param>
            <param name="val">A <see cref="T:System.String"/>.
            <para>Because <see cref="T:System.String"/> is immutable, it is not possible to modify the object while it is in this dictionary.</para></param>
            <returns>true if set operation succeeded, otherwise false.</returns>
            <since>5.0</since>
        </member>
        <member name="M:Rhino.Collections.ArchivableDictionary.Set(System.String,System.Collections.Generic.IEnumerable{System.Boolean})">
            <summary>
            Sets a list, an array or any enumerable of <see cref="T:System.Boolean"/>.
            </summary>
            <param name="key">A text key.</param>
            <param name="val">A value for that key.
            <para>Because this interface is a reference type, changes to the assigned object <b>will modify</b> this entry inside the dictionary.</para>
            <para>It is up to the user to clone this entry when appropriate.</para></param>
            <returns>true if set operation succeeded, otherwise false.</returns>
            <since>5.0</since>
        </member>
        <member name="M:Rhino.Collections.ArchivableDictionary.Set(System.String,System.Collections.Generic.IEnumerable{System.Byte})">
            <summary>
            Sets a list, an array or any enumerable of <see cref="T:System.Byte"/>.
            </summary>
            <param name="key">A text key.</param>
            <param name="val">A value for that key
            <para>Because this interface is a reference type, changes to the assigned object <b>will modify</b> this entry inside the dictionary.</para>
            <para>It is up to the user to clone this entry when appropriate.</para></param>
            <returns>true if set operation succeeded, otherwise false.</returns>
            <since>5.0</since>
        </member>
        <member name="M:Rhino.Collections.ArchivableDictionary.Set(System.String,System.Collections.Generic.IEnumerable{System.SByte})">
            <summary>
            Sets a list, an array or any enumerable of <see cref="T:System.SByte"/>.
            </summary>
            <param name="key">A text key.</param>
            <param name="val">A value for that key.
            <para>Because this interface is a reference type, changes to the assigned object <b>will modify</b> this entry inside the dictionary.</para>
            <para>It is up to the user to clone this entry when appropriate.</para></param>
            <returns>true if set operation succeeded, otherwise false.</returns>
            <since>5.0</since>
        </member>
        <member name="M:Rhino.Collections.ArchivableDictionary.Set(System.String,System.Collections.Generic.IEnumerable{System.Int16})">
            <summary>
            Sets a list, an array or any enumerable of <see cref="T:System.Int16"/>.
            </summary>
            <param name="key">A text key.</param>
            <param name="val">A value for that key.
            <para>Because this interface is a reference type, changes to the assigned object <b>will modify</b> this entry inside the dictionary.</para>
            <para>It is up to the user to clone this entry when appropriate.</para></param>
            <returns>true if set operation succeeded, otherwise false.</returns>
            <since>5.0</since>
        </member>
        <member name="M:Rhino.Collections.ArchivableDictionary.Set(System.String,System.Collections.Generic.IEnumerable{System.Int32})">
            <summary>
            Sets a list, an array or any enumerable of <see cref="T:System.Int32"/>.
            </summary>
            <param name="key">A text key.</param>
            <param name="val">A value for that key.
            <para>Because this interface is a reference type, changes to the assigned object <b>will modify</b> this entry inside the dictionary.</para>
            <para>It is up to the user to clone this entry when appropriate.</para></param>
            <returns>true if set operation succeeded, otherwise false.</returns>
            <since>5.0</since>
        </member>
        <member name="M:Rhino.Collections.ArchivableDictionary.Set(System.String,System.Collections.Generic.IEnumerable{System.Single})">
            <summary>
            Sets a list, an array or any enumerable of <see cref="T:System.Single"/>.
            </summary>
            <param name="key">A text key.</param>
            <param name="val">A value for that key.
            <para>Because this interface is a reference type, changes to the assigned object <b>will modify</b> this entry inside the dictionary.</para>
            <para>It is up to the user to clone this entry when appropriate.</para></param>
            <returns>true if set operation succeeded, otherwise false.</returns>
            <since>5.0</since>
        </member>
        <member name="M:Rhino.Collections.ArchivableDictionary.Set(System.String,System.Collections.Generic.IEnumerable{System.Double})">
            <summary>
            Sets a list, an array or any enumerable of <see cref="T:System.Double"/>.
            </summary>
            <param name="key">A text key.</param>
            <param name="val">A value for that key.
            <para>Because this interface is a reference type, changes to the assigned object <b>will modify</b> this entry inside the dictionary.</para>
            <para>It is up to the user to clone this entry when appropriate.</para></param>
            <returns>true if set operation succeeded, otherwise false.</returns>
            <since>5.0</since>
        </member>
        <member name="M:Rhino.Collections.ArchivableDictionary.Set(System.String,System.Collections.Generic.IEnumerable{System.Guid})">
            <summary>
            Sets a list, an array or any enumerable of <see cref="T:System.Guid"/>.
            </summary>
            <param name="key">A text key.</param>
            <param name="val">A value for that key.
            <para>Because this interface is a reference type, changes to the assigned object <b>will modify</b> this entry inside the dictionary.</para>
            <para>It is up to the user to clone this entry when appropriate.</para></param>
            <returns>true if set operation succeeded, otherwise false.</returns>
            <since>5.0</since>
        </member>
        <member name="M:Rhino.Collections.ArchivableDictionary.Set(System.String,System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Sets a list, an array or any enumerable of <see cref="T:System.String"/>.
            </summary>
            <param name="key">A text key.</param>
            <param name="val">A value for that key.
            <para>Because this interface is a reference type, changes to the assigned object <b>will modify</b> this entry inside the dictionary.</para>
            <para>It is up to the user to clone this entry when appropriate.</para></param>
            <returns>true if set operation succeeded, otherwise false.</returns>
            <since>5.0</since>
        </member>
        <member name="M:Rhino.Collections.ArchivableDictionary.Set(System.String,System.Drawing.Color)">
            <summary>
            Sets a <see cref="T:System.Drawing.Color"/>.
            </summary>
            <param name="key">A text key.</param>
            <param name="val">A value for that key.
            <para>Because <see cref="T:System.Drawing.Color"/> has value semantics, changes to the
            assigning value will leave this entry unchanged.</para></param>
            <returns>true if set operation succeeded, otherwise false.</returns>
            <since>5.0</since>
        </member>
        <member name="M:Rhino.Collections.ArchivableDictionary.Set(System.String,System.Drawing.Point)">
            <summary>
            Sets a <see cref="T:System.Drawing.Point"/>.
            </summary>
            <param name="key">A text key.</param>
            <param name="val">A value for that key.
            <para>Because <see cref="T:System.Drawing.Point"/> has value semantics, changes to the assigning value will leave this entry unchanged.</para></param>
            <since>5.0</since>
        </member>
        <member name="M:Rhino.Collections.ArchivableDictionary.Set(System.String,System.Drawing.PointF)">
            <summary>
            Sets a <see cref="T:System.Drawing.PointF"/>.
            </summary>
            <param name="key">A text key.</param>
            <param name="val">A value for that key.
            <para>Because <see cref="T:System.Drawing.PointF"/> has value semantics, changes to the assigning value will leave this entry unchanged.</para></param>
            <since>5.0</since>
        </member>
        <member name="M:Rhino.Collections.ArchivableDictionary.Set(System.String,System.Drawing.Rectangle)">
            <summary>
            Sets a <see cref="T:System.Drawing.Rectangle"/>.
            </summary>
            <param name="key">A text key.</param>
            <param name="val">A value for that key.
            <para>Because <see cref="T:System.Drawing.Rectangle"/> has value semantics, changes to the assigning value will leave this entry unchanged.</para></param>
            <since>5.0</since>
        </member>
        <member name="M:Rhino.Collections.ArchivableDictionary.Set(System.String,System.Drawing.RectangleF)">
            <summary>
            Sets a <see cref="T:System.Drawing.RectangleF"/>.
            </summary>
            <param name="key">A text key.</param>
            <param name="val">A value for that key.
            <para>Because <see cref="T:System.Drawing.RectangleF"/> has value semantics, changes to the assigning value will leave this entry unchanged.</para></param>
            <since>5.0</since>
        </member>
        <member name="M:Rhino.Collections.ArchivableDictionary.Set(System.String,System.Drawing.Size)">
            <summary>
            Sets a <see cref="T:System.Drawing.Size"/>.
            </summary>
            <param name="key">A text key.</param>
            <param name="val">A value for that key.
            <para>Because <see cref="T:System.Drawing.Size"/> has value semantics, changes to the assigning value will leave this entry unchanged.</para></param>
            <since>5.0</since>
        </member>
        <member name="M:Rhino.Collections.ArchivableDictionary.Set(System.String,System.Drawing.SizeF)">
            <summary>
            Sets a <see cref="T:System.Drawing.SizeF"/>.
            </summary>
            <param name="key">A text key.</param>
            <param name="val">A value for that key.
            <para>Because <see cref="T:System.Drawing.SizeF"/> has value semantics, changes to the assigning value will leave this entry unchanged.</para></param>
            <since>5.0</since>
        </member>
        <member name="M:Rhino.Collections.ArchivableDictionary.Set(System.String,Rhino.Geometry.Interval)">
            <summary>
            Sets an <see cref="T:Rhino.Geometry.Interval"/>.
            </summary>
            <param name="key">A text key.</param>
            <param name="val">A value for that key.
            <para>Because <see cref="T:Rhino.Geometry.Interval"/> has value semantics, changes to the assigning value will leave this entry unchanged.</para></param>
            <since>5.0</since>
        </member>
        <member name="M:Rhino.Collections.ArchivableDictionary.Set(System.String,Rhino.Geometry.Point2d)">
            <summary>
            Sets a <see cref="T:Rhino.Geometry.Point2d"/>.
            </summary>
            <param name="key">A text key.</param>
            <param name="val">A point for that key.
            <para>Because <see cref="T:Rhino.Geometry.Point2d"/> has value semantics, changes to the assigning value will leave this entry unchanged.</para></param>
            <since>5.0</since>
        </member>
        <member name="M:Rhino.Collections.ArchivableDictionary.Set(System.String,Rhino.Geometry.Point3d)">
            <summary>
            Sets a <see cref="T:Rhino.Geometry.Point3d"/>.
            </summary>
            <param name="key">A text key.</param>
            <param name="val">A point for that key.
            <para>Because <see cref="T:Rhino.Geometry.Point3d"/> has value semantics, changes to the assigning value will leave this entry unchanged.</para></param>
            <since>5.0</since>
        </member>
        <member name="M:Rhino.Collections.ArchivableDictionary.Set(System.String,Rhino.Geometry.Point4d)">
            <summary>
            Sets a <see cref="T:Rhino.Geometry.Point4d"/>.
            </summary>
            <param name="key">A text key.</param>
            <param name="val">A value for that key.
            <para>Because <see cref="T:Rhino.Geometry.Point4d"/> has value semantics, changes to the assigning value will leave this entry unchanged.</para></param>
            <since>5.0</since>
        </member>
        <member name="M:Rhino.Collections.ArchivableDictionary.Set(System.String,Rhino.Geometry.Vector2d)">
            <summary>
            Sets a <see cref="T:Rhino.Geometry.Vector2d"/>.
            </summary>
            <param name="key">A text key.</param>
            <param name="val">A value for that key.
            <para>Because <see cref="T:Rhino.Geometry.Vector2d"/> has value semantics, changes to the assigning value will leave this entry unchanged.</para></param>
            <since>5.0</since>
        </member>
        <member name="M:Rhino.Collections.ArchivableDictionary.Set(System.String,Rhino.Geometry.Vector3d)">
            <summary>
            Sets a <see cref="T:Rhino.Geometry.Vector3d"/>.
            </summary>
            <param name="key">A text key.</param>
            <param name="val">A value for that key.
            <para>Because <see cref="T:Rhino.Geometry.Vector3d"/> has value semantics, changes to the assigning value will leave this entry unchanged.</para></param>
            <since>5.0</since>
        </member>
        <member name="M:Rhino.Collections.ArchivableDictionary.Set(System.String,Rhino.Geometry.BoundingBox)">
            <summary>
            Sets a <see cref="T:Rhino.Geometry.BoundingBox"/>.
            </summary>
            <param name="key">A text key.</param>
            <param name="val">A value for that key.
            <para>Because <see cref="T:Rhino.Geometry.BoundingBox"/> has value semantics, changes to the assigning value will leave this entry unchanged.</para></param>
            <since>5.0</since>
        </member>
        <member name="M:Rhino.Collections.ArchivableDictionary.Set(System.String,Rhino.Geometry.Ray3d)">
            <summary>
            Sets a <see cref="T:Rhino.Geometry.Ray3d"/>.
            </summary>
            <param name="key">A text key.</param>
            <param name="val">A value for that key.
            <para>Because <see cref="T:Rhino.Geometry.Ray3d"/> has value semantics and is immutable, no changes to this object are possible.</para></param>
            <since>5.0</since>
        </member>
        <member name="M:Rhino.Collections.ArchivableDictionary.Set(System.String,Rhino.Geometry.Transform)">
            <summary>
            Sets a <see cref="T:Rhino.Geometry.Transform"/>.
            </summary>
            <param name="key">A text key.</param>
            <param name="val">A transform for that key.
            <para>Because <see cref="T:Rhino.Geometry.Transform"/> has value semantics, changes to the assigning value will leave this entry unchanged.</para></param>
            <since>5.0</since>
        </member>
        <member name="M:Rhino.Collections.ArchivableDictionary.Set(System.String,Rhino.Geometry.Plane)">
            <summary>
            Sets a <see cref="T:Rhino.Geometry.Plane"/>.
            </summary>
            <param name="key">A text key.</param>
            <param name="val">A plane for that key.
            <para>Because <see cref="T:Rhino.Geometry.Plane"/> has value semantics, changes to the assigning value will leave this entry unchanged.</para></param>
            <since>5.0</since>
        </member>
        <member name="M:Rhino.Collections.ArchivableDictionary.Set(System.String,Rhino.Geometry.Line)">
            <summary>
            Sets a <see cref="T:Rhino.Geometry.Line"/>.
            </summary>
            <param name="key">A text key.</param>
            <param name="val">A value for that key.
            <para>Because <see cref="T:Rhino.Geometry.Line"/> has value semantics, changes to the assigning value will leave this entry unchanged.</para></param>
            <since>5.0</since>
        </member>
        <member name="M:Rhino.Collections.ArchivableDictionary.Set(System.String,Rhino.Geometry.Point3f)">
            <summary>
            Sets a <see cref="T:Rhino.Geometry.Point3f"/>.
            </summary>
            <param name="key">A text key.</param>
            <param name="val">A value for that key.
            <para>Because <see cref="T:Rhino.Geometry.Point3f"/> has value semantics, changes to the assigning value will leave this entry unchanged.</para></param>
            <since>5.0</since>
        </member>
        <member name="M:Rhino.Collections.ArchivableDictionary.Set(System.String,Rhino.Geometry.Vector3f)">
            <summary>
            Sets a <see cref="T:Rhino.Geometry.Vector3f"/>.
            </summary>
            <param name="key">A text key.</param>
            <param name="val">A value for that key.
            <para>Because <see cref="T:Rhino.Geometry.Vector3f"/> has value semantics, changes to the assigning value will leave this entry unchanged.</para></param>
            <since>5.0</since>
        </member>
        <member name="M:Rhino.Collections.ArchivableDictionary.Set(System.String,Rhino.Collections.ArchivableDictionary)">
            <summary>
            Sets another <see cref="T:Rhino.Collections.ArchivableDictionary"/> as entry in this dictionary.
            </summary>
            <param name="key">A text key.</param>
            <param name="val">An object for that key.
            <para>Because this class is a reference type and is mutable, changes to this object <b>will propagate</b> to the object inside the dictionary.</para>
            <para>It is up to the user to clone this entry when appropriate.</para></param>
            <since>5.0</since>
        </member>
        <member name="M:Rhino.Collections.ArchivableDictionary.Set(System.String,Rhino.Geometry.MeshingParameters)">
            <summary>
            Sets a <see cref="T:Rhino.Geometry.MeshingParameters"/>.
            </summary>
            <param name="key">A text key.</param>
            <param name="val">An object for that key.
            <para>Because this class is a reference type and is mutable, changes to this object <b>will propagate</b> to the object inside the dictionary.</para>
            <para>It is up to the user to clone this entry when appropriate.</para></param>
            <since>5.0</since>
        </member>
        <member name="M:Rhino.Collections.ArchivableDictionary.Set(System.String,Rhino.Geometry.GeometryBase)">
            <summary>
            Sets any class deriving from the <see cref="T:Rhino.Geometry.GeometryBase"/> base class.
            </summary>
            <param name="key">A text key.</param>
            <param name="val">A geometry object for that key.
            <para>Because this class is a reference type and is mutable, changes to this object <b>will propagate</b> to the object inside the dictionary.</para>
            <para>It is up to the user to clone this entry when appropriate. You can use <see cref="M:Rhino.Geometry.GeometryBase.Duplicate"/> for this.</para></param>
            <since>5.0</since>
        </member>
        <member name="M:Rhino.Collections.ArchivableDictionary.Set(System.String,System.Collections.Generic.IEnumerable{Rhino.Geometry.GeometryBase})">
            <summary>
            Sets an array of <see cref="T:Rhino.Geometry.GeometryBase"/>
            </summary>
            <param name="key">A text key</param>
            <param name="val">An object for that key
            <para>Because this class is a reference type and is mutable, changes to this object <b>will propagate</b> to the object inside the dictionary.</para>
            <para>It is up to the user to clone this entry when appropriate.</para></param>
            <returns>true if successful, false otherwise.</returns>
            <since>7.0</since>
        </member>
        <member name="M:Rhino.Collections.ArchivableDictionary.SetEnumValue``1(``0)">
            <summary>
            Set an enum value
            </summary>
            <typeparam name="T"></typeparam>
            <param name="enumValue"></param>
            <returns></returns>
            <since>5.4</since>
        </member>
        <member name="M:Rhino.Collections.ArchivableDictionary.SetEnumValue``1(System.String,``0)">
            <summary>
            Set an enum value in the dictionary with a custom key.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="key"></param>
            <param name="enumValue"></param>
            <returns></returns>
            <since>5.4</since>
        </member>
        <member name="M:Rhino.Collections.ArchivableDictionary.GetEnumValue``1">
            <summary>
            Get an enum value
            </summary>
            <typeparam name="T"></typeparam>
            <exception cref="T:System.Collections.Generic.KeyNotFoundException">Thrown when the key is not found in the dictionary.</exception>
            <exception cref="T:System.FormatException">Thrown when the string retrieved from the dictionary is not convertible to the enum type.</exception>
            <returns></returns>
            <since>5.4</since>
        </member>
        <member name="M:Rhino.Collections.ArchivableDictionary.GetEnumValue``1(System.String)">
            <summary>
            Get an enum value from the dictionary using a custom key.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="key"></param>
            <exception cref="T:System.Collections.Generic.KeyNotFoundException">Thrown when the key is not found in the dictionary.</exception>
            <exception cref="T:System.FormatException">Thrown when the string retrieved from the dictionary is not convertible to the enum type.</exception>
            <returns></returns>
            <since>5.4</since>
        </member>
        <member name="M:Rhino.Collections.ArchivableDictionary.TryGetEnumValue``1(System.String,``0@)">
            <summary>
            Attempt to get an enum value from the dictionary using a custom key.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="key"></param>
            <param name="enumValue"></param>
            <returns></returns>
            <since>5.4</since>
        </member>
        <member name="M:Rhino.Collections.ArchivableDictionary.RemoveEnumValue``1">
            <summary>
            Remove an enum value from the dictionary.
            </summary>
            <typeparam name="T"></typeparam>
            <returns></returns>
            <since>5.4</since>
        </member>
        <member name="M:Rhino.Collections.ArchivableDictionary.AddContentsFrom(Rhino.Collections.ArchivableDictionary)">
            <summary>
            Add the contents from the source dictionary.
            </summary>
            <param name="source"></param>
            <returns></returns>
            <exception cref="T:System.ArgumentException"></exception>
            <since>5.4</since>
        </member>
        <member name="M:Rhino.Collections.ArchivableDictionary.ReplaceContentsWith(Rhino.Collections.ArchivableDictionary)">
            <summary>
            Replace the contents of the dictionary with that of the given source dictionary.
            </summary>
            <param name="source"></param>
            <returns></returns>
            <since>5.4</since>
        </member>
        <member name="M:Rhino.Collections.ArchivableDictionary.Clone">
            <summary>
            Constructs a deep copy of this object.
            </summary>
            <returns>The copy of this object.</returns>
            <since>5.0</since>
        </member>
        <member name="M:Rhino.Collections.ArchivableDictionary.System#ICloneable#Clone">
            <since>5.0</since>
        </member>
        <member name="M:Rhino.Collections.ArchivableDictionary.System#Collections#Generic#IDictionary{System#String,System#Object}#Add(System.String,System.Object)">
            <summary>
            This is not supported and always throws <see cref="T:System.NotSupportedException"/> at the moment.
            </summary>
            <param name="key">Unused.</param>
            <param name="value">Unused.</param>
        </member>
        <member name="P:Rhino.Collections.ArchivableDictionary.System#Collections#Generic#IDictionary{System#String,System#Object}#Keys">
            <since>5.0</since>
        </member>
        <member name="P:Rhino.Collections.ArchivableDictionary.System#Collections#Generic#IDictionary{System#String,System#Object}#Values">
            <since>5.0</since>
        </member>
        <member name="M:Rhino.Collections.ArchivableDictionary.GetEnumerator">
            <summary>
            Gets the enumerator of this dictionary.
            </summary>
            <returns>A <see cref="T:System.Collections.Generic.IEnumerator`1"/>, where T is an instance of <see cref="T:System.Collections.Generic.KeyValuePair`2"/>, with T0 set as string, and T1 as System.Object.</returns>
            <since>5.0</since>
        </member>
        <member name="M:Rhino.Collections.ArchivableDictionary.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Gets the enumerator of this dictionary.
            </summary>
            <returns>A <see cref="T:System.Collections.Generic.IEnumerator`1"/>, where T is an instance of <see cref="T:System.Collections.Generic.KeyValuePair`2"/>, with T0 set as string, and T1 as System.Object.</returns>
            <since>5.0</since>
        </member>
        <member name="T:Rhino.Collections.IResizableList`1">
            <summary>
            Provides the ability to resize a generic list by setting the Count property.
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="P:Rhino.Collections.IResizableList`1.Count">
            <summary>
            Gets or sets the length of the list.
            This hides (Shadows in Vb.Net) the read-only Count property of the generic list.
            </summary>
        </member>
        <member name="M:Rhino.Collections.RhinoListHelpers.GetConstArray``1(System.Collections.Generic.IEnumerable{``0},System.Int32@)">
            <summary>
            Anything calling this function should not be modifying the contents of the array.
            </summary>
            <param name="items">A list, an array or any enumerable set of anything.</param>
            <param name="count">The resulting count of elements.</param>
            <returns>An array.</returns>
        </member>
        <member name="M:Rhino.Collections.GenericIListImplementation.IndexOf``1(System.Collections.Generic.IList{``0},``0)">
            <summary>
            Provides a generic way to find an index in a Rhino table. O(n) where n is length of table.
            table needs to provide Count and indexer as backing accessors.
            This is to provide a full and reasonable implementation of the interface. People should choose other methods if better behavior is required.
            </summary>
        </member>
        <member name="M:Rhino.Collections.GenericIListImplementation.IndexOf(System.Collections.Generic.IList{Rhino.Geometry.Point3f},System.Object)">
            <summary>
            Provides a generic way to find an index in a Rhino table. O(n) where n is length of table.
            table needs to provide Count and indexer as backing accessors.
            This is to provide a full and reasonable implementation of the interface. People should choose other methods if better behavior is required.
            </summary>
        </member>
        <member name="M:Rhino.Collections.GenericIListImplementation.IndexOf(System.Collections.Generic.IList{Rhino.Geometry.Vector3f},System.Object)">
            <summary>
            Provides a generic way to find an index in a Rhino table. O(n) where n is length of table.
            table needs to provide Count and indexer as backing accessors.
            This is to provide a full and reasonable implementation of the interface. People should choose other methods if better behavior is required.
            </summary>
        </member>
        <member name="M:Rhino.Collections.GenericIListImplementation.Insert``1(Rhino.Collections.IResizableList{``0},System.Int32,``0)">
            <summary>
            Provides a generic way to insert at an index in a Rhino table. table needs to provide Count and indexer as backing accessors.
            This is to provide a full and reasonable implementation of the interface. People should choose other methods if better behavior is required.
            </summary>
        </member>
        <member name="M:Rhino.Collections.GenericIListImplementation.RemoveAt``1(Rhino.Collections.IResizableList{``0},System.Int32)">
            <summary>
            Provides a generic way to remove from a list at an index in a Rhino table. table needs to provide Count and indexer as backing accessors.
            This is to provide a full and reasonable implementation of the interface. People should choose other methods if better behavior is required.
            </summary>
        </member>
        <member name="M:Rhino.Collections.GenericIListImplementation.CopyTo``1(System.Collections.Generic.IList{``0},``0[],System.Int32)">
            <summary>
            Provides a generic way to copy to an array starting at an index. table needs to provide Count and indexer as backing accessors.
            This is to provide a full and reasonable implementation of the interface. People should choose other methods if better behavior is required.
            </summary>
        </member>
        <member name="M:Rhino.Collections.GenericIListImplementation.CopyTo``1(System.Collections.Generic.IList{``0},System.Array,System.Int32)">
            <summary>
            Provides a non-generic way to copy to an array starting at an index. table needs to provide Count and indexer as backing accessors.
            This is to provide a full and reasonable implementation of the interface. People should choose other methods if better behavior is required.
            </summary>
        </member>
        <member name="M:Rhino.Collections.GenericIListImplementation.CopyToFromReadOnlyCollection``1(System.Collections.Generic.IReadOnlyCollection{``0},``0[],System.Int32)">
            <summary>
            Provides a non-generic way to copy to an array starting at an index. table needs to provide Count and indexer as backing accessors.
            This is to provide a full and reasonable implementation of the interface. People should choose other methods if better behavior is required.
            </summary>
        </member>
        <member name="M:Rhino.Collections.GenericIListImplementation.Remove``1(Rhino.Collections.IResizableList{``0},``0)">
            <summary>
            Provides a generic way to remove the first occurrence of an item in a Rhino table. table needs to provide Count and indexer as backing accessors.
            This is to provide a full and reasonable implementation of the interface. People should choose other methods if better behavior is required.
            </summary>
        </member>
        <member name="M:Rhino.Collections.GenericIListImplementation.ClearByItems``2(``0)">
            <summary>
            Forms a reverse list with all items, then removed them using Remove().
            </summary>
        </member>
        <member name="M:Rhino.Collections.GenericIListImplementation.ClearByItems``1(System.Collections.Generic.ICollection{``0})">
            <summary>
            Forms a reverse list with all items, then removed them using Remove().
            </summary>
        </member>
        <member name="M:Rhino.Collections.GenericIListImplementation.ClearReverseOrder``2(``0)">
             <summary>
            Removes the last index, then the previous one, etc
             </summary>
        </member>
        <member name="M:Rhino.Collections.GenericIListImplementation.HelperTryCoerce(System.Object,Rhino.Geometry.Point3f@)">
            <summary>
            Converts any object that is deemed suitable to Point3f.
            </summary>
        </member>
        <member name="M:Rhino.Collections.GenericIListImplementation.HelperTryCoerce(System.Object,Rhino.Geometry.Vector3f@)">
            <summary>
            Converts any object that is deemed suitable to Vector3f.
            </summary>
        </member>
        <member name="M:Rhino.Collections.GenericIListImplementation.HelperTryCoerce(System.Object,Rhino.Geometry.Point2f@)">
            <summary>
            Converts any object that is deemed suitable to Vector2f.
            </summary>
        </member>
        <member name="M:Rhino.Collections.GenericIListImplementation.HelperCoercePoint(System.Object)">
            <summary>
            Converts any object that is deemed suitable to Point3f, or raises an exception.
            </summary>
        </member>
        <member name="M:Rhino.Collections.GenericIListImplementation.HelperCoercePoint2(System.Object)">
            <summary>
            Converts any object that is deemed suitable to Point2f, or raises an exception.
            </summary>
        </member>
        <member name="M:Rhino.Collections.GenericIListImplementation.HelperCoerceVector(System.Object)">
            <summary>
            Converts any object that is deemed suitable to Vector3f, or raises an exception.
            </summary>
        </member>
        <member name="T:Rhino.Collections.RhinoList`1">
            <summary>
            Represents a list of generic data. This class is similar to System.Collections.Generic.List(T) 
            but exposes a few more methods.
            </summary>
        </member>
        <member name="F:Rhino.Collections.RhinoList`1.m_items">
            <summary>
            Internal array of items. The array will contain trailing invalid items if Capacity > Count. 
            WARNING! Do not store a reference to this array anywhere! The List class may decide to replace 
            the internal array with another one.
            </summary>
        </member>
        <member name="F:Rhino.Collections.RhinoList`1.m_size">
            <summary>
            The number of "valid" elements in m_items (same as m_count in ON_SimpleArray)
            </summary>
        </member>
        <member name="F:Rhino.Collections.RhinoList`1.m_version">
            <summary>
            The version counter is incremented whenever a change is made to the list.
            </summary>
        </member>
        <member name="M:Rhino.Collections.RhinoList`1.#ctor">
            <summary>
            Initializes a new, empty list.
            </summary>
        </member>
        <member name="M:Rhino.Collections.RhinoList`1.#ctor(System.Int32)">
            <summary>
            Initializes an empty list with a certain capacity.
            </summary>
            <param name="initialCapacity">Number of items this list can store without resizing.</param>
        </member>
        <member name="M:Rhino.Collections.RhinoList`1.#ctor(System.Int32,`0)">
            <summary>
            Initializes a new list with a specified amount of values.
            </summary>
            <param name="amount">Number of values to add to this list. Must be equal to or larger than zero.</param>
            <param name="defaultValue">Value to add, for reference types, 
            the same item will be added over and over again.</param>
        </member>
        <member name="M:Rhino.Collections.RhinoList`1.#ctor(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Initializes this list as a shallow duplicate of another list, array or any other enumerable set of T.
            </summary>
            <param name="collection">Collection of items to duplicate.</param>
        </member>
        <member name="M:Rhino.Collections.RhinoList`1.#ctor(Rhino.Collections.RhinoList{`0})">
            <summary>
            Initializes an new list by shallow duplicating another list.
            </summary>
            <param name="list">List to mimic.</param>
        </member>
        <member name="M:Rhino.Collections.RhinoList`1.ToArray">
            <summary>
            Constructs an array that contains all items in this list.
            </summary>
            <returns>An array containing all items in this list.</returns>
        </member>
        <member name="M:Rhino.Collections.RhinoList`1.TrimExcess">
            <summary>
            Sets the capacity to the actual number of elements in the List, 
            if that number is less than a threshold value.
            </summary>
            <remarks>This function differs from the DotNET implementation of List&lt;T&gt; 
            since that one only trims the excess if the excess exceeds 10% of the list length.</remarks>
        </member>
        <member name="P:Rhino.Collections.RhinoList`1.Capacity">
            <summary>
            Gets or sets the total number of elements the internal data structure can hold without resizing.
            </summary>
        </member>
        <member name="P:Rhino.Collections.RhinoList`1.Count">
            <summary>
            Gets the number of elements actually contained in the List.
            </summary>
        </member>
        <member name="P:Rhino.Collections.RhinoList`1.NullCount">
            <summary>
            Gets the number of null references (Nothing in Visual Basic) in this list. 
            If T is a ValueType, this property always return zero.
            </summary>
        </member>
        <member name="P:Rhino.Collections.RhinoList`1.Item(System.Int32)">
            <summary>
            Gets or sets the element at the specified index.
            </summary>
            <param name="index">The zero-based index of the element to get or set.</param>
            <returns>The element at the specified index.</returns>
        </member>
        <member name="P:Rhino.Collections.RhinoList`1.System#Collections#IList#Item(System.Int32)">
            <summary>
            Gets or sets the element at the specified index.
            </summary>
            <param name="index">The zero-based index of the element to get or set.</param>
            <returns>The element at the specified index.</returns>
        </member>
        <member name="P:Rhino.Collections.RhinoList`1.First">
            <summary>
            Gets or sets the first item in the list. This is synonymous to calling List[0].
            </summary>
        </member>
        <member name="P:Rhino.Collections.RhinoList`1.Last">
            <summary>
            Gets or sets the last item in the list. This is synonymous to calling List[Count-1].
            </summary>
        </member>
        <member name="M:Rhino.Collections.RhinoList`1.RemapIndex(System.Int32)">
            <summary>
            Remap an index in the infinite range onto the List index range.
            </summary>
            <param name="index">Index to remap.</param>
            <returns>Remapped index.</returns>
        </member>
        <member name="P:Rhino.Collections.RhinoList`1.System#Collections#IList#IsReadOnly">
            <summary>
            When implemented by a class, gets a value indicating whether the IList is read-only. 
            RhinoList is never ReadOnly.
            </summary>
        </member>
        <member name="P:Rhino.Collections.RhinoList`1.System#Collections#IList#IsFixedSize">
            <summary>
            When implemented by a class, gets a value indicating whether the IList has a fixed size. 
            RhinoList is never fixed.
            </summary>
        </member>
        <member name="P:Rhino.Collections.RhinoList`1.System#Collections#Generic#ICollection{T}#IsReadOnly">
            <summary>
            When implemented by a class, gets a value indicating whether the IList is read-only. 
            RhinoList is never ReadOnly.
            </summary>
        </member>
        <member name="P:Rhino.Collections.RhinoList`1.System#Collections#ICollection#IsSynchronized">
            <summary>
            When implemented by a class, gets a value indicating whether access to the ICollection is synchronized (thread-safe).
            ON_List is never Synchronized.
            </summary>
        </member>
        <member name="P:Rhino.Collections.RhinoList`1.System#Collections#ICollection#SyncRoot">
            <summary>
            Gets an object that can be used to synchronize access to the ICollection.
            </summary>
        </member>
        <member name="M:Rhino.Collections.RhinoList`1.Clear">
            <summary>
            Removes all elements from the List.
            </summary>
        </member>
        <member name="M:Rhino.Collections.RhinoList`1.System#Collections#IList#Add(System.Object)">
            <summary>
            Adds an item to the IList.
            </summary>
            <param name="item">The Object to add to the IList.</param>
            <returns>The position into which the new element was inserted.</returns>
        </member>
        <member name="M:Rhino.Collections.RhinoList`1.Add(`0)">
            <summary>
            Adds an object to the end of the List.
            </summary>
            <param name="item">Item to append.</param>
        </member>
        <member name="M:Rhino.Collections.RhinoList`1.AddRange(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Adds the elements of the specified collection to the end of the List.
            </summary>
            <param name="collection">The collection whose elements should be added to the end of the List. 
            The collection itself cannot be a null reference (Nothing in Visual Basic), 
            but it can contain elements that are a null reference (Nothing in Visual Basic), 
            if type T is a reference type.
            </param>
        </member>
        <member name="M:Rhino.Collections.RhinoList`1.AddRange(System.Collections.IEnumerable)">
            <summary>
            Adds the elements of the specified collection to the end of the List.
            </summary>
            <param name="collection">The collection whose elements should be added to the end of the List. 
            The collection itself cannot be a null reference (Nothing in Visual Basic), 
            but it can contain elements that are a null reference (Nothing in Visual Basic). 
            Objects in collection which cannot be represented as T will throw exceptions.
            </param>
        </member>
        <member name="M:Rhino.Collections.RhinoList`1.System#Collections#IList#Insert(System.Int32,System.Object)">
            <summary>
            Inserts an element into the List at the specified index.
            </summary>
            <param name="index">The zero-based index at which item should be inserted.</param>
            <param name="item">The object to insert. The value can be a null reference 
            (Nothing in Visual Basic) for reference types.</param>
        </member>
        <member name="M:Rhino.Collections.RhinoList`1.Insert(System.Int32,`0)">
            <summary>
            Inserts an element into the List at the specified index.
            </summary>
            <param name="index">The zero-based index at which item should be inserted.</param>
            <param name="item">The object to insert. The value can be a null reference 
            (Nothing in Visual Basic) for reference types.</param>
        </member>
        <member name="M:Rhino.Collections.RhinoList`1.InsertRange(System.Int32,System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Inserts the elements of a collection into the List at the specified index.
            </summary>
            <param name="index">The zero-based index at which the new elements should be inserted.</param>
            <param name="collection">The collection whose elements should be inserted into the List. 
            The collection itself cannot be a null reference (Nothing in Visual Basic), 
            but it can contain elements that are a null reference (Nothing in Visual Basic), 
            if type T is a reference type.</param>
        </member>
        <member name="M:Rhino.Collections.RhinoList`1.System#Collections#IList#Remove(System.Object)">
            <summary>
            Removes the first occurrence of a specific object from the List.
            </summary>
            <param name="item">The object to remove from the List. 
            The value can be a null reference (Nothing in Visual Basic) for reference types.</param>
        </member>
        <member name="M:Rhino.Collections.RhinoList`1.Remove(`0)">
            <summary>
            Removes the first occurrence of a specific object from the List.
            </summary>
            <param name="item">The object to remove from the List. 
            The value can be a null reference (Nothing in Visual Basic) for reference types.</param>
            <returns>true if item is successfully removed; otherwise, false. 
            This method also returns false if item was not found in the List.</returns>
        </member>
        <member name="M:Rhino.Collections.RhinoList`1.RemoveAll(System.Predicate{`0})">
            <summary>
            Removes the all the elements that match the conditions defined by the specified predicate.
            </summary>
            <param name="match">The Predicate(T) delegate that defines the conditions of the elements to remove.</param>
            <returns>The number of elements removed from the List.</returns>
        </member>
        <member name="M:Rhino.Collections.RhinoList`1.RemoveNulls">
            <summary>
            Removes all elements from the List that are null references (Nothing in Visual Basic). 
            This function will not do anything if T is not a Reference type.
            </summary>
            <returns>The number of nulls removed from the List.</returns>
        </member>
        <member name="M:Rhino.Collections.RhinoList`1.RemoveAt(System.Int32)">
            <summary>
            Removes the element at the specified index of the List.
            </summary>
            <param name="index">The zero-based index of the element to remove.</param>
        </member>
        <member name="M:Rhino.Collections.RhinoList`1.RemoveRange(System.Int32,System.Int32)">
            <summary>
            Removes a range of elements from the List.
            </summary>
            <param name="index">The zero-based starting index of the range of elements to remove.</param>
            <param name="count">The number of elements to remove.</param>
        </member>
        <member name="M:Rhino.Collections.RhinoList`1.GetRange(System.Int32,System.Int32)">
            <summary>
            Constructs a shallow copy of a range of elements in the source List.
            </summary>
            <param name="index">The zero-based List index at which the range starts.</param>
            <param name="count">The number of elements in the range.</param>
            <returns>A shallow copy of a range of elements in the source List.</returns>
        </member>
        <member name="M:Rhino.Collections.RhinoList`1.System#Collections#IList#IndexOf(System.Object)">
            <summary>
            Searches for the specified object and returns the zero-based index of the 
            first occurrence within the entire List.
            </summary>
            <param name="item">The object to locate in the List. 
            The value can be a null reference (Nothing in Visual Basic) 
            for reference types.</param>
            <returns>The zero-based index of the first occurrence of item within 
            the entire List, if found; otherwise, -1.</returns>
        </member>
        <member name="M:Rhino.Collections.RhinoList`1.IndexOf(`0)">
            <summary>
            Searches for the specified object and returns the zero-based index of the 
            first occurrence within the entire List.
            </summary>
            <param name="item">The object to locate in the List. 
            The value can be a null reference (Nothing in Visual Basic) 
            for reference types.</param>
            <returns>The zero-based index of the first occurrence of item within 
            the entire List, if found; otherwise, -1.</returns>
        </member>
        <member name="M:Rhino.Collections.RhinoList`1.IndexOf(`0,System.Int32)">
            <summary>
            Searches for the specified object and returns the zero-based index of 
            the first occurrence within the range of elements in the List that 
            extends from the specified index to the last element.
            </summary>
            <param name="item">The object to locate in the List. 
            The value can be a null reference (Nothing in Visual Basic) 
            for reference types.</param>
            <param name="index">The zero-based starting index of the search.</param>
            <returns>The zero-based index of the first occurrence of item within 
            the entire List, if found; otherwise, -1.</returns>
        </member>
        <member name="M:Rhino.Collections.RhinoList`1.IndexOf(`0,System.Int32,System.Int32)">
            <summary>
            Searches for the specified object and returns the zero-based index of the first 
            occurrence within the range of elements in the List that starts at the specified 
            index and contains the specified number of elements.
            </summary>
            <param name="item">The object to locate in the List. 
            The value can be a null reference (Nothing in Visual Basic) 
            for reference types.</param>
            <param name="index">The zero-based starting index of the search.</param>
            <param name="count">The number of elements in the section to search.</param>
            <returns>The zero-based index of the first occurrence of item within 
            the entire List, if found; otherwise, -1.</returns>
        </member>
        <member name="M:Rhino.Collections.RhinoList`1.LastIndexOf(`0)">
            <summary>
            Searches for the specified object and returns the zero-based 
            index of the last occurrence within the entire List.
            </summary>
            <param name="item">The object to locate in the List. 
            The value can be a null reference (Nothing in Visual Basic) for reference types.</param>
            <returns>The zero-based index of the last occurrence of item within 
            the entire the List, if found; otherwise, -1.</returns>
        </member>
        <member name="M:Rhino.Collections.RhinoList`1.LastIndexOf(`0,System.Int32)">
            <summary>
            Searches for the specified object and returns the zero-based index 
            of the last occurrence within the range of elements in the List 
            that extends from the first element to the specified index.
            </summary>
            <param name="item">The object to locate in the List. 
            The value can be a null reference (Nothing in Visual Basic) for reference types.</param>
            <param name="index">The zero-based starting index of the backward search.</param>
            <returns>The zero-based index of the last occurrence of item within 
            the entire the List, if found; otherwise, -1.</returns>
        </member>
        <member name="M:Rhino.Collections.RhinoList`1.LastIndexOf(`0,System.Int32,System.Int32)">
            <summary>
            Searches for the specified object and returns the zero-based index of the 
            last occurrence within the range of elements in the List that contains 
            the specified number of elements and ends at the specified index.
            </summary>
            <param name="item">The object to locate in the List. 
            The value can be a null reference (Nothing in Visual Basic) for reference types.</param>
            <param name="index">The zero-based starting index of the backward search.</param>
            <param name="count">The number of elements in the section to search.</param>
            <returns>The zero-based index of the last occurrence of item within 
            the entire the List, if found; otherwise, -1.</returns>
        </member>
        <member name="M:Rhino.Collections.RhinoList`1.BinarySearch(`0)">
            <summary>
            Searches the entire sorted List for an element using the default comparer 
            and returns the zero-based index of the element.
            </summary>
            <param name="item">The object to locate. The value can be a null reference 
            (Nothing in Visual Basic) for reference types.</param>
            <returns>The zero-based index of item in the sorted List, if item is found; 
            otherwise, a negative number that is the bitwise complement of the index 
            of the next element that is larger than item or, if there is no larger element, 
            the bitwise complement of Count.</returns>
        </member>
        <member name="M:Rhino.Collections.RhinoList`1.BinarySearch(`0,System.Collections.Generic.IComparer{`0})">
            <summary>
            Searches the entire sorted List for an element using the specified 
            comparer and returns the zero-based index of the element.
            </summary>
            <param name="item">The object to locate. The value can be a null reference 
            (Nothing in Visual Basic) for reference types.</param>
            <param name="comparer">The IComparer(T) implementation to use when comparing elements.
            Or a null reference (Nothing in Visual Basic) to use the default comparer 
            Comparer(T)::Default.</param>
            <returns>The zero-based index of item in the sorted List, if item is found; 
            otherwise, a negative number that is the bitwise complement of the index 
            of the next element that is larger than item or, if there is no larger element, 
            the bitwise complement of Count.</returns>
        </member>
        <member name="M:Rhino.Collections.RhinoList`1.BinarySearch(System.Int32,System.Int32,`0,System.Collections.Generic.IComparer{`0})">
            <summary>
            Searches the entire sorted List for an element using the specified 
            comparer and returns the zero-based index of the element.
            </summary>
            <param name="index">The zero-based starting index of the range to search.</param>
            <param name="count">The length of the range to search.</param>
            <param name="item">The object to locate. The value can be a null reference 
            (Nothing in Visual Basic) for reference types.</param>
            <param name="comparer">The IComparer(T) implementation to use when comparing elements.
            Or a null reference (Nothing in Visual Basic) to use the default comparer 
            Comparer(T)::Default.</param>
            <returns>The zero-based index of item in the sorted List, if item is found; 
            otherwise, a negative number that is the bitwise complement of the index 
            of the next element that is larger than item or, if there is no larger element, 
            the bitwise complement of Count.</returns>
        </member>
        <member name="M:Rhino.Collections.RhinoList`1.Contains(`0)">
            <summary>
            Determines whether an element is in the List.
            </summary>
            <param name="item">The object to locate in the List. 
            The value can be a null reference (Nothing in Visual Basic) for reference types.</param>
            <returns>true if item is found in the List; otherwise, false.</returns>
        </member>
        <member name="M:Rhino.Collections.RhinoList`1.System#Collections#IList#Contains(System.Object)">
            <summary>
            Determines whether an element is in the List.
            </summary>
            <param name="item">The object to locate in the List. 
            The value can be a null reference (Nothing in Visual Basic) for reference types.</param>
            <returns>true if item is found in the List; otherwise, false.</returns>
        </member>
        <member name="M:Rhino.Collections.RhinoList`1.Exists(System.Predicate{`0})">
            <summary>
            Determines whether the List contains elements that match the 
            conditions defined by the specified predicate.
            </summary>
            <param name="match">The Predicate(T) delegate that defines the conditions of the elements to search for.</param>
            <returns>true if the List contains one or more elements that match the 
            conditions defined by the specified predicate; otherwise, false.</returns>
        </member>
        <member name="M:Rhino.Collections.RhinoList`1.Find(System.Predicate{`0})">
            <summary>
            Searches for an element that matches the conditions defined by the 
            specified predicate, and returns the first occurrence within the entire List.
            </summary>
            <param name="match">The Predicate(T) delegate that defines the conditions of the element to search for.</param>
            <returns>The first element that matches the conditions defined by the specified predicate, 
            if found; otherwise, the default value for type T.</returns>
        </member>
        <member name="M:Rhino.Collections.RhinoList`1.FindLast(System.Predicate{`0})">
            <summary>
            Searches for an element that matches the conditions defined by the 
            specified predicate, and returns the last occurrence within the entire List.
            </summary>
            <param name="match">The Predicate(T) delegate that defines the conditions of the element to search for.</param>
            <returns>The last element that matches the conditions defined by the specified predicate, 
            if found; otherwise, the default value for type T.</returns>
        </member>
        <member name="M:Rhino.Collections.RhinoList`1.FindAll(System.Predicate{`0})">
            <summary>
            Retrieves all the elements that match the conditions defined by the specified predicate.
            </summary>
            <param name="match">The Predicate(T) delegate that defines the conditions of the elements to search for.</param>
            <returns>A ON_List(T) containing all the elements that match the conditions 
            defined by the specified predicate, if found; otherwise, an empty ON_List(T).</returns>
        </member>
        <member name="M:Rhino.Collections.RhinoList`1.TrueForAll(System.Predicate{`0})">
            <summary>
            Determines whether every element in the List matches the conditions defined by the specified predicate.
            </summary>
            <param name="match">The Predicate(T) delegate that defines the conditions to check against the elements.</param>
            <returns>true if every element in the List matches the conditions defined by 
            the specified predicate; otherwise, false. If the list has no elements, the return value is true.</returns>
        </member>
        <member name="M:Rhino.Collections.RhinoList`1.ForEach(System.Action{`0})">
            <summary>
            Performs the specified action on each element of the List.
            </summary>
            <param name="action">The Action(T) delegate to perform on each element of the List.</param>
        </member>
        <member name="M:Rhino.Collections.RhinoList`1.FindIndex(System.Predicate{`0})">
            <summary>
            Searches for an element that matches the conditions defined by the 
            specified predicate, and returns the zero-based index of the first 
            occurrence within the entire List.
            </summary>
            <param name="match">The Predicate(T) delegate that defines the conditions of the element to search for.</param>
            <returns>The zero-based index of the first occurrence of an element that 
            matches the conditions defined by match, if found; otherwise, -1.</returns>
        </member>
        <member name="M:Rhino.Collections.RhinoList`1.FindIndex(System.Int32,System.Predicate{`0})">
            <summary>
            Searches for an element that matches the conditions defined by the 
            specified predicate, and returns the zero-based index of the first 
            occurrence within the entire List.
            </summary>
            <param name="startIndex">The zero-based starting index of the search.</param>
            <param name="match">The Predicate(T) delegate that defines the conditions of the element to search for.</param>
            <returns>The zero-based index of the first occurrence of an element that 
            matches the conditions defined by match, if found; otherwise, -1.</returns>
        </member>
        <member name="M:Rhino.Collections.RhinoList`1.FindIndex(System.Int32,System.Int32,System.Predicate{`0})">
            <summary>
            Searches for an element that matches the conditions defined by the specified predicate, 
            and returns the zero-based index of the first occurrence within the range of elements 
            in the List that extends from the specified index to the last element.
            </summary>
            <param name="startIndex">The zero-based starting index of the search.</param>
            <param name="count">The number of elements in the section to search.</param>
            <param name="match">The Predicate(T) delegate that defines the conditions of the element to search for.</param>
            <returns>The zero-based index of the first occurrence of an element that 
            matches the conditions defined by match, if found; otherwise, -1.</returns>
        </member>
        <member name="M:Rhino.Collections.RhinoList`1.FindLastIndex(System.Predicate{`0})">
            <summary>
            Searches for an element that matches the conditions defined by the 
            specified predicate, and returns the zero-based index of the last 
            occurrence within the entire List.
            </summary>
            <param name="match">The Predicate(T) delegate that defines the conditions of the element to search for.</param>
            <returns>The zero-based index of the last occurrence of an element that matches 
            the conditions defined by match, if found; otherwise, -1.</returns>
        </member>
        <member name="M:Rhino.Collections.RhinoList`1.FindLastIndex(System.Int32,System.Predicate{`0})">
            <summary>
            Searches for an element that matches the conditions defined by the 
            specified predicate, and returns the zero-based index of the last 
            occurrence within the entire List.
            </summary>
            <param name="startIndex">The zero-based starting index of the backward search.</param>
            <param name="match">The Predicate(T) delegate that defines the conditions of the element to search for.</param>
            <returns>The zero-based index of the last occurrence of an element that matches 
            the conditions defined by match, if found; otherwise, -1.</returns>
        </member>
        <member name="M:Rhino.Collections.RhinoList`1.FindLastIndex(System.Int32,System.Int32,System.Predicate{`0})">
            <summary>
            Searches for an element that matches the conditions defined by the 
            specified predicate, and returns the zero-based index of the last 
            occurrence within the entire List.
            </summary>
            <param name="startIndex">The zero-based starting index of the backward search.</param>
            <param name="count">The number of elements in the section to search.</param>
            <param name="match">The Predicate(T) delegate that defines the conditions of the element to search for.</param>
            <returns>The zero-based index of the last occurrence of an element that matches 
            the conditions defined by match, if found; otherwise, -1.</returns>
        </member>
        <member name="M:Rhino.Collections.RhinoList`1.Sort">
            <summary>
            Sorts the elements in the entire List using the default comparer.
            </summary>
        </member>
        <member name="M:Rhino.Collections.RhinoList`1.Sort(System.Collections.Generic.IComparer{`0})">
            <summary>
            Sorts the elements in the entire list using the specified System.Comparison(T)
            </summary>
            <param name="comparer">The IComparer(T) implementation to use when comparing elements, 
            or a null reference (Nothing in Visual Basic) to use the default comparer Comparer(T).Default.</param>
        </member>
        <member name="M:Rhino.Collections.RhinoList`1.Sort(System.Comparison{`0})">
            <summary>
            Sorts the elements in the entire list using the specified comparer.
            </summary>
            <param name="comparison">The System.Comparison(T) to use when comparing elements.</param>
        </member>
        <member name="M:Rhino.Collections.RhinoList`1.Sort(System.Int32,System.Int32,System.Collections.Generic.IComparer{`0})">
            <summary>
            Sorts the elements in a range of elements in list using the specified comparer.
            </summary>
            <param name="index">The zero-based starting index of the range to sort.</param>
            <param name="count">The length of the range to sort.</param>
            <param name="comparer">The IComparer(T) implementation to use when comparing 
            elements, or a null reference (Nothing in Visual Basic) to use the default 
            comparer Comparer(T).Default.</param>
        </member>
        <member name="M:Rhino.Collections.RhinoList`1.Sort(System.Double[])">
            <summary>
            Sort this list based on a list of numeric keys of equal length. 
            The keys array will not be altered.
            </summary>
            <param name="keys">Numeric keys to sort with.</param>
            <remarks>This function does not exist on the DotNET List class. 
            David thought it was a good idea.</remarks>
        </member>
        <member name="M:Rhino.Collections.RhinoList`1.Sort(System.Int32[])">
            <summary>
            Sort this list based on a list of numeric keys of equal length. 
            The keys array will not be altered.
            </summary>
            <param name="keys">Numeric keys to sort with.</param>
            <remarks>This function does not exist on the DotNET List class. 
            David thought it was a good idea.</remarks>
        </member>
        <member name="T:Rhino.Collections.RhinoList`1.FunctorComparer`1">
            <summary>
            Utility class which ties together functionality in Comparer(T) and Comparison(T)
            </summary>
        </member>
        <member name="M:Rhino.Collections.RhinoList`1.Reverse">
            <summary>
            Reverses the order of the elements in the entire List.
            </summary>
        </member>
        <member name="M:Rhino.Collections.RhinoList`1.Reverse(System.Int32,System.Int32)">
            <summary>
            Reverses the order of the elements in the specified range.
            </summary>
            <param name="index">The zero-based starting index of the range to reverse.</param>
            <param name="count">The number of elements in the range to reverse.</param>
        </member>
        <member name="M:Rhino.Collections.RhinoList`1.AsReadOnly">
            <summary>
            Constructs a read-only wrapper of this class.
            </summary>
            <returns>A wrapper.</returns>
        </member>
        <member name="M:Rhino.Collections.RhinoList`1.ConvertAll``1(System.Converter{`0,``0})">
            <summary>
            Aggregates all results of a conversion function over this table into a new list.
            </summary>
            <typeparam name="TOutput">The type returned by the function.</typeparam>
            <param name="converter">A conversion function that can transform from T to TOutput.</param>
            <returns>The new list.</returns>
        </member>
        <member name="M:Rhino.Collections.RhinoList`1.CopyTo(`0[])">
            <summary>
            Copies the entire List to a compatible one-dimensional array, 
            starting at the beginning of the target array.
            </summary>
            <param name="array">The one-dimensional Array that is the destination 
            of the elements copied from List. The Array must have zero-based indexing.</param>
        </member>
        <member name="M:Rhino.Collections.RhinoList`1.CopyTo(`0[],System.Int32)">
            <summary>
            Copies the entire List to a compatible one-dimensional array, 
            starting at the specified index of the target array.
            </summary>
            <param name="array">The one-dimensional Array that is the destination 
            of the elements copied from List. The Array must have zero-based indexing.</param>
            <param name="arrayIndex">The zero-based index in array at which copying begins.</param>
        </member>
        <member name="M:Rhino.Collections.RhinoList`1.CopyTo(System.Int32,`0[],System.Int32,System.Int32)">
            <summary>
            Copies a range of elements from the List to a compatible one-dimensional array, 
            starting at the specified index of the target array.
            </summary>
            <param name="index">The zero-based index in the source List at which copying begins.</param>
            <param name="array">The one-dimensional Array that is the destination of the elements 
            copied from List. The Array must have zero-based indexing.</param>
            <param name="arrayIndex">The zero-based index in array at which copying begins.</param>
            <param name="count">The number of elements to copy.</param>
        </member>
        <member name="M:Rhino.Collections.RhinoList`1.System#Collections#ICollection#CopyTo(System.Array,System.Int32)">
            <summary>
            Copies the elements of the ICollection to an Array, starting at a particular Array index.
            </summary>
            <param name="array">The one-dimensional Array that is the destination of the elements 
            copied from ICollection. The Array must have zero-based indexing.</param>
            <param name="arrayIndex">The zero-based index in array at which copying begins.</param>
        </member>
        <member name="M:Rhino.Collections.RhinoList`1.Duplicate">
            <summary>
            Returns a shallow copy of this instance.
            If the generic type is comprised of only value types (struct, enum, ptr), then the result will be a deep copy.
            </summary>
            <returns>The duplicated list.</returns>
        </member>
        <member name="M:Rhino.Collections.RhinoList`1.GetEnumerator">
            <summary>
            Constructs an enumerator that is capable of iterating over all items in this list.
            </summary>
            <returns>The new enumerator.</returns>
        </member>
        <member name="T:Rhino.Collections.RhinoList">
            <summary>
            Provides helper methods to work with <see cref="T:Rhino.Collections.RhinoList`1"/> and other collections.
            </summary>
        </member>
        <member name="M:Rhino.Collections.RhinoList.PointCloudKNeighbors(Rhino.Geometry.PointCloud,System.Collections.Generic.IEnumerable{Rhino.Geometry.Point3d},System.Int32)">
            <summary>
            Finds a certain amount of points in a list of 3D points that are the k-closest to a test point.
            This method searches needlePoints by computing all distances from each point cloud point and keeping a short list.
            </summary>
            <param name="pointcloud">A point cloud to be searched.</param>
            <param name="needlePoints">Points to search for.</param>
            <param name="amount">The required amount of closest neighbors to find.</param>
            <returns>An enumerable of arrays of indices; each array contains the indices for each of the needlePts.</returns>
            <seealso cref="M:Rhino.Geometry.RTree.PointCloudKNeighbors(Rhino.Geometry.PointCloud,System.Collections.Generic.IEnumerable{Rhino.Geometry.Point3d},System.Int32)" />
            <since>6.0</since>
        </member>
        <member name="M:Rhino.Collections.RhinoList.Point3dKNeighbors(System.Collections.Generic.IEnumerable{Rhino.Geometry.Point3d},System.Collections.Generic.IEnumerable{Rhino.Geometry.Point3d},System.Int32)">
            <summary>
            Finds a certain amour of points in a list of 3D points that are the k-closest to a test point.
            This method searches needlePoints by computing all distances from each point cloud point and keeping a "short list".
            See RTree KNeighbors for alternatives.
            </summary>
            <param name="hayPoints">A point cloud to be searched.</param>
            <param name="needlePoints">Points to search for.</param>
            <param name="amount">The required amount of closest neighbors to find.</param>
            <returns>An enumerable of arrays of indices; each array contains the indices for each of the needlePts.</returns>
            <seealso cref="M:Rhino.Geometry.RTree.Point3dKNeighbors(System.Collections.Generic.IEnumerable{Rhino.Geometry.Point3d},System.Collections.Generic.IEnumerable{Rhino.Geometry.Point3d},System.Int32)"/>
            <since>6.0</since>
        </member>
        <member name="M:Rhino.Collections.RhinoList.Point3fKNeighbors(System.Collections.Generic.IEnumerable{Rhino.Geometry.Point3f},System.Collections.Generic.IEnumerable{Rhino.Geometry.Point3f},System.Int32)">
            <summary>
            Finds a certain amour of points in a list of single-precision 3D points that are the k-closest to a test point.
            This method searches needlePoints by computing all distances from each point cloud point and keeping a "short list".
            </summary>
            <param name="hayPoints">A point cloud to be searched.</param>
            <param name="needlePoints">Points to search for.</param>
            <param name="amount">The required amount of closest neighbors to find.</param>
            <returns>An enumerable of arrays of indices; each array contains the indices for each of the needlePts.</returns>
            <seealso cref="M:Rhino.Geometry.RTree.Point3dKNeighbors(System.Collections.Generic.IEnumerable{Rhino.Geometry.Point3d},System.Collections.Generic.IEnumerable{Rhino.Geometry.Point3d},System.Int32)"/>
            <since>6.0</since>
        </member>
        <member name="M:Rhino.Collections.RhinoList.Point2dKNeighbors(System.Collections.Generic.IEnumerable{Rhino.Geometry.Point2d},System.Collections.Generic.IEnumerable{Rhino.Geometry.Point2d},System.Int32)">
            <summary>
            Finds a certain amour of points in a list of single-precision 2D points that are the k-closest to a test point.
            This method searches needlePoints by computing all distances from each point cloud point and keeping a "short list".
            </summary>
            <param name="hayPoints">A point cloud to be searched.</param>
            <param name="needlePoints">Points to search for.</param>
            <param name="amount">The required amount of closest neighbors to find.</param>
            <returns>An enumerable of arrays of indices; each array contains the indices for each of the needlePts.</returns>
            <seealso cref="M:Rhino.Geometry.RTree.Point3dKNeighbors(System.Collections.Generic.IEnumerable{Rhino.Geometry.Point3d},System.Collections.Generic.IEnumerable{Rhino.Geometry.Point3d},System.Int32)"/>
            <since>6.0</since>
        </member>
        <member name="M:Rhino.Collections.RhinoList.Point2fKNeighbors(System.Collections.Generic.IEnumerable{Rhino.Geometry.Point2f},System.Collections.Generic.IEnumerable{Rhino.Geometry.Point2f},System.Int32)">
            <summary>
            Finds a certain amour of points in a list of single-precision 2D points that are the k-closest to a test point.
            This method searches needlePoints by computing all distances from each point cloud point and keeping a "short list".
            </summary>
            <param name="hayPoints">A point cloud to be searched.</param>
            <param name="needlePoints">Points to search for.</param>
            <param name="amount">The required amount of closest neighbors to find.</param>
            <returns>An enumerable of arrays of indices; each array contains the indices for each of the needlePts.</returns>
            <seealso cref="M:Rhino.Geometry.RTree.Point3dKNeighbors(System.Collections.Generic.IEnumerable{Rhino.Geometry.Point3d},System.Collections.Generic.IEnumerable{Rhino.Geometry.Point3d},System.Int32)"/>
            <since>6.0</since>
        </member>
        <member name="M:Rhino.Collections.RhinoList.KNeighbors``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0},System.Int32)">
            <typeparam name="T">T must be of type Point3d, Vector3d, Point3f, Vector3f, Point, Point2d, Vector2d, Point2f, Vector2f or Point4d.</typeparam>
        </member>
        <member name="T:Rhino.Collections.ListDebuggerDisplayProxy`1">
            <summary>
            Utility class for displaying <see cref="T:Rhino.Collections.RhinoList`1" /> contents in the VS debugger.
            </summary>
        </member>
        <member name="T:Rhino.Collections.Point3dList">
            <summary>
            Represents a list of <see cref="T:Rhino.Geometry.Point3d"/>.
            </summary>
        </member>
        <member name="M:Rhino.Collections.Point3dList.#ctor">
            <summary>
            Initializes a new empty list with default capacity.
            </summary>
            <since>5.0</since>
        </member>
        <member name="M:Rhino.Collections.Point3dList.#ctor(System.Int32)">
            <summary>
            Initializes a new point list with a preallocated initial capacity.
            </summary>
            <example>
            <code source='examples\vbnet\ex_addnurbscurve.vb' lang='vbnet'/>
            <code source='examples\cs\ex_addnurbscurve.cs' lang='cs'/>
            <code source='examples\py\ex_addnurbscurve.py' lang='py'/>
            </example>
            <param name="initialCapacity">The number of added items before which the underlying array will be resized.</param>
            <since>5.0</since>
        </member>
        <member name="M:Rhino.Collections.Point3dList.#ctor(System.Collections.Generic.IEnumerable{Rhino.Geometry.Point3d})">
            <summary>
            Initializes a new point list by copying the values from another set.
            </summary>
            <param name="collection">The collection to copy from.</param>
            <since>5.0</since>
        </member>
        <member name="M:Rhino.Collections.Point3dList.#ctor(Rhino.Geometry.Point3d[])">
            <summary>
            Constructs a new point list from values in a point array.
            </summary>
            <param name="initialPoints">Points to add to the list.</param>
            <since>5.0</since>
        </member>
        <member name="P:Rhino.Collections.Point3dList.BoundingBox">
            <summary>
            Even though this is a property, it is not a "fast" calculation. Every point is
            evaluated in order to get the bounding box of the list.
            </summary>
            <since>5.0</since>
        </member>
        <member name="M:Rhino.Collections.Point3dList.ClosestIndex(Rhino.Geometry.Point3d)">
            <summary>
            Finds the index of the point that is closest to a test point in this list.
            </summary>
            <param name="testPoint">point to compare against.</param>
            <returns>index of closest point in the list on success. -1 on error.</returns>
            <since>5.0</since>
        </member>
        <member name="P:Rhino.Collections.Point3dList.X">
            <summary>
            Returns an indexer with all X coordinates in this list.
            </summary>
            <since>5.0</since>
        </member>
        <member name="P:Rhino.Collections.Point3dList.Y">
            <summary>
            Returns an indexer with all Y coordinates in this list.
            </summary>
            <since>5.0</since>
        </member>
        <member name="P:Rhino.Collections.Point3dList.Z">
            <summary>
            Returns an indexer with all Z coordinates in this list.
            </summary>
            <since>5.0</since>
        </member>
        <member name="T:Rhino.Collections.Point3dList.XAccess">
            <summary>
            Utility class for easy-access of x-components of points inside an ON_3dPointList.
            </summary>
        </member>
        <member name="M:Rhino.Collections.Point3dList.XAccess.#ctor(Rhino.Collections.Point3dList)">
            <summary>
            XAccess constructor. 
            </summary>
        </member>
        <member name="P:Rhino.Collections.Point3dList.XAccess.Item(System.Int32)">
            <summary>
            Gets or sets the x-coordinate of the specified point.
            </summary>
            <param name="index">Index of point.</param>
        </member>
        <member name="T:Rhino.Collections.Point3dList.YAccess">
            <summary>
            Utility class for easy-access of x-components of points inside an ON_3dPointList.
            </summary>
        </member>
        <member name="M:Rhino.Collections.Point3dList.YAccess.#ctor(Rhino.Collections.Point3dList)">
            <summary>
            XAccess constructor. 
            </summary>
        </member>
        <member name="P:Rhino.Collections.Point3dList.YAccess.Item(System.Int32)">
            <summary>
            Gets or sets the y-coordinate of the specified point.
            </summary>
            <param name="index">Index of point.</param>
        </member>
        <member name="T:Rhino.Collections.Point3dList.ZAccess">
            <summary>
            Utility class for easy-access of z-components of points inside an ON_3dPointList.
            </summary>
        </member>
        <member name="M:Rhino.Collections.Point3dList.ZAccess.#ctor(Rhino.Collections.Point3dList)">
            <summary>
            XAccess constructor. 
            </summary>
        </member>
        <member name="P:Rhino.Collections.Point3dList.ZAccess.Item(System.Int32)">
            <summary>
            Gets or sets the z-coordinate of the specified point.
            </summary>
            <param name="index">Index of point.</param>
        </member>
        <member name="M:Rhino.Collections.Point3dList.Add(System.Double,System.Double,System.Double)">
            <summary>
            Adds a Point3d to the end of the list with given x,y,z coordinates.
            </summary>
            <param name="x">The X coordinate.</param>
            <param name="y">The Y coordinate.</param>
            <param name="z">The Z coordinate.</param>
            <example>
            <code source='examples\vbnet\ex_addnurbscurve.vb' lang='vbnet'/>
            <code source='examples\cs\ex_addnurbscurve.cs' lang='cs'/>
            <code source='examples\py\ex_addnurbscurve.py' lang='py'/>
            </example>
            <since>5.0</since>
        </member>
        <member name="M:Rhino.Collections.Point3dList.Transform(Rhino.Geometry.Transform)">
            <summary>
            Applies a transform to all the points in the list.
            </summary>
            <param name="xform">Transform to apply.</param>
            <since>5.0</since>
        </member>
        <member name="M:Rhino.Collections.Point3dList.SetAllX(System.Double)">
            <summary>
            Set all the X values for the points to a single value
            </summary>
            <param name="xValue"></param>
            <since>5.6</since>
        </member>
        <member name="M:Rhino.Collections.Point3dList.SetAllY(System.Double)">
            <summary>
            Set all the Y values for the points to a single value
            </summary>
            <param name="yValue"></param>
            <since>5.6</since>
        </member>
        <member name="M:Rhino.Collections.Point3dList.SetAllZ(System.Double)">
            <summary>
            Set all the Z values for the points to a single value
            </summary>
            <param name="zValue"></param>
            <since>5.6</since>
        </member>
        <member name="M:Rhino.Collections.Point3dList.ClosestIndexInList(System.Collections.Generic.IList{Rhino.Geometry.Point3d},Rhino.Geometry.Point3d)">
            <summary>
            Finds the index of the point in a list of points that is closest to a test point.
            </summary>
            <param name="list">A list of points.</param>
            <param name="testPoint">Point to compare against.</param>
            <returns>Index of closest point in the list on success or -1 on error.</returns>
            <since>5.0</since>
        </member>
        <member name="M:Rhino.Collections.Point3dList.ClosestPointInList(System.Collections.Generic.IList{Rhino.Geometry.Point3d},Rhino.Geometry.Point3d)">
            <summary>
            Finds the point in a list of points that is closest to a test point.
            </summary>
            <param name="list">A list of points.</param>
            <param name="testPoint">Point to compare against.</param>
            <returns>A point.</returns>
            <exception cref="T:System.ArgumentException">
            List must contain at least one point and testPoint must be valid.
            </exception>
            <since>5.0</since>
        </member>
        <member name="M:Rhino.Collections.Point3dList.Duplicate">
            <summary>
            Returns a deep copy of this point list instance.
            </summary>
            <returns>The duplicated list.</returns>
            <since>6.0</since>
        </member>
        <member name="M:Rhino.Collections.Point3dList.Equals(System.Object)">
            <summary>
            Overrides the default object equality to compare lists by value.
            </summary>
            <param name="obj"></param>
            <returns>True is objects are exactly equal in value.</returns>
        </member>
        <member name="M:Rhino.Collections.Point3dList.Equals(Rhino.Collections.Point3dList)">
            <summary>
            Determines if the point lists are exactly equal.
            </summary>
            <param name="other"></param>
            <returns>True is objects are exactly equal in value.</returns>
            <since>7.1</since>
        </member>
        <member name="M:Rhino.Collections.Point3dList.GetHashCode">
            <summary>
            Creates a hash code for this object.
            </summary>
            <returns>An int that serves as an hash code. This is currently a XOR of all doubles, XORed in line.</returns>
        </member>
        <member name="T:Rhino.Collections.CurveList">
            <summary>
            Represents a list of curves.
            </summary>
        </member>
        <member name="M:Rhino.Collections.CurveList.#ctor">
            <summary>
            Initializes a new empty list of curves.
            </summary>
            <since>5.0</since>
        </member>
        <member name="M:Rhino.Collections.CurveList.#ctor(System.Int32)">
            <summary>
            Initializes a new empty list of curves with a predefined capacity.
            <para>This is the amount of items the list will accept before resizing.</para>
            </summary>
            <since>5.0</since>
        </member>
        <member name="M:Rhino.Collections.CurveList.#ctor(System.Collections.Generic.IEnumerable{Rhino.Geometry.Curve})">
            <summary>
            Initializes a new list that is filled with all items of the input enumerable.
            <para>Input items are not explicitly duplicated (this is a shallow copy).</para>
            </summary>
            <param name="collection">A list, an array or any enumerable set of <see cref="T:Rhino.Geometry.Curve"/>.</param>
            <since>5.0</since>
        </member>
        <member name="M:Rhino.Collections.CurveList.Add(Rhino.Geometry.Line)">
            <summary>
            Adds a line to this list.
            </summary>
            <param name="line">A line value that will be the model of the new internal curve.</param>
            <since>5.0</since>
        </member>
        <member name="M:Rhino.Collections.CurveList.Add(Rhino.Geometry.Circle)">
            <summary>
            Adds a circle to this list.
            </summary>
            <param name="circle">A circle value that will be the model of the new internal curve.</param>
            <since>5.0</since>
        </member>
        <member name="M:Rhino.Collections.CurveList.Add(Rhino.Geometry.Arc)">
            <summary>
            Adds an arc to this list.
            </summary>
            <param name="arc">An arc value that will be the model of the new internal curve.</param>
            <since>5.0</since>
        </member>
        <member name="M:Rhino.Collections.CurveList.Add(System.Collections.Generic.IEnumerable{Rhino.Geometry.Point3d})">
            <summary>
            Adds a polyline to this list.
            </summary>
            <param name="polyline">A polyline value that will be copied in a new polyline.
            <para>This argument can be null, an array, a list or any enumerable set of <see cref="T:Rhino.Geometry.Point3d"/>.</para></param>
            <since>5.0</since>
        </member>
        <member name="M:Rhino.Collections.CurveList.Add(Rhino.Geometry.Ellipse)">
            <summary>
            Adds an ellipse to this list.
            </summary>
            <param name="ellipse">An ellipse that will be the model of the new internal curve.</param>
            <since>5.0</since>
        </member>
        <member name="M:Rhino.Collections.CurveList.Insert(System.Int32,Rhino.Geometry.Line)">
            <summary>
            Inserts a line at a given index of this list.
            </summary>
            <param name="index">A 0-based position in the list.</param>
            <param name="line">The line value from which to construct the new curve.</param>
            <since>5.0</since>
        </member>
        <member name="M:Rhino.Collections.CurveList.Insert(System.Int32,Rhino.Geometry.Circle)">
            <summary>
            Inserts a line at a given index of this list.
            </summary>
            <param name="index">A 0-based position in the list.</param>
            <param name="circle">The circle value from which to construct the new curve.</param>
            <since>5.0</since>
        </member>
        <member name="M:Rhino.Collections.CurveList.Insert(System.Int32,Rhino.Geometry.Arc)">
            <summary>
            Inserts an arc at a given index of this list.
            </summary>
            <param name="index">A 0-based position in the list.</param>
            <param name="arc">The arc value from which to construct the new curve.</param>
            <since>5.0</since>
        </member>
        <member name="M:Rhino.Collections.CurveList.Insert(System.Int32,System.Collections.Generic.IEnumerable{Rhino.Geometry.Point3d})">
            <summary>
            Inserts a polyline at a given index of this list.
            </summary>
            <param name="index">A 0-based position in the list.</param>
            <param name="polyline">The polyline enumerable from which to construct a copy curve.
            <para>This argument can be null, an array, a list or any enumerable set of
            <see cref="T:Rhino.Geometry.Point3d"/>.</para></param>
            <since>5.0</since>
        </member>
        <member name="M:Rhino.Collections.CurveList.Insert(System.Int32,Rhino.Geometry.Ellipse)">
            <summary>
            Inserts an ellipse at a given index of this list.
            </summary>
            <param name="index">A 0-based position in the list.</param>
            <param name="ellipse">The ellipse value from which to construct the new curve.</param>
            <since>5.0</since>
        </member>
        <member name="M:Rhino.Collections.CurveList.Transform(Rhino.Geometry.Transform)">
            <summary>
            Transform all the curves in this list. If at least a single transform failed 
            this function returns false.
            </summary>
            <param name="xform">Transformation to apply to all curves.</param>
            <since>5.0</since>
        </member>
        <member name="T:Rhino.IndexPair">
            <summary>
            Represents two indices: I and J.
            </summary>
        </member>
        <member name="M:Rhino.IndexPair.#ctor(System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of <see cref="T:Rhino.IndexPair"/> with two indices.
            </summary>
            <param name="i">A first index.</param>
            <param name="j">A second index.</param>
            <since>5.0</since>
        </member>
        <member name="P:Rhino.IndexPair.I">
            <summary>
            Gets or sets the first, I index.
            </summary>
            <since>5.0</since>
        </member>
        <member name="P:Rhino.IndexPair.J">
            <summary>
            Gets or sets the second, J index.
            </summary>
            <since>5.0</since>
        </member>
        <member name="P:Rhino.IndexPair.Item(System.Int32)">
            <summary>
            Gets or sets a particular index of this structure.
            <remarks>Only 0 and 1 are valid indices.</remarks>
            </summary>
            <param name="index">Either 0 for I, or 1 for J.</param>
            <returns>The value at the index.</returns>
        </member>
        <member name="M:Rhino.IndexPair.IndexOf(System.Int32)">
            <summary>
            Determines the index of a specific item in <see cref="T:Rhino.IndexPair"/>.
            </summary>
            
            <returns>
            The index, 0 for I or 1 for J of <paramref name="item"/> if found in the list; otherwise, -1.
            </returns>
            <param name="item">The object to locate in the <see cref="T:System.Collections.Generic.IList`1"/>.</param>
            <since>6.0</since>
        </member>
        <member name="M:Rhino.IndexPair.Contains(System.Int32)">
            <summary>
            Determines whether the <see cref="T:Rhino.IndexPair"/> contains a specific value.
            </summary>
            
            <returns>
            true if <paramref name="item"/> is found in the <see cref="T:Rhino.IndexPair"/>; otherwise, false.
            </returns>
            <param name="item">The number to locate in the <see cref="T:Rhino.IndexPair"/>.</param>
            <since>6.0</since>
        </member>
        <member name="M:Rhino.IndexPair.CopyTo(System.Int32[],System.Int32)">
            <summary>
            Copies the elements of the <see cref="T:Rhino.IndexPair"/> to an <see cref="T:System.Array"/>, starting at a particular <see cref="T:System.Array"/> index.
            </summary>
            <param name="array">The one-dimensional <see cref="T:System.Array"/> that is the destination of the elements copied
            from <see cref="T:Rhino.IndexPair"/>.
            The <see cref="T:System.Array"/> must have zero-based indexing.</param>
            <param name="arrayIndex">The zero-based index in <paramref name="array"/> at which copying begins.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="array"/> is null.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="arrayIndex"/> is less than 0 or <paramref name="arrayIndex"/> is greater than or equals the length of array minus 2.</exception>
            <exception cref="T:System.ArgumentException">The length of the <paramref name="array"/> is less than 2.</exception>
            <since>6.0</since>
        </member>
        <member name="P:Rhino.IndexPair.Count">
            <summary>
            Returns the amount of elements in this pair of indices, which is always 2.
            </summary>
            <since>6.0</since>
        </member>
        <member name="M:Rhino.IndexPair.GetEnumerator">
            <summary>
            Gets an enumerator that goes over <see cref="P:Rhino.IndexPair.I"/> and <see cref="P:Rhino.IndexPair.J"/>, in this order.
            </summary>
            <returns>The needed enumerator.</returns>
            <since>6.0</since>
        </member>
        <member name="M:Rhino.IndexPair.System#Collections#IEnumerable#GetEnumerator">
            <since>6.0</since>
        </member>
        <member name="T:Rhino.RhinoMath">
            <summary>
            Provides constants and static methods that are additional to
            <see cref="T:System.Math"/>.
            </summary>
        </member>
        <member name="F:Rhino.RhinoMath.HalfPI">
            <summary>
            Quarter of a rotation. 90 degrees. 1.57...
            </summary>
        </member>
        <member name="F:Rhino.RhinoMath.QuarterPI">
            <summary>
            One eigth of a rotation. 45 degrees. 0.78...
            </summary>
        </member>
        <member name="F:Rhino.RhinoMath.TwoPI">
            <summary>
            Full rotation. 360 degrees. 6.28...
            </summary>
        </member>
        <member name="F:Rhino.RhinoMath.Tau">
            <summary>
            Ratio of circumference divided by radius. Full rotation. 360 degrees. 6.28...
            </summary>
        </member>
        <member name="F:Rhino.RhinoMath.ZeroTolerance">
            <summary>
            Gets Rhino's Zero Tolerance constant, which is 2^-32. In cases when an
            absolute "zero" tolerance is required to compare model space coordinates, 
            ZeroTolerance is used. The value of ZeroTolerance should be no smaller than 
            <see cref="F:Rhino.RhinoMath.Epsilon"/> and should be several orders of magnitude smaller than <see cref="F:Rhino.RhinoMath.SqrtEpsilon"/>.
            </summary>
            <remarks>
            This is equivalent to openNURBS ON_ZERO_TOLERANCE.
            </remarks>
        </member>
        <member name="F:Rhino.RhinoMath.UnsetValue">
            <summary>
            Gets the Rhino standard Unset value. Use this value rather than Double.NaN when 
            a bogus floating point value is required.
            </summary>
            <remarks>
            This is equivalent to openNURBS ON_UNSET_VALUE.
            </remarks>
        </member>
        <member name="F:Rhino.RhinoMath.Epsilon">
            <summary>
            Gets the value of DBL_EPSILON, which is the smallest positive floating point number x such that 1 + x != 1.
            This is different than Double.Epsilon which is the smallest positive Double value that is greater than zero.
            </summary>
            <remarks>
            This is equivalent to openNURBS ON_EPSILON.
            </remarks>
        </member>
        <member name="F:Rhino.RhinoMath.SqrtEpsilon">
            <summary>
            Represents a default value that is used when comparing square roots.
            <para>This value is several orders of magnitude larger than <see cref="F:Rhino.RhinoMath.ZeroTolerance"/>.</para>
            </summary>
            <remarks>
            This is equivalent to openNURBS ON_SQRT_EPSILON.
            </remarks>
        </member>
        <member name="F:Rhino.RhinoMath.DefaultAngleTolerance">
            <summary>
            Represents the default angle tolerance, used when no other values are provided.
            <para>This is one degree, expressed in radians.</para>
            </summary>
            <remarks>
            This is equivalent to openNURBS ON_DEFAULT_ANGLE_TOLERANCE.
            </remarks>
        </member>
        <member name="F:Rhino.RhinoMath.DefaultDistanceToleranceMillimeters">
            <summary>
            Get Rhino's default distance tolerance in millimeters.
            </summary>
            <remarks>
            This is equivalent to openNURBS ON_DEFAULT_DISTANCE_TOLERANCE_MM.
            </remarks>
        </member>
        <member name="F:Rhino.RhinoMath.UnsetSingle">
            <summary>
            Gets the single precision floating point number that is considered 'unset' in Rhino.
            </summary>
            <remarks>
            This is equivalent to openNURBS ON_UNSET_FLOAT.
            </remarks>
        </member>
        <member name="F:Rhino.RhinoMath.UnsetIntIndex">
            <summary>
            When signed int values are used in a context where 
            0 and small negative values are valid indices and there needs
            to be a value that indicates the index is not set.
            </summary>
            <remarks>
            This is equivalent to openNURBS ON_UNSET_INT_INDEX.
            </remarks>
        </member>
        <member name="M:Rhino.RhinoMath.ToRadians(System.Double)">
            <summary>
            Convert an angle from degrees to radians.
            </summary>
            <param name="degrees">Degrees to convert (180 degrees equals pi radians).</param>
            <since>5.0</since>
        </member>
        <member name="M:Rhino.RhinoMath.ToDegrees(System.Double)">
            <summary>
            Convert an angle from radians to degrees.
            </summary>
            <param name="radians">Radians to convert (180 degrees equals pi radians).</param>
            <since>5.0</since>
        </member>
        <member name="M:Rhino.RhinoMath.IsValidDouble(System.Double)">
            <summary>
            Determines whether a <see cref="T:System.Double"/> value is valid within the RhinoCommon context.
            <para>Rhino does not use Double.NaN by convention, so this test evaluates to true if:</para>
            <para>x is not equal to RhinoMath.UnsetValue</para>
            <para>System.Double.IsNaN(x) evaluates to false</para>
            <para>System.Double.IsInfinity(x) evaluates to false</para>
            </summary>
            <param name="x"><see cref="T:System.Double"/> number to test for validity.</param>
            <returns>true if the number if valid, false if the number is NaN, Infinity or Unset.</returns>
            <since>5.0</since>
        </member>
        <member name="M:Rhino.RhinoMath.IsValidSingle(System.Single)">
            <summary>
            Determines whether a <see cref="T:System.Single"/> value is valid within the RhinoCommon context.
            <para>Rhino does not use Single.NaN by convention, so this test evaluates to true if:</para>
            <para>x is not equal to RhinoMath.UnsetValue,</para>
            <para>System.Single.IsNaN(x) evaluates to false</para>
            <para>System.Single.IsInfinity(x) evaluates to false</para>
            </summary>
            <param name="x"><see cref="T:System.Single"/> number to test for validity.</param>
            <returns>true if the number if valid, false if the number is NaN, Infinity or Unset.</returns>
            <since>5.0</since>
        </member>
        <member name="M:Rhino.RhinoMath.IntIndexToString(System.Int32)">
            <summary>
            Portrays an <see cref="T:System.Int32"/> index in text.
            </summary>
            <param name="index"><see cref="T:System.Int32"/> number express as string.</param>
            <returns>The text representation of the int index.</returns>
            <since>6.0</since>
        </member>
        <member name="M:Rhino.RhinoMath.UnitScale(Rhino.UnitSystem,Rhino.UnitSystem)">
            <summary> 
            Computes the scale factor for changing the measurements unit systems.
            </summary>
            <param name="from">The system to convert from.</param>
            <param name="to">The system to convert measurements into.</param>
            <returns>A scale multiplier.</returns>
            <since>5.0</since>
        </member>
        <member name="M:Rhino.RhinoMath.UnitScale(Rhino.UnitSystem,System.Double,Rhino.UnitSystem,System.Double)">
            <summary>
            Computes the scale factor for changing the measurements unit systems.
            </summary>
            <param name="from">The system to convert from.</param>
            <param name="fromMetersPerUnit">For custom units, specify the meters per unit.</param>
            <param name="to">The system to convert measurements into.</param>
            <param name="toMetersPerUnit">For custom units, specify the meters per unit.</param>
            <returns>A scale multiplier.</returns>
            <since>8.0</since>
        </member>
        <member name="M:Rhino.RhinoMath.MetersPerUnit(Rhino.UnitSystem)">
            <summary>
            Return number of meters per one unit of a given unit system
            </summary>
            <param name="units"></param>
            <returns></returns>
            <since>7.1</since>
        </member>
        <member name="M:Rhino.RhinoMath.Clamp(System.Int32,System.Int32,System.Int32)">
            <summary>
            Restricts a <see cref="T:System.Int32"/> to be specified within an interval of two integers.
            </summary>
            <param name="value">An integer.</param>
            <param name="bound1">A first bound.</param>
            <param name="bound2">A second bound. This does not necessarily need to be larger or smaller than bound1.</param>
            <returns>The clamped value.</returns>
            <since>5.0</since>
        </member>
        <member name="M:Rhino.RhinoMath.Clamp(System.Double,System.Double,System.Double)">
            <summary>
            Limits a <see cref="T:System.Double"/> to be specified within an interval of two numbers, by specifying a fixed minimum and maximum.
            </summary>
            <param name="value">A number.</param>
            <param name="bound1">A first bound.</param>
            <param name="bound2">A second bound. This does not necessarily need to be larger or smaller than bound1.</param>
            <returns>The clamped value.</returns>
            <since>5.0</since>
        </member>
        <member name="M:Rhino.RhinoMath.Wrap(System.Double,System.Double,System.Double)">
            <summary>
            Limits a <see cref="T:System.Double"/> to be specified within an interval of two numbers by repeating the available interval cyclically.
            </summary>
            <param name="value">A number.</param>
            <param name="bound1">A first bound.</param>
            <param name="bound2">A second bound. This does not necessarily need to be larger or smaller than bound1.</param>
            <returns></returns>
            <since>7.1</since>
        </member>
        <member name="M:Rhino.RhinoMath.CRC32(System.UInt32,System.Byte[])">
            <summary>
            Advances the cyclic redundancy check value remainder given a byte array.
            http://en.wikipedia.org/wiki/Cyclic_redundancy_check.
            </summary>
            <param name="currentRemainder">The remainder from which to start.</param>
            <param name="buffer">The value to add to the current remainder.</param>
            <returns>The new current remainder.</returns>
            <since>5.0</since>
        </member>
        <member name="M:Rhino.RhinoMath.CRC32(System.UInt32,System.Double)">
            <summary>
            Advances the cyclic redundancy check value remainder given a <see cref="T:System.Double"/>.
            http://en.wikipedia.org/wiki/Cyclic_redundancy_check.
            </summary>
            <param name="currentRemainder">The remainder from which to start.</param>
            <param name="value">The value to add to the current remainder.</param>
            <returns>The new current remainder.</returns>
            <example>
            <code source='examples\vbnet\ex_analysismode.vb' lang='vbnet'/>
            <code source='examples\cs\ex_analysismode.cs' lang='cs'/>
            </example>
            <since>5.0</since>
        </member>
        <member name="M:Rhino.RhinoMath.CRC32(System.UInt32,System.Int32)">
            <summary>
            Advances the cyclic redundancy check value remainder given a <see cref="T:System.Int32"/>.
            http://en.wikipedia.org/wiki/Cyclic_redundancy_check.
            </summary>
            <param name="currentRemainder">The remainder from which to start.</param>
            <param name="value">The value to add to the current remainder.</param>
            <returns>The new current remainder.</returns>
            <since>5.0</since>
        </member>
        <member name="M:Rhino.RhinoMath.EpsilonEquals(System.Double,System.Double,System.Double)">
            <summary>
            Compare two doubles for equality within some "epsilon" range
            </summary>
            <param name="x"></param>
            <param name="y"></param>
            <param name="epsilon"></param>
            <returns></returns>
            <since>5.4</since>
        </member>
        <member name="M:Rhino.RhinoMath.EpsilonEquals(System.Single,System.Single,System.Single)">
            <summary>
            Compare to floats for equality within some "epsilon" range
            </summary>
            <param name="x"></param>
            <param name="y"></param>
            <param name="epsilon"></param>
            <returns></returns>
            <since>5.4</since>
        </member>
        <member name="M:Rhino.RhinoMath.EvaluateNormal(System.Int32,Rhino.Geometry.Vector3d,Rhino.Geometry.Vector3d,Rhino.Geometry.Vector3d,Rhino.Geometry.Vector3d,Rhino.Geometry.Vector3d,Rhino.Geometry.Vector3d@)">
            <summary>
            Expert tool to evaluate surface unit normal.
            </summary>
            <param name="limitDirection">Determines which direction is used to compute the limit, where:
            0 = default, 1 = from quadrant I, 2 = from quadrant II, etc.</param>
            <param name="ds">First partial derivative.</param>
            <param name="dt">First partial derivative.</param>
            <param name="dss">Second partial derivative.</param>
            <param name="dst">Second partial derivative.</param>
            <param name="dtt">Second partial derivative.</param>
            <param name="n">Unit normal.</param>
            <returns>True if successful, false otherwise.</returns>
            <since>7.0</since>
        </member>
        <member name="M:Rhino.RhinoMath.EvaluateNormalPartials(Rhino.Geometry.Vector3d,Rhino.Geometry.Vector3d,Rhino.Geometry.Vector3d,Rhino.Geometry.Vector3d,Rhino.Geometry.Vector3d,Rhino.Geometry.Vector3d@,Rhino.Geometry.Vector3d@)">
            <summary>
            Expert tool to evaluate partial derivatives of surface unit normal.
            </summary>
            <param name="ds">First partial derivative.</param>
            <param name="dt">First partial derivative.</param>
            <param name="dss">Second partial derivative.</param>
            <param name="dst">Second partial derivative.</param>
            <param name="dtt">Second partial derivative.</param>
            <param name="ns">First partial derivative of unit normal. If the Jacobian is degenerate, ns is set to zero.</param>
            <param name="nt">First partial derivative of unit normal. If the Jacobian is degenerate, nt is set to zero.</param>
            <returns>true if Jacobian is non-degenerate, false if Jacobian is degenerate.</returns>
            <since>7.0</since>
        </member>
        <member name="T:Rhino.AntialiasLevel">
            <summary>
            Provides the anti-alias levels used for render quality
            </summary>
            <since>6.0</since>
        </member>
        <member name="F:Rhino.AntialiasLevel.None">
            <summary>
            Low quality
            </summary>
        </member>
        <member name="F:Rhino.AntialiasLevel.Draft">
            <summary>
            Draft quality
            </summary>
        </member>
        <member name="F:Rhino.AntialiasLevel.Good">
            <summary>
            Good quality
            </summary>
        </member>
        <member name="F:Rhino.AntialiasLevel.High">
            <summary>
            High quality
            </summary>
        </member>
        <member name="T:Rhino.Symbols">
            <summary>
            Characters used for different 'drafting style' symbols
            </summary>
        </member>
        <member name="P:Rhino.Symbols.DegreeSymbol">
            <summary> Degree symbol used for angles </summary>
            <since>6.0</since>
        </member>
        <member name="P:Rhino.Symbols.RadiusSymbol">
            <summary> Radius symbol </summary>
            <since>6.0</since>
        </member>
        <member name="P:Rhino.Symbols.DiameterSymbol">
            <summary> Diameter symbol </summary>
            <since>6.0</since>
        </member>
        <member name="P:Rhino.Symbols.PlusMinusSymbol">
            <summary> Plus-Minus tolerance symbol </summary>
            <since>6.0</since>
        </member>
        <member name="T:Rhino.ProgressReporter">
            <summary>
            This class probably does not have to be publicly exposed
            </summary>
        </member>
        <member name="T:Rhino.ThreadTerminator">
            <summary>
            This class probably does not have to be publicly exposed
            </summary>
        </member>
        <member name="T:Rhino.UI.LOC">
            <summary>
            Used a placeholder which is used by LocalizationProcessor application to create contextId
            mapped localized strings.
            </summary>
        </member>
        <member name="M:Rhino.UI.LOC.STR(System.String)">
            <summary>
             Strings that need to be localized should call this function. The STR function doesn't actually
             do anything but return the original string. The LocalizationProcessor application walks
             through the source code of a project and looks for LOC.STR. The function is then replaced with a
             call to Localization.LocalizeString using a unique context ID.
            </summary>
            <param name='english'>[in] The English string to localize.</param>
             <since>5.0</since>
        </member>
        <member name="M:Rhino.UI.LOC.STR(System.String,System.Object)">
            <summary>
            Similar to <see cref="M:System.String.Format(System.String,System.Object)"/> function.
            </summary>
            <param name="english">The English name.</param>
            <param name="assemblyOrObject">Unused.</param>
            <returns>English name.</returns>
            <since>5.0</since>
        </member>
        <member name="M:Rhino.UI.LOC.STR(System.String,System.Int32)">
            <summary>DO NOT use this function, it is a trap to determine
            where context IDs have been copied from other, already extracted,
            strings.
            </summary>
            <param name="english">The English name.</param>
            <param name="contextid">Copied context id.</param>
            <returns>English name.</returns>
            <since>7.0</since>
            <deprecated>7.1</deprecated>
        </member>
        <member name="M:Rhino.UI.LOC.COMMANDNAME(System.String)">
            <summary>
             Command names that need to be localized should call this function. The COMMANDNAME function doesn't actually
             do anything but return the original string. The LocalizationProcessor application walks
             through the source code of a project and looks for LOC.COMMANDNAME and builds a record for each command
             name for the translators that can be used by developers in a commands overridden Rhino.Commands.Command.LocalName
             which should call Rhino.UI.Localization.LocalizeCommandName(EnglishName)
            </summary>
            <param name='english'>[in] The English string to localize.</param>
             <since>5.0</since>
        </member>
        <member name="M:Rhino.UI.LOC.CON(System.String)">
             <summary>
             Command option name strings that need to be localized should call this function. The CON function
             doesn't actually do anything but return the original string. The LocalizationProcessor application walks
             through the source code of a project and looks for LOC.CON. The function is then replaced with a
             call to Localization.LocalizeCommandOptionName using a unique context ID.
            </summary>
            <param name='english'>[in] The English string to localize.</param>
             <returns>Returns localized string pair with both the English and local names set to the English value.</returns>
             <since>5.0</since>
        </member>
        <member name="M:Rhino.UI.LOC.CON(System.String,System.Object)">
             <summary>
             Command option name strings that need to be localized should call this function. The CON function
             doesn't actually do anything but return the original string. The LocalizationProcessor application walks
             through the source code of a project and looks for LOC.CON. The function is then replaced with a
             call to Localization.LocalizeCommandOptionName using a unique context ID.
            </summary>
            <param name='english'>[in] The English string to localize.</param>
            <param name='assemblyFromObject'>[in] The object that identifies the assembly that owns the command option name.</param>
             <returns>Returns localized string pair with both the English and local names set to the English value.</returns>
             <since>5.0</since>
        </member>
        <member name="M:Rhino.UI.LOC.CON(System.String,System.Int32)">
            <summary>DO NOT use this function, it is a trap to determine
            where context IDs have been copied from other, already extracted,
            strings.
            </summary>
            <param name="english">The English name.</param>
            <param name="contextid">Copied context id.</param>
            <returns>English name.</returns>
            <since>7.0</since>
            <deprecated>7.1</deprecated>
        </member>
        <member name="M:Rhino.UI.LOC.COV(System.String)">
             <summary>
             Command option name strings that need to be localized should call this function. The COV function
             doesn't actually do anything but return the original string. The LocalizationProcessor application walks
             through the source code of a project and looks for LOC.COV. The function is then replaced with a
             call to Localization.LocalizeCommandOptionValue using a unique context ID.
            </summary>
            <param name='english'>[in] The English string to localize.</param>
             <returns>Returns localized string pair with both the English and local names set to the English value.</returns>
             <since>5.0</since>
        </member>
        <member name="M:Rhino.UI.LOC.COV(System.String,System.Object)">
             <summary>
             Command option name strings that need to be localized should call this function. The COV function
             doesn't actually do anything but return the original string. The LocalizationProcessor application walks
             through the source code of a project and looks for LOC.COV. The function is then replaced with a
             call to Localization.LocalizeCommandOptionValue using a unique context ID.
            </summary>
            <param name='english'>[in] The English string to localize.</param>
            <param name='assemblyFromObject'>[in] The object that identifies the assembly that owns the command option value.</param>
             <returns>Returns localized string pair with both the English and local names set to the English value.</returns>
             <since>5.0</since>
        </member>
        <member name="T:Rhino.UI.DistanceDisplayMode">
            <since>5.0</since>
        </member>
        <member name="M:Rhino.UI.ILocalizationService.LocalizeCommandName(System.Reflection.Assembly,System.Int32,System.String)">
            <since>6.0</since>
        </member>
        <member name="M:Rhino.UI.ILocalizationService.LocalizeDialogItem(System.Reflection.Assembly,System.Int32,System.String,System.String)">
            <since>6.0</since>
        </member>
        <member name="M:Rhino.UI.ILocalizationService.LocalizeForm(System.Reflection.Assembly,System.Int32,System.Object)">
            <since>6.0</since>
        </member>
        <member name="M:Rhino.UI.ILocalizationService.LocalizeString(System.Reflection.Assembly,System.Int32,System.String,System.Int32)">
            <since>6.0</since>
        </member>
        <member name="M:Rhino.UI.Localization.LocalizeString(System.String,System.Int32)">
            <summary>
            Returns localized version of a given English string. This function should be auto-generated by the
            RmaLDotNetLocalizationProcessor application for every function that uses RMASTR.
            </summary>
            <param name="english">The text in English.</param>
            <param name="contextId">The context ID.</param>
            <returns>The localized string.</returns>
            <since>5.0</since>
        </member>
        <member name="M:Rhino.UI.Localization.LocalizeString(System.String,System.Int32,System.Int32)">
            <summary>
            DO NOT use this function, it is a trap to determine
            where context IDs have been copied from other, already extracted,
            strings.
            </summary>
            <param name="english">The text in English.</param>
            <param name="wrongcontextId">The copied ID.</param>
            <param name="contextId">The context ID.</param>
            <returns>The english string.</returns>
            <since>7.0</since>
            <deprecated>7.1</deprecated>
        </member>
        <member name="M:Rhino.UI.Localization.LocalizeString(System.String,System.Object,System.Int32)">
            <summary>
            Returns localized version of a given English string. This function should be auto-generated by the
            RmaLDotNetLocalizationProcessor application for every function that uses RMASTR.
            </summary>
            <param name="english">The text in English.</param>
            <param name="assemblyOrObject">An assembly or an object from an assembly.</param>
            <param name="contextId">The context ID.</param>
            <returns>The localized string.</returns>
            <since>5.0</since>
        </member>
        <member name="M:Rhino.UI.Localization.LocalizeDialogItem(System.Object,System.String,System.String)">
            <summary>
            Look in the dialog item list for the specified key and return the translated
            localized string if the key is found otherwise return the English string.
            </summary>
            <param name="assemblyOrObject">An assembly or an object from an assembly.</param>
            <param name="key"></param>
            <param name="english">The text in English.</param>
            <returns>
            Look in the dialog item list for the specified key and return the translated
            localized string if the key is found otherwise return the English string.
            </returns>
            <since>5.5</since>
        </member>
        <member name="M:Rhino.UI.Localization.GetAssemblyFromObject(System.Object)">
            <summary>
            Check to see if the passed object is an assembly, if not then get the assembly that owns the object type.
            </summary>
            <param name="assemblyOrObject">An assembly or an object from an assembly.</param>
            <returns>The localized string.</returns>
            <since>5.0</since>
        </member>
        <member name="M:Rhino.UI.Localization.LocalizeForm(System.Object)">
            <summary>
            Look in the dialog item list for the specified key and return the translated
            localized string if the key is found otherwise return the English string.
            </summary>
            <param name="formOrUserControl"></param>
            <since>6.0</since>
        </member>
        <member name="M:Rhino.UI.Localization.LocalizeCommandName(System.String)">
            <summary>
             Commands that need to be localized should call this function.
            </summary>
            <param name='english'>The localized command name.</param>
             <since>5.0</since>
        </member>
        <member name="M:Rhino.UI.Localization.LocalizeCommandName(System.String,System.Object)">
            <since>5.0</since>
        </member>
        <member name="M:Rhino.UI.Localization.LocalizeCommandOptionName(System.String,System.Int32)">
            <since>5.0</since>
        </member>
        <member name="M:Rhino.UI.Localization.LocalizeCommandOptionName(System.String,System.Object,System.Int32)">
            <since>5.0</since>
        </member>
        <member name="M:Rhino.UI.Localization.LocalizeCommandOptionName(System.String,System.Int32,System.Int32)">
            <summary>
            DO NOT use this function, it is a trap to determine
            where context IDs have been copied from other, already extracted,
            strings.
            </summary>
            <param name="english">The text in English.</param>
            <param name="wrongcontextId">The copied ID.</param>
            <param name="contextId">The context ID.</param>
            <returns>The english string.</returns>
            <since>7.0</since>
            <deprecated>7.1</deprecated>
        </member>
        <member name="M:Rhino.UI.Localization.LocalizeCommandOptionValue(System.String,System.Int32)">
            <since>5.0</since>
        </member>
        <member name="M:Rhino.UI.Localization.LocalizeCommandOptionValue(System.String,System.Object,System.Int32)">
            <since>5.0</since>
        </member>
        <member name="P:Rhino.UI.Localization.CurrentLanguageId">
            <since>6.0</since>
        </member>
        <member name="P:Rhino.UI.Localization.RunningAsEnglish">
            <since>6.0</since>
        </member>
        <member name="M:Rhino.UI.Localization.SetLanguageId(System.Int32)">
            <summary>
            Sets the Id used for Localization in RhinoCommon.  Only useful for when
            using RhinoCommon outside of the Rhino process
            </summary>
            <param name="id"></param>
            <returns>true if the language id could be set</returns>
            <since>5.0</since>
        </member>
        <member name="T:Rhino.UI.LocalizeStringPair">
            <summary>Pair of strings used for localization.</summary>
        </member>
        <member name="M:Rhino.UI.LocalizeStringPair.#ctor(System.String,System.String)">
            <since>5.0</since>
        </member>
        <member name="P:Rhino.UI.LocalizeStringPair.English">
            <since>5.0</since>
        </member>
        <member name="P:Rhino.UI.LocalizeStringPair.Local">
            <since>5.0</since>
        </member>
    </members>
</doc>
